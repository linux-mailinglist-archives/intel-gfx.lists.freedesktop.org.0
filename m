Return-Path: <intel-gfx-bounces@lists.freedesktop.org>
X-Original-To: lists+intel-gfx@lfdr.de
Delivered-To: lists+intel-gfx@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [IPv6:2610:10:20:722:a800:ff:fe36:1795])
	by mail.lfdr.de (Postfix) with ESMTPS id 0E61CDAE1D
	for <lists+intel-gfx@lfdr.de>; Thu, 17 Oct 2019 15:21:14 +0200 (CEST)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id E40026EA84;
	Thu, 17 Oct 2019 13:21:09 +0000 (UTC)
X-Original-To: intel-gfx@lists.freedesktop.org
Delivered-To: intel-gfx@lists.freedesktop.org
Received: from mblankhorst.nl (mblankhorst.nl
 [IPv6:2a02:2308::216:3eff:fe92:dfa3])
 by gabe.freedesktop.org (Postfix) with ESMTPS id ACB666E48B
 for <intel-gfx@lists.freedesktop.org>; Thu, 17 Oct 2019 13:21:08 +0000 (UTC)
From: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
To: intel-gfx@lists.freedesktop.org
Date: Thu, 17 Oct 2019 15:20:52 +0200
Message-Id: <20191017132105.15528-1-maarten.lankhorst@linux.intel.com>
X-Mailer: git-send-email 2.23.0
MIME-Version: 1.0
Subject: [Intel-gfx] [PATCH 01/14] drm/i915: Rework watermark readout to use
 plane api
X-BeenThere: intel-gfx@lists.freedesktop.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: Intel graphics driver community testing & development
 <intel-gfx.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/intel-gfx>
List-Post: <mailto:intel-gfx@lists.freedesktop.org>
List-Help: <mailto:intel-gfx-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: intel-gfx-bounces@lists.freedesktop.org
Sender: "Intel-gfx" <intel-gfx-bounces@lists.freedesktop.org>

SW5zdGVhZCBvZiB1bmNvbmRpdGlvbmFsbHkgdmVyaWZ5aW5nIHRoZSBjdXJzb3IgcGxhbmUsIGhh
bmRsZSBpdCBpbiB0aGUKc2FtZSB3YXkgYXMgYW55IG90aGVyIHBsYW5lLCBhbmQgdXNlIG91ciBl
eGlzdGluZyBhcGkgdG8gdmVyaWZ5LgoKV2hpbGUgYXQgaXQsIGVuc3VyZSB0aGF0IG9uIGdlbjkr
IHdlIHZlcmlmeSBhY3RpdmVfcGxhbmVzIG1hc2sgYXMgd2VsbC4KVGhpcyBzaG91bGQgZ2l2ZSB0
aGUgY29ycmVjdCByZXN1bHRzIGZvciBwbGFuYXIgWVVWIHBsYW5lcyB0b28sIGFzIHdlCnVwZGF0
ZSBhY3RpdmVfcGxhbmVzIGZvciB0aGVtLgoKU2lnbmVkLW9mZi1ieTogTWFhcnRlbiBMYW5raG9y
c3QgPG1hYXJ0ZW4ubGFua2hvcnN0QGxpbnV4LmludGVsLmNvbT4KLS0tCiBkcml2ZXJzL2dwdS9k
cm0vaTkxNS9kaXNwbGF5L2ludGVsX2Rpc3BsYXkuYyB8IDgzICsrKysrKy0tLS0tLS0tLS0tLS0t
CiAxIGZpbGUgY2hhbmdlZCwgMjMgaW5zZXJ0aW9ucygrKSwgNjAgZGVsZXRpb25zKC0pCgpkaWZm
IC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvZGlzcGxheS9pbnRlbF9kaXNwbGF5LmMgYi9k
cml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5L2ludGVsX2Rpc3BsYXkuYwppbmRleCAxNjRkZWQ4
NjIxNDguLjk0NWFiMjE4MDYxNCAxMDA2NDQKLS0tIGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvZGlz
cGxheS9pbnRlbF9kaXNwbGF5LmMKKysrIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvZGlzcGxheS9p
bnRlbF9kaXNwbGF5LmMKQEAgLTEyOTMyLDcgKzEyOTMyLDggQEAgc3RhdGljIHZvaWQgdmVyaWZ5
X3dtX3N0YXRlKHN0cnVjdCBpbnRlbF9jcnRjICpjcnRjLAogCXN0cnVjdCBza2xfcGlwZV93bSAq
c3dfd207CiAJc3RydWN0IHNrbF9kZGJfZW50cnkgKmh3X2RkYl9lbnRyeSwgKnN3X2RkYl9lbnRy
eTsKIAljb25zdCBlbnVtIHBpcGUgcGlwZSA9IGNydGMtPnBpcGU7Ci0JaW50IHBsYW5lLCBsZXZl
bCwgbWF4X2xldmVsID0gaWxrX3dtX21heF9sZXZlbChkZXZfcHJpdik7CisJaW50IGxldmVsLCBt
YXhfbGV2ZWwgPSBpbGtfd21fbWF4X2xldmVsKGRldl9wcml2KTsKKwlzdHJ1Y3QgaW50ZWxfcGxh
bmUgKnBsYW5lOwogCiAJaWYgKElOVEVMX0dFTihkZXZfcHJpdikgPCA5IHx8ICFuZXdfY3J0Y19z
dGF0ZS0+YmFzZS5hY3RpdmUpCiAJCXJldHVybjsKQEAgLTEyOTU2LDYzICsxMjk1NywyNSBAQCBz
dGF0aWMgdm9pZCB2ZXJpZnlfd21fc3RhdGUoc3RydWN0IGludGVsX2NydGMgKmNydGMsCiAJCQkg
IGh3LT5kZGIuZW5hYmxlZF9zbGljZXMpOwogCiAJLyogcGxhbmVzICovCi0JZm9yX2VhY2hfdW5p
dmVyc2FsX3BsYW5lKGRldl9wcml2LCBwaXBlLCBwbGFuZSkgeworCWZvcl9lYWNoX2ludGVsX3Bs
YW5lX29uX2NydGMoJmRldl9wcml2LT5kcm0sIGNydGMsIHBsYW5lKSB7CiAJCXN0cnVjdCBza2xf
cGxhbmVfd20gKmh3X3BsYW5lX3dtLCAqc3dfcGxhbmVfd207CisJCWVudW0gcGlwZSBwbGFuZV9w
aXBlID0gcGlwZTsKIAotCQlod19wbGFuZV93bSA9ICZody0+d20ucGxhbmVzW3BsYW5lXTsKLQkJ
c3dfcGxhbmVfd20gPSAmc3dfd20tPnBsYW5lc1twbGFuZV07Ci0KLQkJLyogV2F0ZXJtYXJrcyAq
LwotCQlmb3IgKGxldmVsID0gMDsgbGV2ZWwgPD0gbWF4X2xldmVsOyBsZXZlbCsrKSB7Ci0JCQlp
ZiAoc2tsX3dtX2xldmVsX2VxdWFscygmaHdfcGxhbmVfd20tPndtW2xldmVsXSwKLQkJCQkJCSZz
d19wbGFuZV93bS0+d21bbGV2ZWxdKSkKLQkJCQljb250aW51ZTsKLQotCQkJRFJNX0VSUk9SKCJt
aXNtYXRjaCBpbiBXTSBwaXBlICVjIHBsYW5lICVkIGxldmVsICVkIChleHBlY3RlZCBlPSVkIGI9
JXUgbD0ldSwgZ290IGU9JWQgYj0ldSBsPSV1KVxuIiwKLQkJCQkgIHBpcGVfbmFtZShwaXBlKSwg
cGxhbmUgKyAxLCBsZXZlbCwKLQkJCQkgIHN3X3BsYW5lX3dtLT53bVtsZXZlbF0ucGxhbmVfZW4s
Ci0JCQkJICBzd19wbGFuZV93bS0+d21bbGV2ZWxdLnBsYW5lX3Jlc19iLAotCQkJCSAgc3dfcGxh
bmVfd20tPndtW2xldmVsXS5wbGFuZV9yZXNfbCwKLQkJCQkgIGh3X3BsYW5lX3dtLT53bVtsZXZl
bF0ucGxhbmVfZW4sCi0JCQkJICBod19wbGFuZV93bS0+d21bbGV2ZWxdLnBsYW5lX3Jlc19iLAot
CQkJCSAgaHdfcGxhbmVfd20tPndtW2xldmVsXS5wbGFuZV9yZXNfbCk7Ci0JCX0KKwkJaHdfcGxh
bmVfd20gPSAmaHctPndtLnBsYW5lc1twbGFuZS0+aWRdOworCQlzd19wbGFuZV93bSA9ICZzd193
bS0+cGxhbmVzW3BsYW5lLT5pZF07CiAKLQkJaWYgKCFza2xfd21fbGV2ZWxfZXF1YWxzKCZod19w
bGFuZV93bS0+dHJhbnNfd20sCi0JCQkJCSAmc3dfcGxhbmVfd20tPnRyYW5zX3dtKSkgewotCQkJ
RFJNX0VSUk9SKCJtaXNtYXRjaCBpbiB0cmFucyBXTSBwaXBlICVjIHBsYW5lICVkIChleHBlY3Rl
ZCBlPSVkIGI9JXUgbD0ldSwgZ290IGU9JWQgYj0ldSBsPSV1KVxuIiwKLQkJCQkgIHBpcGVfbmFt
ZShwaXBlKSwgcGxhbmUgKyAxLAotCQkJCSAgc3dfcGxhbmVfd20tPnRyYW5zX3dtLnBsYW5lX2Vu
LAotCQkJCSAgc3dfcGxhbmVfd20tPnRyYW5zX3dtLnBsYW5lX3Jlc19iLAotCQkJCSAgc3dfcGxh
bmVfd20tPnRyYW5zX3dtLnBsYW5lX3Jlc19sLAotCQkJCSAgaHdfcGxhbmVfd20tPnRyYW5zX3dt
LnBsYW5lX2VuLAotCQkJCSAgaHdfcGxhbmVfd20tPnRyYW5zX3dtLnBsYW5lX3Jlc19iLAotCQkJ
CSAgaHdfcGxhbmVfd20tPnRyYW5zX3dtLnBsYW5lX3Jlc19sKTsKLQkJfQotCi0JCS8qIEREQiAq
LwotCQlod19kZGJfZW50cnkgPSAmaHctPmRkYl95W3BsYW5lXTsKLQkJc3dfZGRiX2VudHJ5ID0g
Jm5ld19jcnRjX3N0YXRlLT53bS5za2wucGxhbmVfZGRiX3lbcGxhbmVdOwotCi0JCWlmICghc2ts
X2RkYl9lbnRyeV9lcXVhbChod19kZGJfZW50cnksIHN3X2RkYl9lbnRyeSkpIHsKLQkJCURSTV9F
UlJPUigibWlzbWF0Y2ggaW4gRERCIHN0YXRlIHBpcGUgJWMgcGxhbmUgJWQgKGV4cGVjdGVkICgl
dSwldSksIGZvdW5kICgldSwldSkpXG4iLAotCQkJCSAgcGlwZV9uYW1lKHBpcGUpLCBwbGFuZSAr
IDEsCi0JCQkJICBzd19kZGJfZW50cnktPnN0YXJ0LCBzd19kZGJfZW50cnktPmVuZCwKLQkJCQkg
IGh3X2RkYl9lbnRyeS0+c3RhcnQsIGh3X2RkYl9lbnRyeS0+ZW5kKTsKKwkJaWYgKCFwbGFuZS0+
Z2V0X2h3X3N0YXRlKHBsYW5lLCAmcGxhbmVfcGlwZSkpIHsKKwkJCVdBUk4obmV3X2NydGNfc3Rh
dGUtPmFjdGl2ZV9wbGFuZXMgJiBCSVQocGxhbmUtPmlkKSwKKwkJCSAgICAgInBpcGUgJWMgJXMg
c2hvdWxkIGJlIHZpc2libGUsIGJ1dCBpc24ndFxuIiwKKwkJCSAgICAgcGlwZV9uYW1lKHBpcGUp
LCBwbGFuZS0+YmFzZS5uYW1lKTsKKwkJCWNvbnRpbnVlOwogCQl9Ci0JfQogCi0JLyoKLQkgKiBj
dXJzb3IKLQkgKiBJZiB0aGUgY3Vyc29yIHBsYW5lIGlzbid0IGFjdGl2ZSwgd2UgbWF5IG5vdCBo
YXZlIHVwZGF0ZWQgaXQncyBkZGIKLQkgKiBhbGxvY2F0aW9uLiBJbiB0aGF0IGNhc2Ugc2luY2Ug
dGhlIGRkYiBhbGxvY2F0aW9uIHdpbGwgYmUgdXBkYXRlZAotCSAqIG9uY2UgdGhlIHBsYW5lIGJl
Y29tZXMgdmlzaWJsZSwgd2UgY2FuIHNraXAgdGhpcyBjaGVjawotCSAqLwotCWlmICgxKSB7Ci0J
CXN0cnVjdCBza2xfcGxhbmVfd20gKmh3X3BsYW5lX3dtLCAqc3dfcGxhbmVfd207CisJCVdBUk5f
T04ocGxhbmVfcGlwZSAhPSBwaXBlKTsKIAotCQlod19wbGFuZV93bSA9ICZody0+d20ucGxhbmVz
W1BMQU5FX0NVUlNPUl07Ci0JCXN3X3BsYW5lX3dtID0gJnN3X3dtLT5wbGFuZXNbUExBTkVfQ1VS
U09SXTsKKwkJV0FSTighKG5ld19jcnRjX3N0YXRlLT5hY3RpdmVfcGxhbmVzICYgQklUKHBsYW5l
LT5pZCkpLAorCQkgICAgICJwaXBlICVjICVzIHNob3VsZCBiZSBpbnZpc2libGUsIGJ1dCB2aXNp
YmxlLlxuIiwKKwkJICAgICBwaXBlX25hbWUocGlwZSksIHBsYW5lLT5iYXNlLm5hbWUpOwogCiAJ
CS8qIFdhdGVybWFya3MgKi8KIAkJZm9yIChsZXZlbCA9IDA7IGxldmVsIDw9IG1heF9sZXZlbDsg
bGV2ZWwrKykgewpAQCAtMTMwMjAsOCArMTI5ODMsOCBAQCBzdGF0aWMgdm9pZCB2ZXJpZnlfd21f
c3RhdGUoc3RydWN0IGludGVsX2NydGMgKmNydGMsCiAJCQkJCQkmc3dfcGxhbmVfd20tPndtW2xl
dmVsXSkpCiAJCQkJY29udGludWU7CiAKLQkJCURSTV9FUlJPUigibWlzbWF0Y2ggaW4gV00gcGlw
ZSAlYyBjdXJzb3IgbGV2ZWwgJWQgKGV4cGVjdGVkIGU9JWQgYj0ldSBsPSV1LCBnb3QgZT0lZCBi
PSV1IGw9JXUpXG4iLAotCQkJCSAgcGlwZV9uYW1lKHBpcGUpLCBsZXZlbCwKKwkJCURSTV9FUlJP
UigibWlzbWF0Y2ggaW4gV00gcGlwZSAlYyAlcyBsZXZlbCAlZCAoZXhwZWN0ZWQgZT0lZCBiPSV1
IGw9JXUsIGdvdCBlPSVkIGI9JXUgbD0ldSlcbiIsCisJCQkJICBwaXBlX25hbWUocGlwZSksIHBs
YW5lLT5iYXNlLm5hbWUsIGxldmVsLAogCQkJCSAgc3dfcGxhbmVfd20tPndtW2xldmVsXS5wbGFu
ZV9lbiwKIAkJCQkgIHN3X3BsYW5lX3dtLT53bVtsZXZlbF0ucGxhbmVfcmVzX2IsCiAJCQkJICBz
d19wbGFuZV93bS0+d21bbGV2ZWxdLnBsYW5lX3Jlc19sLApAQCAtMTMwMzIsOCArMTI5OTUsOCBA
QCBzdGF0aWMgdm9pZCB2ZXJpZnlfd21fc3RhdGUoc3RydWN0IGludGVsX2NydGMgKmNydGMsCiAK
IAkJaWYgKCFza2xfd21fbGV2ZWxfZXF1YWxzKCZod19wbGFuZV93bS0+dHJhbnNfd20sCiAJCQkJ
CSAmc3dfcGxhbmVfd20tPnRyYW5zX3dtKSkgewotCQkJRFJNX0VSUk9SKCJtaXNtYXRjaCBpbiB0
cmFucyBXTSBwaXBlICVjIGN1cnNvciAoZXhwZWN0ZWQgZT0lZCBiPSV1IGw9JXUsIGdvdCBlPSVk
IGI9JXUgbD0ldSlcbiIsCi0JCQkJICBwaXBlX25hbWUocGlwZSksCisJCQlEUk1fRVJST1IoIm1p
c21hdGNoIGluIHRyYW5zIFdNIHBpcGUgJWMgJXMgKGV4cGVjdGVkIGU9JWQgYj0ldSBsPSV1LCBn
b3QgZT0lZCBiPSV1IGw9JXUpXG4iLAorCQkJCSAgcGlwZV9uYW1lKHBpcGUpLCBwbGFuZS0+YmFz
ZS5uYW1lLAogCQkJCSAgc3dfcGxhbmVfd20tPnRyYW5zX3dtLnBsYW5lX2VuLAogCQkJCSAgc3df
cGxhbmVfd20tPnRyYW5zX3dtLnBsYW5lX3Jlc19iLAogCQkJCSAgc3dfcGxhbmVfd20tPnRyYW5z
X3dtLnBsYW5lX3Jlc19sLApAQCAtMTMwNDMsMTIgKzEzMDA2LDEyIEBAIHN0YXRpYyB2b2lkIHZl
cmlmeV93bV9zdGF0ZShzdHJ1Y3QgaW50ZWxfY3J0YyAqY3J0YywKIAkJfQogCiAJCS8qIEREQiAq
LwotCQlod19kZGJfZW50cnkgPSAmaHctPmRkYl95W1BMQU5FX0NVUlNPUl07Ci0JCXN3X2RkYl9l
bnRyeSA9ICZuZXdfY3J0Y19zdGF0ZS0+d20uc2tsLnBsYW5lX2RkYl95W1BMQU5FX0NVUlNPUl07
CisJCWh3X2RkYl9lbnRyeSA9ICZody0+ZGRiX3lbcGxhbmUtPmlkXTsKKwkJc3dfZGRiX2VudHJ5
ID0gJm5ld19jcnRjX3N0YXRlLT53bS5za2wucGxhbmVfZGRiX3lbcGxhbmUtPmlkXTsKIAogCQlp
ZiAoIXNrbF9kZGJfZW50cnlfZXF1YWwoaHdfZGRiX2VudHJ5LCBzd19kZGJfZW50cnkpKSB7Ci0J
CQlEUk1fRVJST1IoIm1pc21hdGNoIGluIEREQiBzdGF0ZSBwaXBlICVjIGN1cnNvciAoZXhwZWN0
ZWQgKCV1LCV1KSwgZm91bmQgKCV1LCV1KSlcbiIsCi0JCQkJICBwaXBlX25hbWUocGlwZSksCisJ
CQlEUk1fRVJST1IoIm1pc21hdGNoIGluIEREQiBzdGF0ZSBwaXBlICVjICVzIChleHBlY3RlZCAo
JXUsJXUpLCBmb3VuZCAoJXUsJXUpKVxuIiwKKwkJCQkgIHBpcGVfbmFtZShwaXBlKSwgcGxhbmUt
PmJhc2UubmFtZSwKIAkJCQkgIHN3X2RkYl9lbnRyeS0+c3RhcnQsIHN3X2RkYl9lbnRyeS0+ZW5k
LAogCQkJCSAgaHdfZGRiX2VudHJ5LT5zdGFydCwgaHdfZGRiX2VudHJ5LT5lbmQpOwogCQl9Ci0t
IAoyLjIzLjAKCl9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19f
CkludGVsLWdmeCBtYWlsaW5nIGxpc3QKSW50ZWwtZ2Z4QGxpc3RzLmZyZWVkZXNrdG9wLm9yZwpo
dHRwczovL2xpc3RzLmZyZWVkZXNrdG9wLm9yZy9tYWlsbWFuL2xpc3RpbmZvL2ludGVsLWdmeA==

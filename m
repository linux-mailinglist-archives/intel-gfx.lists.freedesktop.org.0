Return-Path: <intel-gfx-bounces@lists.freedesktop.org>
X-Original-To: lists+intel-gfx@lfdr.de
Delivered-To: lists+intel-gfx@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [IPv6:2610:10:20:722:a800:ff:fe36:1795])
	by mail.lfdr.de (Postfix) with ESMTPS id 02D0ECC157
	for <lists+intel-gfx@lfdr.de>; Fri,  4 Oct 2019 19:05:29 +0200 (CEST)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 8AE676EBF9;
	Fri,  4 Oct 2019 17:05:26 +0000 (UTC)
X-Original-To: intel-gfx@lists.freedesktop.org
Delivered-To: intel-gfx@lists.freedesktop.org
Received: from mga01.intel.com (mga01.intel.com [192.55.52.88])
 by gabe.freedesktop.org (Postfix) with ESMTPS id BE4256EBF8
 for <intel-gfx@lists.freedesktop.org>; Fri,  4 Oct 2019 17:05:24 +0000 (UTC)
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from fmsmga002.fm.intel.com ([10.253.24.26])
 by fmsmga101.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384;
 04 Oct 2019 10:05:24 -0700
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.67,256,1566889200"; d="scan'208";a="222216177"
Received: from bkokkula-mobl1.ger.corp.intel.com (HELO
 mwahaha-bdw.ger.corp.intel.com) ([10.252.7.77])
 by fmsmga002.fm.intel.com with ESMTP; 04 Oct 2019 10:05:23 -0700
From: Matthew Auld <matthew.auld@intel.com>
To: intel-gfx@lists.freedesktop.org
Date: Fri,  4 Oct 2019 18:04:52 +0100
Message-Id: <20191004170452.15410-22-matthew.auld@intel.com>
X-Mailer: git-send-email 2.20.1
In-Reply-To: <20191004170452.15410-1-matthew.auld@intel.com>
References: <20191004170452.15410-1-matthew.auld@intel.com>
MIME-Version: 1.0
Subject: [Intel-gfx] [PATCH v3 21/21] HAX drm/i915: add the fake lmem region
X-BeenThere: intel-gfx@lists.freedesktop.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: Intel graphics driver community testing & development
 <intel-gfx.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/intel-gfx>
List-Post: <mailto:intel-gfx@lists.freedesktop.org>
List-Help: <mailto:intel-gfx-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: intel-gfx-bounces@lists.freedesktop.org
Sender: "Intel-gfx" <intel-gfx-bounces@lists.freedesktop.org>

SW50ZW5kZWQgZm9yIHVwc3RyZWFtIHRlc3Rpbmcgc28gdGhhdCB3ZSBjYW4gc3RpbGwgZXhlcmNp
c2UgdGhlIExNRU0KcGx1bWJpbmcgYW5kICFIQVNfTUFQUEFCTEVfQVBFUlRVUkUgcGF0aHMuIFNt
b2tlIHRlc3RlZCBvbiBTa3VsbCBDYW55b24KZGV2aWNlLiBUaGlzIHdvcmtzIGJ5IGFsbG9jYXRp
bmcgYW4gaW50ZWxfbWVtb3J5X3JlZ2lvbiBmb3IgYSByZXNlcnZlZApwb3J0aW9uIG9mIHN5c3Rl
bSBtZW1vcnksIHdoaWNoIHdlIHRyZWF0IGxpa2UgTE1FTS4gRm9yIHRoZSBMTUVNQkFSIHdlCnN0
ZWFsIHRoZSBhcGVydHVyZSBhbmQgMToxIGl0IG1hcCB0byB0aGUgc3RvbGVuIHJlZ2lvbi4KClRv
IGVuYWJsZSBzaW1wbHkgc2V0IGk5MTVfZmFrZV9sbWVtX3N0YXJ0PSBvbiB0aGUga2VybmVsIGNt
ZGxpbmUgd2l0aCB0aGUKc3RhcnQgb2YgcmVzZXJ2ZWQgcmVnaW9uKHNlZSBtZW1tYXA9KS4gVGhl
IHNpemUgb2YgdGhlIHJlZ2lvbiB3ZSBjYW4KdXNlIGlzIGRldGVybWluZWQgYnkgdGhlIHNpemUg
b2YgdGhlIG1hcHBhYmxlIGFwZXJ0dXJlLCBzbyB0aGUgc2l6ZSBvZgpyZXNlcnZlZCByZWdpb24g
c2hvdWxkIGJlID49IG1hcHBhYmxlX2VuZC4KCmVnLiBtZW1tYXA9MkckMTZHIGk5MTVfZmFrZV9s
bWVtX3N0YXJ0PTB4NDAwMDAwMDAwCgpTaWduZWQtb2ZmLWJ5OiBNYXR0aGV3IEF1bGQgPG1hdHRo
ZXcuYXVsZEBpbnRlbC5jb20+CkNjOiBKb29uYXMgTGFodGluZW4gPGpvb25hcy5sYWh0aW5lbkBs
aW51eC5pbnRlbC5jb20+CkNjOiBBYmRpZWwgSmFudWxndWUgPGFiZGllbC5qYW51bGd1ZUBsaW51
eC5pbnRlbC5jb20+Ci0tLQogYXJjaC94ODYva2VybmVsL2Vhcmx5LXF1aXJrcy5jICAgICAgICAg
ICAgIHwgMjYgKysrKysrKwogZHJpdmVycy9ncHUvZHJtL2k5MTUvZ2VtL2k5MTVfZ2VtX2xtZW0u
YyAgIHwgIDMgKwogZHJpdmVycy9ncHUvZHJtL2k5MTUvaTkxNV9kcnYuYyAgICAgICAgICAgIHwg
IDggKysKIGRyaXZlcnMvZ3B1L2RybS9pOTE1L2k5MTVfZ2VtX2d0dC5jICAgICAgICB8ICAzICsK
IGRyaXZlcnMvZ3B1L2RybS9pOTE1L2ludGVsX21lbW9yeV9yZWdpb24uaCB8ICA2ICsrCiBkcml2
ZXJzL2dwdS9kcm0vaTkxNS9pbnRlbF9yZWdpb25fbG1lbS5jICAgfCA5MCArKysrKysrKysrKysr
KysrKysrKysrCiBkcml2ZXJzL2dwdS9kcm0vaTkxNS9pbnRlbF9yZWdpb25fbG1lbS5oICAgfCAg
NSArKwogaW5jbHVkZS9kcm0vaTkxNV9kcm0uaCAgICAgICAgICAgICAgICAgICAgIHwgIDMgKwog
OCBmaWxlcyBjaGFuZ2VkLCAxNDQgaW5zZXJ0aW9ucygrKQoKZGlmZiAtLWdpdCBhL2FyY2gveDg2
L2tlcm5lbC9lYXJseS1xdWlya3MuYyBiL2FyY2gveDg2L2tlcm5lbC9lYXJseS1xdWlya3MuYwpp
bmRleCA2ZjZiMWQwNGRhZGYuLjliMDQ2NTVlMzkyNiAxMDA2NDQKLS0tIGEvYXJjaC94ODYva2Vy
bmVsL2Vhcmx5LXF1aXJrcy5jCisrKyBiL2FyY2gveDg2L2tlcm5lbC9lYXJseS1xdWlya3MuYwpA
QCAtNjAzLDYgKzYwMywzMiBAQCBzdGF0aWMgdm9pZCBfX2luaXQgaW50ZWxfZ3JhcGhpY3NfcXVp
cmtzKGludCBudW0sIGludCBzbG90LCBpbnQgZnVuYykKIAl9CiB9CiAKK3N0cnVjdCByZXNvdXJj
ZSBpbnRlbF9ncmFwaGljc19mYWtlX2xtZW1fcmVzIF9fcm9fYWZ0ZXJfaW5pdCA9IERFRklORV9S
RVNfTUVNKDAsIDApOworRVhQT1JUX1NZTUJPTChpbnRlbF9ncmFwaGljc19mYWtlX2xtZW1fcmVz
KTsKKworc3RhdGljIGludCBfX2luaXQgZWFybHlfaTkxNV9mYWtlX2xtZW1faW5pdChjaGFyICpz
KQoreworCXU2NCBzdGFydDsKKwlpbnQgcmV0OworCisJaWYgKCpzID09ICc9JykKKwkJcysrOwor
CisJcmV0ID0ga3N0cnRvdWxsKHMsIDE2LCAmc3RhcnQpOworCWlmIChyZXQpCisJCXJldHVybiBy
ZXQ7CisKKwlpbnRlbF9ncmFwaGljc19mYWtlX2xtZW1fcmVzLnN0YXJ0ID0gc3RhcnQ7CisJaW50
ZWxfZ3JhcGhpY3NfZmFrZV9sbWVtX3Jlcy5lbmQgPSBTWl8yRzsgLyogUGxhY2Vob2xkZXI7IGRl
cGVuZHMgb24gYXBlcnR1cmUgc2l6ZSAqLworCisJcHJpbnRrKEtFUk5fSU5GTyAiSW50ZWwgZ3Jh
cGhpY3MgZmFrZSBMTUVNIHN0YXJ0cyBhdCAlcGFcbiIsCisJICAgICAgICZpbnRlbF9ncmFwaGlj
c19mYWtlX2xtZW1fcmVzLnN0YXJ0KTsKKworCXJldHVybiAwOworfQorCitlYXJseV9wYXJhbSgi
aTkxNV9mYWtlX2xtZW1fc3RhcnQiLCBlYXJseV9pOTE1X2Zha2VfbG1lbV9pbml0KTsKKwogc3Rh
dGljIHZvaWQgX19pbml0IGZvcmNlX2Rpc2FibGVfaHBldChpbnQgbnVtLCBpbnQgc2xvdCwgaW50
IGZ1bmMpCiB7CiAjaWZkZWYgQ09ORklHX0hQRVRfVElNRVIKZGlmZiAtLWdpdCBhL2RyaXZlcnMv
Z3B1L2RybS9pOTE1L2dlbS9pOTE1X2dlbV9sbWVtLmMgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9n
ZW0vaTkxNV9nZW1fbG1lbS5jCmluZGV4IGZkOGI2M2RkMTU0ZC4uYjQ4Zjk1YmEzMzZmIDEwMDY0
NAotLS0gYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9nZW0vaTkxNV9nZW1fbG1lbS5jCisrKyBiL2Ry
aXZlcnMvZ3B1L2RybS9pOTE1L2dlbS9pOTE1X2dlbV9sbWVtLmMKQEAgLTIzLDYgKzIzLDcgQEAg
dm9pZCBfX2lvbWVtICppOTE1X2dlbV9vYmplY3RfbG1lbV9pb19tYXBfcGFnZShzdHJ1Y3QgZHJt
X2k5MTVfZ2VtX29iamVjdCAqb2JqLAogCXJlc291cmNlX3NpemVfdCBvZmZzZXQ7CiAKIAlvZmZz
ZXQgPSBpOTE1X2dlbV9vYmplY3RfZ2V0X2RtYV9hZGRyZXNzKG9iaiwgbik7CisJb2Zmc2V0IC09
IG9iai0+bW0ucmVnaW9uLT5yZWdpb24uc3RhcnQ7CiAKIAlyZXR1cm4gaW9fbWFwcGluZ19tYXBf
d2MoJm9iai0+bW0ucmVnaW9uLT5pb21hcCwgb2Zmc2V0LCBQQUdFX1NJWkUpOwogfQpAQCAtMzMs
NiArMzQsNyBAQCB2b2lkIF9faW9tZW0gKmk5MTVfZ2VtX29iamVjdF9sbWVtX2lvX21hcF9wYWdl
X2F0b21pYyhzdHJ1Y3QgZHJtX2k5MTVfZ2VtX29iamVjdAogCXJlc291cmNlX3NpemVfdCBvZmZz
ZXQ7CiAKIAlvZmZzZXQgPSBpOTE1X2dlbV9vYmplY3RfZ2V0X2RtYV9hZGRyZXNzKG9iaiwgbik7
CisJb2Zmc2V0IC09IG9iai0+bW0ucmVnaW9uLT5yZWdpb24uc3RhcnQ7CiAKIAlyZXR1cm4gaW9f
bWFwcGluZ19tYXBfYXRvbWljX3djKCZvYmotPm1tLnJlZ2lvbi0+aW9tYXAsIG9mZnNldCk7CiB9
CkBAIC00Niw2ICs0OCw3IEBAIHZvaWQgX19pb21lbSAqaTkxNV9nZW1fb2JqZWN0X2xtZW1faW9f
bWFwKHN0cnVjdCBkcm1faTkxNV9nZW1fb2JqZWN0ICpvYmosCiAJR0VNX0JVR19PTighaTkxNV9n
ZW1fb2JqZWN0X2lzX2NvbnRpZ3VvdXMob2JqKSk7CiAKIAlvZmZzZXQgPSBpOTE1X2dlbV9vYmpl
Y3RfZ2V0X2RtYV9hZGRyZXNzKG9iaiwgbik7CisJb2Zmc2V0IC09IG9iai0+bW0ucmVnaW9uLT5y
ZWdpb24uc3RhcnQ7CiAKIAlyZXR1cm4gaW9fbWFwcGluZ19tYXBfd2MoJm9iai0+bW0ucmVnaW9u
LT5pb21hcCwgb2Zmc2V0LCBzaXplKTsKIH0KZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9p
OTE1L2k5MTVfZHJ2LmMgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9pOTE1X2Rydi5jCmluZGV4IDAy
NGRhNTgyYmEwZi4uZmRkNTQ4Mjk5MTU2IDEwMDY0NAotLS0gYS9kcml2ZXJzL2dwdS9kcm0vaTkx
NS9pOTE1X2Rydi5jCisrKyBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2k5MTVfZHJ2LmMKQEAgLTE1
MjYsNiArMTUyNiwxNCBAQCBpbnQgaTkxNV9kcml2ZXJfcHJvYmUoc3RydWN0IHBjaV9kZXYgKnBk
ZXYsIGNvbnN0IHN0cnVjdCBwY2lfZGV2aWNlX2lkICplbnQpCiAJaWYgKCFpOTE1X21vZHBhcmFt
cy5udWNsZWFyX3BhZ2VmbGlwICYmIG1hdGNoX2luZm8tPmdlbiA8IDUpCiAJCWRldl9wcml2LT5k
cm0uZHJpdmVyX2ZlYXR1cmVzICY9IH5EUklWRVJfQVRPTUlDOwogCisJLyogQ2hlY2sgaWYgd2Ug
c3VwcG9ydCBmYWtlIExNRU0gLS0gZW5hYmxlIGZvciBsaXZlIHNlbGZ0ZXN0cyAqLworCWlmIChJ
TlRFTF9HRU4oZGV2X3ByaXYpID49IDkgJiYgaTkxNV9zZWxmdGVzdC5saXZlICYmCisJICAgIGlu
dGVsX2dyYXBoaWNzX2Zha2VfbG1lbV9yZXMuc3RhcnQpIHsKKwkJbWt3cml0ZV9kZXZpY2VfaW5m
byhkZXZfcHJpdiktPm1lbW9yeV9yZWdpb25zID0KKwkJCVJFR0lPTl9TTUVNIHwgUkVHSU9OX0xN
RU0gfCBSRUdJT05fU1RPTEVOOworCQlHRU1fQlVHX09OKCFIQVNfTE1FTShkZXZfcHJpdikpOwor
CX0KKwogCXJldCA9IHBjaV9lbmFibGVfZGV2aWNlKHBkZXYpOwogCWlmIChyZXQpCiAJCWdvdG8g
b3V0X2Zpbmk7CmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9pOTE1X2dlbV9ndHQu
YyBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2k5MTVfZ2VtX2d0dC5jCmluZGV4IDIzNTAyOGFkNjg0
Zi4uMTQ2YjJjMDU3M2U4IDEwMDY0NAotLS0gYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9pOTE1X2dl
bV9ndHQuYworKysgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9pOTE1X2dlbV9ndHQuYwpAQCAtMjc3
OCw2ICsyNzc4LDkgQEAgaW50IGk5MTVfZ2VtX2luaXRfbWVtb3J5X3JlZ2lvbnMoc3RydWN0IGRy
bV9pOTE1X3ByaXZhdGUgKmk5MTUpCiAJCWNhc2UgSU5URUxfU1RPTEVOOgogCQkJbWVtID0gaTkx
NV9nZW1fc3RvbGVuX3NldHVwKGk5MTUpOwogCQkJYnJlYWs7CisJCWNhc2UgSU5URUxfTE1FTToK
KwkJCW1lbSA9IGludGVsX3NldHVwX2Zha2VfbG1lbShpOTE1KTsKKwkJCWJyZWFrOwogCQl9CiAK
IAkJaWYgKElTX0VSUihtZW0pKSB7CmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9p
bnRlbF9tZW1vcnlfcmVnaW9uLmggYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9pbnRlbF9tZW1vcnlf
cmVnaW9uLmgKaW5kZXggMzlkMmM0ZWMzMzAyLi5jNzQ4ODdiMzU1YWMgMTAwNjQ0Ci0tLSBhL2Ry
aXZlcnMvZ3B1L2RybS9pOTE1L2ludGVsX21lbW9yeV9yZWdpb24uaAorKysgYi9kcml2ZXJzL2dw
dS9kcm0vaTkxNS9pbnRlbF9tZW1vcnlfcmVnaW9uLmgKQEAgLTEwLDYgKzEwLDcgQEAKICNpbmNs
dWRlIDxsaW51eC9pb3BvcnQuaD4KICNpbmNsdWRlIDxsaW51eC9tdXRleC5oPgogI2luY2x1ZGUg
PGxpbnV4L2lvLW1hcHBpbmcuaD4KKyNpbmNsdWRlIDxkcm0vZHJtX21tLmg+CiAKICNpbmNsdWRl
ICJpOTE1X2J1ZGR5LmgiCiAKQEAgLTcxLDYgKzcyLDkgQEAgc3RydWN0IGludGVsX21lbW9yeV9y
ZWdpb24gewogCXN0cnVjdCBpb19tYXBwaW5nIGlvbWFwOwogCXN0cnVjdCByZXNvdXJjZSByZWdp
b247CiAKKwkvKiBGb3IgZmFraW5nIGZvciBsbWVtICovCisJc3RydWN0IGRybV9tbV9ub2RlIGZh
a2VfbWFwcGFibGU7CisKIAlzdHJ1Y3QgaTkxNV9idWRkeV9tbSBtbTsKIAlzdHJ1Y3QgbXV0ZXgg
bW1fbG9jazsKIApAQCAtODMsNiArODcsOCBAQCBzdHJ1Y3QgaW50ZWxfbWVtb3J5X3JlZ2lvbiB7
CiAJdW5zaWduZWQgaW50IGluc3RhbmNlOwogCXVuc2lnbmVkIGludCBpZDsKIAorCWRtYV9hZGRy
X3QgcmVtYXBfYWRkcjsKKwogCS8qIFByb3RlY3RzIGFjY2VzcyB0byBvYmplY3RzIGFuZCBwdXJn
ZWFibGUgKi8KIAlzdHJ1Y3QgbXV0ZXggb2JqX2xvY2s7CiAJc3RydWN0IGxpc3RfaGVhZCBvYmpl
Y3RzOwpkaWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvaW50ZWxfcmVnaW9uX2xtZW0u
YyBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2ludGVsX3JlZ2lvbl9sbWVtLmMKaW5kZXggMDUxMDY5
NjY0MDc0Li42ZDg5YmRmYWZkNmIgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2lu
dGVsX3JlZ2lvbl9sbWVtLmMKKysrIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvaW50ZWxfcmVnaW9u
X2xtZW0uYwpAQCAtMzYsOSArMzYsNjIgQEAgbG1lbV9jcmVhdGVfb2JqZWN0KHN0cnVjdCBpbnRl
bF9tZW1vcnlfcmVnaW9uICptZW0sCiAJcmV0dXJuIG9iajsKIH0KIAorc3RhdGljIGludCBpbml0
X2Zha2VfbG1lbV9iYXIoc3RydWN0IGludGVsX21lbW9yeV9yZWdpb24gKm1lbSkKK3sKKwlzdHJ1
Y3QgZHJtX2k5MTVfcHJpdmF0ZSAqaTkxNSA9IG1lbS0+aTkxNTsKKwlzdHJ1Y3QgaTkxNV9nZ3R0
ICpnZ3R0ID0gJmk5MTUtPmdndHQ7CisJdW5zaWduZWQgbG9uZyBuOworCWludCByZXQ7CisKKwkv
KiBXZSB3YW50IHRvIDE6MSBtYXAgdGhlIG1hcHBhYmxlIGFwZXJ0dXJlIHRvIG91ciByZXNlcnZl
ZCByZWdpb24gKi8KKworCW1lbS0+ZmFrZV9tYXBwYWJsZS5zdGFydCA9IDA7CisJbWVtLT5mYWtl
X21hcHBhYmxlLnNpemUgPSByZXNvdXJjZV9zaXplKCZtZW0tPnJlZ2lvbik7CisJbWVtLT5mYWtl
X21hcHBhYmxlLmNvbG9yID0gSTkxNV9DT0xPUl9VTkVWSUNUQUJMRTsKKworCXJldCA9IGRybV9t
bV9yZXNlcnZlX25vZGUoJmdndHQtPnZtLm1tLCAmbWVtLT5mYWtlX21hcHBhYmxlKTsKKwlpZiAo
cmV0KQorCQlyZXR1cm4gcmV0OworCisJbWVtLT5yZW1hcF9hZGRyID0gZG1hX21hcF9yZXNvdXJj
ZSgmaTkxNS0+ZHJtLnBkZXYtPmRldiwKKwkJCQkJICAgbWVtLT5yZWdpb24uc3RhcnQsCisJCQkJ
CSAgIG1lbS0+ZmFrZV9tYXBwYWJsZS5zaXplLAorCQkJCQkgICBQQ0lfRE1BX0JJRElSRUNUSU9O
QUwsCisJCQkJCSAgIERNQV9BVFRSX0ZPUkNFX0NPTlRJR1VPVVMpOworCWlmIChkbWFfbWFwcGlu
Z19lcnJvcigmaTkxNS0+ZHJtLnBkZXYtPmRldiwgbWVtLT5yZW1hcF9hZGRyKSkgeworCQlkcm1f
bW1fcmVtb3ZlX25vZGUoJm1lbS0+ZmFrZV9tYXBwYWJsZSk7CisJCXJldHVybiAtRUlOVkFMOwor
CX0KKworCWZvciAobiA9IDA7IG4gPCBtZW0tPmZha2VfbWFwcGFibGUuc2l6ZSA+PiBQQUdFX1NI
SUZUOyArK24pIHsKKwkJZ2d0dC0+dm0uaW5zZXJ0X3BhZ2UoJmdndHQtPnZtLAorCQkJCSAgICAg
bWVtLT5yZW1hcF9hZGRyICsgKG4gPDwgUEFHRV9TSElGVCksCisJCQkJICAgICBuIDw8IFBBR0Vf
U0hJRlQsCisJCQkJICAgICBJOTE1X0NBQ0hFX05PTkUsIDApOworCX0KKworCW1lbS0+cmVnaW9u
ID0gKHN0cnVjdCByZXNvdXJjZSlERUZJTkVfUkVTX01FTShtZW0tPnJlbWFwX2FkZHIsCisJCQkJ
CQkgICAgICBtZW0tPmZha2VfbWFwcGFibGUuc2l6ZSk7CisKKwlyZXR1cm4gMDsKK30KKworc3Rh
dGljIHZvaWQgcmVsZWFzZV9mYWtlX2xtZW1fYmFyKHN0cnVjdCBpbnRlbF9tZW1vcnlfcmVnaW9u
ICptZW0pCit7CisJaWYgKGRybV9tbV9ub2RlX2FsbG9jYXRlZCgmbWVtLT5mYWtlX21hcHBhYmxl
KSkKKwkJZHJtX21tX3JlbW92ZV9ub2RlKCZtZW0tPmZha2VfbWFwcGFibGUpOworCisJZG1hX3Vu
bWFwX3Jlc291cmNlKCZtZW0tPmk5MTUtPmRybS5wZGV2LT5kZXYsCisJCQkgICBtZW0tPnJlbWFw
X2FkZHIsCisJCQkgICBtZW0tPmZha2VfbWFwcGFibGUuc2l6ZSwKKwkJCSAgIFBDSV9ETUFfQklE
SVJFQ1RJT05BTCwKKwkJCSAgIERNQV9BVFRSX0ZPUkNFX0NPTlRJR1VPVVMpOworfQorCiBzdGF0
aWMgdm9pZAogcmVnaW9uX2xtZW1fcmVsZWFzZShzdHJ1Y3QgaW50ZWxfbWVtb3J5X3JlZ2lvbiAq
bWVtKQogeworCXJlbGVhc2VfZmFrZV9sbWVtX2JhcihtZW0pOwogCWlvX21hcHBpbmdfZmluaSgm
bWVtLT5pb21hcCk7CiAJaW50ZWxfbWVtb3J5X3JlZ2lvbl9yZWxlYXNlX2J1ZGR5KG1lbSk7CiB9
CkBAIC00OCw2ICsxMDEsMTEgQEAgcmVnaW9uX2xtZW1faW5pdChzdHJ1Y3QgaW50ZWxfbWVtb3J5
X3JlZ2lvbiAqbWVtKQogewogCWludCByZXQ7CiAKKwlpZiAoaW50ZWxfZ3JhcGhpY3NfZmFrZV9s
bWVtX3Jlcy5zdGFydCkgeworCQlyZXQgPSBpbml0X2Zha2VfbG1lbV9iYXIobWVtKTsKKwkJR0VN
X0JVR19PTihyZXQpOworCX0KKwogCWlmICghaW9fbWFwcGluZ19pbml0X3djKCZtZW0tPmlvbWFw
LAogCQkJCW1lbS0+aW9fc3RhcnQsCiAJCQkJcmVzb3VyY2Vfc2l6ZSgmbWVtLT5yZWdpb24pKSkK
QEAgLTY1LDMgKzEyMywzNSBAQCBjb25zdCBzdHJ1Y3QgaW50ZWxfbWVtb3J5X3JlZ2lvbl9vcHMg
aW50ZWxfcmVnaW9uX2xtZW1fb3BzID0gewogCS5yZWxlYXNlID0gcmVnaW9uX2xtZW1fcmVsZWFz
ZSwKIAkuY3JlYXRlX29iamVjdCA9IGxtZW1fY3JlYXRlX29iamVjdCwKIH07CisKK3N0cnVjdCBp
bnRlbF9tZW1vcnlfcmVnaW9uICoKK2ludGVsX3NldHVwX2Zha2VfbG1lbShzdHJ1Y3QgZHJtX2k5
MTVfcHJpdmF0ZSAqaTkxNSkKK3sKKwlzdHJ1Y3QgcGNpX2RldiAqcGRldiA9IGk5MTUtPmRybS5w
ZGV2OworCXN0cnVjdCBpbnRlbF9tZW1vcnlfcmVnaW9uICptZW07CisJcmVzb3VyY2Vfc2l6ZV90
IG1hcHBhYmxlX2VuZDsKKwlyZXNvdXJjZV9zaXplX3QgaW9fc3RhcnQ7CisJcmVzb3VyY2Vfc2l6
ZV90IHN0YXJ0OworCisJR0VNX0JVR19PTihpOTE1X2dndHRfaGFzX2FwZXJ0dXJlKCZpOTE1LT5n
Z3R0KSk7CisJR0VNX0JVR19PTighaW50ZWxfZ3JhcGhpY3NfZmFrZV9sbWVtX3Jlcy5zdGFydCk7
CisKKwkvKiBZb3VyIG1hcHBhYmxlIGFwZXJ0dXJlIGJlbG9uZ3MgdG8gbWUgbm93ISAqLworCW1h
cHBhYmxlX2VuZCA9IHBjaV9yZXNvdXJjZV9sZW4ocGRldiwgMik7CisJaW9fc3RhcnQgPSBwY2lf
cmVzb3VyY2Vfc3RhcnQocGRldiwgMiksCisJc3RhcnQgPSBpbnRlbF9ncmFwaGljc19mYWtlX2xt
ZW1fcmVzLnN0YXJ0OworCisJbWVtID0gaW50ZWxfbWVtb3J5X3JlZ2lvbl9jcmVhdGUoaTkxNSwK
KwkJCQkJIHN0YXJ0LAorCQkJCQkgbWFwcGFibGVfZW5kLAorCQkJCQkgSTkxNV9HVFRfUEFHRV9T
SVpFXzRLLAorCQkJCQkgaW9fc3RhcnQsCisJCQkJCSAmaW50ZWxfcmVnaW9uX2xtZW1fb3BzKTsK
KwlpZiAoIUlTX0VSUihtZW0pKSB7CisJCURSTV9JTkZPKCJJbnRlbCBncmFwaGljcyBmYWtlIExN
RU06ICVwUlxuIiwgJm1lbS0+cmVnaW9uKTsKKwkJRFJNX0lORk8oIkludGVsIGdyYXBoaWNzIGZh
a2UgTE1FTSBJTyBzdGFydDogJWxseFxuIiwKKwkJCSAodTY0KW1lbS0+aW9fc3RhcnQpOworCX0K
KworCXJldHVybiBtZW07Cit9CmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9pbnRl
bF9yZWdpb25fbG1lbS5oIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvaW50ZWxfcmVnaW9uX2xtZW0u
aAppbmRleCBlZDJhM2JhYjY0NDMuLjIxM2RlZjdjN2I4YSAxMDA2NDQKLS0tIGEvZHJpdmVycy9n
cHUvZHJtL2k5MTUvaW50ZWxfcmVnaW9uX2xtZW0uaAorKysgYi9kcml2ZXJzL2dwdS9kcm0vaTkx
NS9pbnRlbF9yZWdpb25fbG1lbS5oCkBAIC02LDYgKzYsMTEgQEAKICNpZm5kZWYgX19JTlRFTF9S
RUdJT05fTE1FTV9ICiAjZGVmaW5lIF9fSU5URUxfUkVHSU9OX0xNRU1fSAogCitzdHJ1Y3QgZHJt
X2k5MTVfcHJpdmF0ZTsKKwogZXh0ZXJuIGNvbnN0IHN0cnVjdCBpbnRlbF9tZW1vcnlfcmVnaW9u
X29wcyBpbnRlbF9yZWdpb25fbG1lbV9vcHM7CiAKK3N0cnVjdCBpbnRlbF9tZW1vcnlfcmVnaW9u
ICoKK2ludGVsX3NldHVwX2Zha2VfbG1lbShzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0ZSAqaTkxNSk7
CisKICNlbmRpZiAvKiAhX19JTlRFTF9SRUdJT05fTE1FTV9IICovCmRpZmYgLS1naXQgYS9pbmNs
dWRlL2RybS9pOTE1X2RybS5oIGIvaW5jbHVkZS9kcm0vaTkxNV9kcm0uaAppbmRleCA2NzIyMDA1
ODg0ZGIuLjI3MTk4MDIyNWRlYiAxMDA2NDQKLS0tIGEvaW5jbHVkZS9kcm0vaTkxNV9kcm0uaAor
KysgYi9pbmNsdWRlL2RybS9pOTE1X2RybS5oCkBAIC0zOSw2ICszOSw5IEBAIGJvb2wgaTkxNV9n
cHVfdHVyYm9fZGlzYWJsZSh2b2lkKTsKIC8qIEV4cG9ydGVkIGZyb20gYXJjaC94ODYva2VybmVs
L2Vhcmx5LXF1aXJrcy5jICovCiBleHRlcm4gc3RydWN0IHJlc291cmNlIGludGVsX2dyYXBoaWNz
X3N0b2xlbl9yZXM7CiAKKy8qIEV4cG9ydGVkIGZyb20gYXJjaC94ODYva2VybmVsL2Vhcmx5LXBy
aW50ay5jICovCitleHRlcm4gc3RydWN0IHJlc291cmNlIGludGVsX2dyYXBoaWNzX2Zha2VfbG1l
bV9yZXM7CisKIC8qCiAgKiBUaGUgQnJpZGdlIGRldmljZSdzIFBDSSBjb25maWcgc3BhY2UgaGFz
IGluZm9ybWF0aW9uIGFib3V0IHRoZQogICogZmIgYXBlcnR1cmUgc2l6ZSBhbmQgdGhlIGFtb3Vu
dCBvZiBwcmUtcmVzZXJ2ZWQgbWVtb3J5LgotLSAKMi4yMC4xCgpfX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fXwpJbnRlbC1nZnggbWFpbGluZyBsaXN0CkludGVs
LWdmeEBsaXN0cy5mcmVlZGVza3RvcC5vcmcKaHR0cHM6Ly9saXN0cy5mcmVlZGVza3RvcC5vcmcv
bWFpbG1hbi9saXN0aW5mby9pbnRlbC1nZng=

Return-Path: <intel-gfx-bounces@lists.freedesktop.org>
X-Original-To: lists+intel-gfx@lfdr.de
Delivered-To: lists+intel-gfx@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [IPv6:2610:10:20:722:a800:ff:fe36:1795])
	by mail.lfdr.de (Postfix) with ESMTPS id D716B4D03B
	for <lists+intel-gfx@lfdr.de>; Thu, 20 Jun 2019 16:20:59 +0200 (CEST)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 3CB5D6E420;
	Thu, 20 Jun 2019 14:20:58 +0000 (UTC)
X-Original-To: intel-gfx@lists.freedesktop.org
Delivered-To: intel-gfx@lists.freedesktop.org
Received: from fireflyinternet.com (mail.fireflyinternet.com [109.228.58.192])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 1A4BA6E41D
 for <intel-gfx@lists.freedesktop.org>; Thu, 20 Jun 2019 14:20:55 +0000 (UTC)
X-Default-Received-SPF: pass (skip=forwardok (res=PASS))
 x-ip-name=78.156.65.138; 
Received: from haswell.alporthouse.com (unverified [78.156.65.138]) 
 by fireflyinternet.com (Firefly Internet (M1)) with ESMTP id 16967469-1500050 
 for <intel-gfx@lists.freedesktop.org>; Thu, 20 Jun 2019 15:20:49 +0100
From: Chris Wilson <chris@chris-wilson.co.uk>
To: intel-gfx@lists.freedesktop.org
Date: Thu, 20 Jun 2019 15:20:51 +0100
Message-Id: <20190620142052.19311-1-chris@chris-wilson.co.uk>
X-Mailer: git-send-email 2.20.1
MIME-Version: 1.0
Subject: [Intel-gfx] [CI 1/2] drm/i915/execlists: Preempt-to-busy
X-BeenThere: intel-gfx@lists.freedesktop.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: Intel graphics driver community testing & development
 <intel-gfx.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/intel-gfx>
List-Post: <mailto:intel-gfx@lists.freedesktop.org>
List-Help: <mailto:intel-gfx-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: intel-gfx-bounces@lists.freedesktop.org
Sender: "Intel-gfx" <intel-gfx-bounces@lists.freedesktop.org>

V2hlbiB1c2luZyBhIGdsb2JhbCBzZXFubywgd2UgcmVxdWlyZWQgYSBwcmVjaXNlIHN0b3AtdGhl
LXdvcmtkIGV2ZW50IHRvCmhhbmRsZSBwcmVlbXB0aW9uIGFuZCB1bndpbmQgdGhlIGdsb2JhbCBz
ZXFubyBjb3VudGVyLiBUbyBhY2NvbXBsaXNoCnRoaXMsIHdlIHdvdWxkIHByZWVtcHQgdG8gYSBz
cGVjaWFsIG91dC1vZi1iYW5kIGNvbnRleHQgYW5kIHdhaXQgZm9yIHRoZQptYWNoaW5lIHRvIHJl
cG9ydCB0aGF0IGl0IHdhcyBpZGxlLiBHaXZlbiBhbiBpZGxlIG1hY2hpbmUsIHdlIGNvdWxkIHZl
cnkKcHJlY2lzZWx5IHNlZSB3aGljaCByZXF1ZXN0cyBoYWQgY29tcGxldGVkIGFuZCB3aGljaCB3
ZSBuZWVkZWQgdG8gZmVlZApiYWNrIGludG8gdGhlIHJ1biBxdWV1ZS4KCkhvd2V2ZXIsIG5vdyB0
aGF0IHdlIGhhdmUgc2NyYXBwZWQgdGhlIGdsb2JhbCBzZXFubywgd2Ugbm8gbG9uZ2VyIG5lZWQK
dG8gcHJlY2lzZWx5IHVud2luZCB0aGUgZ2xvYmFsIGNvdW50ZXIgYW5kIG9ubHkgdHJhY2sgcmVx
dWVzdHMgYnkgdGhlaXIKcGVyLWNvbnRleHQgc2Vxbm8uIFRoaXMgYWxsb3dzIHVzIHRvIGxvb3Nl
bHkgdW53aW5kIGluZmxpZ2h0IHJlcXVlc3RzCndoaWxlIHNjaGVkdWxpbmcgYSBwcmVlbXB0aW9u
LCB3aXRoIHRoZSBlbm9ybW91cyBjYXZlYXQgdGhhdCB0aGUKcmVxdWVzdHMgd2UgcHV0IGJhY2sg
b24gdGhlIHJ1biBxdWV1ZSBhcmUgc3RpbGwgX2luZmxpZ2h0XyAodW50aWwgdGhlCnByZWVtcHRp
b24gcmVxdWVzdCBpcyBjb21wbGV0ZSkuIFRoaXMgbWFrZXMgcmVxdWVzdCB0cmFja2luZyBtdWNo
IG1vcmUKbWVzc3ksIGFzIGF0IGFueSBwb2ludCB0aGVuIHdlIGNhbiBzZWUgYSBjb21wbGV0ZWQg
cmVxdWVzdCB0aGF0IHdlCmJlbGlldmUgaXMgbm90IGN1cnJlbnRseSBzY2hlZHVsZWQgZm9yIGV4
ZWN1dGlvbi4gV2UgYWxzbyBoYXZlIHRvIGJlCmNhcmVmdWwgbm90IHRvIHJld2luZCBSSU5HX1RB
SUwgcGFzdCBSSU5HX0hFQUQgb24gcHJlZW1wdGluZyB0byB0aGUKcnVubmluZyBjb250ZXh0LCBh
bmQgZm9yIHRoaXMgd2UgdXNlIGEgc2VtYXBob3JlIHRvIHByZXZlbnQgY29tcGxldGlvbgpvZiB0
aGUgcmVxdWVzdCBiZWZvcmUgY29udGludWluZy4KClRvIGFjY29tcGxpc2ggdGhpcyBmZWF0LCB3
ZSBjaGFuZ2UgaG93IHdlIHRyYWNrIHJlcXVlc3RzIHNjaGVkdWxlZCB0bwp0aGUgSFcuIEluc3Rl
YWQgb2YgYXBwZW5kaW5nIG91ciByZXF1ZXN0cyBvbnRvIGEgc2luZ2xlIGxpc3QgYXMgd2UKc3Vi
bWl0LCB3ZSB0cmFjayBlYWNoIHN1Ym1pc3Npb24gdG8gRUxTUCBhcyBpdHMgb3duIGJsb2NrLiBU
aGVuIHVwb24KcmVjZWl2aW5nIHRoZSBDUyBwcmVlbXB0aW9uIGV2ZW50LCB3ZSBwcm9tb3RlIHRo
ZSBwZW5kaW5nIGJsb2NrIHRvIHRoZQppbmZsaWdodCBibG9jayAoZGlzY2FyZGluZyB3aGF0IHdh
cyBwcmV2aW91c2x5IGJlaW5nIHRyYWNrZWQpLiBBcyBub3JtYWwKQ1MgY29tcGxldGlvbiBldmVu
dHMgYXJyaXZlLCB3ZSB0aGVuIHJlbW92ZSBzdGFsZSBlbnRyaWVzIGZyb20gdGhlCmluZmxpZ2h0
IHRyYWNrZXIuCgp2MjogQmUgYSB0aW5nZSBwYXJhbm9pZCBhbmQgZW5zdXJlIHdlIGZsdXNoIHRo
ZSB3cml0ZSBpbnRvIHRoZSBIV1MgcGFnZQpmb3IgdGhlIEdQVSBzZW1hcGhvcmUgdG8gcGljayBp
biBhIHRpbWVseSBmYXNoaW9uLgoKU2lnbmVkLW9mZi1ieTogQ2hyaXMgV2lsc29uIDxjaHJpc0Bj
aHJpcy13aWxzb24uY28udWs+ClJldmlld2VkLWJ5OiBNaWthIEt1b3BwYWxhIDxtaWthLmt1b3Bw
YWxhQGxpbnV4LmludGVsLmNvbT4KLS0tCiBkcml2ZXJzL2dwdS9kcm0vaTkxNS9nZW0vaTkxNV9n
ZW1fY29udGV4dC5jICAgfCAgIDIgKy0KIGRyaXZlcnMvZ3B1L2RybS9pOTE1L2d0L2ludGVsX2Nv
bnRleHRfdHlwZXMuaCB8ICAgNSArCiBkcml2ZXJzL2dwdS9kcm0vaTkxNS9ndC9pbnRlbF9lbmdp
bmUuaCAgICAgICAgfCAgNjEgKy0KIGRyaXZlcnMvZ3B1L2RybS9pOTE1L2d0L2ludGVsX2VuZ2lu
ZV9jcy5jICAgICB8ICA2MyArLQogZHJpdmVycy9ncHUvZHJtL2k5MTUvZ3QvaW50ZWxfZW5naW5l
X3R5cGVzLmggIHwgIDYwICstCiBkcml2ZXJzL2dwdS9kcm0vaTkxNS9ndC9pbnRlbF9scmMuYyAg
ICAgICAgICAgfCA3MDMgKysrKysrKystLS0tLS0tLS0tCiBkcml2ZXJzL2dwdS9kcm0vaTkxNS9p
OTE1X2dwdV9lcnJvci5jICAgICAgICAgfCAgMTkgKy0KIGRyaXZlcnMvZ3B1L2RybS9pOTE1L2k5
MTVfcmVxdWVzdC5jICAgICAgICAgICB8ICAgNiArCiBkcml2ZXJzL2dwdS9kcm0vaTkxNS9pOTE1
X3JlcXVlc3QuaCAgICAgICAgICAgfCAgIDEgKwogZHJpdmVycy9ncHUvZHJtL2k5MTUvaTkxNV9z
Y2hlZHVsZXIuYyAgICAgICAgIHwgICAzICstCiBkcml2ZXJzL2dwdS9kcm0vaTkxNS9pOTE1X3V0
aWxzLmggICAgICAgICAgICAgfCAgMTIgKwogZHJpdmVycy9ncHUvZHJtL2k5MTUvaW50ZWxfZ3Vj
X3N1Ym1pc3Npb24uYyAgIHwgMTc1ICsrLS0tCiBkcml2ZXJzL2dwdS9kcm0vaTkxNS9zZWxmdGVz
dHMvaTkxNV9yZXF1ZXN0LmMgfCAgIDggKy0KIDEzIGZpbGVzIGNoYW5nZWQsIDUwOCBpbnNlcnRp
b25zKCspLCA2MTAgZGVsZXRpb25zKC0pCgpkaWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL2k5
MTUvZ2VtL2k5MTVfZ2VtX2NvbnRleHQuYyBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2dlbS9pOTE1
X2dlbV9jb250ZXh0LmMKaW5kZXggMGYyYzIyYTNiY2I2Li4zNTg3MWM4YTQyYTYgMTAwNjQ0Ci0t
LSBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2dlbS9pOTE1X2dlbV9jb250ZXh0LmMKKysrIGIvZHJp
dmVycy9ncHUvZHJtL2k5MTUvZ2VtL2k5MTVfZ2VtX2NvbnRleHQuYwpAQCAtNjQ2LDcgKzY0Niw3
IEBAIHN0YXRpYyB2b2lkIGluaXRfY29udGV4dHMoc3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmk5
MTUpCiAKIHN0YXRpYyBib29sIG5lZWRzX3ByZWVtcHRfY29udGV4dChzdHJ1Y3QgZHJtX2k5MTVf
cHJpdmF0ZSAqaTkxNSkKIHsKLQlyZXR1cm4gSEFTX0VYRUNMSVNUUyhpOTE1KTsKKwlyZXR1cm4g
VVNFU19HVUNfU1VCTUlTU0lPTihpOTE1KTsKIH0KIAogaW50IGk5MTVfZ2VtX2NvbnRleHRzX2lu
aXQoc3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmRldl9wcml2KQpkaWZmIC0tZ2l0IGEvZHJpdmVy
cy9ncHUvZHJtL2k5MTUvZ3QvaW50ZWxfY29udGV4dF90eXBlcy5oIGIvZHJpdmVycy9ncHUvZHJt
L2k5MTUvZ3QvaW50ZWxfY29udGV4dF90eXBlcy5oCmluZGV4IDA4MDQ5ZWU5MWNlZS4uNGMwZTIx
MWM3MTVkIDEwMDY0NAotLS0gYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9ndC9pbnRlbF9jb250ZXh0
X3R5cGVzLmgKKysrIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvZ3QvaW50ZWxfY29udGV4dF90eXBl
cy5oCkBAIC0xMyw2ICsxMyw3IEBACiAjaW5jbHVkZSA8bGludXgvdHlwZXMuaD4KIAogI2luY2x1
ZGUgImk5MTVfYWN0aXZlX3R5cGVzLmgiCisjaW5jbHVkZSAiaTkxNV91dGlscy5oIgogI2luY2x1
ZGUgImludGVsX2VuZ2luZV90eXBlcy5oIgogI2luY2x1ZGUgImludGVsX3NzZXUuaCIKIApAQCAt
MzgsNiArMzksMTAgQEAgc3RydWN0IGludGVsX2NvbnRleHQgewogCXN0cnVjdCBpOTE1X2dlbV9j
b250ZXh0ICpnZW1fY29udGV4dDsKIAlzdHJ1Y3QgaW50ZWxfZW5naW5lX2NzICplbmdpbmU7CiAJ
c3RydWN0IGludGVsX2VuZ2luZV9jcyAqaW5mbGlnaHQ7CisjZGVmaW5lIGludGVsX2NvbnRleHRf
aW5mbGlnaHQoY2UpIHB0cl9tYXNrX2JpdHMoKGNlKS0+aW5mbGlnaHQsIDIpCisjZGVmaW5lIGlu
dGVsX2NvbnRleHRfaW5mbGlnaHRfY291bnQoY2UpICBwdHJfdW5tYXNrX2JpdHMoKGNlKS0+aW5m
bGlnaHQsIDIpCisjZGVmaW5lIGludGVsX2NvbnRleHRfaW5mbGlnaHRfaW5jKGNlKSBwdHJfY291
bnRfaW5jKCYoY2UpLT5pbmZsaWdodCkKKyNkZWZpbmUgaW50ZWxfY29udGV4dF9pbmZsaWdodF9k
ZWMoY2UpIHB0cl9jb3VudF9kZWMoJihjZSktPmluZmxpZ2h0KQogCiAJc3RydWN0IGxpc3RfaGVh
ZCBzaWduYWxfbGluazsKIAlzdHJ1Y3QgbGlzdF9oZWFkIHNpZ25hbHM7CmRpZmYgLS1naXQgYS9k
cml2ZXJzL2dwdS9kcm0vaTkxNS9ndC9pbnRlbF9lbmdpbmUuaCBiL2RyaXZlcnMvZ3B1L2RybS9p
OTE1L2d0L2ludGVsX2VuZ2luZS5oCmluZGV4IDJmMWM2ODcxZWU5NS4uOWJiNmZmNzY2ODBlIDEw
MDY0NAotLS0gYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9ndC9pbnRlbF9lbmdpbmUuaAorKysgYi9k
cml2ZXJzL2dwdS9kcm0vaTkxNS9ndC9pbnRlbF9lbmdpbmUuaApAQCAtMTI1LDcxICsxMjUsMjYg
QEAgaGFuZ2NoZWNrX2FjdGlvbl90b19zdHIoY29uc3QgZW51bSBpbnRlbF9lbmdpbmVfaGFuZ2No
ZWNrX2FjdGlvbiBhKQogCiB2b2lkIGludGVsX2VuZ2luZXNfc2V0X3NjaGVkdWxlcl9jYXBzKHN0
cnVjdCBkcm1faTkxNV9wcml2YXRlICppOTE1KTsKIAotc3RhdGljIGlubGluZSB2b2lkCi1leGVj
bGlzdHNfc2V0X2FjdGl2ZShzdHJ1Y3QgaW50ZWxfZW5naW5lX2V4ZWNsaXN0cyAqZXhlY2xpc3Rz
LAotCQkgICAgIHVuc2lnbmVkIGludCBiaXQpCi17Ci0JX19zZXRfYml0KGJpdCwgKHVuc2lnbmVk
IGxvbmcgKikmZXhlY2xpc3RzLT5hY3RpdmUpOwotfQotCi1zdGF0aWMgaW5saW5lIGJvb2wKLWV4
ZWNsaXN0c19zZXRfYWN0aXZlX29uY2Uoc3RydWN0IGludGVsX2VuZ2luZV9leGVjbGlzdHMgKmV4
ZWNsaXN0cywKLQkJCSAgdW5zaWduZWQgaW50IGJpdCkKLXsKLQlyZXR1cm4gIV9fdGVzdF9hbmRf
c2V0X2JpdChiaXQsICh1bnNpZ25lZCBsb25nICopJmV4ZWNsaXN0cy0+YWN0aXZlKTsKLX0KLQot
c3RhdGljIGlubGluZSB2b2lkCi1leGVjbGlzdHNfY2xlYXJfYWN0aXZlKHN0cnVjdCBpbnRlbF9l
bmdpbmVfZXhlY2xpc3RzICpleGVjbGlzdHMsCi0JCSAgICAgICB1bnNpZ25lZCBpbnQgYml0KQot
ewotCV9fY2xlYXJfYml0KGJpdCwgKHVuc2lnbmVkIGxvbmcgKikmZXhlY2xpc3RzLT5hY3RpdmUp
OwotfQotCi1zdGF0aWMgaW5saW5lIHZvaWQKLWV4ZWNsaXN0c19jbGVhcl9hbGxfYWN0aXZlKHN0
cnVjdCBpbnRlbF9lbmdpbmVfZXhlY2xpc3RzICpleGVjbGlzdHMpCitzdGF0aWMgaW5saW5lIHVu
c2lnbmVkIGludAorZXhlY2xpc3RzX251bV9wb3J0cyhjb25zdCBzdHJ1Y3QgaW50ZWxfZW5naW5l
X2V4ZWNsaXN0cyAqIGNvbnN0IGV4ZWNsaXN0cykKIHsKLQlleGVjbGlzdHMtPmFjdGl2ZSA9IDA7
CisJcmV0dXJuIGV4ZWNsaXN0cy0+cG9ydF9tYXNrICsgMTsKIH0KIAotc3RhdGljIGlubGluZSBi
b29sCi1leGVjbGlzdHNfaXNfYWN0aXZlKGNvbnN0IHN0cnVjdCBpbnRlbF9lbmdpbmVfZXhlY2xp
c3RzICpleGVjbGlzdHMsCi0JCSAgICB1bnNpZ25lZCBpbnQgYml0KQorc3RhdGljIGlubGluZSBz
dHJ1Y3QgaTkxNV9yZXF1ZXN0ICoKK2V4ZWNsaXN0c19hY3RpdmUoY29uc3Qgc3RydWN0IGludGVs
X2VuZ2luZV9leGVjbGlzdHMgKmV4ZWNsaXN0cykKIHsKLQlyZXR1cm4gdGVzdF9iaXQoYml0LCAo
dW5zaWduZWQgbG9uZyAqKSZleGVjbGlzdHMtPmFjdGl2ZSk7CisJR0VNX0JVR19PTihleGVjbGlz
dHMtPmFjdGl2ZSAtIGV4ZWNsaXN0cy0+aW5mbGlnaHQgPgorCQkgICBleGVjbGlzdHNfbnVtX3Bv
cnRzKGV4ZWNsaXN0cykpOworCXJldHVybiBSRUFEX09OQ0UoKmV4ZWNsaXN0cy0+YWN0aXZlKTsK
IH0KIAotdm9pZCBleGVjbGlzdHNfdXNlcl9iZWdpbihzdHJ1Y3QgaW50ZWxfZW5naW5lX2V4ZWNs
aXN0cyAqZXhlY2xpc3RzLAotCQkJICBjb25zdCBzdHJ1Y3QgZXhlY2xpc3RfcG9ydCAqcG9ydCk7
Ci12b2lkIGV4ZWNsaXN0c191c2VyX2VuZChzdHJ1Y3QgaW50ZWxfZW5naW5lX2V4ZWNsaXN0cyAq
ZXhlY2xpc3RzKTsKLQogdm9pZAogZXhlY2xpc3RzX2NhbmNlbF9wb3J0X3JlcXVlc3RzKHN0cnVj
dCBpbnRlbF9lbmdpbmVfZXhlY2xpc3RzICogY29uc3QgZXhlY2xpc3RzKTsKIAogc3RydWN0IGk5
MTVfcmVxdWVzdCAqCiBleGVjbGlzdHNfdW53aW5kX2luY29tcGxldGVfcmVxdWVzdHMoc3RydWN0
IGludGVsX2VuZ2luZV9leGVjbGlzdHMgKmV4ZWNsaXN0cyk7CiAKLXN0YXRpYyBpbmxpbmUgdW5z
aWduZWQgaW50Ci1leGVjbGlzdHNfbnVtX3BvcnRzKGNvbnN0IHN0cnVjdCBpbnRlbF9lbmdpbmVf
ZXhlY2xpc3RzICogY29uc3QgZXhlY2xpc3RzKQotewotCXJldHVybiBleGVjbGlzdHMtPnBvcnRf
bWFzayArIDE7Ci19Ci0KLXN0YXRpYyBpbmxpbmUgc3RydWN0IGV4ZWNsaXN0X3BvcnQgKgotZXhl
Y2xpc3RzX3BvcnRfY29tcGxldGUoc3RydWN0IGludGVsX2VuZ2luZV9leGVjbGlzdHMgKiBjb25z
dCBleGVjbGlzdHMsCi0JCQlzdHJ1Y3QgZXhlY2xpc3RfcG9ydCAqIGNvbnN0IHBvcnQpCi17Ci0J
Y29uc3QgdW5zaWduZWQgaW50IG0gPSBleGVjbGlzdHMtPnBvcnRfbWFzazsKLQotCUdFTV9CVUdf
T04ocG9ydF9pbmRleChwb3J0LCBleGVjbGlzdHMpICE9IDApOwotCUdFTV9CVUdfT04oIWV4ZWNs
aXN0c19pc19hY3RpdmUoZXhlY2xpc3RzLCBFWEVDTElTVFNfQUNUSVZFX1VTRVIpKTsKLQotCW1l
bW1vdmUocG9ydCwgcG9ydCArIDEsIG0gKiBzaXplb2Yoc3RydWN0IGV4ZWNsaXN0X3BvcnQpKTsK
LQltZW1zZXQocG9ydCArIG0sIDAsIHNpemVvZihzdHJ1Y3QgZXhlY2xpc3RfcG9ydCkpOwotCi0J
cmV0dXJuIHBvcnQ7Ci19Ci0KIHN0YXRpYyBpbmxpbmUgdTMyCiBpbnRlbF9yZWFkX3N0YXR1c19w
YWdlKGNvbnN0IHN0cnVjdCBpbnRlbF9lbmdpbmVfY3MgKmVuZ2luZSwgaW50IHJlZykKIHsKZGlm
ZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2d0L2ludGVsX2VuZ2luZV9jcy5jIGIvZHJp
dmVycy9ncHUvZHJtL2k5MTUvZ3QvaW50ZWxfZW5naW5lX2NzLmMKaW5kZXggN2ZkMzNlODFjMmQ5
Li5kNDUzMjhlMjU0ZGMgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2d0L2ludGVs
X2VuZ2luZV9jcy5jCisrKyBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2d0L2ludGVsX2VuZ2luZV9j
cy5jCkBAIC01MDgsNiArNTA4LDEwIEBAIHZvaWQgaW50ZWxfZW5naW5lX2luaXRfZXhlY2xpc3Rz
KHN0cnVjdCBpbnRlbF9lbmdpbmVfY3MgKmVuZ2luZSkKIAlHRU1fQlVHX09OKCFpc19wb3dlcl9v
Zl8yKGV4ZWNsaXN0c19udW1fcG9ydHMoZXhlY2xpc3RzKSkpOwogCUdFTV9CVUdfT04oZXhlY2xp
c3RzX251bV9wb3J0cyhleGVjbGlzdHMpID4gRVhFQ0xJU1RfTUFYX1BPUlRTKTsKIAorCW1lbXNl
dChleGVjbGlzdHMtPnBlbmRpbmcsIDAsIHNpemVvZihleGVjbGlzdHMtPnBlbmRpbmcpKTsKKwll
eGVjbGlzdHMtPmFjdGl2ZSA9CisJCW1lbXNldChleGVjbGlzdHMtPmluZmxpZ2h0LCAwLCBzaXpl
b2YoZXhlY2xpc3RzLT5pbmZsaWdodCkpOworCiAJZXhlY2xpc3RzLT5xdWV1ZV9wcmlvcml0eV9o
aW50ID0gSU5UX01JTjsKIAlleGVjbGlzdHMtPnF1ZXVlID0gUkJfUk9PVF9DQUNIRUQ7CiB9CkBA
IC0xMTUyLDcgKzExNTYsNyBAQCBib29sIGludGVsX2VuZ2luZV9pc19pZGxlKHN0cnVjdCBpbnRl
bF9lbmdpbmVfY3MgKmVuZ2luZSkKIAkJcmV0dXJuIHRydWU7CiAKIAkvKiBXYWl0aW5nIHRvIGRy
YWluIEVMU1A/ICovCi0JaWYgKFJFQURfT05DRShlbmdpbmUtPmV4ZWNsaXN0cy5hY3RpdmUpKSB7
CisJaWYgKGV4ZWNsaXN0c19hY3RpdmUoJmVuZ2luZS0+ZXhlY2xpc3RzKSkgewogCQlzdHJ1Y3Qg
dGFza2xldF9zdHJ1Y3QgKnQgPSAmZW5naW5lLT5leGVjbGlzdHMudGFza2xldDsKIAogCQlzeW5j
aHJvbml6ZV9oYXJkaXJxKGVuZ2luZS0+aTkxNS0+ZHJtLmlycSk7CkBAIC0xMTY5LDcgKzExNzMs
NyBAQCBib29sIGludGVsX2VuZ2luZV9pc19pZGxlKHN0cnVjdCBpbnRlbF9lbmdpbmVfY3MgKmVu
Z2luZSkKIAkJLyogT3RoZXJ3aXNlIGZsdXNoIHRoZSB0YXNrbGV0IGlmIGl0IHdhcyBvbiBhbm90
aGVyIGNwdSAqLwogCQl0YXNrbGV0X3VubG9ja193YWl0KHQpOwogCi0JCWlmIChSRUFEX09OQ0Uo
ZW5naW5lLT5leGVjbGlzdHMuYWN0aXZlKSkKKwkJaWYgKGV4ZWNsaXN0c19hY3RpdmUoJmVuZ2lu
ZS0+ZXhlY2xpc3RzKSkKIAkJCXJldHVybiBmYWxzZTsKIAl9CiAKQEAgLTEzNjcsNiArMTM3MSw3
IEBAIHN0YXRpYyB2b2lkIGludGVsX2VuZ2luZV9wcmludF9yZWdpc3RlcnMoc3RydWN0IGludGVs
X2VuZ2luZV9jcyAqZW5naW5lLAogCX0KIAogCWlmIChIQVNfRVhFQ0xJU1RTKGRldl9wcml2KSkg
eworCQlzdHJ1Y3QgaTkxNV9yZXF1ZXN0ICogY29uc3QgKnBvcnQsICpycTsKIAkJY29uc3QgdTMy
ICpod3MgPQogCQkJJmVuZ2luZS0+c3RhdHVzX3BhZ2UuYWRkcltJOTE1X0hXU19DU0JfQlVGMF9J
TkRFWF07CiAJCWNvbnN0IHU4IG51bV9lbnRyaWVzID0gZXhlY2xpc3RzLT5jc2Jfc2l6ZTsKQEAg
LTEzOTksMjcgKzE0MDQsMzMgQEAgc3RhdGljIHZvaWQgaW50ZWxfZW5naW5lX3ByaW50X3JlZ2lz
dGVycyhzdHJ1Y3QgaW50ZWxfZW5naW5lX2NzICplbmdpbmUsCiAJCX0KIAogCQlzcGluX2xvY2tf
aXJxc2F2ZSgmZW5naW5lLT5hY3RpdmUubG9jaywgZmxhZ3MpOwotCQlmb3IgKGlkeCA9IDA7IGlk
eCA8IGV4ZWNsaXN0c19udW1fcG9ydHMoZXhlY2xpc3RzKTsgaWR4KyspIHsKLQkJCXN0cnVjdCBp
OTE1X3JlcXVlc3QgKnJxOwotCQkJdW5zaWduZWQgaW50IGNvdW50OworCQlmb3IgKHBvcnQgPSBl
eGVjbGlzdHMtPmFjdGl2ZTsgKHJxID0gKnBvcnQpOyBwb3J0KyspIHsKKwkJCWNoYXIgaGRyWzgw
XTsKKwkJCWludCBsZW47CisKKwkJCWxlbiA9IHNucHJpbnRmKGhkciwgc2l6ZW9mKGhkciksCisJ
CQkJICAgICAgICJcdFx0QWN0aXZlWyVkOiAiLAorCQkJCSAgICAgICAoaW50KShwb3J0IC0gZXhl
Y2xpc3RzLT5hY3RpdmUpKTsKKwkJCWlmICghaTkxNV9yZXF1ZXN0X3NpZ25hbGVkKHJxKSkKKwkJ
CQlsZW4gKz0gc25wcmludGYoaGRyICsgbGVuLCBzaXplb2YoaGRyKSAtIGxlbiwKKwkJCQkJCSJy
aW5nOntzdGFydDolMDh4LCBod3NwOiUwOHgsIHNlcW5vOiUwOHh9LCAiLAorCQkJCQkJaTkxNV9n
Z3R0X29mZnNldChycS0+cmluZy0+dm1hKSwKKwkJCQkJCXJxLT50aW1lbGluZS0+aHdzcF9vZmZz
ZXQsCisJCQkJCQlod3NwX3NlcW5vKHJxKSk7CisJCQlzbnByaW50ZihoZHIgKyBsZW4sIHNpemVv
ZihoZHIpIC0gbGVuLCAicnE6ICIpOworCQkJcHJpbnRfcmVxdWVzdChtLCBycSwgaGRyKTsKKwkJ
fQorCQlmb3IgKHBvcnQgPSBleGVjbGlzdHMtPnBlbmRpbmc7IChycSA9ICpwb3J0KTsgcG9ydCsr
KSB7CiAJCQljaGFyIGhkcls4MF07CiAKLQkJCXJxID0gcG9ydF91bnBhY2soJmV4ZWNsaXN0cy0+
cG9ydFtpZHhdLCAmY291bnQpOwotCQkJaWYgKCFycSkgewotCQkJCWRybV9wcmludGYobSwgIlx0
XHRFTFNQWyVkXSBpZGxlXG4iLCBpZHgpOwotCQkJfSBlbHNlIGlmICghaTkxNV9yZXF1ZXN0X3Np
Z25hbGVkKHJxKSkgewotCQkJCXNucHJpbnRmKGhkciwgc2l6ZW9mKGhkciksCi0JCQkJCSAiXHRc
dEVMU1BbJWRdIGNvdW50PSVkLCByaW5nOntzdGFydDolMDh4LCBod3NwOiUwOHgsIHNlcW5vOiUw
OHh9LCBycTogIiwKLQkJCQkJIGlkeCwgY291bnQsCi0JCQkJCSBpOTE1X2dndHRfb2Zmc2V0KHJx
LT5yaW5nLT52bWEpLAotCQkJCQkgcnEtPnRpbWVsaW5lLT5od3NwX29mZnNldCwKLQkJCQkJIGh3
c3Bfc2Vxbm8ocnEpKTsKLQkJCQlwcmludF9yZXF1ZXN0KG0sIHJxLCBoZHIpOwotCQkJfSBlbHNl
IHsKLQkJCQlwcmludF9yZXF1ZXN0KG0sIHJxLCAiXHRcdEVMU1BbJWRdIHJxOiAiKTsKLQkJCX0K
KwkJCXNucHJpbnRmKGhkciwgc2l6ZW9mKGhkciksCisJCQkJICJcdFx0UGVuZGluZ1slZF0gcmlu
Zzp7c3RhcnQ6JTA4eCwgaHdzcDolMDh4LCBzZXFubzolMDh4fSwgcnE6ICIsCisJCQkJIChpbnQp
KHBvcnQgLSBleGVjbGlzdHMtPnBlbmRpbmcpLAorCQkJCSBpOTE1X2dndHRfb2Zmc2V0KHJxLT5y
aW5nLT52bWEpLAorCQkJCSBycS0+dGltZWxpbmUtPmh3c3Bfb2Zmc2V0LAorCQkJCSBod3NwX3Nl
cW5vKHJxKSk7CisJCQlwcmludF9yZXF1ZXN0KG0sIHJxLCBoZHIpOwogCQl9Ci0JCWRybV9wcmlu
dGYobSwgIlx0XHRIVyBhY3RpdmU/IDB4JXhcbiIsIGV4ZWNsaXN0cy0+YWN0aXZlKTsKIAkJc3Bp
bl91bmxvY2tfaXJxcmVzdG9yZSgmZW5naW5lLT5hY3RpdmUubG9jaywgZmxhZ3MpOwogCX0gZWxz
ZSBpZiAoSU5URUxfR0VOKGRldl9wcml2KSA+IDYpIHsKIAkJZHJtX3ByaW50ZihtLCAiXHRQUF9E
SVJfQkFTRTogMHglMDh4XG4iLApAQCAtMTU4MywxNSArMTU5NCwxOSBAQCBpbnQgaW50ZWxfZW5h
YmxlX2VuZ2luZV9zdGF0cyhzdHJ1Y3QgaW50ZWxfZW5naW5lX2NzICplbmdpbmUpCiAJfQogCiAJ
aWYgKGVuZ2luZS0+c3RhdHMuZW5hYmxlZCsrID09IDApIHsKLQkJY29uc3Qgc3RydWN0IGV4ZWNs
aXN0X3BvcnQgKnBvcnQgPSBleGVjbGlzdHMtPnBvcnQ7Ci0JCXVuc2lnbmVkIGludCBudW1fcG9y
dHMgPSBleGVjbGlzdHNfbnVtX3BvcnRzKGV4ZWNsaXN0cyk7CisJCXN0cnVjdCBpOTE1X3JlcXVl
c3QgKiBjb25zdCAqcG9ydDsKKwkJc3RydWN0IGk5MTVfcmVxdWVzdCAqcnE7CiAKIAkJZW5naW5l
LT5zdGF0cy5lbmFibGVkX2F0ID0ga3RpbWVfZ2V0KCk7CiAKIAkJLyogWFhYIHN1Ym1pc3Npb24g
bWV0aG9kIG9ibGl2aW91cz8gKi8KLQkJd2hpbGUgKG51bV9wb3J0cy0tICYmIHBvcnRfaXNzZXQo
cG9ydCkpIHsKKwkJZm9yIChwb3J0ID0gZXhlY2xpc3RzLT5hY3RpdmU7IChycSA9ICpwb3J0KTsg
cG9ydCsrKQogCQkJZW5naW5lLT5zdGF0cy5hY3RpdmUrKzsKLQkJCXBvcnQrKzsKKworCQlmb3Ig
KHBvcnQgPSBleGVjbGlzdHMtPnBlbmRpbmc7IChycSA9ICpwb3J0KTsgcG9ydCsrKSB7CisJCQkv
KiBFeGNsdWRlIGFueSBjb250ZXh0cyBhbHJlYWR5IGNvdW50ZWQgaW4gYWN0aXZlICovCisJCQlp
ZiAoaW50ZWxfY29udGV4dF9pbmZsaWdodF9jb3VudChycS0+aHdfY29udGV4dCkgPT0gMSkKKwkJ
CQllbmdpbmUtPnN0YXRzLmFjdGl2ZSsrOwogCQl9CiAKIAkJaWYgKGVuZ2luZS0+c3RhdHMuYWN0
aXZlKQpkaWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvZ3QvaW50ZWxfZW5naW5lX3R5
cGVzLmggYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9ndC9pbnRlbF9lbmdpbmVfdHlwZXMuaAppbmRl
eCA0M2U5NzVhMjYwMTYuLmI0ZjdiODFhM2MzZSAxMDA2NDQKLS0tIGEvZHJpdmVycy9ncHUvZHJt
L2k5MTUvZ3QvaW50ZWxfZW5naW5lX3R5cGVzLmgKKysrIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUv
Z3QvaW50ZWxfZW5naW5lX3R5cGVzLmgKQEAgLTE3Miw1MSArMTcyLDI4IEBAIHN0cnVjdCBpbnRl
bF9lbmdpbmVfZXhlY2xpc3RzIHsKIAkgKi8KIAl1MzIgX19pb21lbSAqY3RybF9yZWc7CiAKKyNk
ZWZpbmUgRVhFQ0xJU1RfTUFYX1BPUlRTIDIKKwkvKioKKwkgKiBAYWN0aXZlOiB0aGUgY3VycmVu
dGx5IGtub3duIGNvbnRleHQgZXhlY3V0aW5nIG9uIEhXCisJICovCisJc3RydWN0IGk5MTVfcmVx
dWVzdCAqIGNvbnN0ICphY3RpdmU7CiAJLyoqCi0JICogQHBvcnQ6IGV4ZWNsaXN0IHBvcnQgc3Rh
dGVzCisJICogQGluZmxpZ2h0OiB0aGUgc2V0IG9mIGNvbnRleHRzIHN1Ym1pdHRlZCBhbmQgYWNr
bm93bGVnZWQgYnkgSFcKIAkgKgotCSAqIEZvciBlYWNoIGhhcmR3YXJlIEVMU1AgKEV4ZWNMaXN0
IFN1Ym1pc3Npb24gUG9ydCkgd2Uga2VlcAotCSAqIHRyYWNrIG9mIHRoZSBsYXN0IHJlcXVlc3Qg
YW5kIHRoZSBudW1iZXIgb2YgdGltZXMgd2Ugc3VibWl0dGVkCi0JICogdGhhdCBwb3J0IHRvIGh3
LiBXZSB0aGVuIGNvdW50IHRoZSBudW1iZXIgb2YgdGltZXMgdGhlIGh3IHJlcG9ydHMKLQkgKiBh
IGNvbnRleHQgY29tcGxldGlvbiBvciBwcmVlbXB0aW9uLiBBcyBvbmx5IG9uZSBjb250ZXh0IGNh
bgotCSAqIGJlIGFjdGl2ZSBvbiBodywgd2UgbGltaXQgcmVzdWJtaXNzaW9uIG9mIGNvbnRleHQg
dG8gcG9ydFswXS4gVGhpcwotCSAqIGlzIGNhbGxlZCBMaXRlIFJlc3RvcmUsIG9mIHRoZSBjb250
ZXh0LgorCSAqIFRoZSBzZXQgb2YgaW5mbGlnaHQgY29udGV4dHMgaXMgbWFuYWdlZCBieSByZWFk
aW5nIENTIGV2ZW50cworCSAqIGZyb20gdGhlIEhXLiBPbiBhIGNvbnRleHQtc3dpdGNoIGV2ZW50
IChub3QgcHJlZW1wdGlvbiksIHdlCisJICoga25vdyB0aGUgSFcgaGFzIHRyYW5zaXRpb25lZCBm
cm9tIHBvcnQwIHRvIHBvcnQxLCBhbmQgd2UKKwkgKiBhZHZhbmNlIG91ciBpbmZsaWdodC9hY3Rp
dmUgdHJhY2tpbmcgYWNjb3JkaW5nbHkuCiAJICovCi0Jc3RydWN0IGV4ZWNsaXN0X3BvcnQgewot
CQkvKioKLQkJICogQHJlcXVlc3RfY291bnQ6IGNvbWJpbmVkIHJlcXVlc3QgYW5kIHN1Ym1pc3Np
b24gY291bnQKLQkJICovCi0JCXN0cnVjdCBpOTE1X3JlcXVlc3QgKnJlcXVlc3RfY291bnQ7Ci0j
ZGVmaW5lIEVYRUNMSVNUX0NPVU5UX0JJVFMgMgotI2RlZmluZSBwb3J0X3JlcXVlc3QocCkgcHRy
X21hc2tfYml0cygocCktPnJlcXVlc3RfY291bnQsIEVYRUNMSVNUX0NPVU5UX0JJVFMpCi0jZGVm
aW5lIHBvcnRfY291bnQocCkgcHRyX3VubWFza19iaXRzKChwKS0+cmVxdWVzdF9jb3VudCwgRVhF
Q0xJU1RfQ09VTlRfQklUUykKLSNkZWZpbmUgcG9ydF9wYWNrKHJxLCBjb3VudCkgcHRyX3BhY2tf
Yml0cyhycSwgY291bnQsIEVYRUNMSVNUX0NPVU5UX0JJVFMpCi0jZGVmaW5lIHBvcnRfdW5wYWNr
KHAsIGNvdW50KSBwdHJfdW5wYWNrX2JpdHMoKHApLT5yZXF1ZXN0X2NvdW50LCBjb3VudCwgRVhF
Q0xJU1RfQ09VTlRfQklUUykKLSNkZWZpbmUgcG9ydF9zZXQocCwgcGFja2VkKSAoKHApLT5yZXF1
ZXN0X2NvdW50ID0gKHBhY2tlZCkpCi0jZGVmaW5lIHBvcnRfaXNzZXQocCkgKChwKS0+cmVxdWVz
dF9jb3VudCkKLSNkZWZpbmUgcG9ydF9pbmRleChwLCBleGVjbGlzdHMpICgocCkgLSAoZXhlY2xp
c3RzKS0+cG9ydCkKLQotCQkvKioKLQkJICogQGNvbnRleHRfaWQ6IGNvbnRleHQgSUQgZm9yIHBv
cnQKLQkJICovCi0JCUdFTV9ERUJVR19ERUNMKHUzMiBjb250ZXh0X2lkKTsKLQotI2RlZmluZSBF
WEVDTElTVF9NQVhfUE9SVFMgMgotCX0gcG9ydFtFWEVDTElTVF9NQVhfUE9SVFNdOwotCisJc3Ry
dWN0IGk5MTVfcmVxdWVzdCAqaW5mbGlnaHRbRVhFQ0xJU1RfTUFYX1BPUlRTICsgMSAvKiBzZW50
aW5lbCAqL107CiAJLyoqCi0JICogQGFjdGl2ZTogaXMgdGhlIEhXIGFjdGl2ZT8gV2UgY29uc2lk
ZXIgdGhlIEhXIGFzIGFjdGl2ZSBhZnRlcgotCSAqIHN1Ym1pdHRpbmcgYW55IGNvbnRleHQgZm9y
IGV4ZWN1dGlvbiBhbmQgdW50aWwgd2UgaGF2ZSBzZWVuIHRoZQotCSAqIGxhc3QgY29udGV4dCBj
b21wbGV0aW9uIGV2ZW50LiBBZnRlciB0aGF0LCB3ZSBkbyBub3QgZXhwZWN0IGFueQotCSAqIG1v
cmUgZXZlbnRzIHVudGlsIHdlIHN1Ym1pdCwgYW5kIHNvIGNhbiBwYXJrIHRoZSBIVy4KKwkgKiBA
cGVuZGluZzogdGhlIG5leHQgc2V0IG9mIGNvbnRleHRzIHN1Ym1pdHRlZCB0byBFTFNQCiAJICoK
LQkgKiBBcyB3ZSBoYXZlIGEgc21hbGwgbnVtYmVyIG9mIGRpZmZlcmVudCBzb3VyY2VzIGZyb20g
d2hpY2ggd2UgZmVlZAotCSAqIHRoZSBIVywgd2UgdHJhY2sgdGhlIHN0YXRlIG9mIGVhY2ggaW5z
aWRlIGEgc2luZ2xlIGJpdGZpZWxkLgorCSAqIFdlIHN0b3JlIHRoZSBhcnJheSBvZiBjb250ZXh0
cyB0aGF0IHdlIHN1Ym1pdCB0byBIVyAodmlhIEVMU1ApIGFuZAorCSAqIHByb21vdGUgdGhlbSB0
byB0aGUgaW5mbGlnaHQgYXJyYXkgb25jZSBIVyBoYXMgc2lnbmFsZWQgdGhlCisJICogcHJlZW1w
dGlvbiBvciBpZGxlLXRvLWFjdGl2ZSBldmVudC4KIAkgKi8KLQl1bnNpZ25lZCBpbnQgYWN0aXZl
OwotI2RlZmluZSBFWEVDTElTVFNfQUNUSVZFX1VTRVIgMAotI2RlZmluZSBFWEVDTElTVFNfQUNU
SVZFX1BSRUVNUFQgMQotI2RlZmluZSBFWEVDTElTVFNfQUNUSVZFX0hXQUNLIDIKKwlzdHJ1Y3Qg
aTkxNV9yZXF1ZXN0ICpwZW5kaW5nW0VYRUNMSVNUX01BWF9QT1JUUyArIDFdOwogCiAJLyoqCiAJ
ICogQHBvcnRfbWFzazogbnVtYmVyIG9mIGV4ZWNsaXN0IHBvcnRzIC0gMQpAQCAtMjU3LDExICsy
MzQsNiBAQCBzdHJ1Y3QgaW50ZWxfZW5naW5lX2V4ZWNsaXN0cyB7CiAJICovCiAJdTMyICpjc2Jf
c3RhdHVzOwogCi0JLyoqCi0JICogQHByZWVtcHRfY29tcGxldGVfc3RhdHVzOiBleHBlY3RlZCBD
U0IgdXBvbiBjb21wbGV0aW5nIHByZWVtcHRpb24KLQkgKi8KLQl1MzIgcHJlZW1wdF9jb21wbGV0
ZV9zdGF0dXM7Ci0KIAkvKioKIAkgKiBAY3NiX3NpemU6IGNvbnRleHQgc3RhdHVzIGJ1ZmZlciBG
SUZPIHNpemUKIAkgKi8KZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2d0L2ludGVs
X2xyYy5jIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvZ3QvaW50ZWxfbHJjLmMKaW5kZXggODJiN2Fj
ZTYyZDk3Li5jYjlkMjg1YmQwMGEgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2d0
L2ludGVsX2xyYy5jCisrKyBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2d0L2ludGVsX2xyYy5jCkBA
IC0xNjEsNiArMTYxLDggQEAKICNkZWZpbmUgR0VOOF9DVFhfU1RBVFVTX0NPTVBMRVRFRF9NQVNL
IFwKIAkgKEdFTjhfQ1RYX1NUQVRVU19DT01QTEVURSB8IEdFTjhfQ1RYX1NUQVRVU19QUkVFTVBU
RUQpCiAKKyNkZWZpbmUgQ1RYX0RFU0NfRk9SQ0VfUkVTVE9SRSBCSVRfVUxMKDIpCisKIC8qIFR5
cGljYWwgc2l6ZSBvZiB0aGUgYXZlcmFnZSByZXF1ZXN0ICgyIHBpcGVjb250cm9scyBhbmQgYSBN
SV9CQikgKi8KICNkZWZpbmUgRVhFQ0xJU1RTX1JFUVVFU1RfU0laRSA2NCAvKiBieXRlcyAqLwog
I2RlZmluZSBXQV9UQUlMX0RXT1JEUyAyCkBAIC0yMjEsNiArMjIzLDI1IEBAIHN0YXRpYyB2b2lk
IGV4ZWNsaXN0c19pbml0X3JlZ19zdGF0ZSh1MzIgKnJlZ19zdGF0ZSwKIAkJCQkgICAgIHN0cnVj
dCBpbnRlbF9lbmdpbmVfY3MgKmVuZ2luZSwKIAkJCQkgICAgIHN0cnVjdCBpbnRlbF9yaW5nICpy
aW5nKTsKIAorc3RhdGljIGlubGluZSB1MzIgaW50ZWxfaHdzX3ByZWVtcHRfYWRkcmVzcyhzdHJ1
Y3QgaW50ZWxfZW5naW5lX2NzICplbmdpbmUpCit7CisJcmV0dXJuIChpOTE1X2dndHRfb2Zmc2V0
KGVuZ2luZS0+c3RhdHVzX3BhZ2Uudm1hKSArCisJCUk5MTVfR0VNX0hXU19QUkVFTVBUX0FERFIp
OworfQorCitzdGF0aWMgaW5saW5lIHZvaWQKK3Jpbmdfc2V0X3BhdXNlZChjb25zdCBzdHJ1Y3Qg
aW50ZWxfZW5naW5lX2NzICplbmdpbmUsIGludCBzdGF0ZSkKK3sKKwkvKgorCSAqIFdlIGluc3Bl
Y3QgSFdTX1BSRUVNUFQgd2l0aCBhIHNlbWFwaG9yZSBpbnNpZGUKKwkgKiBlbmdpbmUtPmVtaXRf
ZmluaV9icmVhZGNydW1iLiBJZiB0aGUgZHdvcmQgaXMgdHJ1ZSwKKwkgKiB0aGUgcmluZyBpcyBw
YXVzZWQgYXMgdGhlIHNlbWFwaG9yZSB3aWxsIGJ1c3l3YWl0CisJICogdW50aWwgdGhlIGR3b3Jk
IGlzIGZhbHNlLgorCSAqLworCWVuZ2luZS0+c3RhdHVzX3BhZ2UuYWRkcltJOTE1X0dFTV9IV1Nf
UFJFRU1QVF0gPSBzdGF0ZTsKKwl3bWIoKTsKK30KKwogc3RhdGljIGlubGluZSBzdHJ1Y3QgaTkx
NV9wcmlvbGlzdCAqdG9fcHJpb2xpc3Qoc3RydWN0IHJiX25vZGUgKnJiKQogewogCXJldHVybiBy
Yl9lbnRyeShyYiwgc3RydWN0IGk5MTVfcHJpb2xpc3QsIG5vZGUpOwpAQCAtMjcxLDEyICsyOTIs
NiBAQCBzdGF0aWMgaW5saW5lIGJvb2wgbmVlZF9wcmVlbXB0KGNvbnN0IHN0cnVjdCBpbnRlbF9l
bmdpbmVfY3MgKmVuZ2luZSwKIHsKIAlpbnQgbGFzdF9wcmlvOwogCi0JaWYgKCFlbmdpbmUtPnBy
ZWVtcHRfY29udGV4dCkKLQkJcmV0dXJuIGZhbHNlOwotCi0JaWYgKGk5MTVfcmVxdWVzdF9jb21w
bGV0ZWQocnEpKQotCQlyZXR1cm4gZmFsc2U7Ci0KIAkvKgogCSAqIENoZWNrIGlmIHRoZSBjdXJy
ZW50IHByaW9yaXR5IGhpbnQgbWVyaXRzIGEgcHJlZW1wdGlvbiBhdHRlbXB0LgogCSAqCkBAIC0z
MzgsOSArMzUzLDYgQEAgX19tYXliZV91bnVzZWQgc3RhdGljIGlubGluZSBib29sCiBhc3NlcnRf
cHJpb3JpdHlfcXVldWUoY29uc3Qgc3RydWN0IGk5MTVfcmVxdWVzdCAqcHJldiwKIAkJICAgICAg
Y29uc3Qgc3RydWN0IGk5MTVfcmVxdWVzdCAqbmV4dCkKIHsKLQljb25zdCBzdHJ1Y3QgaW50ZWxf
ZW5naW5lX2V4ZWNsaXN0cyAqZXhlY2xpc3RzID0KLQkJJnByZXYtPmVuZ2luZS0+ZXhlY2xpc3Rz
OwotCiAJLyoKIAkgKiBXaXRob3V0IHByZWVtcHRpb24sIHRoZSBwcmV2IG1heSByZWZlciB0byB0
aGUgc3RpbGwgYWN0aXZlIGVsZW1lbnQKIAkgKiB3aGljaCB3ZSByZWZ1c2UgdG8gbGV0IGdvLgpA
QCAtMzQ4LDcgKzM2MCw3IEBAIGFzc2VydF9wcmlvcml0eV9xdWV1ZShjb25zdCBzdHJ1Y3QgaTkx
NV9yZXF1ZXN0ICpwcmV2LAogCSAqIEV2ZW4gd2l0aCBwcmVlbXB0aW9uLCB0aGVyZSBhcmUgdGlt
ZXMgd2hlbiB3ZSB0aGluayBpdCBpcyBiZXR0ZXIgbm90CiAJICogdG8gcHJlZW1wdCBhbmQgbGVh
dmUgYW4gb3N0ZW5zaWJseSBsb3dlciBwcmlvcml0eSByZXF1ZXN0IGluIGZsaWdodC4KIAkgKi8K
LQlpZiAocG9ydF9yZXF1ZXN0KGV4ZWNsaXN0cy0+cG9ydCkgPT0gcHJldikKKwlpZiAoaTkxNV9y
ZXF1ZXN0X2lzX2FjdGl2ZShwcmV2KSkKIAkJcmV0dXJuIHRydWU7CiAKIAlyZXR1cm4gcnFfcHJp
byhwcmV2KSA+PSBycV9wcmlvKG5leHQpOwpAQCAtNDQyLDEzICs0NTQsMTEgQEAgX191bndpbmRf
aW5jb21wbGV0ZV9yZXF1ZXN0cyhzdHJ1Y3QgaW50ZWxfZW5naW5lX2NzICplbmdpbmUpCiAJCXN0
cnVjdCBpbnRlbF9lbmdpbmVfY3MgKm93bmVyOwogCiAJCWlmIChpOTE1X3JlcXVlc3RfY29tcGxl
dGVkKHJxKSkKLQkJCWJyZWFrOworCQkJY29udGludWU7IC8qIFhYWCAqLwogCiAJCV9faTkxNV9y
ZXF1ZXN0X3Vuc3VibWl0KHJxKTsKIAkJdW53aW5kX3dhX3RhaWwocnEpOwogCi0JCUdFTV9CVUdf
T04ocnEtPmh3X2NvbnRleHQtPmluZmxpZ2h0KTsKLQogCQkvKgogCQkgKiBQdXNoIHRoZSByZXF1
ZXN0IGJhY2sgaW50byB0aGUgcXVldWUgZm9yIGxhdGVyIHJlc3VibWlzc2lvbi4KIAkJICogSWYg
dGhpcyByZXF1ZXN0IGlzIG5vdCBuYXRpdmUgdG8gdGhpcyBwaHlzaWNhbCBlbmdpbmUgKGkuZS4K
QEAgLTUwMCwzMiArNTEwLDMyIEBAIGV4ZWNsaXN0c19jb250ZXh0X3N0YXR1c19jaGFuZ2Uoc3Ry
dWN0IGk5MTVfcmVxdWVzdCAqcnEsIHVuc2lnbmVkIGxvbmcgc3RhdHVzKQogCQkJCSAgIHN0YXR1
cywgcnEpOwogfQogCi1pbmxpbmUgdm9pZAotZXhlY2xpc3RzX3VzZXJfYmVnaW4oc3RydWN0IGlu
dGVsX2VuZ2luZV9leGVjbGlzdHMgKmV4ZWNsaXN0cywKLQkJICAgICBjb25zdCBzdHJ1Y3QgZXhl
Y2xpc3RfcG9ydCAqcG9ydCkKK3N0YXRpYyBpbmxpbmUgc3RydWN0IGk5MTVfcmVxdWVzdCAqCitl
eGVjbGlzdHNfc2NoZWR1bGVfaW4oc3RydWN0IGk5MTVfcmVxdWVzdCAqcnEsIGludCBpZHgpCiB7
Ci0JZXhlY2xpc3RzX3NldF9hY3RpdmVfb25jZShleGVjbGlzdHMsIEVYRUNMSVNUU19BQ1RJVkVf
VVNFUik7Ci19CisJc3RydWN0IGludGVsX2NvbnRleHQgKmNlID0gcnEtPmh3X2NvbnRleHQ7CisJ
aW50IGNvdW50OwogCi1pbmxpbmUgdm9pZAotZXhlY2xpc3RzX3VzZXJfZW5kKHN0cnVjdCBpbnRl
bF9lbmdpbmVfZXhlY2xpc3RzICpleGVjbGlzdHMpCi17Ci0JZXhlY2xpc3RzX2NsZWFyX2FjdGl2
ZShleGVjbGlzdHMsIEVYRUNMSVNUU19BQ1RJVkVfVVNFUik7Ci19CisJdHJhY2VfaTkxNV9yZXF1
ZXN0X2luKHJxLCBpZHgpOwogCi1zdGF0aWMgaW5saW5lIHZvaWQKLWV4ZWNsaXN0c19jb250ZXh0
X3NjaGVkdWxlX2luKHN0cnVjdCBpOTE1X3JlcXVlc3QgKnJxKQotewotCUdFTV9CVUdfT04ocnEt
Pmh3X2NvbnRleHQtPmluZmxpZ2h0KTsKKwljb3VudCA9IGludGVsX2NvbnRleHRfaW5mbGlnaHRf
Y291bnQoY2UpOworCWlmICghY291bnQpIHsKKwkJaW50ZWxfY29udGV4dF9nZXQoY2UpOworCQlj
ZS0+aW5mbGlnaHQgPSBycS0+ZW5naW5lOworCisJCWV4ZWNsaXN0c19jb250ZXh0X3N0YXR1c19j
aGFuZ2UocnEsIElOVEVMX0NPTlRFWFRfU0NIRURVTEVfSU4pOworCQlpbnRlbF9lbmdpbmVfY29u
dGV4dF9pbihjZS0+aW5mbGlnaHQpOworCX0KKworCWludGVsX2NvbnRleHRfaW5mbGlnaHRfaW5j
KGNlKTsKKwlHRU1fQlVHX09OKGludGVsX2NvbnRleHRfaW5mbGlnaHQoY2UpICE9IHJxLT5lbmdp
bmUpOwogCi0JZXhlY2xpc3RzX2NvbnRleHRfc3RhdHVzX2NoYW5nZShycSwgSU5URUxfQ09OVEVY
VF9TQ0hFRFVMRV9JTik7Ci0JaW50ZWxfZW5naW5lX2NvbnRleHRfaW4ocnEtPmVuZ2luZSk7Ci0J
cnEtPmh3X2NvbnRleHQtPmluZmxpZ2h0ID0gcnEtPmVuZ2luZTsKKwlyZXR1cm4gaTkxNV9yZXF1
ZXN0X2dldChycSk7CiB9CiAKLXN0YXRpYyB2b2lkIGtpY2tfc2libGluZ3Moc3RydWN0IGk5MTVf
cmVxdWVzdCAqcnEpCitzdGF0aWMgdm9pZCBraWNrX3NpYmxpbmdzKHN0cnVjdCBpOTE1X3JlcXVl
c3QgKnJxLCBzdHJ1Y3QgaW50ZWxfY29udGV4dCAqY2UpCiB7Ci0Jc3RydWN0IHZpcnR1YWxfZW5n
aW5lICp2ZSA9IHRvX3ZpcnR1YWxfZW5naW5lKHJxLT5od19jb250ZXh0LT5lbmdpbmUpOworCXN0
cnVjdCB2aXJ0dWFsX2VuZ2luZSAqdmUgPSBjb250YWluZXJfb2YoY2UsIHR5cGVvZigqdmUpLCBj
b250ZXh0KTsKIAlzdHJ1Y3QgaTkxNV9yZXF1ZXN0ICpuZXh0ID0gUkVBRF9PTkNFKHZlLT5yZXF1
ZXN0KTsKIAogCWlmIChuZXh0ICYmIG5leHQtPmV4ZWN1dGlvbl9tYXNrICYgfnJxLT5leGVjdXRp
b25fbWFzaykKQEAgLTUzMywyOSArNTQzLDQyIEBAIHN0YXRpYyB2b2lkIGtpY2tfc2libGluZ3Mo
c3RydWN0IGk5MTVfcmVxdWVzdCAqcnEpCiB9CiAKIHN0YXRpYyBpbmxpbmUgdm9pZAotZXhlY2xp
c3RzX2NvbnRleHRfc2NoZWR1bGVfb3V0KHN0cnVjdCBpOTE1X3JlcXVlc3QgKnJxLCB1bnNpZ25l
ZCBsb25nIHN0YXR1cykKK2V4ZWNsaXN0c19zY2hlZHVsZV9vdXQoc3RydWN0IGk5MTVfcmVxdWVz
dCAqcnEpCiB7Ci0JcnEtPmh3X2NvbnRleHQtPmluZmxpZ2h0ID0gTlVMTDsKLQlpbnRlbF9lbmdp
bmVfY29udGV4dF9vdXQocnEtPmVuZ2luZSk7Ci0JZXhlY2xpc3RzX2NvbnRleHRfc3RhdHVzX2No
YW5nZShycSwgc3RhdHVzKTsKKwlzdHJ1Y3QgaW50ZWxfY29udGV4dCAqY2UgPSBycS0+aHdfY29u
dGV4dDsKKworCUdFTV9CVUdfT04oIWludGVsX2NvbnRleHRfaW5mbGlnaHRfY291bnQoY2UpKTsK
KwogCXRyYWNlX2k5MTVfcmVxdWVzdF9vdXQocnEpOwogCi0JLyoKLQkgKiBJZiB0aGlzIGlzIHBh
cnQgb2YgYSB2aXJ0dWFsIGVuZ2luZSwgaXRzIG5leHQgcmVxdWVzdCBtYXkgaGF2ZQotCSAqIGJl
ZW4gYmxvY2tlZCB3YWl0aW5nIGZvciBhY2Nlc3MgdG8gdGhlIGFjdGl2ZSBjb250ZXh0LiBXZSBo
YXZlCi0JICogdG8ga2ljayBhbGwgdGhlIHNpYmxpbmdzIGFnYWluIGluIGNhc2Ugd2UgbmVlZCB0
byBzd2l0Y2ggKGUuZy4KLQkgKiB0aGUgbmV4dCByZXF1ZXN0IGlzIG5vdCBydW5uYWJsZSBvbiB0
aGlzIGVuZ2luZSkuIEhvcGVmdWxseSwKLQkgKiB3ZSB3aWxsIGFscmVhZHkgaGF2ZSBzdWJtaXR0
ZWQgdGhlIG5leHQgcmVxdWVzdCBiZWZvcmUgdGhlCi0JICogdGFza2xldCBydW5zIGFuZCBkbyBu
b3QgbmVlZCB0byByZWJ1aWxkIGVhY2ggdmlydHVhbCB0cmVlCi0JICogYW5kIGtpY2sgZXZlcnlv
bmUgYWdhaW4uCi0JICovCi0JaWYgKHJxLT5lbmdpbmUgIT0gcnEtPmh3X2NvbnRleHQtPmVuZ2lu
ZSkKLQkJa2lja19zaWJsaW5ncyhycSk7CisJaW50ZWxfY29udGV4dF9pbmZsaWdodF9kZWMoY2Up
OworCWlmICghaW50ZWxfY29udGV4dF9pbmZsaWdodF9jb3VudChjZSkpIHsKKwkJaW50ZWxfZW5n
aW5lX2NvbnRleHRfb3V0KGNlLT5pbmZsaWdodCk7CisJCWV4ZWNsaXN0c19jb250ZXh0X3N0YXR1
c19jaGFuZ2UocnEsIElOVEVMX0NPTlRFWFRfU0NIRURVTEVfT1VUKTsKKworCQljZS0+aW5mbGln
aHQgPSBOVUxMOworCQlpbnRlbF9jb250ZXh0X3B1dChjZSk7CisKKwkJLyoKKwkJICogSWYgdGhp
cyBpcyBwYXJ0IG9mIGEgdmlydHVhbCBlbmdpbmUsIGl0cyBuZXh0IHJlcXVlc3QgbWF5CisJCSAq
IGhhdmUgYmVlbiBibG9ja2VkIHdhaXRpbmcgZm9yIGFjY2VzcyB0byB0aGUgYWN0aXZlIGNvbnRl
eHQuCisJCSAqIFdlIGhhdmUgdG8ga2ljayBhbGwgdGhlIHNpYmxpbmdzIGFnYWluIGluIGNhc2Ug
d2UgbmVlZCB0bworCQkgKiBzd2l0Y2ggKGUuZy4gdGhlIG5leHQgcmVxdWVzdCBpcyBub3QgcnVu
bmFibGUgb24gdGhpcworCQkgKiBlbmdpbmUpLiBIb3BlZnVsbHksIHdlIHdpbGwgYWxyZWFkeSBo
YXZlIHN1Ym1pdHRlZCB0aGUgbmV4dAorCQkgKiByZXF1ZXN0IGJlZm9yZSB0aGUgdGFza2xldCBy
dW5zIGFuZCBkbyBub3QgbmVlZCB0byByZWJ1aWxkCisJCSAqIGVhY2ggdmlydHVhbCB0cmVlIGFu
ZCBraWNrIGV2ZXJ5b25lIGFnYWluLgorCQkgKi8KKwkJaWYgKHJxLT5lbmdpbmUgIT0gY2UtPmVu
Z2luZSkKKwkJCWtpY2tfc2libGluZ3MocnEsIGNlKTsKKwl9CisKKwlpOTE1X3JlcXVlc3RfcHV0
KHJxKTsKIH0KIAotc3RhdGljIHU2NCBleGVjbGlzdHNfdXBkYXRlX2NvbnRleHQoc3RydWN0IGk5
MTVfcmVxdWVzdCAqcnEpCitzdGF0aWMgdTY0IGV4ZWNsaXN0c191cGRhdGVfY29udGV4dChjb25z
dCBzdHJ1Y3QgaTkxNV9yZXF1ZXN0ICpycSkKIHsKIAlzdHJ1Y3QgaW50ZWxfY29udGV4dCAqY2Ug
PSBycS0+aHdfY29udGV4dDsKKwl1NjQgZGVzYzsKIAogCWNlLT5scmNfcmVnX3N0YXRlW0NUWF9S
SU5HX1RBSUwgKyAxXSA9CiAJCWludGVsX3Jpbmdfc2V0X3RhaWwocnEtPnJpbmcsIHJxLT50YWls
KTsKQEAgLTU3Niw3ICs1OTksMTEgQEAgc3RhdGljIHU2NCBleGVjbGlzdHNfdXBkYXRlX2NvbnRl
eHQoc3RydWN0IGk5MTVfcmVxdWVzdCAqcnEpCiAJICogd21iKS4KIAkgKi8KIAltYigpOwotCXJl
dHVybiBjZS0+bHJjX2Rlc2M7CisKKwlkZXNjID0gY2UtPmxyY19kZXNjOworCWNlLT5scmNfZGVz
YyAmPSB+Q1RYX0RFU0NfRk9SQ0VfUkVTVE9SRTsKKworCXJldHVybiBkZXNjOwogfQogCiBzdGF0
aWMgaW5saW5lIHZvaWQgd3JpdGVfZGVzYyhzdHJ1Y3QgaW50ZWxfZW5naW5lX2V4ZWNsaXN0cyAq
ZXhlY2xpc3RzLCB1NjQgZGVzYywgdTMyIHBvcnQpCkBAIC01OTAsMTIgKzYxNyw2MiBAQCBzdGF0
aWMgaW5saW5lIHZvaWQgd3JpdGVfZGVzYyhzdHJ1Y3QgaW50ZWxfZW5naW5lX2V4ZWNsaXN0cyAq
ZXhlY2xpc3RzLCB1NjQgZGVzYwogCX0KIH0KIAorc3RhdGljIF9fbWF5YmVfdW51c2VkIHZvaWQK
K3RyYWNlX3BvcnRzKGNvbnN0IHN0cnVjdCBpbnRlbF9lbmdpbmVfZXhlY2xpc3RzICpleGVjbGlz
dHMsCisJICAgIGNvbnN0IGNoYXIgKm1zZywKKwkgICAgc3RydWN0IGk5MTVfcmVxdWVzdCAqIGNv
bnN0ICpwb3J0cykKK3sKKwljb25zdCBzdHJ1Y3QgaW50ZWxfZW5naW5lX2NzICplbmdpbmUgPQor
CQljb250YWluZXJfb2YoZXhlY2xpc3RzLCB0eXBlb2YoKmVuZ2luZSksIGV4ZWNsaXN0cyk7CisK
KwlHRU1fVFJBQ0UoIiVzOiAlcyB7ICVsbHg6JWxsZCVzLCAlbGx4OiVsbGQgfVxuIiwKKwkJICBl
bmdpbmUtPm5hbWUsIG1zZywKKwkJICBwb3J0c1swXS0+ZmVuY2UuY29udGV4dCwKKwkJICBwb3J0
c1swXS0+ZmVuY2Uuc2Vxbm8sCisJCSAgaTkxNV9yZXF1ZXN0X2NvbXBsZXRlZChwb3J0c1swXSkg
PyAiISIgOgorCQkgIGk5MTVfcmVxdWVzdF9zdGFydGVkKHBvcnRzWzBdKSA/ICIqIiA6CisJCSAg
IiIsCisJCSAgcG9ydHNbMV0gPyBwb3J0c1sxXS0+ZmVuY2UuY29udGV4dCA6IDAsCisJCSAgcG9y
dHNbMV0gPyBwb3J0c1sxXS0+ZmVuY2Uuc2Vxbm8gOiAwKTsKK30KKworc3RhdGljIF9fbWF5YmVf
dW51c2VkIGJvb2wKK2Fzc2VydF9wZW5kaW5nX3ZhbGlkKGNvbnN0IHN0cnVjdCBpbnRlbF9lbmdp
bmVfZXhlY2xpc3RzICpleGVjbGlzdHMsCisJCSAgICAgY29uc3QgY2hhciAqbXNnKQoreworCXN0
cnVjdCBpOTE1X3JlcXVlc3QgKiBjb25zdCAqcG9ydCwgKnJxOworCXN0cnVjdCBpbnRlbF9jb250
ZXh0ICpjZSA9IE5VTEw7CisKKwl0cmFjZV9wb3J0cyhleGVjbGlzdHMsIG1zZywgZXhlY2xpc3Rz
LT5wZW5kaW5nKTsKKworCWlmIChleGVjbGlzdHMtPnBlbmRpbmdbZXhlY2xpc3RzX251bV9wb3J0
cyhleGVjbGlzdHMpXSkKKwkJcmV0dXJuIGZhbHNlOworCisJZm9yIChwb3J0ID0gZXhlY2xpc3Rz
LT5wZW5kaW5nOyAocnEgPSAqcG9ydCk7IHBvcnQrKykgeworCQlpZiAoY2UgPT0gcnEtPmh3X2Nv
bnRleHQpCisJCQlyZXR1cm4gZmFsc2U7CisKKwkJY2UgPSBycS0+aHdfY29udGV4dDsKKwkJaWYg
KGk5MTVfcmVxdWVzdF9jb21wbGV0ZWQocnEpKQorCQkJY29udGludWU7CisKKwkJaWYgKGk5MTVf
YWN0aXZlX2lzX2lkbGUoJmNlLT5hY3RpdmUpKQorCQkJcmV0dXJuIGZhbHNlOworCisJCWlmICgh
aTkxNV92bWFfaXNfcGlubmVkKGNlLT5zdGF0ZSkpCisJCQlyZXR1cm4gZmFsc2U7CisJfQorCisJ
cmV0dXJuIGNlOworfQorCiBzdGF0aWMgdm9pZCBleGVjbGlzdHNfc3VibWl0X3BvcnRzKHN0cnVj
dCBpbnRlbF9lbmdpbmVfY3MgKmVuZ2luZSkKIHsKIAlzdHJ1Y3QgaW50ZWxfZW5naW5lX2V4ZWNs
aXN0cyAqZXhlY2xpc3RzID0gJmVuZ2luZS0+ZXhlY2xpc3RzOwotCXN0cnVjdCBleGVjbGlzdF9w
b3J0ICpwb3J0ID0gZXhlY2xpc3RzLT5wb3J0OwogCXVuc2lnbmVkIGludCBuOwogCisJR0VNX0JV
R19PTighYXNzZXJ0X3BlbmRpbmdfdmFsaWQoZXhlY2xpc3RzLCAic3VibWl0IikpOworCiAJLyoK
IAkgKiBXZSBjYW4gc2tpcCBhY3F1aXJpbmcgaW50ZWxfcnVudGltZV9wbV9nZXQoKSBoZXJlIGFz
IGl0IHdhcyB0YWtlbgogCSAqIG9uIG91ciBiZWhhbGYgYnkgdGhlIHJlcXVlc3QgKHNlZSBpOTE1
X2dlbV9tYXJrX2J1c3koKSkgYW5kIGl0IHdpbGwKQEAgLTYxMywzOCArNjkwLDE2IEBAIHN0YXRp
YyB2b2lkIGV4ZWNsaXN0c19zdWJtaXRfcG9ydHMoc3RydWN0IGludGVsX2VuZ2luZV9jcyAqZW5n
aW5lKQogCSAqIG9mIGVsc3EgZW50cmllcywga2VlcCB0aGlzIGluIG1pbmQgYmVmb3JlIGNoYW5n
aW5nIHRoZSBsb29wIGJlbG93LgogCSAqLwogCWZvciAobiA9IGV4ZWNsaXN0c19udW1fcG9ydHMo
ZXhlY2xpc3RzKTsgbi0tOyApIHsKLQkJc3RydWN0IGk5MTVfcmVxdWVzdCAqcnE7Ci0JCXVuc2ln
bmVkIGludCBjb3VudDsKLQkJdTY0IGRlc2M7CisJCXN0cnVjdCBpOTE1X3JlcXVlc3QgKnJxID0g
ZXhlY2xpc3RzLT5wZW5kaW5nW25dOwogCi0JCXJxID0gcG9ydF91bnBhY2soJnBvcnRbbl0sICZj
b3VudCk7Ci0JCWlmIChycSkgewotCQkJR0VNX0JVR19PTihjb3VudCA+ICFuKTsKLQkJCWlmICgh
Y291bnQrKykKLQkJCQlleGVjbGlzdHNfY29udGV4dF9zY2hlZHVsZV9pbihycSk7Ci0JCQlwb3J0
X3NldCgmcG9ydFtuXSwgcG9ydF9wYWNrKHJxLCBjb3VudCkpOwotCQkJZGVzYyA9IGV4ZWNsaXN0
c191cGRhdGVfY29udGV4dChycSk7Ci0JCQlHRU1fREVCVUdfRVhFQyhwb3J0W25dLmNvbnRleHRf
aWQgPSB1cHBlcl8zMl9iaXRzKGRlc2MpKTsKLQotCQkJR0VNX1RSQUNFKCIlcyBpblslZF06ICBj
dHg9JWQuJWQsIGZlbmNlICVsbHg6JWxsZCAoY3VycmVudCAlZCksIHByaW89JWRcbiIsCi0JCQkJ
ICBlbmdpbmUtPm5hbWUsIG4sCi0JCQkJICBwb3J0W25dLmNvbnRleHRfaWQsIGNvdW50LAotCQkJ
CSAgcnEtPmZlbmNlLmNvbnRleHQsIHJxLT5mZW5jZS5zZXFubywKLQkJCQkgIGh3c3Bfc2Vxbm8o
cnEpLAotCQkJCSAgcnFfcHJpbyhycSkpOwotCQl9IGVsc2UgewotCQkJR0VNX0JVR19PTighbik7
Ci0JCQlkZXNjID0gMDsKLQkJfQotCi0JCXdyaXRlX2Rlc2MoZXhlY2xpc3RzLCBkZXNjLCBuKTsK
KwkJd3JpdGVfZGVzYyhleGVjbGlzdHMsCisJCQkgICBycSA/IGV4ZWNsaXN0c191cGRhdGVfY29u
dGV4dChycSkgOiAwLAorCQkJICAgbik7CiAJfQogCiAJLyogd2UgbmVlZCB0byBtYW51YWxseSBs
b2FkIHRoZSBzdWJtaXQgcXVldWUgKi8KIAlpZiAoZXhlY2xpc3RzLT5jdHJsX3JlZykKIAkJd3Jp
dGVsKEVMX0NUUkxfTE9BRCwgZXhlY2xpc3RzLT5jdHJsX3JlZyk7Ci0KLQlleGVjbGlzdHNfY2xl
YXJfYWN0aXZlKGV4ZWNsaXN0cywgRVhFQ0xJU1RTX0FDVElWRV9IV0FDSyk7CiB9CiAKIHN0YXRp
YyBib29sIGN0eF9zaW5nbGVfcG9ydF9zdWJtaXNzaW9uKGNvbnN0IHN0cnVjdCBpbnRlbF9jb250
ZXh0ICpjZSkKQEAgLTY2OCw2ICs3MjMsNyBAQCBzdGF0aWMgYm9vbCBjYW5fbWVyZ2VfY3R4KGNv
bnN0IHN0cnVjdCBpbnRlbF9jb250ZXh0ICpwcmV2LAogc3RhdGljIGJvb2wgY2FuX21lcmdlX3Jx
KGNvbnN0IHN0cnVjdCBpOTE1X3JlcXVlc3QgKnByZXYsCiAJCQkgY29uc3Qgc3RydWN0IGk5MTVf
cmVxdWVzdCAqbmV4dCkKIHsKKwlHRU1fQlVHX09OKHByZXYgPT0gbmV4dCk7CiAJR0VNX0JVR19P
TighYXNzZXJ0X3ByaW9yaXR5X3F1ZXVlKHByZXYsIG5leHQpKTsKIAogCWlmICghY2FuX21lcmdl
X2N0eChwcmV2LT5od19jb250ZXh0LCBuZXh0LT5od19jb250ZXh0KSkKQEAgLTY3Niw1OCArNzMy
LDYgQEAgc3RhdGljIGJvb2wgY2FuX21lcmdlX3JxKGNvbnN0IHN0cnVjdCBpOTE1X3JlcXVlc3Qg
KnByZXYsCiAJcmV0dXJuIHRydWU7CiB9CiAKLXN0YXRpYyB2b2lkIHBvcnRfYXNzaWduKHN0cnVj
dCBleGVjbGlzdF9wb3J0ICpwb3J0LCBzdHJ1Y3QgaTkxNV9yZXF1ZXN0ICpycSkKLXsKLQlHRU1f
QlVHX09OKHJxID09IHBvcnRfcmVxdWVzdChwb3J0KSk7Ci0KLQlpZiAocG9ydF9pc3NldChwb3J0
KSkKLQkJaTkxNV9yZXF1ZXN0X3B1dChwb3J0X3JlcXVlc3QocG9ydCkpOwotCi0JcG9ydF9zZXQo
cG9ydCwgcG9ydF9wYWNrKGk5MTVfcmVxdWVzdF9nZXQocnEpLCBwb3J0X2NvdW50KHBvcnQpKSk7
Ci19Ci0KLXN0YXRpYyB2b2lkIGluamVjdF9wcmVlbXB0X2NvbnRleHQoc3RydWN0IGludGVsX2Vu
Z2luZV9jcyAqZW5naW5lKQotewotCXN0cnVjdCBpbnRlbF9lbmdpbmVfZXhlY2xpc3RzICpleGVj
bGlzdHMgPSAmZW5naW5lLT5leGVjbGlzdHM7Ci0Jc3RydWN0IGludGVsX2NvbnRleHQgKmNlID0g
ZW5naW5lLT5wcmVlbXB0X2NvbnRleHQ7Ci0JdW5zaWduZWQgaW50IG47Ci0KLQlHRU1fQlVHX09O
KGV4ZWNsaXN0cy0+cHJlZW1wdF9jb21wbGV0ZV9zdGF0dXMgIT0KLQkJICAgdXBwZXJfMzJfYml0
cyhjZS0+bHJjX2Rlc2MpKTsKLQotCS8qCi0JICogU3dpdGNoIHRvIG91ciBlbXB0eSBwcmVlbXB0
IGNvbnRleHQgc28KLQkgKiB0aGUgc3RhdGUgb2YgdGhlIEdQVSBpcyBrbm93biAoaWRsZSkuCi0J
ICovCi0JR0VNX1RSQUNFKCIlc1xuIiwgZW5naW5lLT5uYW1lKTsKLQlmb3IgKG4gPSBleGVjbGlz
dHNfbnVtX3BvcnRzKGV4ZWNsaXN0cyk7IC0tbjsgKQotCQl3cml0ZV9kZXNjKGV4ZWNsaXN0cywg
MCwgbik7Ci0KLQl3cml0ZV9kZXNjKGV4ZWNsaXN0cywgY2UtPmxyY19kZXNjLCBuKTsKLQotCS8q
IHdlIG5lZWQgdG8gbWFudWFsbHkgbG9hZCB0aGUgc3VibWl0IHF1ZXVlICovCi0JaWYgKGV4ZWNs
aXN0cy0+Y3RybF9yZWcpCi0JCXdyaXRlbChFTF9DVFJMX0xPQUQsIGV4ZWNsaXN0cy0+Y3RybF9y
ZWcpOwotCi0JZXhlY2xpc3RzX2NsZWFyX2FjdGl2ZShleGVjbGlzdHMsIEVYRUNMSVNUU19BQ1RJ
VkVfSFdBQ0spOwotCWV4ZWNsaXN0c19zZXRfYWN0aXZlKGV4ZWNsaXN0cywgRVhFQ0xJU1RTX0FD
VElWRV9QUkVFTVBUKTsKLQotCSh2b2lkKUk5MTVfU0VMRlRFU1RfT05MWShleGVjbGlzdHMtPnBy
ZWVtcHRfaGFuZy5jb3VudCsrKTsKLX0KLQotc3RhdGljIHZvaWQgY29tcGxldGVfcHJlZW1wdF9j
b250ZXh0KHN0cnVjdCBpbnRlbF9lbmdpbmVfZXhlY2xpc3RzICpleGVjbGlzdHMpCi17Ci0JR0VN
X0JVR19PTighZXhlY2xpc3RzX2lzX2FjdGl2ZShleGVjbGlzdHMsIEVYRUNMSVNUU19BQ1RJVkVf
UFJFRU1QVCkpOwotCi0JaWYgKGluamVjdF9wcmVlbXB0X2hhbmcoZXhlY2xpc3RzKSkKLQkJcmV0
dXJuOwotCi0JZXhlY2xpc3RzX2NhbmNlbF9wb3J0X3JlcXVlc3RzKGV4ZWNsaXN0cyk7Ci0JX191
bndpbmRfaW5jb21wbGV0ZV9yZXF1ZXN0cyhjb250YWluZXJfb2YoZXhlY2xpc3RzLAotCQkJCQkJ
ICBzdHJ1Y3QgaW50ZWxfZW5naW5lX2NzLAotCQkJCQkJICBleGVjbGlzdHMpKTsKLX0KLQogc3Rh
dGljIHZvaWQgdmlydHVhbF91cGRhdGVfcmVnaXN0ZXJfb2Zmc2V0cyh1MzIgKnJlZ3MsCiAJCQkJ
CSAgICBzdHJ1Y3QgaW50ZWxfZW5naW5lX2NzICplbmdpbmUpCiB7CkBAIC03OTIsNyArNzk2LDcg
QEAgc3RhdGljIGJvb2wgdmlydHVhbF9tYXRjaGVzKGNvbnN0IHN0cnVjdCB2aXJ0dWFsX2VuZ2lu
ZSAqdmUsCiAJICogd2UgcmV1c2UgdGhlIHJlZ2lzdGVyIG9mZnNldHMpLiBUaGlzIGlzIGEgdmVy
eSBzbWFsbAogCSAqIGh5c3RlcnNpcyBvbiB0aGUgZ3JlZWR5IHNlZWxjdGlvbiBhbGdvcml0aG0u
CiAJICovCi0JaW5mbGlnaHQgPSBSRUFEX09OQ0UodmUtPmNvbnRleHQuaW5mbGlnaHQpOworCWlu
ZmxpZ2h0ID0gaW50ZWxfY29udGV4dF9pbmZsaWdodCgmdmUtPmNvbnRleHQpOwogCWlmIChpbmZs
aWdodCAmJiBpbmZsaWdodCAhPSBlbmdpbmUpCiAJCXJldHVybiBmYWxzZTsKIApAQCAtODE1LDEz
ICs4MTksMjMgQEAgc3RhdGljIHZvaWQgdmlydHVhbF94ZmVyX2JyZWFkY3J1bWJzKHN0cnVjdCB2
aXJ0dWFsX2VuZ2luZSAqdmUsCiAJc3Bpbl91bmxvY2soJm9sZC0+YnJlYWRjcnVtYnMuaXJxX2xv
Y2spOwogfQogCitzdGF0aWMgc3RydWN0IGk5MTVfcmVxdWVzdCAqCitsYXN0X2FjdGl2ZShjb25z
dCBzdHJ1Y3QgaW50ZWxfZW5naW5lX2V4ZWNsaXN0cyAqZXhlY2xpc3RzKQoreworCXN0cnVjdCBp
OTE1X3JlcXVlc3QgKiBjb25zdCAqbGFzdCA9IGV4ZWNsaXN0cy0+YWN0aXZlOworCisJd2hpbGUg
KCpsYXN0ICYmIGk5MTVfcmVxdWVzdF9jb21wbGV0ZWQoKmxhc3QpKQorCQlsYXN0Kys7CisKKwly
ZXR1cm4gKmxhc3Q7Cit9CisKIHN0YXRpYyB2b2lkIGV4ZWNsaXN0c19kZXF1ZXVlKHN0cnVjdCBp
bnRlbF9lbmdpbmVfY3MgKmVuZ2luZSkKIHsKIAlzdHJ1Y3QgaW50ZWxfZW5naW5lX2V4ZWNsaXN0
cyAqIGNvbnN0IGV4ZWNsaXN0cyA9ICZlbmdpbmUtPmV4ZWNsaXN0czsKLQlzdHJ1Y3QgZXhlY2xp
c3RfcG9ydCAqcG9ydCA9IGV4ZWNsaXN0cy0+cG9ydDsKLQljb25zdCBzdHJ1Y3QgZXhlY2xpc3Rf
cG9ydCAqIGNvbnN0IGxhc3RfcG9ydCA9Ci0JCSZleGVjbGlzdHMtPnBvcnRbZXhlY2xpc3RzLT5w
b3J0X21hc2tdOwotCXN0cnVjdCBpOTE1X3JlcXVlc3QgKmxhc3QgPSBwb3J0X3JlcXVlc3QocG9y
dCk7CisJc3RydWN0IGk5MTVfcmVxdWVzdCAqKnBvcnQgPSBleGVjbGlzdHMtPnBlbmRpbmc7CisJ
c3RydWN0IGk5MTVfcmVxdWVzdCAqKiBjb25zdCBsYXN0X3BvcnQgPSBwb3J0ICsgZXhlY2xpc3Rz
LT5wb3J0X21hc2s7CisJc3RydWN0IGk5MTVfcmVxdWVzdCAqbGFzdDsKIAlzdHJ1Y3QgcmJfbm9k
ZSAqcmI7CiAJYm9vbCBzdWJtaXQgPSBmYWxzZTsKIApAQCAtODY3LDY1ICs4ODEsNzIgQEAgc3Rh
dGljIHZvaWQgZXhlY2xpc3RzX2RlcXVldWUoc3RydWN0IGludGVsX2VuZ2luZV9jcyAqZW5naW5l
KQogCQlicmVhazsKIAl9CiAKKwkvKgorCSAqIElmIHRoZSBxdWV1ZSBpcyBoaWdoZXIgcHJpb3Jp
dHkgdGhhbiB0aGUgbGFzdAorCSAqIHJlcXVlc3QgaW4gdGhlIGN1cnJlbnRseSBhY3RpdmUgY29u
dGV4dCwgc3VibWl0IGFmcmVzaC4KKwkgKiBXZSB3aWxsIHJlc3VibWl0IGFnYWluIGFmdGVyd2Fy
ZHMgaW4gY2FzZSB3ZSBuZWVkIHRvIHNwbGl0CisJICogdGhlIGFjdGl2ZSBjb250ZXh0IHRvIGlu
dGVyamVjdCB0aGUgcHJlZW1wdGlvbiByZXF1ZXN0LAorCSAqIGkuZS4gd2Ugd2lsbCByZXRyaWdn
ZXIgcHJlZW1wdGlvbiBmb2xsb3dpbmcgdGhlIGFjayBpbiBjYXNlCisJICogb2YgdHJvdWJsZS4K
KwkgKi8KKwlsYXN0ID0gbGFzdF9hY3RpdmUoZXhlY2xpc3RzKTsKIAlpZiAobGFzdCkgewotCQkv
KgotCQkgKiBEb24ndCByZXN1Ym1pdCBvciBzd2l0Y2ggdW50aWwgYWxsIG91dHN0YW5kaW5nCi0J
CSAqIHByZWVtcHRpb25zIChsaXRlLXJlc3RvcmUpIGFyZSBzZWVuLiBUaGVuIHdlCi0JCSAqIGtu
b3cgdGhlIG5leHQgcHJlZW1wdGlvbiBzdGF0dXMgd2Ugc2VlIGNvcnJlc3BvbmRzCi0JCSAqIHRv
IHRoaXMgRUxTUCB1cGRhdGUuCi0JCSAqLwotCQlHRU1fQlVHX09OKCFleGVjbGlzdHNfaXNfYWN0
aXZlKGV4ZWNsaXN0cywKLQkJCQkJCUVYRUNMSVNUU19BQ1RJVkVfVVNFUikpOwotCQlHRU1fQlVH
X09OKCFwb3J0X2NvdW50KCZwb3J0WzBdKSk7Ci0KLQkJLyoKLQkJICogSWYgd2Ugd3JpdGUgdG8g
RUxTUCBhIHNlY29uZCB0aW1lIGJlZm9yZSB0aGUgSFcgaGFzIGhhZAotCQkgKiBhIGNoYW5jZSB0
byByZXNwb25kIHRvIHRoZSBwcmV2aW91cyB3cml0ZSwgd2UgY2FuIGNvbmZ1c2UKLQkJICogdGhl
IEhXIGFuZCBoaXQgInVuZGVmaW5lZCBiZWhhdmlvdXIiLiBBZnRlciB3cml0aW5nIHRvIEVMU1As
Ci0JCSAqIHdlIG11c3QgdGhlbiB3YWl0IHVudGlsIHdlIHNlZSBhIGNvbnRleHQtc3dpdGNoIGV2
ZW50IGZyb20KLQkJICogdGhlIEhXIHRvIGluZGljYXRlIHRoYXQgaXQgaGFzIGhhZCBhIGNoYW5j
ZSB0byByZXNwb25kLgotCQkgKi8KLQkJaWYgKCFleGVjbGlzdHNfaXNfYWN0aXZlKGV4ZWNsaXN0
cywgRVhFQ0xJU1RTX0FDVElWRV9IV0FDSykpCi0JCQlyZXR1cm47Ci0KIAkJaWYgKG5lZWRfcHJl
ZW1wdChlbmdpbmUsIGxhc3QsIHJiKSkgewotCQkJaW5qZWN0X3ByZWVtcHRfY29udGV4dChlbmdp
bmUpOwotCQkJcmV0dXJuOwotCQl9CisJCQlHRU1fVFJBQ0UoIiVzOiBwcmVlbXB0aW5nIGxhc3Q9
JWxseDolbGxkLCBwcmlvPSVkLCBoaW50PSVkXG4iLAorCQkJCSAgZW5naW5lLT5uYW1lLAorCQkJ
CSAgbGFzdC0+ZmVuY2UuY29udGV4dCwKKwkJCQkgIGxhc3QtPmZlbmNlLnNlcW5vLAorCQkJCSAg
bGFzdC0+c2NoZWQuYXR0ci5wcmlvcml0eSwKKwkJCQkgIGV4ZWNsaXN0cy0+cXVldWVfcHJpb3Jp
dHlfaGludCk7CisJCQkvKgorCQkJICogRG9uJ3QgbGV0IHRoZSBSSU5HX0hFQUQgYWR2YW5jZSBw
YXN0IHRoZSBicmVhZGNydW1iCisJCQkgKiBhcyB3ZSB1bndpbmQgKGFuZCB1bnRpbCB3ZSByZXN1
Ym1pdCkgc28gdGhhdCB3ZSBkbworCQkJICogbm90IGFjY2lkZW50YWxseSB0ZWxsIGl0IHRvIGdv
IGJhY2t3YXJkcy4KKwkJCSAqLworCQkJcmluZ19zZXRfcGF1c2VkKGVuZ2luZSwgMSk7CiAKLQkJ
LyoKLQkJICogSW4gdGhlb3J5LCB3ZSBjb3VsZCBjb2FsZXNjZSBtb3JlIHJlcXVlc3RzIG9udG8K
LQkJICogdGhlIHNlY29uZCBwb3J0ICh0aGUgZmlyc3QgcG9ydCBpcyBhY3RpdmUsIHdpdGgKLQkJ
ICogbm8gcHJlZW1wdGlvbnMgcGVuZGluZykuIEhvd2V2ZXIsIHRoYXQgbWVhbnMgd2UKLQkJICog
dGhlbiBoYXZlIHRvIGRlYWwgd2l0aCB0aGUgcG9zc2libGUgbGl0ZS1yZXN0b3JlCi0JCSAqIG9m
IHRoZSBzZWNvbmQgcG9ydCAoYXMgd2Ugc3VibWl0IHRoZSBFTFNQLCB0aGVyZQotCQkgKiBtYXkg
YmUgYSBjb250ZXh0LXN3aXRjaCkgYnV0IGFsc28gd2UgbWF5IGNvbXBsZXRlCi0JCSAqIHRoZSBy
ZXN1Ym1pc3Npb24gYmVmb3JlIHRoZSBjb250ZXh0LXN3aXRjaC4gRXJnbywKLQkJICogY29hbGVz
Y2luZyBvbnRvIHRoZSBzZWNvbmQgcG9ydCB3aWxsIGNhdXNlIGEKLQkJICogcHJlZW1wdGlvbiBl
dmVudCwgYnV0IHdlIGNhbm5vdCBwcmVkaWN0IHdoZXRoZXIKLQkJICogdGhhdCB3aWxsIGFmZmVj
dCBwb3J0WzBdIG9yIHBvcnRbMV0uCi0JCSAqCi0JCSAqIElmIHRoZSBzZWNvbmQgcG9ydCBpcyBh
bHJlYWR5IGFjdGl2ZSwgd2UgY2FuIHdhaXQKLQkJICogdW50aWwgdGhlIG5leHQgY29udGV4dC1z
d2l0Y2ggYmVmb3JlIGNvbnRlbXBsYXRpbmcKLQkJICogbmV3IHJlcXVlc3RzLiBUaGUgR1BVIHdp
bGwgYmUgYnVzeSBhbmQgd2Ugc2hvdWxkIGJlCi0JCSAqIGFibGUgdG8gcmVzdWJtaXQgdGhlIG5l
dyBFTFNQIGJlZm9yZSBpdCBpZGxlcywKLQkJICogYXZvaWRpbmcgcGlwZWxpbmUgYnViYmxlcyAo
bW9tZW50YXJ5IHBhdXNlcyB3aGVyZQotCQkgKiB0aGUgZHJpdmVyIGlzIHVuYWJsZSB0byBrZWVw
IHVwIHRoZSBzdXBwbHkgb2YgbmV3Ci0JCSAqIHdvcmspLiBIb3dldmVyLCB3ZSBoYXZlIHRvIGRv
dWJsZSBjaGVjayB0aGF0IHRoZQotCQkgKiBwcmlvcml0aWVzIG9mIHRoZSBwb3J0cyBoYXZlbid0
IGJlZW4gc3dpdGNoLgotCQkgKi8KLQkJaWYgKHBvcnRfY291bnQoJnBvcnRbMV0pKQotCQkJcmV0
dXJuOworCQkJLyoKKwkJCSAqIE5vdGUgdGhhdCB3ZSBoYXZlIG5vdCBzdG9wcGVkIHRoZSBHUFUg
YXQgdGhpcyBwb2ludCwKKwkJCSAqIHNvIHdlIGFyZSB1bndpbmRpbmcgdGhlIGluY29tcGxldGUg
cmVxdWVzdHMgYXMgdGhleQorCQkJICogcmVtYWluIGluZmxpZ2h0IGFuZCBzbyBieSB0aGUgdGlt
ZSB3ZSBkbyBjb21wbGV0ZQorCQkJICogdGhlIHByZWVtcHRpb24sIHNvbWUgb2YgdGhlIHVud291
bmQgcmVxdWVzdHMgbWF5CisJCQkgKiBjb21wbGV0ZSEKKwkJCSAqLworCQkJX191bndpbmRfaW5j
b21wbGV0ZV9yZXF1ZXN0cyhlbmdpbmUpOwogCi0JCS8qCi0JCSAqIFdhSWRsZUxpdGVSZXN0b3Jl
OmJkdyxza2wKLQkJICogQXBwbHkgdGhlIHdhIE5PT1BzIHRvIHByZXZlbnQKLQkJICogcmluZzpI
RUFEID09IHJxOlRBSUwgYXMgd2UgcmVzdWJtaXQgdGhlCi0JCSAqIHJlcXVlc3QuIFNlZSBnZW44
X2VtaXRfZmluaV9icmVhZGNydW1iKCkgZm9yCi0JCSAqIHdoZXJlIHdlIHByZXBhcmUgdGhlIHBh
ZGRpbmcgYWZ0ZXIgdGhlCi0JCSAqIGVuZCBvZiB0aGUgcmVxdWVzdC4KLQkJICovCi0JCWxhc3Qt
PnRhaWwgPSBsYXN0LT53YV90YWlsOworCQkJLyoKKwkJCSAqIElmIHdlIG5lZWQgdG8gcmV0dXJu
IHRvIHRoZSBwcmVlbXB0ZWQgY29udGV4dCwgd2UKKwkJCSAqIG5lZWQgdG8gc2tpcCB0aGUgbGl0
ZS1yZXN0b3JlIGFuZCBmb3JjZSBpdCB0bworCQkJICogcmVsb2FkIHRoZSBSSU5HX1RBSUwuIE90
aGVyd2lzZSwgdGhlIEhXIGhhcyBhCisJCQkgKiB0ZW5kZW5jeSB0byBpZ25vcmUgdXMgcmV3aW5k
aW5nIHRoZSBUQUlMIHRvIHRoZQorCQkJICogZW5kIG9mIGFuIGVhcmxpZXIgcmVxdWVzdC4KKwkJ
CSAqLworCQkJbGFzdC0+aHdfY29udGV4dC0+bHJjX2Rlc2MgfD0gQ1RYX0RFU0NfRk9SQ0VfUkVT
VE9SRTsKKwkJCWxhc3QgPSBOVUxMOworCQl9IGVsc2UgeworCQkJLyoKKwkJCSAqIE90aGVyd2lz
ZSBpZiB3ZSBhbHJlYWR5IGhhdmUgYSByZXF1ZXN0IHBlbmRpbmcKKwkJCSAqIGZvciBleGVjdXRp
b24gYWZ0ZXIgdGhlIGN1cnJlbnQgb25lLCB3ZSBjYW4KKwkJCSAqIGp1c3Qgd2FpdCB1bnRpbCB0
aGUgbmV4dCBDUyBldmVudCBiZWZvcmUKKwkJCSAqIHF1ZXVpbmcgbW9yZS4gSW4gZWl0aGVyIGNh
c2Ugd2Ugd2lsbCBmb3JjZSBhCisJCQkgKiBsaXRlLXJlc3RvcmUgcHJlZW1wdGlvbiBldmVudCwg
YnV0IGlmIHdlIHdhaXQKKwkJCSAqIHdlIGhvcGVmdWxseSBjb2FsZXNjZSBzZXZlcmFsIHVwZGF0
ZXMgaW50byBhIHNpbmdsZQorCQkJICogc3VibWlzc2lvbi4KKwkJCSAqLworCQkJaWYgKCFsaXN0
X2lzX2xhc3QoJmxhc3QtPnNjaGVkLmxpbmssCisJCQkJCSAgJmVuZ2luZS0+YWN0aXZlLnJlcXVl
c3RzKSkKKwkJCQlyZXR1cm47CisKKwkJCS8qCisJCQkgKiBXYUlkbGVMaXRlUmVzdG9yZTpiZHcs
c2tsCisJCQkgKiBBcHBseSB0aGUgd2EgTk9PUHMgdG8gcHJldmVudAorCQkJICogcmluZzpIRUFE
ID09IHJxOlRBSUwgYXMgd2UgcmVzdWJtaXQgdGhlCisJCQkgKiByZXF1ZXN0LiBTZWUgZ2VuOF9l
bWl0X2ZpbmlfYnJlYWRjcnVtYigpIGZvcgorCQkJICogd2hlcmUgd2UgcHJlcGFyZSB0aGUgcGFk
ZGluZyBhZnRlciB0aGUKKwkJCSAqIGVuZCBvZiB0aGUgcmVxdWVzdC4KKwkJCSAqLworCQkJbGFz
dC0+dGFpbCA9IGxhc3QtPndhX3RhaWw7CisJCX0KIAl9CiAKIAl3aGlsZSAocmIpIHsgLyogWFhY
IHZpcnR1YWwgaXMgYWx3YXlzIHRha2luZyBwcmVjZWRlbmNlICovCkBAIC05NTUsOSArOTc2LDI0
IEBAIHN0YXRpYyB2b2lkIGV4ZWNsaXN0c19kZXF1ZXVlKHN0cnVjdCBpbnRlbF9lbmdpbmVfY3Mg
KmVuZ2luZSkKIAkJCQljb250aW51ZTsKIAkJCX0KIAorCQkJaWYgKGk5MTVfcmVxdWVzdF9jb21w
bGV0ZWQocnEpKSB7CisJCQkJdmUtPnJlcXVlc3QgPSBOVUxMOworCQkJCXZlLT5iYXNlLmV4ZWNs
aXN0cy5xdWV1ZV9wcmlvcml0eV9oaW50ID0gSU5UX01JTjsKKwkJCQlyYl9lcmFzZV9jYWNoZWQo
cmIsICZleGVjbGlzdHMtPnZpcnR1YWwpOworCQkJCVJCX0NMRUFSX05PREUocmIpOworCisJCQkJ
cnEtPmVuZ2luZSA9IGVuZ2luZTsKKwkJCQlfX2k5MTVfcmVxdWVzdF9zdWJtaXQocnEpOworCisJ
CQkJc3Bpbl91bmxvY2soJnZlLT5iYXNlLmFjdGl2ZS5sb2NrKTsKKworCQkJCXJiID0gcmJfZmly
c3RfY2FjaGVkKCZleGVjbGlzdHMtPnZpcnR1YWwpOworCQkJCWNvbnRpbnVlOworCQkJfQorCiAJ
CQlpZiAobGFzdCAmJiAhY2FuX21lcmdlX3JxKGxhc3QsIHJxKSkgewogCQkJCXNwaW5fdW5sb2Nr
KCZ2ZS0+YmFzZS5hY3RpdmUubG9jayk7Ci0JCQkJcmV0dXJuOyAvKiBsZWF2ZSB0aGlzIHJxIGZv
ciBhbm90aGVyIGVuZ2luZSAqLworCQkJCXJldHVybjsgLyogbGVhdmUgdGhpcyBmb3IgYW5vdGhl
ciAqLwogCQkJfQogCiAJCQlHRU1fVFJBQ0UoIiVzOiB2aXJ0dWFsIHJxPSVsbHg6JWxsZCVzLCBu
ZXcgZW5naW5lPyAlc1xuIiwKQEAgLTEwMDYsOSArMTA0MiwxMCBAQCBzdGF0aWMgdm9pZCBleGVj
bGlzdHNfZGVxdWV1ZShzdHJ1Y3QgaW50ZWxfZW5naW5lX2NzICplbmdpbmUpCiAJCQl9CiAKIAkJ
CV9faTkxNV9yZXF1ZXN0X3N1Ym1pdChycSk7Ci0JCQl0cmFjZV9pOTE1X3JlcXVlc3RfaW4ocnEs
IHBvcnRfaW5kZXgocG9ydCwgZXhlY2xpc3RzKSk7Ci0JCQlzdWJtaXQgPSB0cnVlOwotCQkJbGFz
dCA9IHJxOworCQkJaWYgKCFpOTE1X3JlcXVlc3RfY29tcGxldGVkKHJxKSkgeworCQkJCXN1Ym1p
dCA9IHRydWU7CisJCQkJbGFzdCA9IHJxOworCQkJfQogCQl9CiAKIAkJc3Bpbl91bmxvY2soJnZl
LT5iYXNlLmFjdGl2ZS5sb2NrKTsKQEAgLTEwMjEsNiArMTA1OCw5IEBAIHN0YXRpYyB2b2lkIGV4
ZWNsaXN0c19kZXF1ZXVlKHN0cnVjdCBpbnRlbF9lbmdpbmVfY3MgKmVuZ2luZSkKIAkJaW50IGk7
CiAKIAkJcHJpb2xpc3RfZm9yX2VhY2hfcmVxdWVzdF9jb25zdW1lKHJxLCBybiwgcCwgaSkgewor
CQkJaWYgKGk5MTVfcmVxdWVzdF9jb21wbGV0ZWQocnEpKQorCQkJCWdvdG8gc2tpcDsKKwogCQkJ
LyoKIAkJCSAqIENhbiB3ZSBjb21iaW5lIHRoaXMgcmVxdWVzdCB3aXRoIHRoZSBjdXJyZW50IHBv
cnQ/CiAJCQkgKiBJdCBoYXMgdG8gYmUgdGhlIHNhbWUgY29udGV4dC9yaW5nYnVmZmVyIGFuZCBu
b3QKQEAgLTEwNjAsMTkgKzExMDAsMTQgQEAgc3RhdGljIHZvaWQgZXhlY2xpc3RzX2RlcXVldWUo
c3RydWN0IGludGVsX2VuZ2luZV9jcyAqZW5naW5lKQogCQkJCSAgICBjdHhfc2luZ2xlX3BvcnRf
c3VibWlzc2lvbihycS0+aHdfY29udGV4dCkpCiAJCQkJCWdvdG8gZG9uZTsKIAotCi0JCQkJaWYg
KHN1Ym1pdCkKLQkJCQkJcG9ydF9hc3NpZ24ocG9ydCwgbGFzdCk7CisJCQkJKnBvcnQgPSBleGVj
bGlzdHNfc2NoZWR1bGVfaW4obGFzdCwgcG9ydCAtIGV4ZWNsaXN0cy0+cGVuZGluZyk7CiAJCQkJ
cG9ydCsrOwotCi0JCQkJR0VNX0JVR19PTihwb3J0X2lzc2V0KHBvcnQpKTsKIAkJCX0KIAotCQkJ
X19pOTE1X3JlcXVlc3Rfc3VibWl0KHJxKTsKLQkJCXRyYWNlX2k5MTVfcmVxdWVzdF9pbihycSwg
cG9ydF9pbmRleChwb3J0LCBleGVjbGlzdHMpKTsKLQogCQkJbGFzdCA9IHJxOwogCQkJc3VibWl0
ID0gdHJ1ZTsKK3NraXA6CisJCQlfX2k5MTVfcmVxdWVzdF9zdWJtaXQocnEpOwogCQl9CiAKIAkJ
cmJfZXJhc2VfY2FjaGVkKCZwLT5ub2RlLCAmZXhlY2xpc3RzLT5xdWV1ZSk7CkBAIC0xMDk3LDU0
ICsxMTMyLDMwIEBAIHN0YXRpYyB2b2lkIGV4ZWNsaXN0c19kZXF1ZXVlKHN0cnVjdCBpbnRlbF9l
bmdpbmVfY3MgKmVuZ2luZSkKIAkgKiBpbnRlcnJ1cHQgZm9yIHNlY29uZGFyeSBwb3J0cykuCiAJ
ICovCiAJZXhlY2xpc3RzLT5xdWV1ZV9wcmlvcml0eV9oaW50ID0gcXVldWVfcHJpbyhleGVjbGlz
dHMpOworCUdFTV9UUkFDRSgiJXM6IHF1ZXVlX3ByaW9yaXR5X2hpbnQ6JWQsIHN1Ym1pdDolc1xu
IiwKKwkJICBlbmdpbmUtPm5hbWUsIGV4ZWNsaXN0cy0+cXVldWVfcHJpb3JpdHlfaGludCwKKwkJ
ICB5ZXNubyhzdWJtaXQpKTsKIAogCWlmIChzdWJtaXQpIHsKLQkJcG9ydF9hc3NpZ24ocG9ydCwg
bGFzdCk7CisJCSpwb3J0ID0gZXhlY2xpc3RzX3NjaGVkdWxlX2luKGxhc3QsIHBvcnQgLSBleGVj
bGlzdHMtPnBlbmRpbmcpOworCQltZW1zZXQocG9ydCArIDEsIDAsIChsYXN0X3BvcnQgLSBwb3J0
KSAqIHNpemVvZigqcG9ydCkpOwogCQlleGVjbGlzdHNfc3VibWl0X3BvcnRzKGVuZ2luZSk7CiAJ
fQotCi0JLyogV2UgbXVzdCBhbHdheXMga2VlcCB0aGUgYmVhc3QgZmVkIGlmIHdlIGhhdmUgd29y
ayBwaWxlZCB1cCAqLwotCUdFTV9CVUdfT04ocmJfZmlyc3RfY2FjaGVkKCZleGVjbGlzdHMtPnF1
ZXVlKSAmJgotCQkgICAhcG9ydF9pc3NldChleGVjbGlzdHMtPnBvcnQpKTsKLQotCS8qIFJlLWV2
YWx1YXRlIHRoZSBleGVjdXRpbmcgY29udGV4dCBzZXR1cCBhZnRlciBlYWNoIHByZWVtcHRpdmUg
a2ljayAqLwotCWlmIChsYXN0KQotCQlleGVjbGlzdHNfdXNlcl9iZWdpbihleGVjbGlzdHMsIGV4
ZWNsaXN0cy0+cG9ydCk7Ci0KLQkvKiBJZiB0aGUgZW5naW5lIGlzIG5vdyBpZGxlLCBzbyBzaG91
bGQgYmUgdGhlIGZsYWc7IGFuZCB2aWNlIHZlcnNhLiAqLwotCUdFTV9CVUdfT04oZXhlY2xpc3Rz
X2lzX2FjdGl2ZSgmZW5naW5lLT5leGVjbGlzdHMsCi0JCQkJICAgICAgIEVYRUNMSVNUU19BQ1RJ
VkVfVVNFUikgPT0KLQkJICAgIXBvcnRfaXNzZXQoZW5naW5lLT5leGVjbGlzdHMucG9ydCkpOwog
fQogCiB2b2lkCiBleGVjbGlzdHNfY2FuY2VsX3BvcnRfcmVxdWVzdHMoc3RydWN0IGludGVsX2Vu
Z2luZV9leGVjbGlzdHMgKiBjb25zdCBleGVjbGlzdHMpCiB7Ci0Jc3RydWN0IGV4ZWNsaXN0X3Bv
cnQgKnBvcnQgPSBleGVjbGlzdHMtPnBvcnQ7Ci0JdW5zaWduZWQgaW50IG51bV9wb3J0cyA9IGV4
ZWNsaXN0c19udW1fcG9ydHMoZXhlY2xpc3RzKTsKLQotCXdoaWxlIChudW1fcG9ydHMtLSAmJiBw
b3J0X2lzc2V0KHBvcnQpKSB7Ci0JCXN0cnVjdCBpOTE1X3JlcXVlc3QgKnJxID0gcG9ydF9yZXF1
ZXN0KHBvcnQpOworCXN0cnVjdCBpOTE1X3JlcXVlc3QgKiBjb25zdCAqcG9ydCwgKnJxOwogCi0J
CUdFTV9UUkFDRSgiJXM6cG9ydCV1IGZlbmNlICVsbHg6JWxsZCwgKGN1cnJlbnQgJWQpXG4iLAot
CQkJICBycS0+ZW5naW5lLT5uYW1lLAotCQkJICAodW5zaWduZWQgaW50KShwb3J0IC0gZXhlY2xp
c3RzLT5wb3J0KSwKLQkJCSAgcnEtPmZlbmNlLmNvbnRleHQsIHJxLT5mZW5jZS5zZXFubywKLQkJ
CSAgaHdzcF9zZXFubyhycSkpOworCWZvciAocG9ydCA9IGV4ZWNsaXN0cy0+cGVuZGluZzsgKHJx
ID0gKnBvcnQpOyBwb3J0KyspCisJCWV4ZWNsaXN0c19zY2hlZHVsZV9vdXQocnEpOworCW1lbXNl
dChleGVjbGlzdHMtPnBlbmRpbmcsIDAsIHNpemVvZihleGVjbGlzdHMtPnBlbmRpbmcpKTsKIAot
CQlHRU1fQlVHX09OKCFleGVjbGlzdHMtPmFjdGl2ZSk7Ci0JCWV4ZWNsaXN0c19jb250ZXh0X3Nj
aGVkdWxlX291dChycSwKLQkJCQkJICAgICAgIGk5MTVfcmVxdWVzdF9jb21wbGV0ZWQocnEpID8K
LQkJCQkJICAgICAgIElOVEVMX0NPTlRFWFRfU0NIRURVTEVfT1VUIDoKLQkJCQkJICAgICAgIElO
VEVMX0NPTlRFWFRfU0NIRURVTEVfUFJFRU1QVEVEKTsKLQotCQlpOTE1X3JlcXVlc3RfcHV0KHJx
KTsKLQotCQltZW1zZXQocG9ydCwgMCwgc2l6ZW9mKCpwb3J0KSk7Ci0JCXBvcnQrKzsKLQl9Ci0K
LQlleGVjbGlzdHNfY2xlYXJfYWxsX2FjdGl2ZShleGVjbGlzdHMpOworCWZvciAocG9ydCA9IGV4
ZWNsaXN0cy0+YWN0aXZlOyAocnEgPSAqcG9ydCk7IHBvcnQrKykKKwkJZXhlY2xpc3RzX3NjaGVk
dWxlX291dChycSk7CisJZXhlY2xpc3RzLT5hY3RpdmUgPQorCQltZW1zZXQoZXhlY2xpc3RzLT5p
bmZsaWdodCwgMCwgc2l6ZW9mKGV4ZWNsaXN0cy0+aW5mbGlnaHQpKTsKIH0KIAogc3RhdGljIGlu
bGluZSB2b2lkCkBAIC0xMTYzLDcgKzExNzQsNiBAQCByZXNldF9pbl9wcm9ncmVzcyhjb25zdCBz
dHJ1Y3QgaW50ZWxfZW5naW5lX2V4ZWNsaXN0cyAqZXhlY2xpc3RzKQogc3RhdGljIHZvaWQgcHJv
Y2Vzc19jc2Ioc3RydWN0IGludGVsX2VuZ2luZV9jcyAqZW5naW5lKQogewogCXN0cnVjdCBpbnRl
bF9lbmdpbmVfZXhlY2xpc3RzICogY29uc3QgZXhlY2xpc3RzID0gJmVuZ2luZS0+ZXhlY2xpc3Rz
OwotCXN0cnVjdCBleGVjbGlzdF9wb3J0ICpwb3J0ID0gZXhlY2xpc3RzLT5wb3J0OwogCWNvbnN0
IHUzMiAqIGNvbnN0IGJ1ZiA9IGV4ZWNsaXN0cy0+Y3NiX3N0YXR1czsKIAljb25zdCB1OCBudW1f
ZW50cmllcyA9IGV4ZWNsaXN0cy0+Y3NiX3NpemU7CiAJdTggaGVhZCwgdGFpbDsKQEAgLTExOTgs
OSArMTIwOCw3IEBAIHN0YXRpYyB2b2lkIHByb2Nlc3NfY3NiKHN0cnVjdCBpbnRlbF9lbmdpbmVf
Y3MgKmVuZ2luZSkKIAlybWIoKTsKIAogCWRvIHsKLQkJc3RydWN0IGk5MTVfcmVxdWVzdCAqcnE7
CiAJCXVuc2lnbmVkIGludCBzdGF0dXM7Ci0JCXVuc2lnbmVkIGludCBjb3VudDsKIAogCQlpZiAo
KytoZWFkID09IG51bV9lbnRyaWVzKQogCQkJaGVhZCA9IDA7CkBAIC0xMjIzLDY4ICsxMjMxLDM4
IEBAIHN0YXRpYyB2b2lkIHByb2Nlc3NfY3NiKHN0cnVjdCBpbnRlbF9lbmdpbmVfY3MgKmVuZ2lu
ZSkKIAkJICogc3RhdHVzIG5vdGlmaWVyLgogCQkgKi8KIAotCQlHRU1fVFJBQ0UoIiVzIGNzYlsl
ZF06IHN0YXR1cz0weCUwOHg6MHglMDh4LCBhY3RpdmU9MHgleFxuIiwKKwkJR0VNX1RSQUNFKCIl
cyBjc2JbJWRdOiBzdGF0dXM9MHglMDh4OjB4JTA4eFxuIiwKIAkJCSAgZW5naW5lLT5uYW1lLCBo
ZWFkLAotCQkJICBidWZbMiAqIGhlYWQgKyAwXSwgYnVmWzIgKiBoZWFkICsgMV0sCi0JCQkgIGV4
ZWNsaXN0cy0+YWN0aXZlKTsKKwkJCSAgYnVmWzIgKiBoZWFkICsgMF0sIGJ1ZlsyICogaGVhZCAr
IDFdKTsKIAogCQlzdGF0dXMgPSBidWZbMiAqIGhlYWRdOwotCQlpZiAoc3RhdHVzICYgKEdFTjhf
Q1RYX1NUQVRVU19JRExFX0FDVElWRSB8Ci0JCQkgICAgICBHRU44X0NUWF9TVEFUVVNfUFJFRU1Q
VEVEKSkKLQkJCWV4ZWNsaXN0c19zZXRfYWN0aXZlKGV4ZWNsaXN0cywKLQkJCQkJICAgICBFWEVD
TElTVFNfQUNUSVZFX0hXQUNLKTsKLQkJaWYgKHN0YXR1cyAmIEdFTjhfQ1RYX1NUQVRVU19BQ1RJ
VkVfSURMRSkKLQkJCWV4ZWNsaXN0c19jbGVhcl9hY3RpdmUoZXhlY2xpc3RzLAotCQkJCQkgICAg
ICAgRVhFQ0xJU1RTX0FDVElWRV9IV0FDSyk7Ci0KLQkJaWYgKCEoc3RhdHVzICYgR0VOOF9DVFhf
U1RBVFVTX0NPTVBMRVRFRF9NQVNLKSkKLQkJCWNvbnRpbnVlOwotCi0JCS8qIFdlIHNob3VsZCBu
ZXZlciBnZXQgYSBDT01QTEVURUQgfCBJRExFX0FDVElWRSEgKi8KLQkJR0VNX0JVR19PTihzdGF0
dXMgJiBHRU44X0NUWF9TVEFUVVNfSURMRV9BQ1RJVkUpOwotCi0JCWlmIChzdGF0dXMgJiBHRU44
X0NUWF9TVEFUVVNfQ09NUExFVEUgJiYKLQkJICAgIGJ1ZlsyKmhlYWQgKyAxXSA9PSBleGVjbGlz
dHMtPnByZWVtcHRfY29tcGxldGVfc3RhdHVzKSB7Ci0JCQlHRU1fVFJBQ0UoIiVzIHByZWVtcHQt
aWRsZVxuIiwgZW5naW5lLT5uYW1lKTsKLQkJCWNvbXBsZXRlX3ByZWVtcHRfY29udGV4dChleGVj
bGlzdHMpOwotCQkJY29udGludWU7Ci0JCX0KLQotCQlpZiAoc3RhdHVzICYgR0VOOF9DVFhfU1RB
VFVTX1BSRUVNUFRFRCAmJgotCQkgICAgZXhlY2xpc3RzX2lzX2FjdGl2ZShleGVjbGlzdHMsCi0J
CQkJCUVYRUNMSVNUU19BQ1RJVkVfUFJFRU1QVCkpCi0JCQljb250aW51ZTsKLQotCQlHRU1fQlVH
X09OKCFleGVjbGlzdHNfaXNfYWN0aXZlKGV4ZWNsaXN0cywKLQkJCQkJCUVYRUNMSVNUU19BQ1RJ
VkVfVVNFUikpOwotCi0JCXJxID0gcG9ydF91bnBhY2socG9ydCwgJmNvdW50KTsKLQkJR0VNX1RS
QUNFKCIlcyBvdXRbMF06IGN0eD0lZC4lZCwgZmVuY2UgJWxseDolbGxkIChjdXJyZW50ICVkKSwg
cHJpbz0lZFxuIiwKLQkJCSAgZW5naW5lLT5uYW1lLAotCQkJICBwb3J0LT5jb250ZXh0X2lkLCBj
b3VudCwKLQkJCSAgcnEgPyBycS0+ZmVuY2UuY29udGV4dCA6IDAsCi0JCQkgIHJxID8gcnEtPmZl
bmNlLnNlcW5vIDogMCwKLQkJCSAgcnEgPyBod3NwX3NlcW5vKHJxKSA6IDAsCi0JCQkgIHJxID8g
cnFfcHJpbyhycSkgOiAwKTsKLQotCQkvKiBDaGVjayB0aGUgY29udGV4dC9kZXNjIGlkIGZvciB0
aGlzIGV2ZW50IG1hdGNoZXMgKi8KLQkJR0VNX0RFQlVHX0JVR19PTihidWZbMiAqIGhlYWQgKyAx
XSAhPSBwb3J0LT5jb250ZXh0X2lkKTsKLQotCQlHRU1fQlVHX09OKGNvdW50ID09IDApOwotCQlp
ZiAoLS1jb3VudCA9PSAwKSB7Ci0JCQkvKgotCQkJICogT24gdGhlIGZpbmFsIGV2ZW50IGNvcnJl
c3BvbmRpbmcgdG8gdGhlCi0JCQkgKiBzdWJtaXNzaW9uIG9mIHRoaXMgY29udGV4dCwgd2UgZXhw
ZWN0IGVpdGhlcgotCQkJICogYW4gZWxlbWVudC1zd2l0Y2ggZXZlbnQgb3IgYSBjb21wbGV0aW9u
Ci0JCQkgKiBldmVudCAoYW5kIG9uIGNvbXBsZXRpb24sIHRoZSBhY3RpdmUtaWRsZQotCQkJICog
bWFya2VyKS4gTm8gbW9yZSBwcmVlbXB0aW9ucywgbGl0ZS1yZXN0b3JlCi0JCQkgKiBvciBvdGhl
cndpc2UuCi0JCQkgKi8KLQkJCUdFTV9CVUdfT04oc3RhdHVzICYgR0VOOF9DVFhfU1RBVFVTX1BS
RUVNUFRFRCk7Ci0JCQlHRU1fQlVHX09OKHBvcnRfaXNzZXQoJnBvcnRbMV0pICYmCi0JCQkJICAg
IShzdGF0dXMgJiBHRU44X0NUWF9TVEFUVVNfRUxFTUVOVF9TV0lUQ0gpKTsKLQkJCUdFTV9CVUdf
T04oIXBvcnRfaXNzZXQoJnBvcnRbMV0pICYmCi0JCQkJICAgIShzdGF0dXMgJiBHRU44X0NUWF9T
VEFUVVNfQUNUSVZFX0lETEUpKTsKKwkJaWYgKHN0YXR1cyAmIEdFTjhfQ1RYX1NUQVRVU19JRExF
X0FDVElWRSkgeworCQkJR0VNX0JVR19PTigqZXhlY2xpc3RzLT5hY3RpdmUpOworcHJvbW90ZToK
KwkJCUdFTV9CVUdfT04oIWFzc2VydF9wZW5kaW5nX3ZhbGlkKGV4ZWNsaXN0cywgInByb21vdGUi
KSk7CisJCQlleGVjbGlzdHMtPmFjdGl2ZSA9CisJCQkJbWVtY3B5KGV4ZWNsaXN0cy0+aW5mbGln
aHQsCisJCQkJICAgICAgIGV4ZWNsaXN0cy0+cGVuZGluZywKKwkJCQkgICAgICAgZXhlY2xpc3Rz
X251bV9wb3J0cyhleGVjbGlzdHMpICoKKwkJCQkgICAgICAgc2l6ZW9mKCpleGVjbGlzdHMtPnBl
bmRpbmcpKTsKKwkJCWV4ZWNsaXN0cy0+cGVuZGluZ1swXSA9IE5VTEw7CisKKwkJCWlmICghaW5q
ZWN0X3ByZWVtcHRfaGFuZyhleGVjbGlzdHMpKQorCQkJCXJpbmdfc2V0X3BhdXNlZChlbmdpbmUs
IDApOworCQl9IGVsc2UgaWYgKHN0YXR1cyAmIEdFTjhfQ1RYX1NUQVRVU19QUkVFTVBURUQpIHsK
KwkJCXN0cnVjdCBpOTE1X3JlcXVlc3QgKiBjb25zdCAqcG9ydCA9IGV4ZWNsaXN0cy0+YWN0aXZl
OworCisJCQl0cmFjZV9wb3J0cyhleGVjbGlzdHMsICJwcmVlbXB0ZWQiLCBleGVjbGlzdHMtPmFj
dGl2ZSk7CisKKwkJCXdoaWxlICgqcG9ydCkKKwkJCQlleGVjbGlzdHNfc2NoZWR1bGVfb3V0KCpw
b3J0KyspOworCisJCQlnb3RvIHByb21vdGU7CisJCX0gZWxzZSBpZiAoKmV4ZWNsaXN0cy0+YWN0
aXZlKSB7CisJCQlzdHJ1Y3QgaTkxNV9yZXF1ZXN0ICpycSA9ICpleGVjbGlzdHMtPmFjdGl2ZSsr
OworCisJCQl0cmFjZV9wb3J0cyhleGVjbGlzdHMsICJjb21wbGV0ZWQiLAorCQkJCSAgICBleGVj
bGlzdHMtPmFjdGl2ZSAtIDEpOwogCiAJCQkvKgogCQkJICogV2UgcmVseSBvbiB0aGUgaGFyZHdh
cmUgYmVpbmcgc3Ryb25nbHkKQEAgLTEyOTMsMjEgKzEyNzEsMTAgQEAgc3RhdGljIHZvaWQgcHJv
Y2Vzc19jc2Ioc3RydWN0IGludGVsX2VuZ2luZV9jcyAqZW5naW5lKQogCQkJICogdXNlciBpbnRl
cnJ1cHQgYW5kIENTQiBpcyBwcm9jZXNzZWQuCiAJCQkgKi8KIAkJCUdFTV9CVUdfT04oIWk5MTVf
cmVxdWVzdF9jb21wbGV0ZWQocnEpKTsKKwkJCWV4ZWNsaXN0c19zY2hlZHVsZV9vdXQocnEpOwog
Ci0JCQlleGVjbGlzdHNfY29udGV4dF9zY2hlZHVsZV9vdXQocnEsCi0JCQkJCQkgICAgICAgSU5U
RUxfQ09OVEVYVF9TQ0hFRFVMRV9PVVQpOwotCQkJaTkxNV9yZXF1ZXN0X3B1dChycSk7Ci0KLQkJ
CUdFTV9UUkFDRSgiJXMgY29tcGxldGVkIGN0eD0lZFxuIiwKLQkJCQkgIGVuZ2luZS0+bmFtZSwg
cG9ydC0+Y29udGV4dF9pZCk7Ci0KLQkJCXBvcnQgPSBleGVjbGlzdHNfcG9ydF9jb21wbGV0ZShl
eGVjbGlzdHMsIHBvcnQpOwotCQkJaWYgKHBvcnRfaXNzZXQocG9ydCkpCi0JCQkJZXhlY2xpc3Rz
X3VzZXJfYmVnaW4oZXhlY2xpc3RzLCBwb3J0KTsKLQkJCWVsc2UKLQkJCQlleGVjbGlzdHNfdXNl
cl9lbmQoZXhlY2xpc3RzKTsKLQkJfSBlbHNlIHsKLQkJCXBvcnRfc2V0KHBvcnQsIHBvcnRfcGFj
ayhycSwgY291bnQpKTsKKwkJCUdFTV9CVUdfT04oZXhlY2xpc3RzLT5hY3RpdmUgLSBleGVjbGlz
dHMtPmluZmxpZ2h0ID4KKwkJCQkgICBleGVjbGlzdHNfbnVtX3BvcnRzKGV4ZWNsaXN0cykpOwog
CQl9CiAJfSB3aGlsZSAoaGVhZCAhPSB0YWlsKTsKIApAQCAtMTMzMiw3ICsxMjk5LDcgQEAgc3Rh
dGljIHZvaWQgX19leGVjbGlzdHNfc3VibWlzc2lvbl90YXNrbGV0KHN0cnVjdCBpbnRlbF9lbmdp
bmVfY3MgKmNvbnN0IGVuZ2luZSkKIAlsb2NrZGVwX2Fzc2VydF9oZWxkKCZlbmdpbmUtPmFjdGl2
ZS5sb2NrKTsKIAogCXByb2Nlc3NfY3NiKGVuZ2luZSk7Ci0JaWYgKCFleGVjbGlzdHNfaXNfYWN0
aXZlKCZlbmdpbmUtPmV4ZWNsaXN0cywgRVhFQ0xJU1RTX0FDVElWRV9QUkVFTVBUKSkKKwlpZiAo
IWVuZ2luZS0+ZXhlY2xpc3RzLnBlbmRpbmdbMF0pCiAJCWV4ZWNsaXN0c19kZXF1ZXVlKGVuZ2lu
ZSk7CiB9CiAKQEAgLTEzNDUsMTEgKzEzMTIsNiBAQCBzdGF0aWMgdm9pZCBleGVjbGlzdHNfc3Vi
bWlzc2lvbl90YXNrbGV0KHVuc2lnbmVkIGxvbmcgZGF0YSkKIAlzdHJ1Y3QgaW50ZWxfZW5naW5l
X2NzICogY29uc3QgZW5naW5lID0gKHN0cnVjdCBpbnRlbF9lbmdpbmVfY3MgKilkYXRhOwogCXVu
c2lnbmVkIGxvbmcgZmxhZ3M7CiAKLQlHRU1fVFJBQ0UoIiVzIGF3YWtlPz0lZCwgYWN0aXZlPSV4
XG4iLAotCQkgIGVuZ2luZS0+bmFtZSwKLQkJICAhIWludGVsX3dha2VyZWZfYWN0aXZlKCZlbmdp
bmUtPndha2VyZWYpLAotCQkgIGVuZ2luZS0+ZXhlY2xpc3RzLmFjdGl2ZSk7Ci0KIAlzcGluX2xv
Y2tfaXJxc2F2ZSgmZW5naW5lLT5hY3RpdmUubG9jaywgZmxhZ3MpOwogCV9fZXhlY2xpc3RzX3N1
Ym1pc3Npb25fdGFza2xldChlbmdpbmUpOwogCXNwaW5fdW5sb2NrX2lycXJlc3RvcmUoJmVuZ2lu
ZS0+YWN0aXZlLmxvY2ssIGZsYWdzKTsKQEAgLTEzNzYsMTIgKzEzMzgsMTYgQEAgc3RhdGljIHZv
aWQgX19zdWJtaXRfcXVldWVfaW1tKHN0cnVjdCBpbnRlbF9lbmdpbmVfY3MgKmVuZ2luZSkKIAkJ
dGFza2xldF9oaV9zY2hlZHVsZSgmZXhlY2xpc3RzLT50YXNrbGV0KTsKIH0KIAotc3RhdGljIHZv
aWQgc3VibWl0X3F1ZXVlKHN0cnVjdCBpbnRlbF9lbmdpbmVfY3MgKmVuZ2luZSwgaW50IHByaW8p
CitzdGF0aWMgdm9pZCBzdWJtaXRfcXVldWUoc3RydWN0IGludGVsX2VuZ2luZV9jcyAqZW5naW5l
LAorCQkJIGNvbnN0IHN0cnVjdCBpOTE1X3JlcXVlc3QgKnJxKQogewotCWlmIChwcmlvID4gZW5n
aW5lLT5leGVjbGlzdHMucXVldWVfcHJpb3JpdHlfaGludCkgewotCQllbmdpbmUtPmV4ZWNsaXN0
cy5xdWV1ZV9wcmlvcml0eV9oaW50ID0gcHJpbzsKLQkJX19zdWJtaXRfcXVldWVfaW1tKGVuZ2lu
ZSk7Ci0JfQorCXN0cnVjdCBpbnRlbF9lbmdpbmVfZXhlY2xpc3RzICpleGVjbGlzdHMgPSAmZW5n
aW5lLT5leGVjbGlzdHM7CisKKwlpZiAocnFfcHJpbyhycSkgPD0gZXhlY2xpc3RzLT5xdWV1ZV9w
cmlvcml0eV9oaW50KQorCQlyZXR1cm47CisKKwlleGVjbGlzdHMtPnF1ZXVlX3ByaW9yaXR5X2hp
bnQgPSBycV9wcmlvKHJxKTsKKwlfX3N1Ym1pdF9xdWV1ZV9pbW0oZW5naW5lKTsKIH0KIAogc3Rh
dGljIHZvaWQgZXhlY2xpc3RzX3N1Ym1pdF9yZXF1ZXN0KHN0cnVjdCBpOTE1X3JlcXVlc3QgKnJl
cXVlc3QpCkBAIC0xMzk3LDcgKzEzNjMsNyBAQCBzdGF0aWMgdm9pZCBleGVjbGlzdHNfc3VibWl0
X3JlcXVlc3Qoc3RydWN0IGk5MTVfcmVxdWVzdCAqcmVxdWVzdCkKIAlHRU1fQlVHX09OKFJCX0VN
UFRZX1JPT1QoJmVuZ2luZS0+ZXhlY2xpc3RzLnF1ZXVlLnJiX3Jvb3QpKTsKIAlHRU1fQlVHX09O
KGxpc3RfZW1wdHkoJnJlcXVlc3QtPnNjaGVkLmxpbmspKTsKIAotCXN1Ym1pdF9xdWV1ZShlbmdp
bmUsIHJxX3ByaW8ocmVxdWVzdCkpOworCXN1Ym1pdF9xdWV1ZShlbmdpbmUsIHJlcXVlc3QpOwog
CiAJc3Bpbl91bmxvY2tfaXJxcmVzdG9yZSgmZW5naW5lLT5hY3RpdmUubG9jaywgZmxhZ3MpOwog
fQpAQCAtMjA0OCwyNyArMjAxNCwxMyBAQCBzdGF0aWMgdm9pZCBleGVjbGlzdHNfcmVzZXRfcHJl
cGFyZShzdHJ1Y3QgaW50ZWxfZW5naW5lX2NzICplbmdpbmUpCiAJc3Bpbl91bmxvY2tfaXJxcmVz
dG9yZSgmZW5naW5lLT5hY3RpdmUubG9jaywgZmxhZ3MpOwogfQogCi1zdGF0aWMgYm9vbCBscmNf
cmVnc19vayhjb25zdCBzdHJ1Y3QgaTkxNV9yZXF1ZXN0ICpycSkKLXsKLQljb25zdCBzdHJ1Y3Qg
aW50ZWxfcmluZyAqcmluZyA9IHJxLT5yaW5nOwotCWNvbnN0IHUzMiAqcmVncyA9IHJxLT5od19j
b250ZXh0LT5scmNfcmVnX3N0YXRlOwotCi0JLyogUXVpY2sgc3BvdCBjaGVjayBmb3IgdGhlIGNv
bW1vbiBzaWducyBvZiBjb250ZXh0IGNvcnJ1cHRpb24gKi8KLQotCWlmIChyZWdzW0NUWF9SSU5H
X0JVRkZFUl9DT05UUk9MICsgMV0gIT0KLQkgICAgKFJJTkdfQ1RMX1NJWkUocmluZy0+c2l6ZSkg
fCBSSU5HX1ZBTElEKSkKLQkJcmV0dXJuIGZhbHNlOwotCi0JaWYgKHJlZ3NbQ1RYX1JJTkdfQlVG
RkVSX1NUQVJUICsgMV0gIT0gaTkxNV9nZ3R0X29mZnNldChyaW5nLT52bWEpKQotCQlyZXR1cm4g
ZmFsc2U7Ci0KLQlyZXR1cm4gdHJ1ZTsKLX0KLQotc3RhdGljIHZvaWQgcmVzZXRfY3NiX3BvaW50
ZXJzKHN0cnVjdCBpbnRlbF9lbmdpbmVfZXhlY2xpc3RzICpleGVjbGlzdHMpCitzdGF0aWMgdm9p
ZCByZXNldF9jc2JfcG9pbnRlcnMoc3RydWN0IGludGVsX2VuZ2luZV9jcyAqZW5naW5lKQogewor
CXN0cnVjdCBpbnRlbF9lbmdpbmVfZXhlY2xpc3RzICogY29uc3QgZXhlY2xpc3RzID0gJmVuZ2lu
ZS0+ZXhlY2xpc3RzOwogCWNvbnN0IHVuc2lnbmVkIGludCByZXNldF92YWx1ZSA9IGV4ZWNsaXN0
cy0+Y3NiX3NpemUgLSAxOwogCisJcmluZ19zZXRfcGF1c2VkKGVuZ2luZSwgMCk7CisKIAkvKgog
CSAqIEFmdGVyIGEgcmVzZXQsIHRoZSBIVyBzdGFydHMgd3JpdGluZyBpbnRvIENTQiBlbnRyeSBb
MF0uIFdlCiAJICogdGhlcmVmb3JlIGhhdmUgdG8gc2V0IG91ciBIRUFEIHBvaW50ZXIgYmFjayBv
bmUgZW50cnkgc28gdGhhdApAQCAtMjExNSwxOCArMjA2NywyMSBAQCBzdGF0aWMgdm9pZCBfX2V4
ZWNsaXN0c19yZXNldChzdHJ1Y3QgaW50ZWxfZW5naW5lX2NzICplbmdpbmUsIGJvb2wgc3RhbGxl
ZCkKIAlwcm9jZXNzX2NzYihlbmdpbmUpOyAvKiBkcmFpbiBwcmVlbXB0aW9uIGV2ZW50cyAqLwog
CiAJLyogRm9sbG93aW5nIHRoZSByZXNldCwgd2UgbmVlZCB0byByZWxvYWQgdGhlIENTQiByZWFk
L3dyaXRlIHBvaW50ZXJzICovCi0JcmVzZXRfY3NiX3BvaW50ZXJzKCZlbmdpbmUtPmV4ZWNsaXN0
cyk7CisJcmVzZXRfY3NiX3BvaW50ZXJzKGVuZ2luZSk7CiAKIAkvKgogCSAqIFNhdmUgdGhlIGN1
cnJlbnRseSBleGVjdXRpbmcgY29udGV4dCwgZXZlbiBpZiB3ZSBjb21wbGV0ZWQKIAkgKiBpdHMg
cmVxdWVzdCwgaXQgd2FzIHN0aWxsIHJ1bm5pbmcgYXQgdGhlIHRpbWUgb2YgdGhlCiAJICogcmVz
ZXQgYW5kIHdpbGwgaGF2ZSBiZWVuIGNsb2JiZXJlZC4KIAkgKi8KLQlpZiAoIXBvcnRfaXNzZXQo
ZXhlY2xpc3RzLT5wb3J0KSkKLQkJZ290byBvdXRfY2xlYXI7CisJcnEgPSBleGVjbGlzdHNfYWN0
aXZlKGV4ZWNsaXN0cyk7CisJaWYgKCFycSkKKwkJcmV0dXJuOwogCi0JcnEgPSBwb3J0X3JlcXVl
c3QoZXhlY2xpc3RzLT5wb3J0KTsKIAljZSA9IHJxLT5od19jb250ZXh0OworCUdFTV9CVUdfT04o
aTkxNV9hY3RpdmVfaXNfaWRsZSgmY2UtPmFjdGl2ZSkpOworCUdFTV9CVUdfT04oIWk5MTVfdm1h
X2lzX3Bpbm5lZChjZS0+c3RhdGUpKTsKKwlycSA9IGFjdGl2ZV9yZXF1ZXN0KHJxKTsKIAogCS8q
CiAJICogQ2F0Y2ggdXAgd2l0aCBhbnkgbWlzc2VkIGNvbnRleHQtc3dpdGNoIGludGVycnVwdHMu
CkBAIC0yMTM5LDkgKzIwOTQsMTIgQEAgc3RhdGljIHZvaWQgX19leGVjbGlzdHNfcmVzZXQoc3Ry
dWN0IGludGVsX2VuZ2luZV9jcyAqZW5naW5lLCBib29sIHN0YWxsZWQpCiAJICovCiAJZXhlY2xp
c3RzX2NhbmNlbF9wb3J0X3JlcXVlc3RzKGV4ZWNsaXN0cyk7CiAKLQlycSA9IGFjdGl2ZV9yZXF1
ZXN0KHJxKTsKLQlpZiAoIXJxKQorCWlmICghcnEpIHsKKwkJY2UtPnJpbmctPmhlYWQgPSBjZS0+
cmluZy0+dGFpbDsKIAkJZ290byBvdXRfcmVwbGF5OworCX0KKworCWNlLT5yaW5nLT5oZWFkID0g
aW50ZWxfcmluZ193cmFwKGNlLT5yaW5nLCBycS0+aGVhZCk7CiAKIAkvKgogCSAqIElmIHRoaXMg
cmVxdWVzdCBoYXNuJ3Qgc3RhcnRlZCB5ZXQsIGUuZy4gaXQgaXMgd2FpdGluZyBvbiBhCkBAIC0y
MTU1LDcgKzIxMTMsNyBAQCBzdGF0aWMgdm9pZCBfX2V4ZWNsaXN0c19yZXNldChzdHJ1Y3QgaW50
ZWxfZW5naW5lX2NzICplbmdpbmUsIGJvb2wgc3RhbGxlZCkKIAkgKiBPdGhlcndpc2UsIGlmIHdl
IGhhdmUgbm90IHN0YXJ0ZWQgeWV0LCB0aGUgcmVxdWVzdCBzaG91bGQgcmVwbGF5CiAJICogcGVy
ZmVjdGx5IGFuZCB3ZSBkbyBub3QgbmVlZCB0byBmbGFnIHRoZSByZXN1bHQgYXMgYmVpbmcgZXJy
b25lb3VzLgogCSAqLwotCWlmICghaTkxNV9yZXF1ZXN0X3N0YXJ0ZWQocnEpICYmIGxyY19yZWdz
X29rKHJxKSkKKwlpZiAoIWk5MTVfcmVxdWVzdF9zdGFydGVkKHJxKSkKIAkJZ290byBvdXRfcmVw
bGF5OwogCiAJLyoKQEAgLTIxNzAsNyArMjEyOCw3IEBAIHN0YXRpYyB2b2lkIF9fZXhlY2xpc3Rz
X3Jlc2V0KHN0cnVjdCBpbnRlbF9lbmdpbmVfY3MgKmVuZ2luZSwgYm9vbCBzdGFsbGVkKQogCSAq
IGltYWdlIGJhY2sgdG8gdGhlIGV4cGVjdGVkIHZhbHVlcyB0byBza2lwIG92ZXIgdGhlIGd1aWx0
eSByZXF1ZXN0LgogCSAqLwogCWk5MTVfcmVzZXRfcmVxdWVzdChycSwgc3RhbGxlZCk7Ci0JaWYg
KCFzdGFsbGVkICYmIGxyY19yZWdzX29rKHJxKSkKKwlpZiAoIXN0YWxsZWQpCiAJCWdvdG8gb3V0
X3JlcGxheTsKIAogCS8qCkBAIC0yMTkwLDE3ICsyMTQ4LDEzIEBAIHN0YXRpYyB2b2lkIF9fZXhl
Y2xpc3RzX3Jlc2V0KHN0cnVjdCBpbnRlbF9lbmdpbmVfY3MgKmVuZ2luZSwgYm9vbCBzdGFsbGVk
KQogCWV4ZWNsaXN0c19pbml0X3JlZ19zdGF0ZShyZWdzLCBjZSwgZW5naW5lLCBjZS0+cmluZyk7
CiAKIG91dF9yZXBsYXk6Ci0JLyogUmVydW4gdGhlIHJlcXVlc3Q7IGl0cyBwYXlsb2FkIGhhcyBi
ZWVuIG5ldXRlcmVkIChpZiBndWlsdHkpLiAqLwotCWNlLT5yaW5nLT5oZWFkID0KLQkJcnEgPyBp
bnRlbF9yaW5nX3dyYXAoY2UtPnJpbmcsIHJxLT5oZWFkKSA6IGNlLT5yaW5nLT50YWlsOworCUdF
TV9UUkFDRSgiJXMgcmVwbGF5IHtoZWFkOiUwNHgsIHRhaWw6JTA0eFxuIiwKKwkJICBlbmdpbmUt
Pm5hbWUsIGNlLT5yaW5nLT5oZWFkLCBjZS0+cmluZy0+dGFpbCk7CiAJaW50ZWxfcmluZ191cGRh
dGVfc3BhY2UoY2UtPnJpbmcpOwogCV9fZXhlY2xpc3RzX3VwZGF0ZV9yZWdfc3RhdGUoY2UsIGVu
Z2luZSk7CiAKIAkvKiBQdXNoIGJhY2sgYW55IGluY29tcGxldGUgcmVxdWVzdHMgZm9yIHJlcGxh
eSBhZnRlciB0aGUgcmVzZXQuICovCiAJX191bndpbmRfaW5jb21wbGV0ZV9yZXF1ZXN0cyhlbmdp
bmUpOwotCi1vdXRfY2xlYXI6Ci0JZXhlY2xpc3RzX2NsZWFyX2FsbF9hY3RpdmUoZXhlY2xpc3Rz
KTsKIH0KIAogc3RhdGljIHZvaWQgZXhlY2xpc3RzX3Jlc2V0KHN0cnVjdCBpbnRlbF9lbmdpbmVf
Y3MgKmVuZ2luZSwgYm9vbCBzdGFsbGVkKQpAQCAtMjI5Niw3ICsyMjUwLDYgQEAgc3RhdGljIHZv
aWQgZXhlY2xpc3RzX2NhbmNlbF9yZXF1ZXN0cyhzdHJ1Y3QgaW50ZWxfZW5naW5lX2NzICplbmdp
bmUpCiAKIAlleGVjbGlzdHMtPnF1ZXVlX3ByaW9yaXR5X2hpbnQgPSBJTlRfTUlOOwogCWV4ZWNs
aXN0cy0+cXVldWUgPSBSQl9ST09UX0NBQ0hFRDsKLQlHRU1fQlVHX09OKHBvcnRfaXNzZXQoZXhl
Y2xpc3RzLT5wb3J0KSk7CiAKIAlHRU1fQlVHX09OKF9fdGFza2xldF9pc19lbmFibGVkKCZleGVj
bGlzdHMtPnRhc2tsZXQpKTsKIAlleGVjbGlzdHMtPnRhc2tsZXQuZnVuYyA9IG5vcF9zdWJtaXNz
aW9uX3Rhc2tsZXQ7CkBAIC0yNTE0LDE1ICsyNDY3LDI5IEBAIHN0YXRpYyB1MzIgKmdlbjhfZW1p
dF93YV90YWlsKHN0cnVjdCBpOTE1X3JlcXVlc3QgKnJlcXVlc3QsIHUzMiAqY3MpCiAJcmV0dXJu
IGNzOwogfQogCitzdGF0aWMgdTMyICplbWl0X3ByZWVtcHRfYnVzeXdhaXQoc3RydWN0IGk5MTVf
cmVxdWVzdCAqcmVxdWVzdCwgdTMyICpjcykKK3sKKwkqY3MrKyA9IE1JX1NFTUFQSE9SRV9XQUlU
IHwKKwkJTUlfU0VNQVBIT1JFX0dMT0JBTF9HVFQgfAorCQlNSV9TRU1BUEhPUkVfUE9MTCB8CisJ
CU1JX1NFTUFQSE9SRV9TQURfRVFfU0REOworCSpjcysrID0gMDsKKwkqY3MrKyA9IGludGVsX2h3
c19wcmVlbXB0X2FkZHJlc3MocmVxdWVzdC0+ZW5naW5lKTsKKwkqY3MrKyA9IDA7CisKKwlyZXR1
cm4gY3M7Cit9CisKIHN0YXRpYyB1MzIgKmdlbjhfZW1pdF9maW5pX2JyZWFkY3J1bWIoc3RydWN0
IGk5MTVfcmVxdWVzdCAqcmVxdWVzdCwgdTMyICpjcykKIHsKIAljcyA9IGdlbjhfZW1pdF9nZ3R0
X3dyaXRlKGNzLAogCQkJCSAgcmVxdWVzdC0+ZmVuY2Uuc2Vxbm8sCiAJCQkJICByZXF1ZXN0LT50
aW1lbGluZS0+aHdzcF9vZmZzZXQsCiAJCQkJICAwKTsKLQogCSpjcysrID0gTUlfVVNFUl9JTlRF
UlJVUFQ7CisKIAkqY3MrKyA9IE1JX0FSQl9PTl9PRkYgfCBNSV9BUkJfRU5BQkxFOworCWNzID0g
ZW1pdF9wcmVlbXB0X2J1c3l3YWl0KHJlcXVlc3QsIGNzKTsKIAogCXJlcXVlc3QtPnRhaWwgPSBp
bnRlbF9yaW5nX29mZnNldChyZXF1ZXN0LCBjcyk7CiAJYXNzZXJ0X3JpbmdfdGFpbF92YWxpZChy
ZXF1ZXN0LT5yaW5nLCByZXF1ZXN0LT50YWlsKTsKQEAgLTI1NDMsOSArMjUxMCwxMCBAQCBzdGF0
aWMgdTMyICpnZW44X2VtaXRfZmluaV9icmVhZGNydW1iX3JjcyhzdHJ1Y3QgaTkxNV9yZXF1ZXN0
ICpyZXF1ZXN0LCB1MzIgKmNzKQogCQkJCSAgICBQSVBFX0NPTlRST0xfRkxVU0hfRU5BQkxFIHwK
IAkJCQkgICAgUElQRV9DT05UUk9MX0NTX1NUQUxMLAogCQkJCSAgICAwKTsKLQogCSpjcysrID0g
TUlfVVNFUl9JTlRFUlJVUFQ7CisKIAkqY3MrKyA9IE1JX0FSQl9PTl9PRkYgfCBNSV9BUkJfRU5B
QkxFOworCWNzID0gZW1pdF9wcmVlbXB0X2J1c3l3YWl0KHJlcXVlc3QsIGNzKTsKIAogCXJlcXVl
c3QtPnRhaWwgPSBpbnRlbF9yaW5nX29mZnNldChyZXF1ZXN0LCBjcyk7CiAJYXNzZXJ0X3Jpbmdf
dGFpbF92YWxpZChyZXF1ZXN0LT5yaW5nLCByZXF1ZXN0LT50YWlsKTsKQEAgLTI1OTQsOCArMjU2
Miw3IEBAIHZvaWQgaW50ZWxfZXhlY2xpc3RzX3NldF9kZWZhdWx0X3N1Ym1pc3Npb24oc3RydWN0
IGludGVsX2VuZ2luZV9jcyAqZW5naW5lKQogCWVuZ2luZS0+ZmxhZ3MgfD0gSTkxNV9FTkdJTkVf
U1VQUE9SVFNfU1RBVFM7CiAJaWYgKCFpbnRlbF92Z3B1X2FjdGl2ZShlbmdpbmUtPmk5MTUpKQog
CQllbmdpbmUtPmZsYWdzIHw9IEk5MTVfRU5HSU5FX0hBU19TRU1BUEhPUkVTOwotCWlmIChlbmdp
bmUtPnByZWVtcHRfY29udGV4dCAmJgotCSAgICBIQVNfTE9HSUNBTF9SSU5HX1BSRUVNUFRJT04o
ZW5naW5lLT5pOTE1KSkKKwlpZiAoSEFTX0xPR0lDQUxfUklOR19QUkVFTVBUSU9OKGVuZ2luZS0+
aTkxNSkpCiAJCWVuZ2luZS0+ZmxhZ3MgfD0gSTkxNV9FTkdJTkVfSEFTX1BSRUVNUFRJT047CiB9
CiAKQEAgLTI3MTgsMTEgKzI2ODUsNiBAQCBpbnQgaW50ZWxfZXhlY2xpc3RzX3N1Ym1pc3Npb25f
aW5pdChzdHJ1Y3QgaW50ZWxfZW5naW5lX2NzICplbmdpbmUpCiAJCQlpOTE1X21taW9fcmVnX29m
ZnNldChSSU5HX0VMU1AoYmFzZSkpOwogCX0KIAotCWV4ZWNsaXN0cy0+cHJlZW1wdF9jb21wbGV0
ZV9zdGF0dXMgPSB+MHU7Ci0JaWYgKGVuZ2luZS0+cHJlZW1wdF9jb250ZXh0KQotCQlleGVjbGlz
dHMtPnByZWVtcHRfY29tcGxldGVfc3RhdHVzID0KLQkJCXVwcGVyXzMyX2JpdHMoZW5naW5lLT5w
cmVlbXB0X2NvbnRleHQtPmxyY19kZXNjKTsKLQogCWV4ZWNsaXN0cy0+Y3NiX3N0YXR1cyA9CiAJ
CSZlbmdpbmUtPnN0YXR1c19wYWdlLmFkZHJbSTkxNV9IV1NfQ1NCX0JVRjBfSU5ERVhdOwogCkBA
IC0yNzM0LDcgKzI2OTYsNyBAQCBpbnQgaW50ZWxfZXhlY2xpc3RzX3N1Ym1pc3Npb25faW5pdChz
dHJ1Y3QgaW50ZWxfZW5naW5lX2NzICplbmdpbmUpCiAJZWxzZQogCQlleGVjbGlzdHMtPmNzYl9z
aXplID0gR0VOMTFfQ1NCX0VOVFJJRVM7CiAKLQlyZXNldF9jc2JfcG9pbnRlcnMoZXhlY2xpc3Rz
KTsKKwlyZXNldF9jc2JfcG9pbnRlcnMoZW5naW5lKTsKIAogCXJldHVybiAwOwogfQpAQCAtMjkx
NywxMSArMjg3OSw2IEBAIHBvcHVsYXRlX2xyX2NvbnRleHQoc3RydWN0IGludGVsX2NvbnRleHQg
KmNlLAogCWlmICghZW5naW5lLT5kZWZhdWx0X3N0YXRlKQogCQlyZWdzW0NUWF9DT05URVhUX0NP
TlRST0wgKyAxXSB8PQogCQkJX01BU0tFRF9CSVRfRU5BQkxFKENUWF9DVFJMX0VOR0lORV9DVFhf
UkVTVE9SRV9JTkhJQklUKTsKLQlpZiAoY2UtPmdlbV9jb250ZXh0ID09IGVuZ2luZS0+aTkxNS0+
cHJlZW1wdF9jb250ZXh0ICYmCi0JICAgIElOVEVMX0dFTihlbmdpbmUtPmk5MTUpIDwgMTEpCi0J
CXJlZ3NbQ1RYX0NPTlRFWFRfQ09OVFJPTCArIDFdIHw9Ci0JCQlfTUFTS0VEX0JJVF9FTkFCTEUo
Q1RYX0NUUkxfRU5HSU5FX0NUWF9SRVNUT1JFX0lOSElCSVQgfAotCQkJCQkgICBDVFhfQ1RSTF9F
TkdJTkVfQ1RYX1NBVkVfSU5ISUJJVCk7CiAKIAlyZXQgPSAwOwogZXJyX3VucGluX2N0eDoKZGlm
ZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2k5MTVfZ3B1X2Vycm9yLmMgYi9kcml2ZXJz
L2dwdS9kcm0vaTkxNS9pOTE1X2dwdV9lcnJvci5jCmluZGV4IGI3ZTlmZGRlZjI3MC4uYTQ5N2Nm
N2FjYjZhIDEwMDY0NAotLS0gYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9pOTE1X2dwdV9lcnJvci5j
CisrKyBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2k5MTVfZ3B1X2Vycm9yLmMKQEAgLTEyNDgsMTAg
KzEyNDgsMTAgQEAgc3RhdGljIHZvaWQgZXJyb3JfcmVjb3JkX2VuZ2luZV9yZWdpc3RlcnMoc3Ry
dWN0IGk5MTVfZ3B1X3N0YXRlICplcnJvciwKIAl9CiB9CiAKLXN0YXRpYyB2b2lkIHJlY29yZF9y
ZXF1ZXN0KHN0cnVjdCBpOTE1X3JlcXVlc3QgKnJlcXVlc3QsCitzdGF0aWMgdm9pZCByZWNvcmRf
cmVxdWVzdChjb25zdCBzdHJ1Y3QgaTkxNV9yZXF1ZXN0ICpyZXF1ZXN0LAogCQkJICAgc3RydWN0
IGRybV9pOTE1X2Vycm9yX3JlcXVlc3QgKmVycSkKIHsKLQlzdHJ1Y3QgaTkxNV9nZW1fY29udGV4
dCAqY3R4ID0gcmVxdWVzdC0+Z2VtX2NvbnRleHQ7CisJY29uc3Qgc3RydWN0IGk5MTVfZ2VtX2Nv
bnRleHQgKmN0eCA9IHJlcXVlc3QtPmdlbV9jb250ZXh0OwogCiAJZXJxLT5mbGFncyA9IHJlcXVl
c3QtPmZlbmNlLmZsYWdzOwogCWVycS0+Y29udGV4dCA9IHJlcXVlc3QtPmZlbmNlLmNvbnRleHQ7
CkBAIC0xMzE1LDIwICsxMzE1LDE1IEBAIHN0YXRpYyB2b2lkIGVuZ2luZV9yZWNvcmRfcmVxdWVz
dHMoc3RydWN0IGludGVsX2VuZ2luZV9jcyAqZW5naW5lLAogCWVlLT5udW1fcmVxdWVzdHMgPSBj
b3VudDsKIH0KIAotc3RhdGljIHZvaWQgZXJyb3JfcmVjb3JkX2VuZ2luZV9leGVjbGlzdHMoc3Ry
dWN0IGludGVsX2VuZ2luZV9jcyAqZW5naW5lLAorc3RhdGljIHZvaWQgZXJyb3JfcmVjb3JkX2Vu
Z2luZV9leGVjbGlzdHMoY29uc3Qgc3RydWN0IGludGVsX2VuZ2luZV9jcyAqZW5naW5lLAogCQkJ
CQkgIHN0cnVjdCBkcm1faTkxNV9lcnJvcl9lbmdpbmUgKmVlKQogewogCWNvbnN0IHN0cnVjdCBp
bnRlbF9lbmdpbmVfZXhlY2xpc3RzICogY29uc3QgZXhlY2xpc3RzID0gJmVuZ2luZS0+ZXhlY2xp
c3RzOwotCXVuc2lnbmVkIGludCBuOworCXN0cnVjdCBpOTE1X3JlcXVlc3QgKiBjb25zdCAqcG9y
dCA9IGV4ZWNsaXN0cy0+YWN0aXZlOworCXVuc2lnbmVkIGludCBuID0gMDsKIAotCWZvciAobiA9
IDA7IG4gPCBleGVjbGlzdHNfbnVtX3BvcnRzKGV4ZWNsaXN0cyk7IG4rKykgewotCQlzdHJ1Y3Qg
aTkxNV9yZXF1ZXN0ICpycSA9IHBvcnRfcmVxdWVzdCgmZXhlY2xpc3RzLT5wb3J0W25dKTsKLQot
CQlpZiAoIXJxKQotCQkJYnJlYWs7Ci0KLQkJcmVjb3JkX3JlcXVlc3QocnEsICZlZS0+ZXhlY2xp
c3Rbbl0pOwotCX0KKwl3aGlsZSAoKnBvcnQpCisJCXJlY29yZF9yZXF1ZXN0KCpwb3J0KyssICZl
ZS0+ZXhlY2xpc3RbbisrXSk7CiAKIAllZS0+bnVtX3BvcnRzID0gbjsKIH0KZGlmZiAtLWdpdCBh
L2RyaXZlcnMvZ3B1L2RybS9pOTE1L2k5MTVfcmVxdWVzdC5jIGIvZHJpdmVycy9ncHUvZHJtL2k5
MTUvaTkxNV9yZXF1ZXN0LmMKaW5kZXggNzA4M2U2YWI5MmM1Li4wYzk5Njk0ZmFhYjcgMTAwNjQ0
Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2k5MTVfcmVxdWVzdC5jCisrKyBiL2RyaXZlcnMv
Z3B1L2RybS9pOTE1L2k5MTVfcmVxdWVzdC5jCkBAIC0yNzYsNiArMjc2LDEyIEBAIHN0YXRpYyBi
b29sIGk5MTVfcmVxdWVzdF9yZXRpcmUoc3RydWN0IGk5MTVfcmVxdWVzdCAqcnEpCiAKIAlsb2Nh
bF9pcnFfZGlzYWJsZSgpOwogCisJLyoKKwkgKiBXZSBvbmx5IGxvb3NlbHkgdHJhY2sgaW5mbGln
aHQgcmVxdWVzdHMgYWNyb3NzIHByZWVtcHRpb24sCisJICogYW5kIHNvIHdlIG1heSBmaW5kIG91
cnNlbHZlcyBhdHRlbXB0aW5nIHRvIHJldGlyZSBhIF9jb21wbGV0ZWRfCisJICogcmVxdWVzdCB0
aGF0IHdlIGhhdmUgcmVtb3ZlZCBmcm9tIHRoZSBIVyBhbmQgcHV0IGJhY2sgb24gYSBydW4KKwkg
KiBxdWV1ZS4KKwkgKi8KIAlzcGluX2xvY2soJnJxLT5lbmdpbmUtPmFjdGl2ZS5sb2NrKTsKIAls
aXN0X2RlbCgmcnEtPnNjaGVkLmxpbmspOwogCXNwaW5fdW5sb2NrKCZycS0+ZW5naW5lLT5hY3Rp
dmUubG9jayk7CmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9pOTE1X3JlcXVlc3Qu
aCBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2k5MTVfcmVxdWVzdC5oCmluZGV4IGVkYmJkZmVjMjRh
Yi4uYmViYzFlOWI0YTVlIDEwMDY0NAotLS0gYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9pOTE1X3Jl
cXVlc3QuaAorKysgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9pOTE1X3JlcXVlc3QuaApAQCAtMjgs
NiArMjgsNyBAQAogI2luY2x1ZGUgPGxpbnV4L2RtYS1mZW5jZS5oPgogI2luY2x1ZGUgPGxpbnV4
L2xvY2tkZXAuaD4KIAorI2luY2x1ZGUgImd0L2ludGVsX2NvbnRleHRfdHlwZXMuaCIKICNpbmNs
dWRlICJndC9pbnRlbF9lbmdpbmVfdHlwZXMuaCIKIAogI2luY2x1ZGUgImk5MTVfZ2VtLmgiCmRp
ZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9pOTE1X3NjaGVkdWxlci5jIGIvZHJpdmVy
cy9ncHUvZHJtL2k5MTUvaTkxNV9zY2hlZHVsZXIuYwppbmRleCAyZTliMzhiZGMzM2MuLmIxYmEz
ZTY1Y2Q1MiAxMDA2NDQKLS0tIGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvaTkxNV9zY2hlZHVsZXIu
YworKysgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9pOTE1X3NjaGVkdWxlci5jCkBAIC0xNzksOCAr
MTc5LDcgQEAgc3RhdGljIGlubGluZSBpbnQgcnFfcHJpbyhjb25zdCBzdHJ1Y3QgaTkxNV9yZXF1
ZXN0ICpycSkKIAogc3RhdGljIHZvaWQga2lja19zdWJtaXNzaW9uKHN0cnVjdCBpbnRlbF9lbmdp
bmVfY3MgKmVuZ2luZSwgaW50IHByaW8pCiB7Ci0JY29uc3Qgc3RydWN0IGk5MTVfcmVxdWVzdCAq
aW5mbGlnaHQgPQotCQlwb3J0X3JlcXVlc3QoZW5naW5lLT5leGVjbGlzdHMucG9ydCk7CisJY29u
c3Qgc3RydWN0IGk5MTVfcmVxdWVzdCAqaW5mbGlnaHQgPSAqZW5naW5lLT5leGVjbGlzdHMuYWN0
aXZlOwogCiAJLyoKIAkgKiBJZiB3ZSBhcmUgYWxyZWFkeSB0aGUgY3VycmVudGx5IGV4ZWN1dGlu
ZyBjb250ZXh0LCBkb24ndApkaWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvaTkxNV91
dGlscy5oIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvaTkxNV91dGlscy5oCmluZGV4IDI5ODcyMTlh
NjMwMC4uNDkyMGZmOWFiYTYyIDEwMDY0NAotLS0gYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9pOTE1
X3V0aWxzLmgKKysrIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvaTkxNV91dGlscy5oCkBAIC0xMzEs
NiArMTMxLDE4IEBAIF9fY2hlY2tfc3RydWN0X3NpemUoc2l6ZV90IGJhc2UsIHNpemVfdCBhcnIs
IHNpemVfdCBjb3VudCwgc2l6ZV90ICpzaXplKQogCSgodHlwZW9mKHB0cikpKCh1bnNpZ25lZCBs
b25nKShwdHIpIHwgX19iaXRzKSk7CQkJXAogfSkKIAorI2RlZmluZSBwdHJfY291bnRfZGVjKHBf
cHRyKSBkbyB7CQkJCQlcCisJdHlwZW9mKHBfcHRyKSBfX3AgPSAocF9wdHIpOwkJCQkJXAorCXVu
c2lnbmVkIGxvbmcgX192ID0gKHVuc2lnbmVkIGxvbmcpKCpfX3ApOwkJCVwKKwkqX19wID0gKHR5
cGVvZigqcF9wdHIpKSgtLV9fdik7CQkJCQlcCit9IHdoaWxlICgwKQorCisjZGVmaW5lIHB0cl9j
b3VudF9pbmMocF9wdHIpIGRvIHsJCQkJCVwKKwl0eXBlb2YocF9wdHIpIF9fcCA9IChwX3B0cik7
CQkJCQlcCisJdW5zaWduZWQgbG9uZyBfX3YgPSAodW5zaWduZWQgbG9uZykoKl9fcCk7CQkJXAor
CSpfX3AgPSAodHlwZW9mKCpwX3B0cikpKCsrX192KTsJCQkJCVwKK30gd2hpbGUgKDApCisKICNk
ZWZpbmUgcGFnZV9tYXNrX2JpdHMocHRyKSBwdHJfbWFza19iaXRzKHB0ciwgUEFHRV9TSElGVCkK
ICNkZWZpbmUgcGFnZV91bm1hc2tfYml0cyhwdHIpIHB0cl91bm1hc2tfYml0cyhwdHIsIFBBR0Vf
U0hJRlQpCiAjZGVmaW5lIHBhZ2VfcGFja19iaXRzKHB0ciwgYml0cykgcHRyX3BhY2tfYml0cyhw
dHIsIGJpdHMsIFBBR0VfU0hJRlQpCmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9p
bnRlbF9ndWNfc3VibWlzc2lvbi5jIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvaW50ZWxfZ3VjX3N1
Ym1pc3Npb24uYwppbmRleCBkYjUzMWViYzc3MDQuLjEyYzIyMzU5ZmRhYyAxMDA2NDQKLS0tIGEv
ZHJpdmVycy9ncHUvZHJtL2k5MTUvaW50ZWxfZ3VjX3N1Ym1pc3Npb24uYworKysgYi9kcml2ZXJz
L2dwdS9kcm0vaTkxNS9pbnRlbF9ndWNfc3VibWlzc2lvbi5jCkBAIC0zMiw3ICszMiwxMSBAQAog
I2luY2x1ZGUgImludGVsX2d1Y19zdWJtaXNzaW9uLmgiCiAjaW5jbHVkZSAiaTkxNV9kcnYuaCIK
IAotI2RlZmluZSBHVUNfUFJFRU1QVF9GSU5JU0hFRAkJMHgxCitlbnVtIHsKKwlHVUNfUFJFRU1Q
VF9OT05FID0gMCwKKwlHVUNfUFJFRU1QVF9JTlBST0dSRVNTLAorCUdVQ19QUkVFTVBUX0ZJTklT
SEVELAorfTsKICNkZWZpbmUgR1VDX1BSRUVNUFRfQlJFQURDUlVNQl9EV09SRFMJMHg4CiAjZGVm
aW5lIEdVQ19QUkVFTVBUX0JSRUFEQ1JVTUJfQllURVMJXAogCShzaXplb2YodTMyKSAqIEdVQ19Q
UkVFTVBUX0JSRUFEQ1JVTUJfRFdPUkRTKQpAQCAtNTM3LDE1ICs1NDEsMTEgQEAgc3RhdGljIHZv
aWQgZ3VjX2FkZF9yZXF1ZXN0KHN0cnVjdCBpbnRlbF9ndWMgKmd1Yywgc3RydWN0IGk5MTVfcmVx
dWVzdCAqcnEpCiAJdTMyIGN0eF9kZXNjID0gbG93ZXJfMzJfYml0cyhycS0+aHdfY29udGV4dC0+
bHJjX2Rlc2MpOwogCXUzMiByaW5nX3RhaWwgPSBpbnRlbF9yaW5nX3NldF90YWlsKHJxLT5yaW5n
LCBycS0+dGFpbCkgLyBzaXplb2YodTY0KTsKIAotCXNwaW5fbG9jaygmY2xpZW50LT53cV9sb2Nr
KTsKLQogCWd1Y193cV9pdGVtX2FwcGVuZChjbGllbnQsIGVuZ2luZS0+Z3VjX2lkLCBjdHhfZGVz
YywKIAkJCSAgIHJpbmdfdGFpbCwgcnEtPmZlbmNlLnNlcW5vKTsKIAlndWNfcmluZ19kb29yYmVs
bChjbGllbnQpOwogCiAJY2xpZW50LT5zdWJtaXNzaW9uc1tlbmdpbmUtPmlkXSArPSAxOwotCi0J
c3Bpbl91bmxvY2soJmNsaWVudC0+d3FfbG9jayk7CiB9CiAKIC8qCkBAIC02MzEsOCArNjMxLDkg
QEAgc3RhdGljIHZvaWQgaW5qZWN0X3ByZWVtcHRfY29udGV4dChzdHJ1Y3Qgd29ya19zdHJ1Y3Qg
KndvcmspCiAJZGF0YVs2XSA9IGludGVsX2d1Y19nZ3R0X29mZnNldChndWMsIGd1Yy0+c2hhcmVk
X2RhdGEpOwogCiAJaWYgKFdBUk5fT04oaW50ZWxfZ3VjX3NlbmQoZ3VjLCBkYXRhLCBBUlJBWV9T
SVpFKGRhdGEpKSkpIHsKLQkJZXhlY2xpc3RzX2NsZWFyX2FjdGl2ZSgmZW5naW5lLT5leGVjbGlz
dHMsCi0JCQkJICAgICAgIEVYRUNMSVNUU19BQ1RJVkVfUFJFRU1QVCk7CisJCWludGVsX3dyaXRl
X3N0YXR1c19wYWdlKGVuZ2luZSwKKwkJCQkJSTkxNV9HRU1fSFdTX1BSRUVNUFQsCisJCQkJCUdV
Q19QUkVFTVBUX05PTkUpOwogCQl0YXNrbGV0X3NjaGVkdWxlKCZlbmdpbmUtPmV4ZWNsaXN0cy50
YXNrbGV0KTsKIAl9CiAKQEAgLTY3Miw4ICs2NzMsNiBAQCBzdGF0aWMgdm9pZCBjb21wbGV0ZV9w
cmVlbXB0X2NvbnRleHQoc3RydWN0IGludGVsX2VuZ2luZV9jcyAqZW5naW5lKQogewogCXN0cnVj
dCBpbnRlbF9lbmdpbmVfZXhlY2xpc3RzICpleGVjbGlzdHMgPSAmZW5naW5lLT5leGVjbGlzdHM7
CiAKLQlHRU1fQlVHX09OKCFleGVjbGlzdHNfaXNfYWN0aXZlKGV4ZWNsaXN0cywgRVhFQ0xJU1RT
X0FDVElWRV9QUkVFTVBUKSk7Ci0KIAlpZiAoaW5qZWN0X3ByZWVtcHRfaGFuZyhleGVjbGlzdHMp
KQogCQlyZXR1cm47CiAKQEAgLTY4MSw4OSArNjgwLDkwIEBAIHN0YXRpYyB2b2lkIGNvbXBsZXRl
X3ByZWVtcHRfY29udGV4dChzdHJ1Y3QgaW50ZWxfZW5naW5lX2NzICplbmdpbmUpCiAJZXhlY2xp
c3RzX3Vud2luZF9pbmNvbXBsZXRlX3JlcXVlc3RzKGV4ZWNsaXN0cyk7CiAKIAl3YWl0X2Zvcl9n
dWNfcHJlZW1wdF9yZXBvcnQoZW5naW5lKTsKLQlpbnRlbF93cml0ZV9zdGF0dXNfcGFnZShlbmdp
bmUsIEk5MTVfR0VNX0hXU19QUkVFTVBULCAwKTsKKwlpbnRlbF93cml0ZV9zdGF0dXNfcGFnZShl
bmdpbmUsIEk5MTVfR0VNX0hXU19QUkVFTVBULCBHVUNfUFJFRU1QVF9OT05FKTsKIH0KIAotLyoq
Ci0gKiBndWNfc3VibWl0KCkgLSBTdWJtaXQgY29tbWFuZHMgdGhyb3VnaCBHdUMKLSAqIEBlbmdp
bmU6IGVuZ2luZSBhc3NvY2lhdGVkIHdpdGggdGhlIGNvbW1hbmRzCi0gKgotICogVGhlIG9ubHkg
ZXJyb3IgaGVyZSBhcmlzZXMgaWYgdGhlIGRvb3JiZWxsIGhhcmR3YXJlIGlzbid0IGZ1bmN0aW9u
aW5nCi0gKiBhcyBleHBlY3RlZCwgd2hpY2ggcmVhbGx5IHNob3Vsbid0IGhhcHBlbi4KLSAqLwot
c3RhdGljIHZvaWQgZ3VjX3N1Ym1pdChzdHJ1Y3QgaW50ZWxfZW5naW5lX2NzICplbmdpbmUpCitz
dGF0aWMgdm9pZCBndWNfc3VibWl0KHN0cnVjdCBpbnRlbF9lbmdpbmVfY3MgKmVuZ2luZSwKKwkJ
ICAgICAgIHN0cnVjdCBpOTE1X3JlcXVlc3QgKipvdXQsCisJCSAgICAgICBzdHJ1Y3QgaTkxNV9y
ZXF1ZXN0ICoqZW5kKQogewogCXN0cnVjdCBpbnRlbF9ndWMgKmd1YyA9ICZlbmdpbmUtPmk5MTUt
Pmd1YzsKLQlzdHJ1Y3QgaW50ZWxfZW5naW5lX2V4ZWNsaXN0cyAqIGNvbnN0IGV4ZWNsaXN0cyA9
ICZlbmdpbmUtPmV4ZWNsaXN0czsKLQlzdHJ1Y3QgZXhlY2xpc3RfcG9ydCAqcG9ydCA9IGV4ZWNs
aXN0cy0+cG9ydDsKLQl1bnNpZ25lZCBpbnQgbjsKKwlzdHJ1Y3QgaW50ZWxfZ3VjX2NsaWVudCAq
Y2xpZW50ID0gZ3VjLT5leGVjYnVmX2NsaWVudDsKIAotCWZvciAobiA9IDA7IG4gPCBleGVjbGlz
dHNfbnVtX3BvcnRzKGV4ZWNsaXN0cyk7IG4rKykgewotCQlzdHJ1Y3QgaTkxNV9yZXF1ZXN0ICpy
cTsKLQkJdW5zaWduZWQgaW50IGNvdW50OworCXNwaW5fbG9jaygmY2xpZW50LT53cV9sb2NrKTsK
IAotCQlycSA9IHBvcnRfdW5wYWNrKCZwb3J0W25dLCAmY291bnQpOwotCQlpZiAocnEgJiYgY291
bnQgPT0gMCkgewotCQkJcG9ydF9zZXQoJnBvcnRbbl0sIHBvcnRfcGFjayhycSwgKytjb3VudCkp
OworCWRvIHsKKwkJc3RydWN0IGk5MTVfcmVxdWVzdCAqcnEgPSAqb3V0Kys7CiAKLQkJCWZsdXNo
X2dndHRfd3JpdGVzKHJxLT5yaW5nLT52bWEpOworCQlmbHVzaF9nZ3R0X3dyaXRlcyhycS0+cmlu
Zy0+dm1hKTsKKwkJZ3VjX2FkZF9yZXF1ZXN0KGd1YywgcnEpOworCX0gd2hpbGUgKG91dCAhPSBl
bmQpOwogCi0JCQlndWNfYWRkX3JlcXVlc3QoZ3VjLCBycSk7Ci0JCX0KLQl9CisJc3Bpbl91bmxv
Y2soJmNsaWVudC0+d3FfbG9jayk7CiB9CiAKLXN0YXRpYyB2b2lkIHBvcnRfYXNzaWduKHN0cnVj
dCBleGVjbGlzdF9wb3J0ICpwb3J0LCBzdHJ1Y3QgaTkxNV9yZXF1ZXN0ICpycSkKK3N0YXRpYyBp
bmxpbmUgaW50IHJxX3ByaW8oY29uc3Qgc3RydWN0IGk5MTVfcmVxdWVzdCAqcnEpCiB7Ci0JR0VN
X0JVR19PTihwb3J0X2lzc2V0KHBvcnQpKTsKLQotCXBvcnRfc2V0KHBvcnQsIGk5MTVfcmVxdWVz
dF9nZXQocnEpKTsKKwlyZXR1cm4gcnEtPnNjaGVkLmF0dHIucHJpb3JpdHkgfCBfX05PX1BSRUVN
UFRJT047CiB9CiAKLXN0YXRpYyBpbmxpbmUgaW50IHJxX3ByaW8oY29uc3Qgc3RydWN0IGk5MTVf
cmVxdWVzdCAqcnEpCitzdGF0aWMgc3RydWN0IGk5MTVfcmVxdWVzdCAqc2NoZWR1bGVfaW4oc3Ry
dWN0IGk5MTVfcmVxdWVzdCAqcnEsIGludCBpZHgpCiB7Ci0JcmV0dXJuIHJxLT5zY2hlZC5hdHRy
LnByaW9yaXR5OworCXRyYWNlX2k5MTVfcmVxdWVzdF9pbihycSwgaWR4KTsKKworCWlmICghcnEt
Pmh3X2NvbnRleHQtPmluZmxpZ2h0KQorCQlycS0+aHdfY29udGV4dC0+aW5mbGlnaHQgPSBycS0+
ZW5naW5lOworCWludGVsX2NvbnRleHRfaW5mbGlnaHRfaW5jKHJxLT5od19jb250ZXh0KTsKKwor
CXJldHVybiBpOTE1X3JlcXVlc3RfZ2V0KHJxKTsKIH0KIAotc3RhdGljIGlubGluZSBpbnQgcG9y
dF9wcmlvKGNvbnN0IHN0cnVjdCBleGVjbGlzdF9wb3J0ICpwb3J0KQorc3RhdGljIHZvaWQgc2No
ZWR1bGVfb3V0KHN0cnVjdCBpOTE1X3JlcXVlc3QgKnJxKQogewotCXJldHVybiBycV9wcmlvKHBv
cnRfcmVxdWVzdChwb3J0KSkgfCBfX05PX1BSRUVNUFRJT047CisJdHJhY2VfaTkxNV9yZXF1ZXN0
X291dChycSk7CisKKwlpbnRlbF9jb250ZXh0X2luZmxpZ2h0X2RlYyhycS0+aHdfY29udGV4dCk7
CisJaWYgKCFpbnRlbF9jb250ZXh0X2luZmxpZ2h0X2NvdW50KHJxLT5od19jb250ZXh0KSkKKwkJ
cnEtPmh3X2NvbnRleHQtPmluZmxpZ2h0ID0gTlVMTDsKKworCWk5MTVfcmVxdWVzdF9wdXQocnEp
OwogfQogCi1zdGF0aWMgYm9vbCBfX2d1Y19kZXF1ZXVlKHN0cnVjdCBpbnRlbF9lbmdpbmVfY3Mg
KmVuZ2luZSkKK3N0YXRpYyB2b2lkIF9fZ3VjX2RlcXVldWUoc3RydWN0IGludGVsX2VuZ2luZV9j
cyAqZW5naW5lKQogewogCXN0cnVjdCBpbnRlbF9lbmdpbmVfZXhlY2xpc3RzICogY29uc3QgZXhl
Y2xpc3RzID0gJmVuZ2luZS0+ZXhlY2xpc3RzOwotCXN0cnVjdCBleGVjbGlzdF9wb3J0ICpwb3J0
ID0gZXhlY2xpc3RzLT5wb3J0OwotCXN0cnVjdCBpOTE1X3JlcXVlc3QgKmxhc3QgPSBOVUxMOwot
CWNvbnN0IHN0cnVjdCBleGVjbGlzdF9wb3J0ICogY29uc3QgbGFzdF9wb3J0ID0KLQkJJmV4ZWNs
aXN0cy0+cG9ydFtleGVjbGlzdHMtPnBvcnRfbWFza107CisJc3RydWN0IGk5MTVfcmVxdWVzdCAq
KmZpcnN0ID0gZXhlY2xpc3RzLT5pbmZsaWdodDsKKwlzdHJ1Y3QgaTkxNV9yZXF1ZXN0ICoqIGNv
bnN0IGxhc3RfcG9ydCA9IGZpcnN0ICsgZXhlY2xpc3RzLT5wb3J0X21hc2s7CisJc3RydWN0IGk5
MTVfcmVxdWVzdCAqbGFzdCA9IGZpcnN0WzBdOworCXN0cnVjdCBpOTE1X3JlcXVlc3QgKipwb3J0
OwogCWJvb2wgc3VibWl0ID0gZmFsc2U7CiAJc3RydWN0IHJiX25vZGUgKnJiOwogCiAJbG9ja2Rl
cF9hc3NlcnRfaGVsZCgmZW5naW5lLT5hY3RpdmUubG9jayk7CiAKLQlpZiAocG9ydF9pc3NldChw
b3J0KSkgeworCWlmIChsYXN0KSB7CiAJCWlmIChpbnRlbF9lbmdpbmVfaGFzX3ByZWVtcHRpb24o
ZW5naW5lKSkgewogCQkJc3RydWN0IGd1Y19wcmVlbXB0X3dvcmsgKnByZWVtcHRfd29yayA9CiAJ
CQkJJmVuZ2luZS0+aTkxNS0+Z3VjLnByZWVtcHRfd29ya1tlbmdpbmUtPmlkXTsKIAkJCWludCBw
cmlvID0gZXhlY2xpc3RzLT5xdWV1ZV9wcmlvcml0eV9oaW50OwogCi0JCQlpZiAoaTkxNV9zY2hl
ZHVsZXJfbmVlZF9wcmVlbXB0KHByaW8sCi0JCQkJCQkJcG9ydF9wcmlvKHBvcnQpKSkgewotCQkJ
CWV4ZWNsaXN0c19zZXRfYWN0aXZlKGV4ZWNsaXN0cywKLQkJCQkJCSAgICAgRVhFQ0xJU1RTX0FD
VElWRV9QUkVFTVBUKTsKKwkJCWlmIChpOTE1X3NjaGVkdWxlcl9uZWVkX3ByZWVtcHQocHJpbywg
cnFfcHJpbyhsYXN0KSkpIHsKKwkJCQlpbnRlbF93cml0ZV9zdGF0dXNfcGFnZShlbmdpbmUsCisJ
CQkJCQkJSTkxNV9HRU1fSFdTX1BSRUVNUFQsCisJCQkJCQkJR1VDX1BSRUVNUFRfSU5QUk9HUkVT
Uyk7CiAJCQkJcXVldWVfd29yayhlbmdpbmUtPmk5MTUtPmd1Yy5wcmVlbXB0X3dxLAogCQkJCQkg
ICAmcHJlZW1wdF93b3JrLT53b3JrKTsKLQkJCQlyZXR1cm4gZmFsc2U7CisJCQkJcmV0dXJuOwog
CQkJfQogCQl9CiAKLQkJcG9ydCsrOwotCQlpZiAocG9ydF9pc3NldChwb3J0KSkKLQkJCXJldHVy
biBmYWxzZTsKKwkJaWYgKCorK2ZpcnN0KQorCQkJcmV0dXJuOworCisJCWxhc3QgPSBOVUxMOwog
CX0KLQlHRU1fQlVHX09OKHBvcnRfaXNzZXQocG9ydCkpOwogCisJcG9ydCA9IGZpcnN0OwogCXdo
aWxlICgocmIgPSByYl9maXJzdF9jYWNoZWQoJmV4ZWNsaXN0cy0+cXVldWUpKSkgewogCQlzdHJ1
Y3QgaTkxNV9wcmlvbGlzdCAqcCA9IHRvX3ByaW9saXN0KHJiKTsKIAkJc3RydWN0IGk5MTVfcmVx
dWVzdCAqcnEsICpybjsKQEAgLTc3NCwxOCArNzc0LDE1IEBAIHN0YXRpYyBib29sIF9fZ3VjX2Rl
cXVldWUoc3RydWN0IGludGVsX2VuZ2luZV9jcyAqZW5naW5lKQogCQkJCWlmIChwb3J0ID09IGxh
c3RfcG9ydCkKIAkJCQkJZ290byBkb25lOwogCi0JCQkJaWYgKHN1Ym1pdCkKLQkJCQkJcG9ydF9h
c3NpZ24ocG9ydCwgbGFzdCk7CisJCQkJKnBvcnQgPSBzY2hlZHVsZV9pbihsYXN0LAorCQkJCQkJ
ICAgIHBvcnQgLSBleGVjbGlzdHMtPmluZmxpZ2h0KTsKIAkJCQlwb3J0Kys7CiAJCQl9CiAKIAkJ
CWxpc3RfZGVsX2luaXQoJnJxLT5zY2hlZC5saW5rKTsKLQogCQkJX19pOTE1X3JlcXVlc3Rfc3Vi
bWl0KHJxKTsKLQkJCXRyYWNlX2k5MTVfcmVxdWVzdF9pbihycSwgcG9ydF9pbmRleChwb3J0LCBl
eGVjbGlzdHMpKTsKLQotCQkJbGFzdCA9IHJxOwogCQkJc3VibWl0ID0gdHJ1ZTsKKwkJCWxhc3Qg
PSBycTsKIAkJfQogCiAJCXJiX2VyYXNlX2NhY2hlZCgmcC0+bm9kZSwgJmV4ZWNsaXN0cy0+cXVl
dWUpOwpAQCAtNzk0LDU4ICs3OTEsNDEgQEAgc3RhdGljIGJvb2wgX19ndWNfZGVxdWV1ZShzdHJ1
Y3QgaW50ZWxfZW5naW5lX2NzICplbmdpbmUpCiBkb25lOgogCWV4ZWNsaXN0cy0+cXVldWVfcHJp
b3JpdHlfaGludCA9CiAJCXJiID8gdG9fcHJpb2xpc3QocmIpLT5wcmlvcml0eSA6IElOVF9NSU47
Ci0JaWYgKHN1Ym1pdCkKLQkJcG9ydF9hc3NpZ24ocG9ydCwgbGFzdCk7Ci0JaWYgKGxhc3QpCi0J
CWV4ZWNsaXN0c191c2VyX2JlZ2luKGV4ZWNsaXN0cywgZXhlY2xpc3RzLT5wb3J0KTsKLQotCS8q
IFdlIG11c3QgYWx3YXlzIGtlZXAgdGhlIGJlYXN0IGZlZCBpZiB3ZSBoYXZlIHdvcmsgcGlsZWQg
dXAgKi8KLQlHRU1fQlVHX09OKHBvcnRfaXNzZXQoZXhlY2xpc3RzLT5wb3J0KSAmJgotCQkgICAh
ZXhlY2xpc3RzX2lzX2FjdGl2ZShleGVjbGlzdHMsIEVYRUNMSVNUU19BQ1RJVkVfVVNFUikpOwot
CUdFTV9CVUdfT04ocmJfZmlyc3RfY2FjaGVkKCZleGVjbGlzdHMtPnF1ZXVlKSAmJgotCQkgICAh
cG9ydF9pc3NldChleGVjbGlzdHMtPnBvcnQpKTsKLQotCXJldHVybiBzdWJtaXQ7Ci19Ci0KLXN0
YXRpYyB2b2lkIGd1Y19kZXF1ZXVlKHN0cnVjdCBpbnRlbF9lbmdpbmVfY3MgKmVuZ2luZSkKLXsK
LQlpZiAoX19ndWNfZGVxdWV1ZShlbmdpbmUpKQotCQlndWNfc3VibWl0KGVuZ2luZSk7CisJaWYg
KHN1Ym1pdCkgeworCQkqcG9ydCA9IHNjaGVkdWxlX2luKGxhc3QsIHBvcnQgLSBleGVjbGlzdHMt
PmluZmxpZ2h0KTsKKwkJKisrcG9ydCA9IE5VTEw7CisJCWd1Y19zdWJtaXQoZW5naW5lLCBmaXJz
dCwgcG9ydCk7CisJfQorCWV4ZWNsaXN0cy0+YWN0aXZlID0gZXhlY2xpc3RzLT5pbmZsaWdodDsK
IH0KIAogc3RhdGljIHZvaWQgZ3VjX3N1Ym1pc3Npb25fdGFza2xldCh1bnNpZ25lZCBsb25nIGRh
dGEpCiB7CiAJc3RydWN0IGludGVsX2VuZ2luZV9jcyAqIGNvbnN0IGVuZ2luZSA9IChzdHJ1Y3Qg
aW50ZWxfZW5naW5lX2NzICopZGF0YTsKIAlzdHJ1Y3QgaW50ZWxfZW5naW5lX2V4ZWNsaXN0cyAq
IGNvbnN0IGV4ZWNsaXN0cyA9ICZlbmdpbmUtPmV4ZWNsaXN0czsKLQlzdHJ1Y3QgZXhlY2xpc3Rf
cG9ydCAqcG9ydCA9IGV4ZWNsaXN0cy0+cG9ydDsKLQlzdHJ1Y3QgaTkxNV9yZXF1ZXN0ICpycTsK
KwlzdHJ1Y3QgaTkxNV9yZXF1ZXN0ICoqcG9ydCwgKnJxOwogCXVuc2lnbmVkIGxvbmcgZmxhZ3M7
CiAKIAlzcGluX2xvY2tfaXJxc2F2ZSgmZW5naW5lLT5hY3RpdmUubG9jaywgZmxhZ3MpOwogCi0J
cnEgPSBwb3J0X3JlcXVlc3QocG9ydCk7Ci0Jd2hpbGUgKHJxICYmIGk5MTVfcmVxdWVzdF9jb21w
bGV0ZWQocnEpKSB7Ci0JCXRyYWNlX2k5MTVfcmVxdWVzdF9vdXQocnEpOwotCQlpOTE1X3JlcXVl
c3RfcHV0KHJxKTsKKwlmb3IgKHBvcnQgPSBleGVjbGlzdHMtPmluZmxpZ2h0OyAocnEgPSAqcG9y
dCk7IHBvcnQrKykgeworCQlpZiAoIWk5MTVfcmVxdWVzdF9jb21wbGV0ZWQocnEpKQorCQkJYnJl
YWs7CiAKLQkJcG9ydCA9IGV4ZWNsaXN0c19wb3J0X2NvbXBsZXRlKGV4ZWNsaXN0cywgcG9ydCk7
Ci0JCWlmIChwb3J0X2lzc2V0KHBvcnQpKSB7Ci0JCQlleGVjbGlzdHNfdXNlcl9iZWdpbihleGVj
bGlzdHMsIHBvcnQpOwotCQkJcnEgPSBwb3J0X3JlcXVlc3QocG9ydCk7Ci0JCX0gZWxzZSB7Ci0J
CQlleGVjbGlzdHNfdXNlcl9lbmQoZXhlY2xpc3RzKTsKLQkJCXJxID0gTlVMTDsKLQkJfQorCQlz
Y2hlZHVsZV9vdXQocnEpOworCX0KKwlpZiAocG9ydCAhPSBleGVjbGlzdHMtPmluZmxpZ2h0KSB7
CisJCWludCBpZHggPSBwb3J0IC0gZXhlY2xpc3RzLT5pbmZsaWdodDsKKwkJaW50IHJlbSA9IEFS
UkFZX1NJWkUoZXhlY2xpc3RzLT5pbmZsaWdodCkgLSBpZHg7CisJCW1lbW1vdmUoZXhlY2xpc3Rz
LT5pbmZsaWdodCwgcG9ydCwgcmVtICogc2l6ZW9mKCpwb3J0KSk7CiAJfQogCi0JaWYgKGV4ZWNs
aXN0c19pc19hY3RpdmUoZXhlY2xpc3RzLCBFWEVDTElTVFNfQUNUSVZFX1BSRUVNUFQpICYmCi0J
ICAgIGludGVsX3JlYWRfc3RhdHVzX3BhZ2UoZW5naW5lLCBJOTE1X0dFTV9IV1NfUFJFRU1QVCkg
PT0KKwlpZiAoaW50ZWxfcmVhZF9zdGF0dXNfcGFnZShlbmdpbmUsIEk5MTVfR0VNX0hXU19QUkVF
TVBUKSA9PQogCSAgICBHVUNfUFJFRU1QVF9GSU5JU0hFRCkKIAkJY29tcGxldGVfcHJlZW1wdF9j
b250ZXh0KGVuZ2luZSk7CiAKLQlpZiAoIWV4ZWNsaXN0c19pc19hY3RpdmUoZXhlY2xpc3RzLCBF
WEVDTElTVFNfQUNUSVZFX1BSRUVNUFQpKQotCQlndWNfZGVxdWV1ZShlbmdpbmUpOworCWlmICgh
aW50ZWxfcmVhZF9zdGF0dXNfcGFnZShlbmdpbmUsIEk5MTVfR0VNX0hXU19QUkVFTVBUKSkKKwkJ
X19ndWNfZGVxdWV1ZShlbmdpbmUpOwogCiAJc3Bpbl91bmxvY2tfaXJxcmVzdG9yZSgmZW5naW5l
LT5hY3RpdmUubG9jaywgZmxhZ3MpOwogfQpAQCAtOTU5LDcgKzkzOSw2IEBAIHN0YXRpYyB2b2lk
IGd1Y19jYW5jZWxfcmVxdWVzdHMoc3RydWN0IGludGVsX2VuZ2luZV9jcyAqZW5naW5lKQogCiAJ
ZXhlY2xpc3RzLT5xdWV1ZV9wcmlvcml0eV9oaW50ID0gSU5UX01JTjsKIAlleGVjbGlzdHMtPnF1
ZXVlID0gUkJfUk9PVF9DQUNIRUQ7Ci0JR0VNX0JVR19PTihwb3J0X2lzc2V0KGV4ZWNsaXN0cy0+
cG9ydCkpOwogCiAJc3Bpbl91bmxvY2tfaXJxcmVzdG9yZSgmZW5naW5lLT5hY3RpdmUubG9jaywg
ZmxhZ3MpOwogfQpAQCAtMTQyMiw3ICsxNDAxLDcgQEAgaW50IGludGVsX2d1Y19zdWJtaXNzaW9u
X2VuYWJsZShzdHJ1Y3QgaW50ZWxfZ3VjICpndWMpCiAJICogYW5kIGl0IGlzIGd1YXJhbnRlZWQg
dGhhdCBpdCB3aWxsIHJlbW92ZSB0aGUgd29yayBpdGVtIGZyb20gdGhlCiAJICogcXVldWUgYmVm
b3JlIG91ciByZXF1ZXN0IGlzIGNvbXBsZXRlZC4KIAkgKi8KLQlCVUlMRF9CVUdfT04oQVJSQVlf
U0laRShlbmdpbmUtPmV4ZWNsaXN0cy5wb3J0KSAqCisJQlVJTERfQlVHX09OKEFSUkFZX1NJWkUo
ZW5naW5lLT5leGVjbGlzdHMuaW5mbGlnaHQpICoKIAkJICAgICBzaXplb2Yoc3RydWN0IGd1Y193
cV9pdGVtKSAqCiAJCSAgICAgSTkxNV9OVU1fRU5HSU5FUyA+IEdVQ19XUV9TSVpFKTsKIApkaWZm
IC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvc2VsZnRlc3RzL2k5MTVfcmVxdWVzdC5jIGIv
ZHJpdmVycy9ncHUvZHJtL2k5MTUvc2VsZnRlc3RzL2k5MTVfcmVxdWVzdC5jCmluZGV4IDI5OGJi
NzExNmM1MS4uMWE1YjllMjg0Y2E5IDEwMDY0NAotLS0gYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9z
ZWxmdGVzdHMvaTkxNV9yZXF1ZXN0LmMKKysrIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvc2VsZnRl
c3RzL2k5MTVfcmVxdWVzdC5jCkBAIC0zNjYsMTMgKzM2NiwxNSBAQCBzdGF0aWMgaW50IF9faWd0
X2JyZWFkY3J1bWJzX3Ntb2tldGVzdCh2b2lkICphcmcpCiAKIAkJaWYgKCF3YWl0X2V2ZW50X3Rp
bWVvdXQod2FpdC0+d2FpdCwKIAkJCQkJaTkxNV9zd19mZW5jZV9kb25lKHdhaXQpLAotCQkJCQlI
WiAvIDIpKSB7CisJCQkJCTUgKiBIWikpIHsKIAkJCXN0cnVjdCBpOTE1X3JlcXVlc3QgKnJxID0g
cmVxdWVzdHNbY291bnQgLSAxXTsKIAotCQkJcHJfZXJyKCJ3YWl0aW5nIGZvciAlZCBmZW5jZXMg
KGxhc3QgJWxseDolbGxkKSBvbiAlcyB0aW1lZCBvdXQhXG4iLAotCQkJICAgICAgIGNvdW50LAor
CQkJcHJfZXJyKCJ3YWl0aW5nIGZvciAlZC8lZCBmZW5jZXMgKGxhc3QgJWxseDolbGxkKSBvbiAl
cyB0aW1lZCBvdXQhXG4iLAorCQkJICAgICAgIGF0b21pY19yZWFkKCZ3YWl0LT5wZW5kaW5nKSwg
Y291bnQsCiAJCQkgICAgICAgcnEtPmZlbmNlLmNvbnRleHQsIHJxLT5mZW5jZS5zZXFubywKIAkJ
CSAgICAgICB0LT5lbmdpbmUtPm5hbWUpOworCQkJR0VNX1RSQUNFX0RVTVAoKTsKKwogCQkJaTkx
NV9nZW1fc2V0X3dlZGdlZCh0LT5lbmdpbmUtPmk5MTUpOwogCQkJR0VNX0JVR19PTighaTkxNV9y
ZXF1ZXN0X2NvbXBsZXRlZChycSkpOwogCQkJaTkxNV9zd19mZW5jZV93YWl0KHdhaXQpOwotLSAK
Mi4yMC4xCgpfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpJ
bnRlbC1nZnggbWFpbGluZyBsaXN0CkludGVsLWdmeEBsaXN0cy5mcmVlZGVza3RvcC5vcmcKaHR0
cHM6Ly9saXN0cy5mcmVlZGVza3RvcC5vcmcvbWFpbG1hbi9saXN0aW5mby9pbnRlbC1nZng=

Return-Path: <intel-gfx-bounces@lists.freedesktop.org>
X-Original-To: lists+intel-gfx@lfdr.de
Delivered-To: lists+intel-gfx@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [IPv6:2610:10:20:722:a800:ff:fe36:1795])
	by mail.lfdr.de (Postfix) with ESMTPS id B249237AC77
	for <lists+intel-gfx@lfdr.de>; Tue, 11 May 2021 18:52:02 +0200 (CEST)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 437516EA9D;
	Tue, 11 May 2021 16:51:59 +0000 (UTC)
X-Original-To: intel-gfx@lists.freedesktop.org
Delivered-To: intel-gfx@lists.freedesktop.org
Received: from mga18.intel.com (mga18.intel.com [134.134.136.126])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 5689C6EA99;
 Tue, 11 May 2021 16:51:58 +0000 (UTC)
IronPort-SDR: 4XKh7/z+DxfFTb+Pb+/YyFndI7pYorLnlvjrZiQ23OgGD+pSzjqN/7sFbog8/DcTF4D/tYh4vF
 HN20+EUxOvRA==
X-IronPort-AV: E=McAfee;i="6200,9189,9981"; a="186930934"
X-IronPort-AV: E=Sophos;i="5.82,291,1613462400"; d="scan'208";a="186930934"
Received: from fmsmga001.fm.intel.com ([10.253.24.23])
 by orsmga106.jf.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384;
 11 May 2021 09:51:35 -0700
IronPort-SDR: ZFhgwpHHyrP8qJQYIcQtOAV8NJGvxfw/Ik1KEYTMsDvXnU5BeVyqZzl4N0iAq/p3ntUrPq3MMF
 kx3p0pKtDwlQ==
X-IronPort-AV: E=Sophos;i="5.82,291,1613462400"; d="scan'208";a="537104730"
Received: from rdavies-mobl.ger.corp.intel.com (HELO
 mwauld-desk1.ger.corp.intel.com) ([10.252.2.133])
 by fmsmga001-auth.fm.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384;
 11 May 2021 09:51:32 -0700
From: Matthew Auld <matthew.auld@intel.com>
To: igt-dev@lists.freedesktop.org
Date: Tue, 11 May 2021 17:51:07 +0100
Message-Id: <20210511165117.428062-3-matthew.auld@intel.com>
X-Mailer: git-send-email 2.26.3
In-Reply-To: <20210511165117.428062-1-matthew.auld@intel.com>
References: <20210511165117.428062-1-matthew.auld@intel.com>
MIME-Version: 1.0
Subject: [Intel-gfx] [PATCH i-g-t 02/12] lib/i915/intel_memory_region: Add
 memory regions stubs
X-BeenThere: intel-gfx@lists.freedesktop.org
X-Mailman-Version: 2.1.29
Precedence: list
List-Id: Intel graphics driver community testing & development
 <intel-gfx.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/intel-gfx>
List-Post: <mailto:intel-gfx@lists.freedesktop.org>
List-Help: <mailto:intel-gfx-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=subscribe>
Cc: thomas.hellstrom@linux.intel.com,
 Dominik Grzegorzek <dominik.grzegorzek@intel.com>,
 intel-gfx@lists.freedesktop.org, Andrzej Turko <andrzej.turko@linux.intel.com>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: intel-gfx-bounces@lists.freedesktop.org
Sender: "Intel-gfx" <intel-gfx-bounces@lists.freedesktop.org>

RnJvbTogQW5kcnplaiBUdXJrbyA8YW5kcnplai50dXJrb0BsaW51eC5pbnRlbC5jb20+CgpBZGRl
ZCBzdHVicyBmb3IgbWVtb3J5IHJlZ2lvbnMgdG8gbWFrZSB1cHN0cmVhbWluZyBvZiB0ZXN0cyB3
aGljaCBhcmUKdXNpbmcgdGhpcyBpbnRlcmZhY2UgcG9zc2libGUuCgpUaGUgbWVtb3J5IHJlZ2lv
biB1YXBpIGltcGxlbWVudGF0aW9uIGluIHRoZSBkcml2ZXIgaXMgbm90IHN0YWJsZSB5ZXQuClRo
dXMsIHRoZSBmdWxsIG1lbW9yeSByZWdpb24gaW50ZXJmYWNlIGNhbm5vdCBiZSB1c2VkIGluIGxp
Yi4gVGhpcwpjb21taXQgYWRkcyBzdHVicyBmb3IgdGhpcyB1YXBpIHRvIGJlIHVzZWQgaW4gdGVz
dHMuIFRoaXMgd2F5IGZ1dHVyZQppbnRyb2R1Y3Rpb24gb2YgdGhlIGZ1bGwgbWVtb3J5IHJlZ2lv
bnMgdWFwaSB3aWxsIHRyaWdnZXIKbXVjaCBzbWFsbGVyIGNoYW5nZXMgaW4gdGVzdHMuCgpTaWdu
ZWQtb2ZmLWJ5OiBBbmRyemVqIFR1cmtvIDxhbmRyemVqLnR1cmtvQGxpbnV4LmludGVsLmNvbT4K
Q2M6IFpiaWduaWV3IEtlbXBjenluc2tpIDx6Ymlnbmlldy5rZW1wY3p5bnNraUBpbnRlbC5jb20+
CkNjOiBEb21pbmlrIEdyemVnb3J6ZWsgPGRvbWluaWsuZ3J6ZWdvcnpla0BpbnRlbC5jb20+CkNj
OiBQZXRyaSBMYXR2YWxhIDxwZXRyaS5sYXR2YWxhQGludGVsLmNvbT4KLS0tCiBsaWIvaTkxNS9p
bnRlbF9tZW1vcnlfcmVnaW9uLmMgfCAzOTkgKysrKysrKysrKysrKysrKysrKysrKysrKysrKysr
KysrCiBsaWIvaTkxNS9pbnRlbF9tZW1vcnlfcmVnaW9uLmggfCAyMjAgKysrKysrKysrKysrKysr
KysrCiBsaWIvaW9jdGxfd3JhcHBlcnMuaCAgICAgICAgICAgfCAgIDEgKwogbGliL21lc29uLmJ1
aWxkICAgICAgICAgICAgICAgIHwgICAxICsKIDQgZmlsZXMgY2hhbmdlZCwgNjIxIGluc2VydGlv
bnMoKykKIGNyZWF0ZSBtb2RlIDEwMDY0NCBsaWIvaTkxNS9pbnRlbF9tZW1vcnlfcmVnaW9uLmMK
IGNyZWF0ZSBtb2RlIDEwMDY0NCBsaWIvaTkxNS9pbnRlbF9tZW1vcnlfcmVnaW9uLmgKCmRpZmYg
LS1naXQgYS9saWIvaTkxNS9pbnRlbF9tZW1vcnlfcmVnaW9uLmMgYi9saWIvaTkxNS9pbnRlbF9t
ZW1vcnlfcmVnaW9uLmMKbmV3IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMDAwMDAwMDAuLjU0NTJk
ZDhlCi0tLSAvZGV2L251bGwKKysrIGIvbGliL2k5MTUvaW50ZWxfbWVtb3J5X3JlZ2lvbi5jCkBA
IC0wLDAgKzEsMzk5IEBACisvKgorICogQ29weXJpZ2h0IMKpIDIwMjAgSW50ZWwgQ29ycG9yYXRp
b24KKyAqCisgKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwg
dG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYQorICogY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBh
c3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSAiU29mdHdhcmUiKSwKKyAqIHRvIGRl
YWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0
IGxpbWl0YXRpb24KKyAqIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBw
dWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLAorICogYW5kL29yIHNlbGwgY29waWVzIG9m
IHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlCisgKiBTb2Z0
d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25k
aXRpb25zOgorICoKKyAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1p
c3Npb24gbm90aWNlIChpbmNsdWRpbmcgdGhlIG5leHQKKyAqIHBhcmFncmFwaCkgc2hhbGwgYmUg
aW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUKKyAq
IFNvZnR3YXJlLgorICoKKyAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRI
T1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SCisgKiBJTVBMSUVELCBJTkNMVURJ
TkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwK
KyAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQu
ICBJTiBOTyBFVkVOVCBTSEFMTAorICogVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMg
QkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIKKyAqIExJQUJJTElUWSwg
V0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklT
SU5HCisgKiBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBP
UiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTCisgKiBJTiBUSEUgU09GVFdBUkUuCisgKi8KKwor
I2luY2x1ZGUgPGxpbnV4L2xpbWl0cy5oPgorI2luY2x1ZGUgPHNpZ25hbC5oPgorI2luY2x1ZGUg
PHN5cy9pb2N0bC5oPgorI2luY2x1ZGUgPHN5cy90aW1lLmg+CisjaW5jbHVkZSA8c3lzL3R5cGVz
Lmg+CisjaW5jbHVkZSA8c3lzL3N0YXQuaD4KKyNpbmNsdWRlIDxzeXMvc3lzaW5mby5oPgorI2lu
Y2x1ZGUgPGZjbnRsLmg+CisKKyNpbmNsdWRlICJpOTE1L2dlbV9jcmVhdGUuaCIKKyNpbmNsdWRl
ICJpbnRlbF9yZWcuaCIKKyNpbmNsdWRlICJkcm10ZXN0LmgiCisjaW5jbHVkZSAiaW9jdGxfd3Jh
cHBlcnMuaCIKKyNpbmNsdWRlICJpZ3RfZHVtbXlsb2FkLmgiCisjaW5jbHVkZSAiaWd0X2d0Lmgi
CisjaW5jbHVkZSAiaWd0X3BhcmFtcy5oIgorI2luY2x1ZGUgImlndF9zeXNmcy5oIgorI2luY2x1
ZGUgImludGVsX2NoaXBzZXQuaCIKKyNpbmNsdWRlICJpZ3RfY29sbGVjdGlvbi5oIgorI2luY2x1
ZGUgImlndF9kZXZpY2UuaCIKKyNpbmNsdWRlICJpZ3RfYXV4LmgiCisKKyNpbmNsdWRlICJpOTE1
L2ludGVsX21lbW9yeV9yZWdpb24uaCIKKworY29uc3QgY2hhciAqZ2V0X21lbW9yeV9yZWdpb25f
bmFtZSh1aW50MzJfdCByZWdpb24pCit7CisJdWludDE2X3QgY2xhc3MgPSBNRU1PUllfVFlQRV9G
Uk9NX1JFR0lPTihyZWdpb24pOworCisJaWYgKGNsYXNzID09IExPQ0FMX0k5MTVfTUVNT1JZX0NM
QVNTX1NZU1RFTSkKKwkJcmV0dXJuICJzbWVtIjsKKworCWlndF9hc3NlcnRfZihmYWxzZSwgIlVu
a25vd24gbWVtb3J5IHJlZ2lvbiIpOworfQorCisvKioKKyAqICBnZW1fZ2V0X2JhdGNoX3NpemU6
CisgKiAgQGZkOiBvcGVuIGk5MTUgZHJtIGZpbGUgZGVzY3JpcHRvcgorICogIEBtZW1fcmVnaW9u
X3R5cGU6IHVzZWQgbWVtb3J5X3JlZ2lvbiB0eXBlCisgKi8KK3VpbnQzMl90IGdlbV9nZXRfYmF0
Y2hfc2l6ZShpbnQgZmQsIHVpbnQ4X3QgbWVtX3JlZ2lvbl90eXBlKQoreworCS8qIHRlbXBvcmFy
eSBzb2x1dGlvbiwgdG8gYmUgZXJhc2VkIGxhdGVyICovCisJKHZvaWQpIGZkOworCSh2b2lkKSBt
ZW1fcmVnaW9uX3R5cGU7CisKKwlyZXR1cm4gNDA5NjsKK30KKworc3RhdGljIHVpbnQ2NF90IF9f
Z2V0X21lbWluZm8oY29uc3QgY2hhciAqaW5mbywgY29uc3QgY2hhciAqdGFnKQoreworCWNvbnN0
IGNoYXIgKnN0cjsKKwl1bnNpZ25lZCBsb25nIHZhbDsKKworCXN0ciA9IHN0cnN0cihpbmZvLCB0
YWcpOworCWlmIChzdHIgJiYgc3NjYW5mKHN0ciArIHN0cmxlbih0YWcpLCAiICVsdSIsICZ2YWwp
ID09IDEpCisJCXJldHVybiAodWludDY0X3QpdmFsIDw8IDEwOworCisJaWd0X3dhcm4oIlVucmVj
b2duaXplZCAvcHJvYy9tZW1pbmZvIGZpZWxkOiAnJXMnXG4iLCB0YWcpOworCXJldHVybiAwOwor
fQorCitzdGF0aWMgdWludDY0X3QgX19nZXRfYXZhaWxhYmxlX3NtZW0oaW50IGZkKQoreworCXVp
bnQ2NF90IHJldHZhbDsKKwljaGFyICppbmZvOworCWludCBwcm9jX2ZkOworCisJaW50ZWxfcHVy
Z2Vfdm1fY2FjaGVzKGZkKTsKKworCXByb2NfZmQgPSBvcGVuKCIvcHJvYyIsIE9fUkRPTkxZKTsK
KwlpbmZvID0gaWd0X3N5c2ZzX2dldChwcm9jX2ZkLCAibWVtaW5mbyIpOworCWNsb3NlKHByb2Nf
ZmQpOworCisJaWYgKGluZm8pIHsKKwkJcmV0dmFsID0gX19nZXRfbWVtaW5mbyhpbmZvLCAiTWVt
QXZhaWxhYmxlOiIpOworCX0gZWxzZSB7CisJCXN0cnVjdCBzeXNpbmZvIHN5c2luZjsKKworCQlp
Z3RfYXNzZXJ0KHN5c2luZm8oJnN5c2luZikgPT0gMCk7CisJCXJldHZhbCA9IHN5c2luZi5mcmVl
cmFtOworCQlyZXR2YWwgKj0gc3lzaW5mLm1lbV91bml0OworCX0KKworCXJldHVybiByZXR2YWw7
Cit9CisKKy8qKgorICogZ2VtX2dldF9xdWVyeV9tZW1vcnlfcmVnaW9uczoKKyAqIEBmZDogb3Bl
biBpOTE1IGRybSBmaWxlIGRlc2NyaXB0b3IKKyAqCisgKiBUaGlzIGZ1bmN0aW9uIGlzIHByZXBh
cmVkIGFzIGEgd3JhcHBlciBmb3IgdGhlIHVwY29taW5nIG1lbW9yeQorICogcmVnaW9ucyBpbXBs
ZW1lbnRhdGlvbi4KKyAqCisgKiBSZXR1cm5zOiBGaWxsZWQgc3RydWN0IHdpdGggYXZhaWxhYmxl
IG1lbW9yeSByZWdpb25zLgorICovCitzdHJ1Y3QgbG9jYWxfZHJtX2k5MTVfcXVlcnlfbWVtb3J5
X3JlZ2lvbnMgKmdlbV9nZXRfcXVlcnlfbWVtb3J5X3JlZ2lvbnMoaW50IGZkKQoreworCXN0cnVj
dCBsb2NhbF9kcm1faTkxNV9xdWVyeV9tZW1vcnlfcmVnaW9ucyAqcXVlcnlfaW5mbzsKKworCXF1
ZXJ5X2luZm8gPSBjYWxsb2MoMSwgc2l6ZW9mKHN0cnVjdCBsb2NhbF9kcm1faTkxNV9xdWVyeV9t
ZW1vcnlfcmVnaW9ucykKKwkJCSAgICArIHNpemVvZihzdHJ1Y3QgbG9jYWxfZHJtX2k5MTVfbWVt
b3J5X3JlZ2lvbl9pbmZvKSk7CisKKwlxdWVyeV9pbmZvLT5udW1fcmVnaW9ucyA9IDE7CisJcXVl
cnlfaW5mby0+cmVnaW9uc1swXS5yZWdpb24ubWVtb3J5X2NsYXNzID0gTE9DQUxfSTkxNV9NRU1P
UllfQ0xBU1NfU1lTVEVNOworCXF1ZXJ5X2luZm8tPnJlZ2lvbnNbMF0ucHJvYmVkX3NpemUgPSBp
bnRlbF9nZXRfdG90YWxfcmFtX21iKCkgPDwgMjA7CisJcXVlcnlfaW5mby0+cmVnaW9uc1swXS51
bmFsbG9jYXRlZF9zaXplID0gX19nZXRfYXZhaWxhYmxlX3NtZW0oZmQpOworCisJcmV0dXJuIHF1
ZXJ5X2luZm87Cit9CisKKy8qIEEgdmVyc2lvbiBvZiBnZW1fY3JlYXRlX2luX21lbW9yeV9yZWdp
b25fbGlzdCB3aGljaCBjYW4gYmUgYWxsb3dlZCB0bworICAgZmFpbCBzbyB0aGF0IHRoZSBvYmpl
Y3QgY3JlYXRpb24gY2FuIGJlIHJldHJpZWQgKi8KK2ludCBfX2dlbV9jcmVhdGVfaW5fbWVtb3J5
X3JlZ2lvbl9saXN0KGludCBmZCwgdWludDMyX3QgKmhhbmRsZSwgdWludDY0X3Qgc2l6ZSwKKwkJ
CQkgICAgICAgc3RydWN0IGxvY2FsX2RybV9pOTE1X2dlbV9tZW1vcnlfY2xhc3NfaW5zdGFuY2Ug
Km1lbV9yZWdpb25zLAorCQkJCSAgICAgICBpbnQgbnVtX3JlZ2lvbnMpCit7CisJLyogYSB0ZW1w
b3Jhcnkgc29sdXRpb24sIHRvIGJlIHJlbW92ZWQgd2hlbiB0aGVzZSBhcmd1bWVudHMgd2lsbCBi
ZSB1c2VkICovCisJKHZvaWQpIG1lbV9yZWdpb25zOworCSh2b2lkKSBudW1fcmVnaW9uczsKKwor
CXJldHVybiBfX2dlbV9jcmVhdGUoZmQsICZzaXplLCBoYW5kbGUpOworfQorCisvKiBnZW1fY3Jl
YXRlX2luX21lbW9yeV9yZWdpb25fbGlzdDoKKyAqIEBmZDogb3BlbmVkIGk5MTUgZHJtIGZpbGUg
ZGVzY3JpcHRvcgorICogQHNpemU6IHJlcXVlc3RlZCBzaXplIG9mIHRoZSBidWZmZXIKKyAqIEBt
ZW1fcmVnaW9uczogbWVtb3J5IHJlZ2lvbnMgYXJyYXkgKHByaW9yaXR5IGxpc3QpCisgKiBAbnVt
X3JlZ2lvbnM6IEBtZW1fcmVnaW9ucyBsZW5ndGgKKyAqLwordWludDMyX3QgZ2VtX2NyZWF0ZV9p
bl9tZW1vcnlfcmVnaW9uX2xpc3QoaW50IGZkLCB1aW50NjRfdCBzaXplLAorCQkJCQkgIHN0cnVj
dCBsb2NhbF9kcm1faTkxNV9nZW1fbWVtb3J5X2NsYXNzX2luc3RhbmNlICptZW1fcmVnaW9ucywK
KwkJCQkJICBpbnQgbnVtX3JlZ2lvbnMpCit7CisJdWludDMyX3QgaGFuZGxlOworCWludCByZXQg
PSBfX2dlbV9jcmVhdGVfaW5fbWVtb3J5X3JlZ2lvbl9saXN0KGZkLCAmaGFuZGxlLCBzaXplLAor
CQkJCQkJICAgICBtZW1fcmVnaW9ucywgbnVtX3JlZ2lvbnMpOworCWlndF9hc3NlcnRfZXEocmV0
LCAwKTsKKwlyZXR1cm4gaGFuZGxlOworfQorCitzdGF0aWMgYm9vbCBfX3JlZ2lvbl9iZWxvbmdz
X3RvX3JlZ2lvbnNfdHlwZShzdHJ1Y3QgbG9jYWxfZHJtX2k5MTVfZ2VtX21lbW9yeV9jbGFzc19p
bnN0YW5jZSByZWdpb24sCisJCQkJCSAgICAgdWludDMyX3QgKm1lbV9yZWdpb25zX3R5cGUsCisJ
CQkJCSAgICAgaW50IG51bV9yZWdpb25zKQoreworCWZvciAoaW50IGkgPSAwOyBpIDwgbnVtX3Jl
Z2lvbnM7IGkrKykKKwkJaWYgKG1lbV9yZWdpb25zX3R5cGVbaV0gPT0gcmVnaW9uLm1lbW9yeV9j
bGFzcykKKwkJCXJldHVybiB0cnVlOworCXJldHVybiBmYWxzZTsKK30KKworc3RydWN0IGlndF9j
b2xsZWN0aW9uICoKK19fZ2V0X21lbW9yeV9yZWdpb25fc2V0KHN0cnVjdCBsb2NhbF9kcm1faTkx
NV9xdWVyeV9tZW1vcnlfcmVnaW9ucyAqcmVnaW9ucywKKwkJCXVpbnQzMl90ICptZW1fcmVnaW9u
c190eXBlLAorCQkJaW50IG51bV9yZWdpb25zKQoreworCXN0cnVjdCBsb2NhbF9kcm1faTkxNV9n
ZW1fbWVtb3J5X2NsYXNzX2luc3RhbmNlIHJlZ2lvbjsKKwlzdHJ1Y3QgaWd0X2NvbGxlY3Rpb24g
KnNldDsKKwlpbnQgY291bnQgPSAwLCBwb3MgPSAwOworCisJZm9yIChpbnQgaSA9IDA7IGkgPCBy
ZWdpb25zLT5udW1fcmVnaW9uczsgaSsrKSB7CisJCXJlZ2lvbiA9IHJlZ2lvbnMtPnJlZ2lvbnNb
aV0ucmVnaW9uOworCQlpZiAoX19yZWdpb25fYmVsb25nc190b19yZWdpb25zX3R5cGUocmVnaW9u
LAorCQkJCQkJICAgICBtZW1fcmVnaW9uc190eXBlLAorCQkJCQkJICAgICBudW1fcmVnaW9ucykp
CisJCQljb3VudCsrOworCX0KKworCXNldCA9IGlndF9jb2xsZWN0aW9uX2NyZWF0ZShjb3VudCk7
CisKKwlmb3IgKGludCBpID0gMDsgaSA8IHJlZ2lvbnMtPm51bV9yZWdpb25zOyBpKyspIHsKKwkJ
cmVnaW9uID0gcmVnaW9ucy0+cmVnaW9uc1tpXS5yZWdpb247CisJCWlmIChfX3JlZ2lvbl9iZWxv
bmdzX3RvX3JlZ2lvbnNfdHlwZShyZWdpb24sCisJCQkJCQkgICAgIG1lbV9yZWdpb25zX3R5cGUs
CisJCQkJCQkgICAgIG51bV9yZWdpb25zKSkKKwkJCWlndF9jb2xsZWN0aW9uX3NldF92YWx1ZShz
ZXQsIHBvcysrLAorCQkJCQkJIElOVEVMX01FTU9SWV9SRUdJT05fSUQocmVnaW9uLm1lbW9yeV9j
bGFzcywKKwkJCQkJCQkJCXJlZ2lvbi5tZW1vcnlfaW5zdGFuY2UpKTsKKwl9CisKKwlpZ3RfYXNz
ZXJ0KGNvdW50ID09IHBvcyk7CisKKwlyZXR1cm4gc2V0OworfQorCisvKioKKyAgKiBtZW1yZWdp
b25fZHluYW1pY19zdWJ0ZXN0X25hbWU6CisgICogQGlndF9jb2xsZWN0aW9uOiBtZW1vcnkgcmVn
aW9uIGNvbGxlY3Rpb24KKyAgKgorICAqIEZ1bmN0aW9uIGl0ZXJhdGVzIG92ZXIgYWxsIG1lbW9y
eSByZWdpb25zIGluc2lkZSB0aGUgY29sbGVjdGlvbiAoa2VlcGVkCisgICogaW4gdGhlIHZhbHVl
IGZpZWxkKSBhbmQgZ2VuZXJhdGVzIHRoZSBuYW1lIHdoaWNoIGNhbiBiZSB1c2VkIGR1cmluZyBk
eW5hbWljCisgICogc3VidGVzdCBjcmVhdGlvbi4KKyAgKgorICAqIFJldHVybnM6IG5ld2x5IGFs
bG9jYXRlZCBzdHJpbmcsIGhhcyB0byBiZSBmcmVlZCBieSBjYWxsZXIuIEFzc2VydHMgaWYKKyAg
KiBjYWxsZXIgdHJpZXMgdG8gY3JlYXRlIGEgbmFtZSB1c2luZyBlbXB0eSBjb2xsZWN0aW9uLgor
ICAqLworY2hhciAqbWVtcmVnaW9uX2R5bmFtaWNfc3VidGVzdF9uYW1lKHN0cnVjdCBpZ3RfY29s
bGVjdGlvbiAqc2V0KQoreworCXN0cnVjdCBpZ3RfY29sbGVjdGlvbl9kYXRhICpkYXRhOworCWNo
YXIgKm5hbWUsICpwOworCXVpbnQzMl90IHJlZ2lvbiwgbGVuOworCisJaWd0X2Fzc2VydChzZXQg
JiYgc2V0LT5zaXplKTsKKwkvKiBlbm91Z2ggZm9yICJuYW1lJWQtIiAqIG4gKi8KKwlsZW4gPSBz
ZXQtPnNpemUgKiA4OworCXAgPSBuYW1lID0gbWFsbG9jKGxlbik7CisJaWd0X2Fzc2VydChuYW1l
KTsKKworCWZvcl9lYWNoX2NvbGxlY3Rpb25fZGF0YShkYXRhLCBzZXQpIHsKKwkJaW50IHI7CisK
KwkJcmVnaW9uID0gZGF0YS0+dmFsdWU7CisKKwkJciA9IHNucHJpbnRmKHAsIGxlbiwgIiVzLSIs
IGdldF9tZW1vcnlfcmVnaW9uX25hbWUocmVnaW9uKSk7CisKKwkJaWd0X2Fzc2VydChyID4gMCk7
CisJCXAgKz0gcjsKKwkJbGVuIC09IHI7CisJfQorCisJLyogcmVtb3ZlIGxhc3QgJy0nICovCisJ
KihwIC0gMSkgPSAwOworCisJcmV0dXJuIG5hbWU7Cit9CisKKy8qKgorICogaW50ZWxfZHVtcF9n
cHVfbWVtaW5mbzoKKyAqIEBpbmZvOiBwb2ludGVyIHRvIGRybV9pOTE1X3F1ZXJ5X21lbW9yeV9y
ZWdpb25zIHN0cnVjdHVyZQorICoKKyAqIE91dHB1dHMgbWVtb3J5IHJlZ2lvbnMgYW5kIHRoZWly
IHNpemVzLgorICovCit2b2lkIGludGVsX2R1bXBfZ3B1X21lbWluZm8oc3RydWN0IGxvY2FsX2Ry
bV9pOTE1X3F1ZXJ5X21lbW9yeV9yZWdpb25zICppbmZvKQoreworCWludCBpOworCisJaWd0X2Fz
c2VydChpbmZvKTsKKworCWlndF9pbmZvKCJHUFUgbWVtaW5mbzpcbiIpOworCisJZm9yIChpID0g
MDsgaSA8IGluZm8tPm51bV9yZWdpb25zOyBpKyspIHsKKwkJdWludDMyX3QgcmVnaW9uID0gSU5U
RUxfTUVNT1JZX1JFR0lPTl9JRChpbmZvLT5yZWdpb25zW2ldLnJlZ2lvbi5tZW1vcnlfY2xhc3Ms
CisJCQkJCQkJIGluZm8tPnJlZ2lvbnNbaV0ucmVnaW9uLm1lbW9yeV9pbnN0YW5jZSk7CisJCWNv
bnN0IGNoYXIgKm5hbWUgPSBnZXRfbWVtb3J5X3JlZ2lvbl9uYW1lKHJlZ2lvbik7CisKKwkJaWd0
X2luZm8oIi0gJXMgWyVkXSBtZW1vcnkgW3NpemU6IDB4JWxseCwgYXZhaWxhYmxlOiAweCVsbHhd
XG4iLAorCQkJIG5hbWUsIGluZm8tPnJlZ2lvbnNbaV0ucmVnaW9uLm1lbW9yeV9pbnN0YW5jZSwK
KwkJCSBpbmZvLT5yZWdpb25zW2ldLnByb2JlZF9zaXplLAorCQkJIGluZm8tPnJlZ2lvbnNbaV0u
dW5hbGxvY2F0ZWRfc2l6ZSk7CisJfQorfQorCisvKioKKyAqIGdwdV9tZW1pbmZvX3JlZ2lvbl9j
b3VudDoKKyAqIEBpbmZvOiBwb2ludGVyIHRvIGRybV9pOTE1X3F1ZXJ5X21lbW9yeV9yZWdpb25z
IHN0cnVjdHVyZQorICogQG1lbW9yeV9jbGFzczogbWVtb3J5IHJlZ2lvbiBjbGFzcworICoKKyAq
IFJldHVybnM6IG51bWJlciBvZiByZWdpb25zIGZvciB0eXBlIEBtZW1vcnlfY2xhc3MKKyAqLwor
dWludDMyX3QgZ3B1X21lbWluZm9fcmVnaW9uX2NvdW50KHN0cnVjdCBsb2NhbF9kcm1faTkxNV9x
dWVyeV9tZW1vcnlfcmVnaW9ucyAqaW5mbywKKwkJCQkgIHVpbnQxNl90IG1lbW9yeV9jbGFzcykK
K3sKKwl1aW50MzJfdCBudW0gPSAwOworCWludCBpOworCisJaWd0X2Fzc2VydChpbmZvKTsKKwor
CWZvciAoaSA9IDA7IGkgPCBpbmZvLT5udW1fcmVnaW9uczsgaSsrKQorCQlpZiAoaW5mby0+cmVn
aW9uc1tpXS5yZWdpb24ubWVtb3J5X2NsYXNzID09IG1lbW9yeV9jbGFzcykKKwkJCW51bSsrOwor
CisJcmV0dXJuIG51bTsKK30KKworLyoqCisgKiBncHVfbWVtaW5mb19yZWdpb25fdG90YWxfc2l6
ZToKKyAqIEBpbmZvOiBwb2ludGVyIHRvIGRybV9pOTE1X3F1ZXJ5X21lbW9yeV9yZWdpb25zIHN0
cnVjdHVyZQorICogQG1lbW9yeV9jbGFzczogbWVtb3J5IHJlZ2lvbiBjbGFzcworICoKKyAqIFJl
dHVybnM6IHRvdGFsIHNpemUgb2YgYWxsIHJlZ2lvbnMgd2hpY2ggYXJlIHR5cGUgQG1lbW9yeV9j
bGFzcywgLTEgd2hlbiB0aGUKKyAqIHNpemUgb2YgYXQgbGVhc3Qgb25lIHJlZ2lvbiBpcyB1bmtu
b3duCisgKi8KK3VpbnQ2NF90IGdwdV9tZW1pbmZvX3JlZ2lvbl90b3RhbF9zaXplKHN0cnVjdCBs
b2NhbF9kcm1faTkxNV9xdWVyeV9tZW1vcnlfcmVnaW9ucyAqaW5mbywKKwkJCQkgICAgICAgdWlu
dDE2X3QgbWVtb3J5X2NsYXNzKQoreworCXVpbnQ2NF90IHRvdGFsID0gMDsKKwlpbnQgaTsKKwor
CWlndF9hc3NlcnQoaW5mbyk7CisKKwlmb3IgKGkgPSAwOyBpIDwgaW5mby0+bnVtX3JlZ2lvbnM7
IGkrKykKKwkJaWYgKGluZm8tPnJlZ2lvbnNbaV0ucmVnaW9uLm1lbW9yeV9jbGFzcyA9PSBtZW1v
cnlfY2xhc3MpIHsKKwkJCWlmIChpbmZvLT5yZWdpb25zW2ldLnByb2JlZF9zaXplID09IC0xKQor
CQkJCXJldHVybiAtMTsKKworCQkJdG90YWwgKz0gaW5mby0+cmVnaW9uc1tpXS5wcm9iZWRfc2l6
ZTsKKwkJfQorCisJcmV0dXJuIHRvdGFsOworfQorCisvKioKKyAqIGdwdV9tZW1pbmZvX3JlZ2lv
bl90b3RhbF9hdmFpbGFibGU6CisgKiBAaW5mbzogcG9pbnRlciB0byBkcm1faTkxNV9xdWVyeV9t
ZW1vcnlfcmVnaW9ucyBzdHJ1Y3R1cmUKKyAqIEBtZW1vcnlfY2xhc3M6IG1lbW9yeSByZWdpb24g
Y2xhc3MKKyAqCisgKiBSZXR1cm5zOiBhdmFpbGFibGUgc2l6ZSBvZiBhbGwgcmVnaW9ucyB3aGlj
aCBhcmUgdHlwZSBAbWVtb3J5X2NsYXNzLCAtMSB3aGVuCisgKiB0aGUgc2l6ZSBvZiBhdCBsZWFz
dCBvbmUgcmVnaW9uIGNhbm5vdCBiZSBlc3RpbWF0ZWQKKyAqLwordWludDY0X3QgZ3B1X21lbWlu
Zm9fcmVnaW9uX3RvdGFsX2F2YWlsYWJsZShzdHJ1Y3QgbG9jYWxfZHJtX2k5MTVfcXVlcnlfbWVt
b3J5X3JlZ2lvbnMgKmluZm8sCisJCQkJCSAgICB1aW50MTZfdCBtZW1vcnlfY2xhc3MpCit7CisJ
dWludDY0X3QgYXZhaWwgPSAwOworCWludCBpOworCisJaWd0X2Fzc2VydChpbmZvKTsKKworCWZv
ciAoaSA9IDA7IGkgPCBpbmZvLT5udW1fcmVnaW9uczsgaSsrKQorCQlpZiAoaW5mby0+cmVnaW9u
c1tpXS5yZWdpb24ubWVtb3J5X2NsYXNzID09IG1lbW9yeV9jbGFzcykgeworCQkJaWYgKGluZm8t
PnJlZ2lvbnNbaV0udW5hbGxvY2F0ZWRfc2l6ZSA9PSAtMSkKKwkJCQlyZXR1cm4gLTE7CisKKwkJ
CWF2YWlsICs9IGluZm8tPnJlZ2lvbnNbaV0udW5hbGxvY2F0ZWRfc2l6ZTsKKwkJfQorCisJcmV0
dXJuIGF2YWlsOworfQorCisvKioKKyAqIGdwdV9tZW1pbmZvX3JlZ2lvbl9zaXplOgorICogQGlu
Zm86IHBvaW50ZXIgdG8gZHJtX2k5MTVfcXVlcnlfbWVtb3J5X3JlZ2lvbnMgc3RydWN0dXJlCisg
KiBAbWVtb3J5X2NsYXNzOiBtZW1vcnkgcmVnaW9uIGNsYXNzCisgKiBAbWVtb3J5X2luc3RhbmNl
OiBtZW1vcnkgcmVnaW9uIGluc3RhbmNlCisgKgorICogUmV0dXJuczogYXZhaWxhYmxlIHNpemUg
b2YgQG1lbW9yeV9pbnN0YW5jZSB3aGljaCB0eXBlIGlzIEBtZW1vcnlfY2xhc3MsIC0xCisgKiB3
aGVuIHRoZSBzaXplIGlzIHVua25vd24KKyAqLwordWludDY0X3QgZ3B1X21lbWluZm9fcmVnaW9u
X3NpemUoc3RydWN0IGxvY2FsX2RybV9pOTE1X3F1ZXJ5X21lbW9yeV9yZWdpb25zICppbmZvLAor
CQkJCSB1aW50MTZfdCBtZW1vcnlfY2xhc3MsCisJCQkJIHVpbnQxNl90IG1lbW9yeV9pbnN0YW5j
ZSkKK3sKKwlpbnQgaTsKKworCWlndF9hc3NlcnQoaW5mbyk7CisKKwlmb3IgKGkgPSAwOyBpIDwg
aW5mby0+bnVtX3JlZ2lvbnM7IGkrKykKKwkJaWYgKGluZm8tPnJlZ2lvbnNbaV0ucmVnaW9uLm1l
bW9yeV9jbGFzcyA9PSBtZW1vcnlfY2xhc3MgJiYKKwkJICAgICBpbmZvLT5yZWdpb25zW2ldLnJl
Z2lvbi5tZW1vcnlfaW5zdGFuY2UgPT0gbWVtb3J5X2luc3RhbmNlKQorCQkJcmV0dXJuIGluZm8t
PnJlZ2lvbnNbaV0ucHJvYmVkX3NpemU7CisKKwlyZXR1cm4gMDsKK30KKworLyoqCisgKiBncHVf
bWVtaW5mb19yZWdpb25fYXZhaWxhYmxlOgorICogQGluZm86IHBvaW50ZXIgdG8gZHJtX2k5MTVf
cXVlcnlfbWVtb3J5X3JlZ2lvbnMgc3RydWN0dXJlCisgKiBAbWVtb3J5X2NsYXNzOiBtZW1vcnkg
cmVnaW9uIGNsYXNzCisgKiBAbWVtb3J5X2luc3RhbmNlOiBtZW1vcnkgcmVnaW9uIGluc3RhbmNl
CisgKgorICogUmV0dXJuczogYXZhaWxhYmxlIHNpemUgb2YgQG1lbW9yeV9pbnN0YW5jZSByZWdp
b24gd2hpY2ggdHlwZSBpcworICogQG1lbW9yeV9jbGFzcywgLTEgd2hlbiB0aGUgc2l6ZSBjYW5u
b3QgYmUgZXN0aW1hdGVkCisgKi8KK3VpbnQ2NF90IGdwdV9tZW1pbmZvX3JlZ2lvbl9hdmFpbGFi
bGUoc3RydWN0IGxvY2FsX2RybV9pOTE1X3F1ZXJ5X21lbW9yeV9yZWdpb25zICppbmZvLAorCQkJ
CSAgICAgIHVpbnQxNl90IG1lbW9yeV9jbGFzcywKKwkJCQkgICAgICB1aW50MTZfdCBtZW1vcnlf
aW5zdGFuY2UpCit7CisJaW50IGk7CisKKwlpZ3RfYXNzZXJ0KGluZm8pOworCisJZm9yIChpID0g
MDsgaSA8IGluZm8tPm51bV9yZWdpb25zOyBpKyspCisJCWlmIChpbmZvLT5yZWdpb25zW2ldLnJl
Z2lvbi5tZW1vcnlfY2xhc3MgPT0gbWVtb3J5X2NsYXNzICYmCisJCSAgICAgaW5mby0+cmVnaW9u
c1tpXS5yZWdpb24ubWVtb3J5X2luc3RhbmNlID09IG1lbW9yeV9pbnN0YW5jZSkKKwkJCXJldHVy
biBpbmZvLT5yZWdpb25zW2ldLnVuYWxsb2NhdGVkX3NpemU7CisKKwlyZXR1cm4gMDsKK30KZGlm
ZiAtLWdpdCBhL2xpYi9pOTE1L2ludGVsX21lbW9yeV9yZWdpb24uaCBiL2xpYi9pOTE1L2ludGVs
X21lbW9yeV9yZWdpb24uaApuZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRleCAwMDAwMDAwMC4uYjhl
YTIyYjUKLS0tIC9kZXYvbnVsbAorKysgYi9saWIvaTkxNS9pbnRlbF9tZW1vcnlfcmVnaW9uLmgK
QEAgLTAsMCArMSwyMjAgQEAKKy8qCisgKiBDb3B5cmlnaHQgwqkgMjAyMCBJbnRlbCBDb3Jwb3Jh
dGlvbgorICoKKyAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdl
LCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhCisgKiBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5k
IGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICJTb2Z0d2FyZSIpLAorICogdG8g
ZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhv
dXQgbGltaXRhdGlvbgorICogdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2Us
IHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsCisgKiBhbmQvb3Igc2VsbCBjb3BpZXMg
b2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUKKyAqIFNv
ZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNv
bmRpdGlvbnM6CisgKgorICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVy
bWlzc2lvbiBub3RpY2UgKGluY2x1ZGluZyB0aGUgbmV4dAorICogcGFyYWdyYXBoKSBzaGFsbCBi
ZSBpbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZQor
ICogU29mdHdhcmUuCisgKgorICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIsIFdJ
VEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1IKKyAqIElNUExJRUQsIElOQ0xV
RElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZ
LAorICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVO
VC4gIElOIE5PIEVWRU5UIFNIQUxMCisgKiBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVS
UyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUgorICogTElBQklMSVRZ
LCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFS
SVNJTkcKKyAqIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJF
IE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MKKyAqIElOIFRIRSBTT0ZUV0FSRS4KKyAqLwor
I2luY2x1ZGUgImlndF9jb2xsZWN0aW9uLmgiCisKKyNpZm5kZWYgSU5URUxfTUVNT1JZX1JFR0lP
Tl9ICisjZGVmaW5lIElOVEVMX01FTU9SWV9SRUdJT05fSAorCisjZGVmaW5lIEk5MTVfU1lTVEVN
X01FTU9SWSBMT0NBTF9JOTE1X01FTU9SWV9DTEFTU19TWVNURU0KKworI2RlZmluZSBJTlRFTF9N
RU1PUllfUkVHSU9OX0lEKHR5cGUsIGluc3RhbmNlKSAoKHR5cGUpIDw8IDE2dSB8IChpbnN0YW5j
ZSkpCisjZGVmaW5lIE1FTU9SWV9UWVBFX0ZST01fUkVHSU9OKHIpICgocikgPj4gMTZ1KQorI2Rl
ZmluZSBNRU1PUllfSU5TVEFOQ0VfRlJPTV9SRUdJT04ocikgKChyKSAmIDB4ZmZmZikKKworI2Rl
ZmluZSBJU19NRU1PUllfUkVHSU9OX1RZUEUocmVnaW9uLCB0eXBlKSBcCisJKE1FTU9SWV9UWVBF
X0ZST01fUkVHSU9OKHJlZ2lvbikgPT0gdHlwZSkKKworI2RlZmluZSBJU19TWVNURU1fTUVNT1JZ
X1JFR0lPTihyZWdpb24pIFwKKwlJU19NRU1PUllfUkVHSU9OX1RZUEUocmVnaW9uLCBMT0NBTF9J
OTE1X01FTU9SWV9DTEFTU19TWVNURU0pCisKKyNkZWZpbmUgUkVHSU9OX1NNRU0gICAgSU5URUxf
TUVNT1JZX1JFR0lPTl9JRChMT0NBTF9JOTE1X01FTU9SWV9DTEFTU19TWVNURU0sIDApCisKKy8q
KgorICogZW51bSBkcm1faTkxNV9nZW1fbWVtb3J5X2NsYXNzIC0gU3VwcG9ydGVkIG1lbW9yeSBj
bGFzc2VzCisgKi8KK2VudW0gbG9jYWxfZHJtX2k5MTVfZ2VtX21lbW9yeV9jbGFzcyB7CisJLyoq
IEBJOTE1X01FTU9SWV9DTEFTU19TWVNURU06IFN5c3RlbSBtZW1vcnkgKi8KKwlMT0NBTF9JOTE1
X01FTU9SWV9DTEFTU19TWVNURU0gPSAwLAorCS8qKiBASTkxNV9NRU1PUllfQ0xBU1NfREVWSUNF
OiBEZXZpY2UgbG9jYWwtbWVtb3J5ICovCisJTE9DQUxfSTkxNV9NRU1PUllfQ0xBU1NfREVWSUNF
LAorfTsKKworLyoqCisgKiBzdHJ1Y3QgZHJtX2k5MTVfZ2VtX21lbW9yeV9jbGFzc19pbnN0YW5j
ZSAtIElkZW50aWZ5IHBhcnRpY3VsYXIgbWVtb3J5IHJlZ2lvbgorICovCitzdHJ1Y3QgbG9jYWxf
ZHJtX2k5MTVfZ2VtX21lbW9yeV9jbGFzc19pbnN0YW5jZSB7CisJLyoqIEBtZW1vcnlfY2xhc3M6
IFNlZSBlbnVtIGRybV9pOTE1X2dlbV9tZW1vcnlfY2xhc3MgKi8KKwlfX3UxNiBtZW1vcnlfY2xh
c3M7CisKKwkvKiogQG1lbW9yeV9pbnN0YW5jZTogV2hpY2ggaW5zdGFuY2UgKi8KKwlfX3UxNiBt
ZW1vcnlfaW5zdGFuY2U7Cit9OworCisvKioKKyAqIHN0cnVjdCBkcm1faTkxNV9tZW1vcnlfcmVn
aW9uX2luZm8gLSBEZXNjcmliZXMgb25lIHJlZ2lvbiBhcyBrbm93biB0byB0aGUKKyAqIGRyaXZl
ci4KKyAqCisgKiBOb3RlIHRoYXQgd2UgcmVzZXJ2ZSBzb21lIHN0dWZmIGhlcmUgZm9yIHBvdGVu
dGlhbCBmdXR1cmUgd29yay4gQXMgYW4gZXhhbXBsZQorICogd2UgbWlnaHQgd2FudCBleHBvc2Ug
dGhlIGNhcGFiaWxpdGllcyhzZWUgQGNhcHMpIGZvciBhIGdpdmVuIHJlZ2lvbiwgd2hpY2gKKyAq
IGNvdWxkIGluY2x1ZGUgdGhpbmdzIGxpa2UgaWYgdGhlIHJlZ2lvbiBpcyBDUFUgbWFwcGFibGUv
YWNjZXNzaWJsZSwgd2hhdCBhcmUKKyAqIHRoZSBzdXBwb3J0ZWQgbWFwcGluZyB0eXBlcyBldGMu
CisgKgorICogTm90ZSB0aGlzIGlzIHVzaW5nIGJvdGggc3RydWN0IGRybV9pOTE1X3F1ZXJ5X2l0
ZW0gYW5kIHN0cnVjdCBkcm1faTkxNV9xdWVyeS4KKyAqIEZvciB0aGlzIG5ldyBxdWVyeSB3ZSBh
cmUgYWRkaW5nIHRoZSBuZXcgcXVlcnkgaWQgRFJNX0k5MTVfUVVFUllfTUVNT1JZX1JFR0lPTlMK
KyAqIGF0ICZkcm1faTkxNV9xdWVyeV9pdGVtLnF1ZXJ5X2lkLgorICovCitzdHJ1Y3QgbG9jYWxf
ZHJtX2k5MTVfbWVtb3J5X3JlZ2lvbl9pbmZvIHsKKwkvKiogQHJlZ2lvbjogVGhlIGNsYXNzOmlu
c3RhbmNlIHBhaXIgZW5jb2RpbmcgKi8KKwlzdHJ1Y3QgbG9jYWxfZHJtX2k5MTVfZ2VtX21lbW9y
eV9jbGFzc19pbnN0YW5jZSByZWdpb247CisKKwkvKiogQHBhZDogTUJaICovCisJX191MzIgcGFk
OworCisJLyoqIEBjYXBzOiBNQlogKi8KKwlfX3U2NCBjYXBzOworCisJLyoqIEBwcm9iZWRfc2l6
ZTogTWVtb3J5IHByb2JlZCBieSB0aGUgZHJpdmVyICgtMSA9IHVua25vd24pICovCisJX191NjQg
cHJvYmVkX3NpemU7CisKKwkvKiogQHVuYWxsb2NhdGVkX3NpemU6IEVzdGltYXRlIG9mIG1lbW9y
eSByZW1haW5pbmcgKC0xID0gdW5rbm93bikgKi8KKwlfX3U2NCB1bmFsbG9jYXRlZF9zaXplOwor
fTsKKworLyoqCisgKiBzdHJ1Y3QgZHJtX2k5MTVfcXVlcnlfbWVtb3J5X3JlZ2lvbnMKKyAqCisg
KiBUaGUgcmVnaW9uIGluZm8gcXVlcnkgZW51bWVyYXRlcyBhbGwgcmVnaW9ucyBrbm93biB0byB0
aGUgZHJpdmVyIGJ5IGZpbGxpbmcKKyAqIGluIGFuIGFycmF5IG9mIHN0cnVjdCBkcm1faTkxNV9t
ZW1vcnlfcmVnaW9uX2luZm8gc3RydWN0dXJlcy4KKyAqCisgKiBFeGFtcGxlIGZvciBnZXR0aW5n
IHRoZSBsaXN0IG9mIHN1cHBvcnRlZCByZWdpb25zOgorICoKKyAqIC4uIGNvZGUtYmxvY2s6OiBD
CisgKgorICoJc3RydWN0IGRybV9pOTE1X3F1ZXJ5X21lbW9yeV9yZWdpb25zICppbmZvOworICoJ
c3RydWN0IGRybV9pOTE1X3F1ZXJ5X2l0ZW0gaXRlbSA9IHsKKyAqCQkucXVlcnlfaWQgPSBEUk1f
STkxNV9RVUVSWV9NRU1PUllfUkVHSU9OUzsKKyAqCX07CisgKglzdHJ1Y3QgZHJtX2k5MTVfcXVl
cnkgcXVlcnkgPSB7CisgKgkJLm51bV9pdGVtcyA9IDEsCisgKgkJLml0ZW1zX3B0ciA9ICh1aW50
cHRyX3QpJml0ZW0sCisgKgl9OworICoJaW50IGVyciwgaTsKKyAqCisgKgkvLyBGaXJzdCBxdWVy
eSB0aGUgc2l6ZSBvZiB0aGUgYmxvYiB3ZSBuZWVkLCB0aGlzIG5lZWRzIHRvIGJlIGxhcmdlCisg
KgkvLyBlbm91Z2ggdG8gaG9sZCBvdXIgYXJyYXkgb2YgcmVnaW9ucy4gVGhlIGtlcm5lbCB3aWxs
IGZpbGwgb3V0IHRoZQorICoJLy8gaXRlbS5sZW5ndGggZm9yIHVzLCB3aGljaCBpcyB0aGUgbnVt
YmVyIG9mIGJ5dGVzIHdlIG5lZWQuCisgKgllcnIgPSBpb2N0bChmZCwgRFJNX0lPQ1RMX0k5MTVf
UVVFUlksICZxdWVyeSk7CisgKglpZiAoZXJyKSAuLi4KKyAqCisgKglpbmZvID0gY2FsbG9jKDEs
IGl0ZW0ubGVuZ3RoKTsKKyAqCS8vIE5vdyB0aGF0IHdlIGFsbG9jYXRlZCB0aGUgcmVxdWlyZWQg
bnVtYmVyIG9mIGJ5dGVzLCB3ZSBjYWxsIHRoZSBpb2N0bAorICoJLy8gYWdhaW4sIHRoaXMgdGlt
ZSB3aXRoIHRoZSBkYXRhX3B0ciBwb2ludGluZyB0byBvdXIgbmV3bHkgYWxsb2NhdGVkCisgKgkv
LyBibG9iLCB3aGljaCB0aGUga2VybmVsIGNhbiB0aGVuIHBvcHVsYXRlIHdpdGggdGhlIGFsbCB0
aGUgcmVnaW9uIGluZm8uCisgKglpdGVtLmRhdGFfcHRyID0gKHVpbnRwdHJfdCkmaW5mbywKKyAq
CisgKgllcnIgPSBpb2N0bChmZCwgRFJNX0lPQ1RMX0k5MTVfUVVFUlksICZxdWVyeSk7CisgKglp
ZiAoZXJyKSAuLi4KKyAqCisgKgkvLyBXZSBjYW4gbm93IGFjY2VzcyBlYWNoIHJlZ2lvbiBpbiB0
aGUgYXJyYXkKKyAqCWZvciAoaSA9IDA7IGkgPCBpbmZvLT5udW1fcmVnaW9uczsgaSsrKSB7Cisg
KgkJc3RydWN0IGRybV9pOTE1X21lbW9yeV9yZWdpb25faW5mbyBtciA9IGluZm8tPnJlZ2lvbnNb
aV07CisgKgkJdTE2IGNsYXNzID0gbXIucmVnaW9uLmNsYXNzOworICoJCXUxNiBpbnN0YW5jZSA9
IG1yLnJlZ2lvbi5pbnN0YW5jZTsKKyAqCisgKgkJLi4uLgorICoJfQorICoKKyAqCWZyZWUoaW5m
byk7CisgKi8KK3N0cnVjdCBsb2NhbF9kcm1faTkxNV9xdWVyeV9tZW1vcnlfcmVnaW9ucyB7CisJ
LyoqIEBudW1fcmVnaW9uczogTnVtYmVyIG9mIHN1cHBvcnRlZCByZWdpb25zICovCisJX191MzIg
bnVtX3JlZ2lvbnM7CisKKwkvKiogQHBhZDogTUJaICovCisJX191MzIgcGFkOworCisJLyoqIEBy
ZWdpb25zOiBJbmZvIGFib3V0IGVhY2ggc3VwcG9ydGVkIHJlZ2lvbiAqLworCXN0cnVjdCBsb2Nh
bF9kcm1faTkxNV9tZW1vcnlfcmVnaW9uX2luZm8gcmVnaW9uc1tdOworfTsKKworY29uc3QgY2hh
ciAqZ2V0X21lbW9yeV9yZWdpb25fbmFtZSh1aW50MzJfdCByZWdpb24pOwordWludDMyX3QgZ2Vt
X2dldF9iYXRjaF9zaXplKGludCBmZCwgdWludDhfdCBtZW1fcmVnaW9uX3R5cGUpOworCitzdHJ1
Y3QgbG9jYWxfZHJtX2k5MTVfcXVlcnlfbWVtb3J5X3JlZ2lvbnMgKmdlbV9nZXRfcXVlcnlfbWVt
b3J5X3JlZ2lvbnMoaW50IGZkKTsKKworCitpbnQgX19nZW1fY3JlYXRlX2luX21lbW9yeV9yZWdp
b25fbGlzdChpbnQgZmQsIHVpbnQzMl90ICpoYW5kbGUsIHVpbnQ2NF90IHNpemUsCisJCQkJICAg
ICAgIHN0cnVjdCBsb2NhbF9kcm1faTkxNV9nZW1fbWVtb3J5X2NsYXNzX2luc3RhbmNlICptZW1f
cmVnaW9ucywKKwkJCQkgICAgICAgaW50IG51bV9yZWdpb25zKTsKKwordWludDMyX3QgZ2VtX2Ny
ZWF0ZV9pbl9tZW1vcnlfcmVnaW9uX2xpc3QoaW50IGZkLCB1aW50NjRfdCBzaXplLAorCQkJCQkg
IHN0cnVjdCBsb2NhbF9kcm1faTkxNV9nZW1fbWVtb3J5X2NsYXNzX2luc3RhbmNlICptZW1fcmVn
aW9ucywKKwkJCQkJICBpbnQgbnVtX3JlZ2lvbnMpOworCisvKgorICogWFhYOiB0aGUgd2hvbGUg
Y29udmVydGluZyB0byBjbGFzc19pbnN0YW5jZSB0aGluZyBpcyBtZWFudCBhcyBhIHRlbXBvcmFy
eQorICogc3RvcCBnYXAgd2hpY2ggc2hvdWxkIGtlZXAgZXZlcnl0aGluZyB3b3JraW5nLCBzdWNo
IHRoYXQgd2UgZG9uJ3QgaGF2ZSB0bworICogcmV3cml0ZSB0aGUgd29ybGQgaW4gb25lIGdvIHRv
IGZpdCB0aGUgbmV3IHVBUEkuCisgKi8KKyNkZWZpbmUgX19nZW1fY3JlYXRlX2luX21lbW9yeV9y
ZWdpb25zKGZkLCBoYW5kbGUsIHNpemUsIHJlZ2lvbnMuLi4pICh7IFwKKwl1bnNpZ25lZCBpbnQg
YXJyX19bXSA9IHsgcmVnaW9ucyB9OyBcCisJc3RydWN0IGxvY2FsX2RybV9pOTE1X2dlbV9tZW1v
cnlfY2xhc3NfaW5zdGFuY2UgYXJyX3F1ZXJ5X19bQVJSQVlfU0laRShhcnJfXyldOyBcCisJZm9y
IChpbnQgaV9fICA9IDA7IGlfXyA8IEFSUkFZX1NJWkUoYXJyX3F1ZXJ5X18pOyArK2lfXykgeyBc
CisJCWFycl9xdWVyeV9fW2lfX10ubWVtb3J5X2NsYXNzID0gTUVNT1JZX1RZUEVfRlJPTV9SRUdJ
T04oYXJyX19baV9fXSk7ICBcCisJCWFycl9xdWVyeV9fW2lfX10ubWVtb3J5X2luc3RhbmNlID0g
TUVNT1JZX0lOU1RBTkNFX0ZST01fUkVHSU9OKGFycl9fW2lfX10pOyAgXAorCX0gXAorCV9fZ2Vt
X2NyZWF0ZV9pbl9tZW1vcnlfcmVnaW9uX2xpc3QoZmQsIGhhbmRsZSwgc2l6ZSwgYXJyX3F1ZXJ5
X18sIEFSUkFZX1NJWkUoYXJyX3F1ZXJ5X18pKTsgXAorfSkKKyNkZWZpbmUgZ2VtX2NyZWF0ZV9p
bl9tZW1vcnlfcmVnaW9ucyhmZCwgc2l6ZSwgcmVnaW9ucy4uLikgKHsgXAorCXVuc2lnbmVkIGlu
dCBhcnJfX1tdID0geyByZWdpb25zIH07IFwKKwlzdHJ1Y3QgbG9jYWxfZHJtX2k5MTVfZ2VtX21l
bW9yeV9jbGFzc19pbnN0YW5jZSBhcnJfcXVlcnlfX1tBUlJBWV9TSVpFKGFycl9fKV07IFwKKwlm
b3IgKGludCBpX18gID0gMDsgaV9fIDwgQVJSQVlfU0laRShhcnJfcXVlcnlfXyk7ICsraV9fKSB7
IFwKKwkJYXJyX3F1ZXJ5X19baV9fXS5tZW1vcnlfY2xhc3MgPSBNRU1PUllfVFlQRV9GUk9NX1JF
R0lPTihhcnJfX1tpX19dKTsgIFwKKwkJYXJyX3F1ZXJ5X19baV9fXS5tZW1vcnlfaW5zdGFuY2Ug
PSBNRU1PUllfSU5TVEFOQ0VfRlJPTV9SRUdJT04oYXJyX19baV9fXSk7ICBcCisJfSBcCisJZ2Vt
X2NyZWF0ZV9pbl9tZW1vcnlfcmVnaW9uX2xpc3QoZmQsIHNpemUsIGFycl9xdWVyeV9fLCBBUlJB
WV9TSVpFKGFycl9xdWVyeV9fKSk7IFwKK30pCisKK3N0cnVjdCBpZ3RfY29sbGVjdGlvbiAqCitf
X2dldF9tZW1vcnlfcmVnaW9uX3NldChzdHJ1Y3QgbG9jYWxfZHJtX2k5MTVfcXVlcnlfbWVtb3J5
X3JlZ2lvbnMgKnJlZ2lvbnMsCisJCQl1aW50MzJfdCAqbWVtX3JlZ2lvbnNfdHlwZSwKKwkJCWlu
dCBudW1fcmVnaW9ucyk7CisKKy8qCisgKiBIZWxwZXIgbWFjcm8gdG8gY3JlYXRlIGlndF9jb2xs
ZWN0aW9uIHdoaWNoIGNvbnRhaW5zIGFsbCBtZW1vcnkgcmVnaW9ucworICogd2hpY2ggbWF0Y2hl
cyBtZW1fcmVnaW9uX3R5cGVzIGFycmF5LgorICovCisjZGVmaW5lIGdldF9tZW1vcnlfcmVnaW9u
X3NldChyZWdpb25zLCBtZW1fcmVnaW9uX3R5cGVzLi4uKSAoeyBcCisJdW5zaWduZWQgaW50IGFy
cl9fW10gPSB7IG1lbV9yZWdpb25fdHlwZXMgfTsgXAorCV9fZ2V0X21lbW9yeV9yZWdpb25fc2V0
KHJlZ2lvbnMsIGFycl9fLCBBUlJBWV9TSVpFKGFycl9fKSk7IFwKK30pCisKK2NoYXIgKm1lbXJl
Z2lvbl9keW5hbWljX3N1YnRlc3RfbmFtZShzdHJ1Y3QgaWd0X2NvbGxlY3Rpb24gKnNldCk7CisK
K3ZvaWQgaW50ZWxfZHVtcF9ncHVfbWVtaW5mbyhzdHJ1Y3QgbG9jYWxfZHJtX2k5MTVfcXVlcnlf
bWVtb3J5X3JlZ2lvbnMgKmluZm8pOworCit1aW50MzJfdCBncHVfbWVtaW5mb19yZWdpb25fY291
bnQoc3RydWN0IGxvY2FsX2RybV9pOTE1X3F1ZXJ5X21lbW9yeV9yZWdpb25zICppbmZvLAorCQkJ
CSAgdWludDE2X3QgcmVnaW9uX2NsYXNzKTsKK3VpbnQ2NF90IGdwdV9tZW1pbmZvX3JlZ2lvbl90
b3RhbF9zaXplKHN0cnVjdCBsb2NhbF9kcm1faTkxNV9xdWVyeV9tZW1vcnlfcmVnaW9ucyAqaW5m
bywKKwkJCQkgICAgICAgdWludDE2X3QgcmVnaW9uX2NsYXNzKTsKK3VpbnQ2NF90IGdwdV9tZW1p
bmZvX3JlZ2lvbl90b3RhbF9hdmFpbGFibGUoc3RydWN0IGxvY2FsX2RybV9pOTE1X3F1ZXJ5X21l
bW9yeV9yZWdpb25zICppbmZvLAorCQkJCQkgICAgdWludDE2X3QgcmVnaW9uX3R5cGUpOworCit1
aW50NjRfdCBncHVfbWVtaW5mb19yZWdpb25fc2l6ZShzdHJ1Y3QgbG9jYWxfZHJtX2k5MTVfcXVl
cnlfbWVtb3J5X3JlZ2lvbnMgKmluZm8sCisJCQkJIHVpbnQxNl90IG1lbW9yeV9jbGFzcywKKwkJ
CQkgdWludDE2X3QgbWVtb3J5X2luc3RhbmNlKTsKK3VpbnQ2NF90IGdwdV9tZW1pbmZvX3JlZ2lv
bl9hdmFpbGFibGUoc3RydWN0IGxvY2FsX2RybV9pOTE1X3F1ZXJ5X21lbW9yeV9yZWdpb25zICpp
bmZvLAorCQkJCSAgICAgIHVpbnQxNl90IG1lbW9yeV9jbGFzcywKKwkJCQkgICAgICB1aW50MTZf
dCBtZW1vcnlfaW5zdGFuY2UpOworCisjZW5kaWYgLyogSU5URUxfTUVNT1JZX1JFR0lPTl9IICov
CmRpZmYgLS1naXQgYS9saWIvaW9jdGxfd3JhcHBlcnMuaCBiL2xpYi9pb2N0bF93cmFwcGVycy5o
CmluZGV4IDllYTY3MzY1Li4zNjY0MGUzMCAxMDA2NDQKLS0tIGEvbGliL2lvY3RsX3dyYXBwZXJz
LmgKKysrIGIvbGliL2lvY3RsX3dyYXBwZXJzLmgKQEAgLTM4LDYgKzM4LDcgQEAKIAogI2luY2x1
ZGUgImk5MTUvZ2VtX2NvbnRleHQuaCIKICNpbmNsdWRlICJpOTE1L2dlbV9zY2hlZHVsZXIuaCIK
KyNpbmNsdWRlICJpOTE1L2ludGVsX21lbW9yeV9yZWdpb24uaCIKIAogLyoqCiAgKiBpZ3RfaW9j
dGw6CmRpZmYgLS1naXQgYS9saWIvbWVzb24uYnVpbGQgYi9saWIvbWVzb24uYnVpbGQKaW5kZXgg
OTkyOTUyMGUuLjdjOTRhN2VhIDEwMDY0NAotLS0gYS9saWIvbWVzb24uYnVpbGQKKysrIGIvbGli
L21lc29uLmJ1aWxkCkBAIC0xMCw2ICsxMCw3IEBAIGxpYl9zb3VyY2VzID0gWwogCSdpOTE1L2dl
bV9yaW5nLmMnLAogCSdpOTE1L2dlbV9tbWFuLmMnLAogCSdpOTE1L2dlbV92bS5jJywKKwknaTkx
NS9pbnRlbF9tZW1vcnlfcmVnaW9uLmMnLAogCSdpZ3RfY29sbGVjdGlvbi5jJywKIAknaWd0X2Nv
bG9yX2VuY29kaW5nLmMnLAogCSdpZ3RfZGVidWdmcy5jJywKLS0gCjIuMjYuMwoKX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KSW50ZWwtZ2Z4IG1haWxpbmcg
bGlzdApJbnRlbC1nZnhAbGlzdHMuZnJlZWRlc2t0b3Aub3JnCmh0dHBzOi8vbGlzdHMuZnJlZWRl
c2t0b3Aub3JnL21haWxtYW4vbGlzdGluZm8vaW50ZWwtZ2Z4Cg==

Return-Path: <intel-gfx-bounces@lists.freedesktop.org>
X-Original-To: lists+intel-gfx@lfdr.de
Delivered-To: lists+intel-gfx@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [IPv6:2610:10:20:722:a800:ff:fe36:1795])
	by mail.lfdr.de (Postfix) with ESMTPS id DD07942ED1
	for <lists+intel-gfx@lfdr.de>; Wed, 12 Jun 2019 20:38:11 +0200 (CEST)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 31DA88981D;
	Wed, 12 Jun 2019 18:38:10 +0000 (UTC)
X-Original-To: intel-gfx@lists.freedesktop.org
Delivered-To: intel-gfx@lists.freedesktop.org
Received: from mga11.intel.com (mga11.intel.com [192.55.52.93])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 84D0889824
 for <intel-gfx@lists.freedesktop.org>; Wed, 12 Jun 2019 18:38:08 +0000 (UTC)
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from fmsmga005.fm.intel.com ([10.253.24.32])
 by fmsmga102.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384;
 12 Jun 2019 11:38:08 -0700
X-ExtLoop1: 1
Received: from dceraolo-linux.fm.intel.com ([10.1.27.145])
 by fmsmga005.fm.intel.com with ESMTP; 12 Jun 2019 11:38:08 -0700
From: Daniele Ceraolo Spurio <daniele.ceraolospurio@intel.com>
To: intel-gfx@lists.freedesktop.org
Date: Wed, 12 Jun 2019 11:37:40 -0700
Message-Id: <20190612183748.7693-2-daniele.ceraolospurio@intel.com>
X-Mailer: git-send-email 2.20.1
In-Reply-To: <20190612183748.7693-1-daniele.ceraolospurio@intel.com>
References: <20190612183748.7693-1-daniele.ceraolospurio@intel.com>
MIME-Version: 1.0
Subject: [Intel-gfx] [PATCH v2 1/8] drm/i915: prefer i915_runtime_pm in
 intel_runtime function
X-BeenThere: intel-gfx@lists.freedesktop.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: Intel graphics driver community testing & development
 <intel-gfx.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/intel-gfx>
List-Post: <mailto:intel-gfx@lists.freedesktop.org>
List-Help: <mailto:intel-gfx-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: intel-gfx-bounces@lists.freedesktop.org
Sender: "Intel-gfx" <intel-gfx-bounces@lists.freedesktop.org>

QXMgYSBmaXJzdCBzdGVwIHRvd2FyZHMgdXBkYXRpbmcgdGhlIGNvZGUgdG8gd29yayBvbiB0aGUg
cnVudGltZV9wbQpzdHJ1Y3R1cmUgaW5zdGVhZCBvZiBpOTE1LCByZXdvcmsgYWxsIHRoZSBpbnRl
cm5hbHMgdG8gdXNlIGFuZCBwYXNzCmFyb3VuZCB0aGF0LgoKdjI6IGFkZCBjb21tZW50IGZvciBr
ZGV2IChKYW5pKSwgbW92ZSBycG0gaW5pdCBhZnRlciBwZGV2IGluaXQgZm9yCm1vY2tfZGV2aWNl
CgpTaWduZWQtb2ZmLWJ5OiBEYW5pZWxlIENlcmFvbG8gU3B1cmlvIDxkYW5pZWxlLmNlcmFvbG9z
cHVyaW9AaW50ZWwuY29tPgpDYzogSmFuaSBOaWt1bGEgPGphbmkubmlrdWxhQGxpbnV4LmludGVs
LmNvbT4KLS0tCiBkcml2ZXJzL2dwdS9kcm0vaTkxNS9pOTE1X2Rydi5oICAgICAgICAgICAgICAg
fCAgIDIgKwogZHJpdmVycy9ncHUvZHJtL2k5MTUvaW50ZWxfZHJ2LmggICAgICAgICAgICAgIHwg
IDEwICstCiBkcml2ZXJzL2dwdS9kcm0vaTkxNS9pbnRlbF9ydW50aW1lX3BtLmMgICAgICAgfCAx
MjIgKysrKysrKystLS0tLS0tLS0tCiAuLi4vZ3B1L2RybS9pOTE1L3NlbGZ0ZXN0cy9tb2NrX2dl
bV9kZXZpY2UuYyAgfCAgIDQgKy0KIDQgZmlsZXMgY2hhbmdlZCwgNjggaW5zZXJ0aW9ucygrKSwg
NzAgZGVsZXRpb25zKC0pCgpkaWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvaTkxNV9k
cnYuaCBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2k5MTVfZHJ2LmgKaW5kZXggMGVhN2Y3OGFlMjI3
Li4zZTcxODYzNjJiYjAgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2k5MTVfZHJ2
LmgKKysrIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvaTkxNV9kcnYuaApAQCAtMTA3Myw2ICsxMDcz
LDggQEAgc3RydWN0IHNrbF93bV9wYXJhbXMgewogICovCiBzdHJ1Y3QgaTkxNV9ydW50aW1lX3Bt
IHsKIAlhdG9taWNfdCB3YWtlcmVmX2NvdW50OworCXN0cnVjdCBkZXZpY2UgKmtkZXY7IC8qIHBv
aW50cyB0byBpOTE1LT5kcm0ucGRldi0+ZGV2ICovCisJYm9vbCBhdmFpbGFibGU7CiAJYm9vbCBz
dXNwZW5kZWQ7CiAJYm9vbCBpcnFzX2VuYWJsZWQ7CiAKZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1
L2RybS9pOTE1L2ludGVsX2Rydi5oIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvaW50ZWxfZHJ2LmgK
aW5kZXggM2UzMzczMTdmNzdlLi5hZWM0MGFkZjQ4NzYgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1
L2RybS9pOTE1L2ludGVsX2Rydi5oCisrKyBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2ludGVsX2Ry
di5oCkBAIC0xNjU2LDEzICsxNjU2LDE3IEBAIF9fX19hc3NlcnRfcnBtX3dha2Vsb2NrX2hlbGQo
c3RydWN0IGk5MTVfcnVudGltZV9wbSAqcnBtLCBpbnQgd2FrZXJlZl9jb3VudCkKIH0KIAogc3Rh
dGljIGlubGluZSB2b2lkCi1hc3NlcnRfcnBtX3Jhd193YWtlcmVmX2hlbGQoc3RydWN0IGRybV9p
OTE1X3ByaXZhdGUgKmk5MTUpCitfX2Fzc2VydF9ycG1fcmF3X3dha2VyZWZfaGVsZChzdHJ1Y3Qg
aTkxNV9ydW50aW1lX3BtICpycG0pCiB7Ci0Jc3RydWN0IGk5MTVfcnVudGltZV9wbSAqcnBtID0g
Jmk5MTUtPnJ1bnRpbWVfcG07Ci0KIAlfX19fYXNzZXJ0X3JwbV9yYXdfd2FrZXJlZl9oZWxkKHJw
bSwgYXRvbWljX3JlYWQoJnJwbS0+d2FrZXJlZl9jb3VudCkpOwogfQogCitzdGF0aWMgaW5saW5l
IHZvaWQKK2Fzc2VydF9ycG1fcmF3X3dha2VyZWZfaGVsZChzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0
ZSAqaTkxNSkKK3sKKwlfX2Fzc2VydF9ycG1fcmF3X3dha2VyZWZfaGVsZCgmaTkxNS0+cnVudGlt
ZV9wbSk7Cit9CisKIHN0YXRpYyBpbmxpbmUgdm9pZAogX19hc3NlcnRfcnBtX3dha2Vsb2NrX2hl
bGQoc3RydWN0IGk5MTVfcnVudGltZV9wbSAqcnBtKQogewpkaWZmIC0tZ2l0IGEvZHJpdmVycy9n
cHUvZHJtL2k5MTUvaW50ZWxfcnVudGltZV9wbS5jIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvaW50
ZWxfcnVudGltZV9wbS5jCmluZGV4IGFmM2MxYWRhMWIyZS4uN2M2MDJmNWM3NDhkIDEwMDY0NAot
LS0gYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9pbnRlbF9ydW50aW1lX3BtLmMKKysrIGIvZHJpdmVy
cy9ncHUvZHJtL2k5MTUvaW50ZWxfcnVudGltZV9wbS5jCkBAIC03NSwyMSArNzUsMTggQEAgc3Rh
dGljIHZvaWQgX19wcmludF9kZXBvdF9zdGFjayhkZXBvdF9zdGFja19oYW5kbGVfdCBzdGFjaywK
IAlzdGFja190cmFjZV9zbnByaW50KGJ1Ziwgc3osIGVudHJpZXMsIG5yX2VudHJpZXMsIGluZGVu
dCk7CiB9CiAKLXN0YXRpYyB2b2lkIGluaXRfaW50ZWxfcnVudGltZV9wbV93YWtlcmVmKHN0cnVj
dCBkcm1faTkxNV9wcml2YXRlICppOTE1KQorc3RhdGljIHZvaWQgaW5pdF9pbnRlbF9ydW50aW1l
X3BtX3dha2VyZWYoc3RydWN0IGk5MTVfcnVudGltZV9wbSAqcnBtKQogewotCXN0cnVjdCBpOTE1
X3J1bnRpbWVfcG0gKnJwbSA9ICZpOTE1LT5ydW50aW1lX3BtOwotCiAJc3Bpbl9sb2NrX2luaXQo
JnJwbS0+ZGVidWcubG9jayk7CiB9CiAKIHN0YXRpYyBub2lubGluZSBkZXBvdF9zdGFja19oYW5k
bGVfdAotdHJhY2tfaW50ZWxfcnVudGltZV9wbV93YWtlcmVmKHN0cnVjdCBkcm1faTkxNV9wcml2
YXRlICppOTE1KQordHJhY2tfaW50ZWxfcnVudGltZV9wbV93YWtlcmVmKHN0cnVjdCBpOTE1X3J1
bnRpbWVfcG0gKnJwbSkKIHsKLQlzdHJ1Y3QgaTkxNV9ydW50aW1lX3BtICpycG0gPSAmaTkxNS0+
cnVudGltZV9wbTsKIAlkZXBvdF9zdGFja19oYW5kbGVfdCBzdGFjaywgKnN0YWNrczsKIAl1bnNp
Z25lZCBsb25nIGZsYWdzOwogCi0JaWYgKCFIQVNfUlVOVElNRV9QTShpOTE1KSkKKwlpZiAoIXJw
bS0+YXZhaWxhYmxlKQogCQlyZXR1cm4gLTE7CiAKIAlzdGFjayA9IF9fc2F2ZV9kZXBvdF9zdGFj
aygpOwpAQCAtMTE2LDEwICsxMTMsOSBAQCB0cmFja19pbnRlbF9ydW50aW1lX3BtX3dha2VyZWYo
c3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmk5MTUpCiAJcmV0dXJuIHN0YWNrOwogfQogCi1zdGF0
aWMgdm9pZCB1bnRyYWNrX2ludGVsX3J1bnRpbWVfcG1fd2FrZXJlZihzdHJ1Y3QgZHJtX2k5MTVf
cHJpdmF0ZSAqaTkxNSwKK3N0YXRpYyB2b2lkIHVudHJhY2tfaW50ZWxfcnVudGltZV9wbV93YWtl
cmVmKHN0cnVjdCBpOTE1X3J1bnRpbWVfcG0gKnJwbSwKIAkJCQkJICAgICBkZXBvdF9zdGFja19o
YW5kbGVfdCBzdGFjaykKIHsKLQlzdHJ1Y3QgaTkxNV9ydW50aW1lX3BtICpycG0gPSAmaTkxNS0+
cnVudGltZV9wbTsKIAl1bnNpZ25lZCBsb25nIGZsYWdzLCBuOwogCWJvb2wgZm91bmQgPSBmYWxz
ZTsKIApAQCAtMjM3LDkgKzIzMyw4IEBAIGR1bXBfYW5kX2ZyZWVfd2FrZXJlZl90cmFja2luZyhz
dHJ1Y3QgaW50ZWxfcnVudGltZV9wbV9kZWJ1ZyAqZGVidWcpCiB9CiAKIHN0YXRpYyBub2lubGlu
ZSB2b2lkCi1fX2ludGVsX3dha2VyZWZfZGVjX2FuZF9jaGVja190cmFja2luZyhzdHJ1Y3QgZHJt
X2k5MTVfcHJpdmF0ZSAqaTkxNSkKK19faW50ZWxfd2FrZXJlZl9kZWNfYW5kX2NoZWNrX3RyYWNr
aW5nKHN0cnVjdCBpOTE1X3J1bnRpbWVfcG0gKnJwbSkKIHsKLQlzdHJ1Y3QgaTkxNV9ydW50aW1l
X3BtICpycG0gPSAmaTkxNS0+cnVudGltZV9wbTsKIAlzdHJ1Y3QgaW50ZWxfcnVudGltZV9wbV9k
ZWJ1ZyBkYmcgPSB7fTsKIAl1bnNpZ25lZCBsb25nIGZsYWdzOwogCkBAIC0yNTUsOSArMjUwLDgg
QEAgX19pbnRlbF93YWtlcmVmX2RlY19hbmRfY2hlY2tfdHJhY2tpbmcoc3RydWN0IGRybV9pOTE1
X3ByaXZhdGUgKmk5MTUpCiB9CiAKIHN0YXRpYyBub2lubGluZSB2b2lkCi11bnRyYWNrX2FsbF9p
bnRlbF9ydW50aW1lX3BtX3dha2VyZWZzKHN0cnVjdCBkcm1faTkxNV9wcml2YXRlICppOTE1KQor
dW50cmFja19hbGxfaW50ZWxfcnVudGltZV9wbV93YWtlcmVmcyhzdHJ1Y3QgaTkxNV9ydW50aW1l
X3BtICpycG0pCiB7Ci0Jc3RydWN0IGk5MTVfcnVudGltZV9wbSAqcnBtID0gJmk5MTUtPnJ1bnRp
bWVfcG07CiAJc3RydWN0IGludGVsX3J1bnRpbWVfcG1fZGVidWcgZGJnID0ge307CiAJdW5zaWdu
ZWQgbG9uZyBmbGFnczsKIApAQCAtMzA4LDc2ICszMDIsNzAgQEAgdm9pZCBwcmludF9pbnRlbF9y
dW50aW1lX3BtX3dha2VyZWYoc3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmk5MTUsCiAKICNlbHNl
CiAKLXN0YXRpYyB2b2lkIGluaXRfaW50ZWxfcnVudGltZV9wbV93YWtlcmVmKHN0cnVjdCBkcm1f
aTkxNV9wcml2YXRlICppOTE1KQorc3RhdGljIHZvaWQgaW5pdF9pbnRlbF9ydW50aW1lX3BtX3dh
a2VyZWYoc3RydWN0IGk5MTVfcnVudGltZV9wbSAqcnBtKQogewogfQogCiBzdGF0aWMgZGVwb3Rf
c3RhY2tfaGFuZGxlX3QKLXRyYWNrX2ludGVsX3J1bnRpbWVfcG1fd2FrZXJlZihzdHJ1Y3QgZHJt
X2k5MTVfcHJpdmF0ZSAqaTkxNSkKK3RyYWNrX2ludGVsX3J1bnRpbWVfcG1fd2FrZXJlZihzdHJ1
Y3QgaTkxNV9ydW50aW1lX3BtICpycG0pCiB7CiAJcmV0dXJuIC0xOwogfQogCi1zdGF0aWMgdm9p
ZCB1bnRyYWNrX2ludGVsX3J1bnRpbWVfcG1fd2FrZXJlZihzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0
ZSAqaTkxNSwKK3N0YXRpYyB2b2lkIHVudHJhY2tfaW50ZWxfcnVudGltZV9wbV93YWtlcmVmKHN0
cnVjdCBpOTE1X3J1bnRpbWVfcG0gKnJwbSwKIAkJCQkJICAgICBpbnRlbF93YWtlcmVmX3Qgd3Jl
ZikKIHsKIH0KIAogc3RhdGljIHZvaWQKLV9faW50ZWxfd2FrZXJlZl9kZWNfYW5kX2NoZWNrX3Ry
YWNraW5nKHN0cnVjdCBkcm1faTkxNV9wcml2YXRlICppOTE1KQorX19pbnRlbF93YWtlcmVmX2Rl
Y19hbmRfY2hlY2tfdHJhY2tpbmcoc3RydWN0IGk5MTVfcnVudGltZV9wbSAqcnBtKQogewotCWF0
b21pY19kZWMoJmk5MTUtPnJ1bnRpbWVfcG0ud2FrZXJlZl9jb3VudCk7CisJYXRvbWljX2RlYygm
cnBtLT53YWtlcmVmX2NvdW50KTsKIH0KIAogc3RhdGljIHZvaWQKLXVudHJhY2tfYWxsX2ludGVs
X3J1bnRpbWVfcG1fd2FrZXJlZnMoc3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmk5MTUpCit1bnRy
YWNrX2FsbF9pbnRlbF9ydW50aW1lX3BtX3dha2VyZWZzKHN0cnVjdCBpOTE1X3J1bnRpbWVfcG0g
KnJwbSkKIHsKIH0KIAogI2VuZGlmCiAKIHN0YXRpYyB2b2lkCi1pbnRlbF9ydW50aW1lX3BtX2Fj
cXVpcmUoc3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmk5MTUsIGJvb2wgd2FrZWxvY2spCitpbnRl
bF9ydW50aW1lX3BtX2FjcXVpcmUoc3RydWN0IGk5MTVfcnVudGltZV9wbSAqcnBtLCBib29sIHdh
a2Vsb2NrKQogewotCXN0cnVjdCBpOTE1X3J1bnRpbWVfcG0gKnJwbSA9ICZpOTE1LT5ydW50aW1l
X3BtOwotCiAJaWYgKHdha2Vsb2NrKSB7CiAJCWF0b21pY19hZGQoMSArIElOVEVMX1JQTV9XQUtF
TE9DS19CSUFTLCAmcnBtLT53YWtlcmVmX2NvdW50KTsKLQkJYXNzZXJ0X3JwbV93YWtlbG9ja19o
ZWxkKGk5MTUpOworCQlfX2Fzc2VydF9ycG1fd2FrZWxvY2tfaGVsZChycG0pOwogCX0gZWxzZSB7
CiAJCWF0b21pY19pbmMoJnJwbS0+d2FrZXJlZl9jb3VudCk7Ci0JCWFzc2VydF9ycG1fcmF3X3dh
a2VyZWZfaGVsZChpOTE1KTsKKwkJX19hc3NlcnRfcnBtX3Jhd193YWtlcmVmX2hlbGQocnBtKTsK
IAl9CiB9CiAKIHN0YXRpYyB2b2lkCi1pbnRlbF9ydW50aW1lX3BtX3JlbGVhc2Uoc3RydWN0IGRy
bV9pOTE1X3ByaXZhdGUgKmk5MTUsIGludCB3YWtlbG9jaykKK2ludGVsX3J1bnRpbWVfcG1fcmVs
ZWFzZShzdHJ1Y3QgaTkxNV9ydW50aW1lX3BtICpycG0sIGludCB3YWtlbG9jaykKIHsKLQlzdHJ1
Y3QgaTkxNV9ydW50aW1lX3BtICpycG0gPSAmaTkxNS0+cnVudGltZV9wbTsKLQogCWlmICh3YWtl
bG9jaykgewotCQlhc3NlcnRfcnBtX3dha2Vsb2NrX2hlbGQoaTkxNSk7CisJCV9fYXNzZXJ0X3Jw
bV93YWtlbG9ja19oZWxkKHJwbSk7CiAJCWF0b21pY19zdWIoSU5URUxfUlBNX1dBS0VMT0NLX0JJ
QVMsICZycG0tPndha2VyZWZfY291bnQpOwogCX0gZWxzZSB7Ci0JCWFzc2VydF9ycG1fcmF3X3dh
a2VyZWZfaGVsZChpOTE1KTsKKwkJX19hc3NlcnRfcnBtX3Jhd193YWtlcmVmX2hlbGQocnBtKTsK
IAl9CiAKLQlfX2ludGVsX3dha2VyZWZfZGVjX2FuZF9jaGVja190cmFja2luZyhpOTE1KTsKKwlf
X2ludGVsX3dha2VyZWZfZGVjX2FuZF9jaGVja190cmFja2luZyhycG0pOwogfQogCi1zdGF0aWMg
aW50ZWxfd2FrZXJlZl90IF9faW50ZWxfcnVudGltZV9wbV9nZXQoc3RydWN0IGRybV9pOTE1X3By
aXZhdGUgKmk5MTUsCitzdGF0aWMgaW50ZWxfd2FrZXJlZl90IF9faW50ZWxfcnVudGltZV9wbV9n
ZXQoc3RydWN0IGk5MTVfcnVudGltZV9wbSAqcnBtLAogCQkJCQkgICAgICBib29sIHdha2Vsb2Nr
KQogewotCXN0cnVjdCBwY2lfZGV2ICpwZGV2ID0gaTkxNS0+ZHJtLnBkZXY7Ci0Jc3RydWN0IGRl
dmljZSAqa2RldiA9ICZwZGV2LT5kZXY7CiAJaW50IHJldDsKIAotCXJldCA9IHBtX3J1bnRpbWVf
Z2V0X3N5bmMoa2Rldik7CisJcmV0ID0gcG1fcnVudGltZV9nZXRfc3luYyhycG0tPmtkZXYpOwog
CVdBUk5fT05DRShyZXQgPCAwLCAicG1fcnVudGltZV9nZXRfc3luYygpIGZhaWxlZDogJWRcbiIs
IHJldCk7CiAKLQlpbnRlbF9ydW50aW1lX3BtX2FjcXVpcmUoaTkxNSwgd2FrZWxvY2spOworCWlu
dGVsX3J1bnRpbWVfcG1fYWNxdWlyZShycG0sIHdha2Vsb2NrKTsKIAotCXJldHVybiB0cmFja19p
bnRlbF9ydW50aW1lX3BtX3dha2VyZWYoaTkxNSk7CisJcmV0dXJuIHRyYWNrX2ludGVsX3J1bnRp
bWVfcG1fd2FrZXJlZihycG0pOwogfQogCiAvKioKQEAgLTQwMCw3ICszODgsNyBAQCBzdGF0aWMg
aW50ZWxfd2FrZXJlZl90IF9faW50ZWxfcnVudGltZV9wbV9nZXQoc3RydWN0IGRybV9pOTE1X3By
aXZhdGUgKmk5MTUsCiAKIGludGVsX3dha2VyZWZfdCBpbnRlbF9ydW50aW1lX3BtX2dldF9yYXco
c3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmk5MTUpCiB7Ci0JcmV0dXJuIF9faW50ZWxfcnVudGlt
ZV9wbV9nZXQoaTkxNSwgZmFsc2UpOworCXJldHVybiBfX2ludGVsX3J1bnRpbWVfcG1fZ2V0KCZp
OTE1LT5ydW50aW1lX3BtLCBmYWxzZSk7CiB9CiAKIC8qKgpAQCAtNDE3LDcgKzQwNSw3IEBAIGlu
dGVsX3dha2VyZWZfdCBpbnRlbF9ydW50aW1lX3BtX2dldF9yYXcoc3RydWN0IGRybV9pOTE1X3By
aXZhdGUgKmk5MTUpCiAgKi8KIGludGVsX3dha2VyZWZfdCBpbnRlbF9ydW50aW1lX3BtX2dldChz
dHJ1Y3QgZHJtX2k5MTVfcHJpdmF0ZSAqaTkxNSkKIHsKLQlyZXR1cm4gX19pbnRlbF9ydW50aW1l
X3BtX2dldChpOTE1LCB0cnVlKTsKKwlyZXR1cm4gX19pbnRlbF9ydW50aW1lX3BtX2dldCgmaTkx
NS0+cnVudGltZV9wbSwgdHJ1ZSk7CiB9CiAKIC8qKgpAQCAtNDM2LDIzICs0MjQsMjIgQEAgaW50
ZWxfd2FrZXJlZl90IGludGVsX3J1bnRpbWVfcG1fZ2V0KHN0cnVjdCBkcm1faTkxNV9wcml2YXRl
ICppOTE1KQogICovCiBpbnRlbF93YWtlcmVmX3QgaW50ZWxfcnVudGltZV9wbV9nZXRfaWZfaW5f
dXNlKHN0cnVjdCBkcm1faTkxNV9wcml2YXRlICppOTE1KQogewotCWlmIChJU19FTkFCTEVEKENP
TkZJR19QTSkpIHsKLQkJc3RydWN0IHBjaV9kZXYgKnBkZXYgPSBpOTE1LT5kcm0ucGRldjsKLQkJ
c3RydWN0IGRldmljZSAqa2RldiA9ICZwZGV2LT5kZXY7CisJc3RydWN0IGk5MTVfcnVudGltZV9w
bSAqcnBtID0gJmk5MTUtPnJ1bnRpbWVfcG07CiAKKwlpZiAoSVNfRU5BQkxFRChDT05GSUdfUE0p
KSB7CiAJCS8qCiAJCSAqIEluIGNhc2VzIHJ1bnRpbWUgUE0gaXMgZGlzYWJsZWQgYnkgdGhlIFJQ
TSBjb3JlIGFuZCB3ZSBnZXQKIAkJICogYW4gLUVJTlZBTCByZXR1cm4gdmFsdWUgd2UgYXJlIG5v
dCBzdXBwb3NlZCB0byBjYWxsIHRoaXMKIAkJICogZnVuY3Rpb24sIHNpbmNlIHRoZSBwb3dlciBz
dGF0ZSBpcyB1bmRlZmluZWQuIFRoaXMgYXBwbGllcwogCQkgKiBhdG0gdG8gdGhlIGxhdGUvZWFy
bHkgc3lzdGVtIHN1c3BlbmQvcmVzdW1lIGhhbmRsZXJzLgogCQkgKi8KLQkJaWYgKHBtX3J1bnRp
bWVfZ2V0X2lmX2luX3VzZShrZGV2KSA8PSAwKQorCQlpZiAocG1fcnVudGltZV9nZXRfaWZfaW5f
dXNlKHJwbS0+a2RldikgPD0gMCkKIAkJCXJldHVybiAwOwogCX0KIAotCWludGVsX3J1bnRpbWVf
cG1fYWNxdWlyZShpOTE1LCB0cnVlKTsKKwlpbnRlbF9ydW50aW1lX3BtX2FjcXVpcmUocnBtLCB0
cnVlKTsKIAotCXJldHVybiB0cmFja19pbnRlbF9ydW50aW1lX3BtX3dha2VyZWYoaTkxNSk7CisJ
cmV0dXJuIHRyYWNrX2ludGVsX3J1bnRpbWVfcG1fd2FrZXJlZihycG0pOwogfQogCiAvKioKQEAg
LTQ3NiwyNyArNDYzLDI1IEBAIGludGVsX3dha2VyZWZfdCBpbnRlbF9ydW50aW1lX3BtX2dldF9p
Zl9pbl91c2Uoc3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmk5MTUpCiAgKi8KIGludGVsX3dha2Vy
ZWZfdCBpbnRlbF9ydW50aW1lX3BtX2dldF9ub3Jlc3VtZShzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0
ZSAqaTkxNSkKIHsKLQlzdHJ1Y3QgcGNpX2RldiAqcGRldiA9IGk5MTUtPmRybS5wZGV2OwotCXN0
cnVjdCBkZXZpY2UgKmtkZXYgPSAmcGRldi0+ZGV2OworCXN0cnVjdCBpOTE1X3J1bnRpbWVfcG0g
KnJwbSA9ICZpOTE1LT5ydW50aW1lX3BtOwogCi0JYXNzZXJ0X3JwbV93YWtlbG9ja19oZWxkKGk5
MTUpOwotCXBtX3J1bnRpbWVfZ2V0X25vcmVzdW1lKGtkZXYpOworCV9fYXNzZXJ0X3JwbV93YWtl
bG9ja19oZWxkKHJwbSk7CisJcG1fcnVudGltZV9nZXRfbm9yZXN1bWUocnBtLT5rZGV2KTsKIAot
CWludGVsX3J1bnRpbWVfcG1fYWNxdWlyZShpOTE1LCB0cnVlKTsKKwlpbnRlbF9ydW50aW1lX3Bt
X2FjcXVpcmUocnBtLCB0cnVlKTsKIAotCXJldHVybiB0cmFja19pbnRlbF9ydW50aW1lX3BtX3dh
a2VyZWYoaTkxNSk7CisJcmV0dXJuIHRyYWNrX2ludGVsX3J1bnRpbWVfcG1fd2FrZXJlZihycG0p
OwogfQogCi1zdGF0aWMgdm9pZCBfX2ludGVsX3J1bnRpbWVfcG1fcHV0KHN0cnVjdCBkcm1faTkx
NV9wcml2YXRlICppOTE1LAorc3RhdGljIHZvaWQgX19pbnRlbF9ydW50aW1lX3BtX3B1dChzdHJ1
Y3QgaTkxNV9ydW50aW1lX3BtICpycG0sCiAJCQkJICAgaW50ZWxfd2FrZXJlZl90IHdyZWYsCiAJ
CQkJICAgYm9vbCB3YWtlbG9jaykKIHsKLQlzdHJ1Y3QgcGNpX2RldiAqcGRldiA9IGk5MTUtPmRy
bS5wZGV2OwotCXN0cnVjdCBkZXZpY2UgKmtkZXYgPSAmcGRldi0+ZGV2OworCXN0cnVjdCBkZXZp
Y2UgKmtkZXYgPSBycG0tPmtkZXY7CiAKLQl1bnRyYWNrX2ludGVsX3J1bnRpbWVfcG1fd2FrZXJl
ZihpOTE1LCB3cmVmKTsKKwl1bnRyYWNrX2ludGVsX3J1bnRpbWVfcG1fd2FrZXJlZihycG0sIHdy
ZWYpOwogCi0JaW50ZWxfcnVudGltZV9wbV9yZWxlYXNlKGk5MTUsIHdha2Vsb2NrKTsKKwlpbnRl
bF9ydW50aW1lX3BtX3JlbGVhc2UocnBtLCB3YWtlbG9jayk7CiAKIAlwbV9ydW50aW1lX21hcmtf
bGFzdF9idXN5KGtkZXYpOwogCXBtX3J1bnRpbWVfcHV0X2F1dG9zdXNwZW5kKGtkZXYpOwpAQCAt
NTE0LDcgKzQ5OSw3IEBAIHN0YXRpYyB2b2lkIF9faW50ZWxfcnVudGltZV9wbV9wdXQoc3RydWN0
IGRybV9pOTE1X3ByaXZhdGUgKmk5MTUsCiB2b2lkCiBpbnRlbF9ydW50aW1lX3BtX3B1dF9yYXco
c3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmk5MTUsIGludGVsX3dha2VyZWZfdCB3cmVmKQogewot
CV9faW50ZWxfcnVudGltZV9wbV9wdXQoaTkxNSwgd3JlZiwgZmFsc2UpOworCV9faW50ZWxfcnVu
dGltZV9wbV9wdXQoJmk5MTUtPnJ1bnRpbWVfcG0sIHdyZWYsIGZhbHNlKTsKIH0KIAogLyoqCkBA
IC01MzEsNyArNTE2LDcgQEAgaW50ZWxfcnVudGltZV9wbV9wdXRfcmF3KHN0cnVjdCBkcm1faTkx
NV9wcml2YXRlICppOTE1LCBpbnRlbF93YWtlcmVmX3Qgd3JlZikKICAqLwogdm9pZCBpbnRlbF9y
dW50aW1lX3BtX3B1dF91bmNoZWNrZWQoc3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmk5MTUpCiB7
Ci0JX19pbnRlbF9ydW50aW1lX3BtX3B1dChpOTE1LCAtMSwgdHJ1ZSk7CisJX19pbnRlbF9ydW50
aW1lX3BtX3B1dCgmaTkxNS0+cnVudGltZV9wbSwgLTEsIHRydWUpOwogfQogCiAjaWYgSVNfRU5B
QkxFRChDT05GSUdfRFJNX0k5MTVfREVCVUdfUlVOVElNRV9QTSkKQEAgLTU0Niw3ICs1MzEsNyBA
QCB2b2lkIGludGVsX3J1bnRpbWVfcG1fcHV0X3VuY2hlY2tlZChzdHJ1Y3QgZHJtX2k5MTVfcHJp
dmF0ZSAqaTkxNSkKICAqLwogdm9pZCBpbnRlbF9ydW50aW1lX3BtX3B1dChzdHJ1Y3QgZHJtX2k5
MTVfcHJpdmF0ZSAqaTkxNSwgaW50ZWxfd2FrZXJlZl90IHdyZWYpCiB7Ci0JX19pbnRlbF9ydW50
aW1lX3BtX3B1dChpOTE1LCB3cmVmLCB0cnVlKTsKKwlfX2ludGVsX3J1bnRpbWVfcG1fcHV0KCZp
OTE1LT5ydW50aW1lX3BtLCB3cmVmLCB0cnVlKTsKIH0KICNlbmRpZgogCkBAIC01NjIsOCArNTQ3
LDggQEAgdm9pZCBpbnRlbF9ydW50aW1lX3BtX3B1dChzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0ZSAq
aTkxNSwgaW50ZWxfd2FrZXJlZl90IHdyZWYpCiAgKi8KIHZvaWQgaW50ZWxfcnVudGltZV9wbV9l
bmFibGUoc3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmk5MTUpCiB7Ci0Jc3RydWN0IHBjaV9kZXYg
KnBkZXYgPSBpOTE1LT5kcm0ucGRldjsKLQlzdHJ1Y3QgZGV2aWNlICprZGV2ID0gJnBkZXYtPmRl
djsKKwlzdHJ1Y3QgaTkxNV9ydW50aW1lX3BtICpycG0gPSAmaTkxNS0+cnVudGltZV9wbTsKKwlz
dHJ1Y3QgZGV2aWNlICprZGV2ID0gcnBtLT5rZGV2OwogCiAJLyoKIAkgKiBEaXNhYmxlIHRoZSBz
eXN0ZW0gc3VzcGVuZCBkaXJlY3QgY29tcGxldGUgb3B0aW1pemF0aW9uLCB3aGljaCBjYW4KQEAg
LTU4NCw3ICs1NjksNyBAQCB2b2lkIGludGVsX3J1bnRpbWVfcG1fZW5hYmxlKHN0cnVjdCBkcm1f
aTkxNV9wcml2YXRlICppOTE1KQogCSAqIHNvIHRoZSBkcml2ZXIncyBvd24gUlBNIHJlZmVyZW5j
ZSB0cmFja2luZyBhc3NlcnRzIGFsc28gd29yayBvbgogCSAqIHBsYXRmb3JtcyB3aXRob3V0IFJQ
TSBzdXBwb3J0LgogCSAqLwotCWlmICghSEFTX1JVTlRJTUVfUE0oaTkxNSkpIHsKKwlpZiAoIXJw
bS0+YXZhaWxhYmxlKSB7CiAJCWludCByZXQ7CiAKIAkJcG1fcnVudGltZV9kb250X3VzZV9hdXRv
c3VzcGVuZChrZGV2KTsKQEAgLTYwNCw4ICs1ODksOCBAQCB2b2lkIGludGVsX3J1bnRpbWVfcG1f
ZW5hYmxlKHN0cnVjdCBkcm1faTkxNV9wcml2YXRlICppOTE1KQogCiB2b2lkIGludGVsX3J1bnRp
bWVfcG1fZGlzYWJsZShzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0ZSAqaTkxNSkKIHsKLQlzdHJ1Y3Qg
cGNpX2RldiAqcGRldiA9IGk5MTUtPmRybS5wZGV2OwotCXN0cnVjdCBkZXZpY2UgKmtkZXYgPSAm
cGRldi0+ZGV2OworCXN0cnVjdCBpOTE1X3J1bnRpbWVfcG0gKnJwbSA9ICZpOTE1LT5ydW50aW1l
X3BtOworCXN0cnVjdCBkZXZpY2UgKmtkZXYgPSBycG0tPmtkZXY7CiAKIAkvKiBUcmFuc2ZlciBy
cG0gb3duZXJzaGlwIGJhY2sgdG8gY29yZSAqLwogCVdBUk4ocG1fcnVudGltZV9nZXRfc3luYyhr
ZGV2KSA8IDAsCkBAIC02MTMsNyArNTk4LDcgQEAgdm9pZCBpbnRlbF9ydW50aW1lX3BtX2Rpc2Fi
bGUoc3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmk5MTUpCiAKIAlwbV9ydW50aW1lX2RvbnRfdXNl
X2F1dG9zdXNwZW5kKGtkZXYpOwogCi0JaWYgKCFIQVNfUlVOVElNRV9QTShpOTE1KSkKKwlpZiAo
IXJwbS0+YXZhaWxhYmxlKQogCQlwbV9ydW50aW1lX3B1dChrZGV2KTsKIH0KIApAQCAtNjI3LDEw
ICs2MTIsMTcgQEAgdm9pZCBpbnRlbF9ydW50aW1lX3BtX2NsZWFudXAoc3RydWN0IGRybV9pOTE1
X3ByaXZhdGUgKmk5MTUpCiAJICAgICBpbnRlbF9ycG1fcmF3X3dha2VyZWZfY291bnQoY291bnQp
LAogCSAgICAgaW50ZWxfcnBtX3dha2Vsb2NrX2NvdW50KGNvdW50KSk7CiAKLQl1bnRyYWNrX2Fs
bF9pbnRlbF9ydW50aW1lX3BtX3dha2VyZWZzKGk5MTUpOworCXVudHJhY2tfYWxsX2ludGVsX3J1
bnRpbWVfcG1fd2FrZXJlZnMocnBtKTsKIH0KIAogdm9pZCBpbnRlbF9ydW50aW1lX3BtX2luaXRf
ZWFybHkoc3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmk5MTUpCiB7Ci0JaW5pdF9pbnRlbF9ydW50
aW1lX3BtX3dha2VyZWYoaTkxNSk7CisJc3RydWN0IGk5MTVfcnVudGltZV9wbSAqcnBtID0gJmk5
MTUtPnJ1bnRpbWVfcG07CisJc3RydWN0IHBjaV9kZXYgKnBkZXYgPSBpOTE1LT5kcm0ucGRldjsK
KwlzdHJ1Y3QgZGV2aWNlICprZGV2ID0gJnBkZXYtPmRldjsKKworCXJwbS0+a2RldiA9IGtkZXY7
CisJcnBtLT5hdmFpbGFibGUgPSBIQVNfUlVOVElNRV9QTShpOTE1KTsKKworCWluaXRfaW50ZWxf
cnVudGltZV9wbV93YWtlcmVmKHJwbSk7CiB9CmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0v
aTkxNS9zZWxmdGVzdHMvbW9ja19nZW1fZGV2aWNlLmMgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9z
ZWxmdGVzdHMvbW9ja19nZW1fZGV2aWNlLmMKaW5kZXggYjdmM2ZiYjRhZTg5Li42OGJhZTYxMzA3
MjkgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L3NlbGZ0ZXN0cy9tb2NrX2dlbV9k
ZXZpY2UuYworKysgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9zZWxmdGVzdHMvbW9ja19nZW1fZGV2
aWNlLmMKQEAgLTE1Miw4ICsxNTIsNiBAQCBzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0ZSAqbW9ja19n
ZW1fZGV2aWNlKHZvaWQpCiAJaTkxNSA9IChzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0ZSAqKShwZGV2
ICsgMSk7CiAJcGNpX3NldF9kcnZkYXRhKHBkZXYsIGk5MTUpOwogCi0JaW50ZWxfcnVudGltZV9w
bV9pbml0X2Vhcmx5KGk5MTUpOwotCiAJZGV2X3BtX2RvbWFpbl9zZXQoJnBkZXYtPmRldiwgJnBt
X2RvbWFpbik7CiAJcG1fcnVudGltZV9lbmFibGUoJnBkZXYtPmRldik7CiAJcG1fcnVudGltZV9k
b250X3VzZV9hdXRvc3VzcGVuZCgmcGRldi0+ZGV2KTsKQEAgLTE2OCw2ICsxNjYsOCBAQCBzdHJ1
Y3QgZHJtX2k5MTVfcHJpdmF0ZSAqbW9ja19nZW1fZGV2aWNlKHZvaWQpCiAJaTkxNS0+ZHJtLnBk
ZXYgPSBwZGV2OwogCWk5MTUtPmRybS5kZXZfcHJpdmF0ZSA9IGk5MTU7CiAKKwlpbnRlbF9ydW50
aW1lX3BtX2luaXRfZWFybHkoaTkxNSk7CisKIAkvKiBVc2luZyB0aGUgZ2xvYmFsIEdUVCBtYXkg
YXNrIHF1ZXN0aW9ucyBhYm91dCBLTVMgdXNlcnMsIHNvIHByZXBhcmUgKi8KIAlkcm1fbW9kZV9j
b25maWdfaW5pdCgmaTkxNS0+ZHJtKTsKIAotLSAKMi4yMC4xCgpfX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fXwpJbnRlbC1nZnggbWFpbGluZyBsaXN0CkludGVs
LWdmeEBsaXN0cy5mcmVlZGVza3RvcC5vcmcKaHR0cHM6Ly9saXN0cy5mcmVlZGVza3RvcC5vcmcv
bWFpbG1hbi9saXN0aW5mby9pbnRlbC1nZng=

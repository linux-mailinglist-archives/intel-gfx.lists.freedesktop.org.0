Return-Path: <intel-gfx-bounces@lists.freedesktop.org>
X-Original-To: lists+intel-gfx@lfdr.de
Delivered-To: lists+intel-gfx@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [131.252.210.177])
	by mail.lfdr.de (Postfix) with ESMTPS id AD8167F6BF
	for <lists+intel-gfx@lfdr.de>; Fri,  2 Aug 2019 14:21:34 +0200 (CEST)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 4BEAB6EDED;
	Fri,  2 Aug 2019 12:21:32 +0000 (UTC)
X-Original-To: intel-gfx@lists.freedesktop.org
Delivered-To: intel-gfx@lists.freedesktop.org
Received: from mga11.intel.com (mga11.intel.com [192.55.52.93])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 8EB446EDE7
 for <intel-gfx@lists.freedesktop.org>; Fri,  2 Aug 2019 12:21:29 +0000 (UTC)
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from orsmga005.jf.intel.com ([10.7.209.41])
 by fmsmga102.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384;
 02 Aug 2019 05:21:29 -0700
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.64,338,1559545200"; d="scan'208";a="348396259"
Received: from irvmail001.ir.intel.com ([163.33.26.43])
 by orsmga005.jf.intel.com with ESMTP; 02 Aug 2019 05:21:28 -0700
Received: from mwajdecz-MOBL1.ger.corp.intel.com
 (mwajdecz-mobl1.ger.corp.intel.com [172.28.174.50])
 by irvmail001.ir.intel.com (8.14.3/8.13.6/MailSET/Hub) with ESMTP id
 x72CLQXU020902
 for <intel-gfx@lists.freedesktop.org>; Fri, 2 Aug 2019 13:21:27 +0100
From: Michal Wajdeczko <michal.wajdeczko@intel.com>
To: intel-gfx@lists.freedesktop.org
Date: Fri,  2 Aug 2019 12:21:24 +0000
Message-Id: <20190802122125.21952-3-michal.wajdeczko@intel.com>
X-Mailer: git-send-email 2.21.0.windows.1
In-Reply-To: <20190802122125.21952-1-michal.wajdeczko@intel.com>
References: <20190802122125.21952-1-michal.wajdeczko@intel.com>
MIME-Version: 1.0
Subject: [Intel-gfx] [CI 2/3] drm/i915/uc: Inject probe errors into
 intel_uc_init_hw
X-BeenThere: intel-gfx@lists.freedesktop.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: Intel graphics driver community testing & development
 <intel-gfx.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/intel-gfx>
List-Post: <mailto:intel-gfx@lists.freedesktop.org>
List-Help: <mailto:intel-gfx-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: intel-gfx-bounces@lists.freedesktop.org
Sender: "Intel-gfx" <intel-gfx-bounces@lists.freedesktop.org>

SW5qZWN0IHByb2JlIGVycm9ycyBpbnRvIGludGVsX3VjX2luaXRfaHcgdG8gbWFrZSBzdXJlIHdl
CmNvcnJlY3RseSBoYW5kbGUgYW55IHVDIGluaXRpYWxpemF0aW9uIGZhaWx1cmUuCgpUbyBhdm9p
ZCBjb21wbGFpbnMgZnJvbSBDSSBhYm91dCBpbmplY3RlZCBlcnJvcnMgdXNlCmk5MTVfcHJvYmVf
ZXJyb3IgdG8gbG93ZXIgbWVzc2FnZSBsZXZlbC4KCnYyOiBfc2FuaXRpemUgaW5zdGVhZCBfcmVz
ZXQgdG8gY29ycmVjdGx5IGhhbmRsZSBHZW45IHJldHJpZXMKdjM6IHJlb3JkZXIgZncgc3RhdHVz
IGNvZGVzIGFzIGZhaWxlZCBmdyBpcyBzdGlsbCBhdmFpbGFibGUKICAgIGFkZCBtb3JlIGZhaWx1
cmUgcG9pbnRzCgpTaWduZWQtb2ZmLWJ5OiBNaWNoYWwgV2FqZGVjemtvIDxtaWNoYWwud2FqZGVj
emtvQGludGVsLmNvbT4KQ2M6IERhbmllbGUgQ2VyYW9sbyBTcHVyaW8gPGRhbmllbGUuY2VyYW9s
b3NwdXJpb0BpbnRlbC5jb20+CkNjOiBDaHJpcyBXaWxzb24gPGNocmlzQGNocmlzLXdpbHNvbi5j
by51az4KUmV2aWV3ZWQtYnk6IENocmlzIFdpbHNvbiA8Y2hyaXNAY2hyaXMtd2lsc29uLmNvLnVr
PiAjdjEKLS0tCiAuLi4vZ3B1L2RybS9pOTE1L2d0L3VjL2ludGVsX2d1Y19zdWJtaXNzaW9uLmMg
fCAgNCArKysrCiBkcml2ZXJzL2dwdS9kcm0vaTkxNS9ndC91Yy9pbnRlbF9odWMuYyAgICAgICAg
fCAgOCArKysrKy0tLQogZHJpdmVycy9ncHUvZHJtL2k5MTUvZ3QvdWMvaW50ZWxfdWMuYyAgICAg
ICAgIHwgMjAgKysrKysrKysrKysrKysrLS0tLQogZHJpdmVycy9ncHUvZHJtL2k5MTUvZ3QvdWMv
aW50ZWxfdWNfZncuYyAgICAgIHwgMTggKysrKysrKysrKystLS0tLS0KIGRyaXZlcnMvZ3B1L2Ry
bS9pOTE1L2d0L3VjL2ludGVsX3VjX2Z3LmggICAgICB8IDE0ICsrKysrKy0tLS0tLS0KIGRyaXZl
cnMvZ3B1L2RybS9pOTE1L2k5MTVfZ2VtLmMgICAgICAgICAgICAgICB8ICAyICstCiA2IGZpbGVz
IGNoYW5nZWQsIDQ1IGluc2VydGlvbnMoKyksIDIxIGRlbGV0aW9ucygtKQoKZGlmZiAtLWdpdCBh
L2RyaXZlcnMvZ3B1L2RybS9pOTE1L2d0L3VjL2ludGVsX2d1Y19zdWJtaXNzaW9uLmMgYi9kcml2
ZXJzL2dwdS9kcm0vaTkxNS9ndC91Yy9pbnRlbF9ndWNfc3VibWlzc2lvbi5jCmluZGV4IGI0YjUw
OGYxOWExYy4uNDEyODkyMDk2ZGFhIDEwMDY0NAotLS0gYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9n
dC91Yy9pbnRlbF9ndWNfc3VibWlzc2lvbi5jCisrKyBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2d0
L3VjL2ludGVsX2d1Y19zdWJtaXNzaW9uLmMKQEAgLTExMjMsNiArMTEyMywxMCBAQCBpbnQgaW50
ZWxfZ3VjX3N1Ym1pc3Npb25fZW5hYmxlKHN0cnVjdCBpbnRlbF9ndWMgKmd1YykKIAllbnVtIGlu
dGVsX2VuZ2luZV9pZCBpZDsKIAlpbnQgZXJyOwogCisJZXJyID0gaTkxNV9pbmplY3RfbG9hZF9l
cnJvcihndC0+aTkxNSwgLUVOWElPKTsKKwlpZiAoZXJyKQorCQlyZXR1cm4gZXJyOworCiAJLyoK
IAkgKiBXZSdyZSB1c2luZyBHdUMgd29yayBpdGVtcyBmb3Igc3VibWl0dGluZyB3b3JrIHRocm91
Z2ggR3VDLiBTaW5jZQogCSAqIHdlJ3JlIGNvYWxlc2NpbmcgbXVsdGlwbGUgcmVxdWVzdHMgZnJv
bSBhIHNpbmdsZSBjb250ZXh0IGludG8gYQpkaWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL2k5
MTUvZ3QvdWMvaW50ZWxfaHVjLmMgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9ndC91Yy9pbnRlbF9o
dWMuYwppbmRleCBkNjQyYjE2N2EzODkuLmVmNTQwNTNjNWVmOSAxMDA2NDQKLS0tIGEvZHJpdmVy
cy9ncHUvZHJtL2k5MTUvZ3QvdWMvaW50ZWxfaHVjLmMKKysrIGIvZHJpdmVycy9ncHUvZHJtL2k5
MTUvZ3QvdWMvaW50ZWxfaHVjLmMKQEAgLTEzOSw2ICsxMzksMTAgQEAgaW50IGludGVsX2h1Y19h
dXRoKHN0cnVjdCBpbnRlbF9odWMgKmh1YykKIAlHRU1fQlVHX09OKCFpbnRlbF91Y19md19pc19s
b2FkZWQoJmh1Yy0+ZncpKTsKIAlHRU1fQlVHX09OKGludGVsX2h1Y19pc19hdXRoZW50aWNhdGVk
KGh1YykpOwogCisJcmV0ID0gaTkxNV9pbmplY3RfbG9hZF9lcnJvcihndC0+aTkxNSwgLUVOWElP
KTsKKwlpZiAocmV0KQorCQlnb3RvIGZhaWw7CisKIAlyZXQgPSBpbnRlbF9ndWNfYXV0aF9odWMo
Z3VjLAogCQkJCSBpbnRlbF9ndWNfZ2d0dF9vZmZzZXQoZ3VjLCBodWMtPnJzYV9kYXRhKSk7CiAJ
aWYgKHJldCkgewpAQCAtMTU4LDEzICsxNjIsMTEgQEAgaW50IGludGVsX2h1Y19hdXRoKHN0cnVj
dCBpbnRlbF9odWMgKmh1YykKIAl9CiAKIAlodWMtPmZ3LnN0YXR1cyA9IElOVEVMX1VDX0ZJUk1X
QVJFX1JVTk5JTkc7Ci0KIAlyZXR1cm4gMDsKIAogZmFpbDoKKwlpOTE1X3Byb2JlX2Vycm9yKGd0
LT5pOTE1LCAiSHVDOiBBdXRoZW50aWNhdGlvbiBmYWlsZWQgJWRcbiIsIHJldCk7CiAJaHVjLT5m
dy5zdGF0dXMgPSBJTlRFTF9VQ19GSVJNV0FSRV9GQUlMOwotCi0JRFJNX0VSUk9SKCJIdUM6IEF1
dGhlbnRpY2F0aW9uIGZhaWxlZCAlZFxuIiwgcmV0KTsKIAlyZXR1cm4gcmV0OwogfQogCmRpZmYg
LS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9ndC91Yy9pbnRlbF91Yy5jIGIvZHJpdmVycy9n
cHUvZHJtL2k5MTUvZ3QvdWMvaW50ZWxfdWMuYwppbmRleCBkMWIwOGIyOGIxYWQuLjFkMjFjMjY0
NjgzMSAxMDA2NDQKLS0tIGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvZ3QvdWMvaW50ZWxfdWMuYwor
KysgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9ndC91Yy9pbnRlbF91Yy5jCkBAIC00MSw2ICs0MSwx
MCBAQCBzdGF0aWMgaW50IF9faW50ZWxfdWNfcmVzZXRfaHcoc3RydWN0IGludGVsX3VjICp1YykK
IAlpbnQgcmV0OwogCXUzMiBndWNfc3RhdHVzOwogCisJcmV0ID0gaTkxNV9pbmplY3RfbG9hZF9l
cnJvcihndC0+aTkxNSwgLUVOWElPKTsKKwlpZiAocmV0KQorCQlyZXR1cm4gcmV0OworCiAJcmV0
ID0gaW50ZWxfcmVzZXRfZ3VjKGd0KTsKIAlpZiAocmV0KSB7CiAJCURSTV9FUlJPUigiRmFpbGVk
IHRvIHJlc2V0IEd1QywgcmV0ID0gJWRcbiIsIHJldCk7CkBAIC0yMDksNiArMjEzLDEwIEBAIHN0
YXRpYyBpbnQgZ3VjX2VuYWJsZV9jb21tdW5pY2F0aW9uKHN0cnVjdCBpbnRlbF9ndWMgKmd1YykK
IAogCUdFTV9CVUdfT04oZ3VjX2NvbW11bmljYXRpb25fZW5hYmxlZChndWMpKTsKIAorCXJldCA9
IGk5MTVfaW5qZWN0X2xvYWRfZXJyb3IoaTkxNSwgLUVOWElPKTsKKwlpZiAocmV0KQorCQlyZXR1
cm4gcmV0OworCiAJcmV0ID0gaW50ZWxfZ3VjX2N0X2VuYWJsZSgmZ3VjLT5jdCk7CiAJaWYgKHJl
dCkKIAkJcmV0dXJuIHJldDsKQEAgLTM0MCw3ICszNDgsNyBAQCB2b2lkIGludGVsX3VjX2Zpbmko
c3RydWN0IGludGVsX3VjICp1YykKIAlpbnRlbF9ndWNfZmluaShndWMpOwogfQogCi1zdGF0aWMg
dm9pZCBfX3VjX3Nhbml0aXplKHN0cnVjdCBpbnRlbF91YyAqdWMpCitzdGF0aWMgaW50IF9fdWNf
c2FuaXRpemUoc3RydWN0IGludGVsX3VjICp1YykKIHsKIAlzdHJ1Y3QgaW50ZWxfZ3VjICpndWMg
PSAmdWMtPmd1YzsKIAlzdHJ1Y3QgaW50ZWxfaHVjICpodWMgPSAmdWMtPmh1YzsKQEAgLTM1MCw3
ICszNTgsNyBAQCBzdGF0aWMgdm9pZCBfX3VjX3Nhbml0aXplKHN0cnVjdCBpbnRlbF91YyAqdWMp
CiAJaW50ZWxfaHVjX3Nhbml0aXplKGh1Yyk7CiAJaW50ZWxfZ3VjX3Nhbml0aXplKGd1Yyk7CiAK
LQlfX2ludGVsX3VjX3Jlc2V0X2h3KHVjKTsKKwlyZXR1cm4gX19pbnRlbF91Y19yZXNldF9odyh1
Yyk7CiB9CiAKIHZvaWQgaW50ZWxfdWNfc2FuaXRpemUoc3RydWN0IGludGVsX3VjICp1YykKQEAg
LTM3OCw2ICszODYsMTAgQEAgc3RhdGljIGludCB1Y19pbml0X3dvcGNtKHN0cnVjdCBpbnRlbF91
YyAqdWMpCiAJR0VNX0JVR19PTighKHNpemUgJiBHVUNfV09QQ01fU0laRV9NQVNLKSk7CiAJR0VN
X0JVR19PTihzaXplICYgfkdVQ19XT1BDTV9TSVpFX01BU0spOwogCisJZXJyID0gaTkxNV9pbmpl
Y3RfbG9hZF9lcnJvcihndC0+aTkxNSwgLUVOWElPKTsKKwlpZiAoZXJyKQorCQlyZXR1cm4gZXJy
OworCiAJbWFzayA9IEdVQ19XT1BDTV9TSVpFX01BU0sgfCBHVUNfV09QQ01fU0laRV9MT0NLRUQ7
CiAJZXJyID0gaW50ZWxfdW5jb3JlX3dyaXRlX2FuZF92ZXJpZnkodW5jb3JlLCBHVUNfV09QQ01f
U0laRSwgc2l6ZSwgbWFzaywKIAkJCQkJICAgIHNpemUgfCBHVUNfV09QQ01fU0laRV9MT0NLRUQp
OwpAQCAtNDM0LDcgKzQ0Niw3IEBAIGludCBpbnRlbF91Y19pbml0X2h3KHN0cnVjdCBpbnRlbF91
YyAqdWMpCiAJCSAqIEFsd2F5cyByZXNldCB0aGUgR3VDIGp1c3QgYmVmb3JlIChyZSlsb2FkaW5n
LCBzbwogCQkgKiB0aGF0IHRoZSBzdGF0ZSBhbmQgdGltaW5nIGFyZSBmYWlybHkgcHJlZGljdGFi
bGUKIAkJICovCi0JCXJldCA9IF9faW50ZWxfdWNfcmVzZXRfaHcodWMpOworCQlyZXQgPSBfX3Vj
X3Nhbml0aXplKHVjKTsKIAkJaWYgKHJldCkKIAkJCWdvdG8gZXJyX291dDsKIApAQCAtNTA0LDcg
KzUxNiw3IEBAIGludCBpbnRlbF91Y19pbml0X2h3KHN0cnVjdCBpbnRlbF91YyAqdWMpCiAJaWYg
KEdFTV9XQVJOX09OKHJldCA9PSAtRUlPKSkKIAkJcmV0ID0gLUVJTlZBTDsKIAotCWRldl9lcnIo
aTkxNS0+ZHJtLmRldiwgIkd1QyBpbml0aWFsaXphdGlvbiBmYWlsZWQgJWRcbiIsIHJldCk7CisJ
aTkxNV9wcm9iZV9lcnJvcihpOTE1LCAiR3VDIGluaXRpYWxpemF0aW9uIGZhaWxlZCAlZFxuIiwg
cmV0KTsKIAlyZXR1cm4gcmV0OwogfQogCmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkx
NS9ndC91Yy9pbnRlbF91Y19mdy5jIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvZ3QvdWMvaW50ZWxf
dWNfZncuYwppbmRleCA2NTBhZDYwMzdiNzQuLmEzYTIyYTI2MDE2YyAxMDA2NDQKLS0tIGEvZHJp
dmVycy9ncHUvZHJtL2k5MTUvZ3QvdWMvaW50ZWxfdWNfZncuYworKysgYi9kcml2ZXJzL2dwdS9k
cm0vaTkxNS9ndC91Yy9pbnRlbF91Y19mdy5jCkBAIC0zODMsNiArMzgzLDEwIEBAIHN0YXRpYyBp
bnQgdWNfZndfeGZlcihzdHJ1Y3QgaW50ZWxfdWNfZncgKnVjX2Z3LCBzdHJ1Y3QgaW50ZWxfZ3Qg
Kmd0LAogCXU2NCBvZmZzZXQ7CiAJaW50IHJldDsKIAorCXJldCA9IGk5MTVfaW5qZWN0X2xvYWRf
ZXJyb3IoZ3QtPmk5MTUsIC1FVElNRURPVVQpOworCWlmIChyZXQpCisJCXJldHVybiByZXQ7CisK
IAlpbnRlbF91bmNvcmVfZm9yY2V3YWtlX2dldCh1bmNvcmUsIEZPUkNFV0FLRV9BTEwpOwogCiAJ
LyogU2V0IHRoZSBzb3VyY2UgYWRkcmVzcyBmb3IgdGhlIHVDb2RlICovCkBAIC00NDMsOCArNDQ3
LDEzIEBAIGludCBpbnRlbF91Y19md191cGxvYWQoc3RydWN0IGludGVsX3VjX2Z3ICp1Y19mdywg
c3RydWN0IGludGVsX2d0ICpndCwKIAkvKiBtYWtlIHN1cmUgdGhlIHN0YXR1cyB3YXMgY2xlYXJl
ZCB0aGUgbGFzdCB0aW1lIHdlIHJlc2V0IHRoZSB1YyAqLwogCUdFTV9CVUdfT04oaW50ZWxfdWNf
ZndfaXNfbG9hZGVkKHVjX2Z3KSk7CiAKKwllcnIgPSBpOTE1X2luamVjdF9sb2FkX2Vycm9yKGd0
LT5pOTE1LCAtRU5PRVhFQyk7CisJaWYgKGVycikKKwkJcmV0dXJuIGVycjsKKwogCWlmICghaW50
ZWxfdWNfZndfaXNfYXZhaWxhYmxlKHVjX2Z3KSkKIAkJcmV0dXJuIC1FTk9FWEVDOworCiAJLyog
Q2FsbCBjdXN0b20gbG9hZGVyICovCiAJaW50ZWxfdWNfZndfZ2d0dF9iaW5kKHVjX2Z3LCBndCk7
CiAJZXJyID0gdWNfZndfeGZlcih1Y19mdywgZ3QsIHdvcGNtX29mZnNldCwgZG1hX2ZsYWdzKTsK
QEAgLTQ2NCwxMyArNDczLDEwIEBAIGludCBpbnRlbF91Y19md191cGxvYWQoc3RydWN0IGludGVs
X3VjX2Z3ICp1Y19mdywgc3RydWN0IGludGVsX2d0ICpndCwKIAlyZXR1cm4gMDsKIAogZmFpbDoK
KwlpOTE1X3Byb2JlX2Vycm9yKGd0LT5pOTE1LCAiRmFpbGVkIHRvIGxvYWQgJXMgZmlybXdhcmUg
JXMgKCVkKVxuIiwKKwkJCSBpbnRlbF91Y19md190eXBlX3JlcHIodWNfZnctPnR5cGUpLCB1Y19m
dy0+cGF0aCwKKwkJCSBlcnIpOwogCXVjX2Z3LT5zdGF0dXMgPSBJTlRFTF9VQ19GSVJNV0FSRV9G
QUlMOwotCURSTV9ERUJVR19EUklWRVIoIiVzIGZ3IGxvYWQgZmFpbGVkXG4iLAotCQkJIGludGVs
X3VjX2Z3X3R5cGVfcmVwcih1Y19mdy0+dHlwZSkpOwotCi0JRFJNX1dBUk4oIiVzOiBGYWlsZWQg
dG8gbG9hZCBmaXJtd2FyZSAlcyAoZXJyb3IgJWQpXG4iLAotCQkgaW50ZWxfdWNfZndfdHlwZV9y
ZXByKHVjX2Z3LT50eXBlKSwgdWNfZnctPnBhdGgsIGVycik7Ci0KIAlyZXR1cm4gZXJyOwogfQog
CmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9ndC91Yy9pbnRlbF91Y19mdy5oIGIv
ZHJpdmVycy9ncHUvZHJtL2k5MTUvZ3QvdWMvaW50ZWxfdWNfZncuaAppbmRleCA2YjY0YjgwNzM3
MDMuLmJmZTM2MTQ2MTNiNyAxMDA2NDQKLS0tIGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvZ3QvdWMv
aW50ZWxfdWNfZncuaAorKysgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9ndC91Yy9pbnRlbF91Y19m
dy5oCkBAIC0zNywxMiArMzcsMTIgQEAgc3RydWN0IGludGVsX2d0OwogI2RlZmluZSBJTlRFTF9V
Q19GSVJNV0FSRV9VUkwgImh0dHBzOi8vZ2l0Lmtlcm5lbC5vcmcvcHViL3NjbS9saW51eC9rZXJu
ZWwvZ2l0L2Zpcm13YXJlL2xpbnV4LWZpcm13YXJlLmdpdC90cmVlL2k5MTUiCiAKIGVudW0gaW50
ZWxfdWNfZndfc3RhdHVzIHsKLQlJTlRFTF9VQ19GSVJNV0FSRV9GQUlMID0gLTMsIC8qIGZhaWxl
ZCB0byB4ZmVyIG9yIGluaXQvYXV0aCB0aGUgZncgKi8KLQlJTlRFTF9VQ19GSVJNV0FSRV9NSVNT
SU5HID0gLTIsIC8qIGJsb2Igbm90IGZvdW5kIG9uIHRoZSBzeXN0ZW0gKi8KLQlJTlRFTF9VQ19G
SVJNV0FSRV9OT1RfU1VQUE9SVEVEID0gLTEsIC8qIG5vIHVjIEhXICovCisJSU5URUxfVUNfRklS
TVdBUkVfTk9UX1NVUFBPUlRFRCA9IC0xLCAvKiBubyB1YyBIVyBvciBkaXNhYmxlZCAqLwogCUlO
VEVMX1VDX0ZJUk1XQVJFX1VOSU5JVElBTElaRUQgPSAwLCAvKiB1c2VkIHRvIGNhdGNoIGNoZWNr
cyBkb25lIHRvbyBlYXJseSAqLwogCUlOVEVMX1VDX0ZJUk1XQVJFX1NFTEVDVEVELCAvKiBzZWxl
Y3RlZCB0aGUgYmxvYiB3ZSB3YW50IHRvIGxvYWQgKi8KKwlJTlRFTF9VQ19GSVJNV0FSRV9NSVNT
SU5HLCAvKiBibG9iIG5vdCBmb3VuZCBvbiB0aGUgc3lzdGVtICovCiAJSU5URUxfVUNfRklSTVdB
UkVfQVZBSUxBQkxFLCAvKiBibG9iIGZvdW5kIGFuZCBjb3BpZWQgaW4gbWVtICovCisJSU5URUxf
VUNfRklSTVdBUkVfRkFJTCwgLyogZmFpbGVkIHRvIHhmZXIgb3IgaW5pdC9hdXRoIHRoZSBmdyAq
LwogCUlOVEVMX1VDX0ZJUk1XQVJFX1RSQU5TRkVSUkVELCAvKiBkbWEgeGZlciBkb25lICovCiAJ
SU5URUxfVUNfRklSTVdBUkVfUlVOTklORyAvKiBpbml0L2F1dGggZG9uZSAqLwogfTsKQEAgLTgz
LDE4ICs4MywxOCBAQCBzdGF0aWMgaW5saW5lCiBjb25zdCBjaGFyICppbnRlbF91Y19md19zdGF0
dXNfcmVwcihlbnVtIGludGVsX3VjX2Z3X3N0YXR1cyBzdGF0dXMpCiB7CiAJc3dpdGNoIChzdGF0
dXMpIHsKLQljYXNlIElOVEVMX1VDX0ZJUk1XQVJFX0ZBSUw6Ci0JCXJldHVybiAiRkFJTCI7Ci0J
Y2FzZSBJTlRFTF9VQ19GSVJNV0FSRV9NSVNTSU5HOgotCQlyZXR1cm4gIk1JU1NJTkciOwogCWNh
c2UgSU5URUxfVUNfRklSTVdBUkVfTk9UX1NVUFBPUlRFRDoKIAkJcmV0dXJuICJOL0EiOwogCWNh
c2UgSU5URUxfVUNfRklSTVdBUkVfVU5JTklUSUFMSVpFRDoKIAkJcmV0dXJuICJVTklOSVRJQUxJ
WkVEIjsKIAljYXNlIElOVEVMX1VDX0ZJUk1XQVJFX1NFTEVDVEVEOgogCQlyZXR1cm4gIlNFTEVD
VEVEIjsKKwljYXNlIElOVEVMX1VDX0ZJUk1XQVJFX01JU1NJTkc6CisJCXJldHVybiAiTUlTU0lO
RyI7CiAJY2FzZSBJTlRFTF9VQ19GSVJNV0FSRV9BVkFJTEFCTEU6CiAJCXJldHVybiAiQVZBSUxB
QkxFIjsKKwljYXNlIElOVEVMX1VDX0ZJUk1XQVJFX0ZBSUw6CisJCXJldHVybiAiRkFJTCI7CiAJ
Y2FzZSBJTlRFTF9VQ19GSVJNV0FSRV9UUkFOU0ZFUlJFRDoKIAkJcmV0dXJuICJUUkFOU0ZFUlJF
RCI7CiAJY2FzZSBJTlRFTF9VQ19GSVJNV0FSRV9SVU5OSU5HOgpkaWZmIC0tZ2l0IGEvZHJpdmVy
cy9ncHUvZHJtL2k5MTUvaTkxNV9nZW0uYyBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2k5MTVfZ2Vt
LmMKaW5kZXggNWU4N2FjYzRiNzcwLi4yNDM2Y2Q1OThlNmUgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMv
Z3B1L2RybS9pOTE1L2k5MTVfZ2VtLmMKKysrIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvaTkxNV9n
ZW0uYwpAQCAtMTI0Myw3ICsxMjQzLDcgQEAgaW50IGk5MTVfZ2VtX2luaXRfaHcoc3RydWN0IGRy
bV9pOTE1X3ByaXZhdGUgKmk5MTUpCiAJLyogV2UgY2FuJ3QgZW5hYmxlIGNvbnRleHRzIHVudGls
IGFsbCBmaXJtd2FyZSBpcyBsb2FkZWQgKi8KIAlyZXQgPSBpbnRlbF91Y19pbml0X2h3KCZndC0+
dWMpOwogCWlmIChyZXQpIHsKLQkJRFJNX0VSUk9SKCJFbmFibGluZyB1YyBmYWlsZWQgKCVkKVxu
IiwgcmV0KTsKKwkJaTkxNV9wcm9iZV9lcnJvcihpOTE1LCAiRW5hYmxpbmcgdWMgZmFpbGVkICgl
ZClcbiIsIHJldCk7CiAJCWdvdG8gb3V0OwogCX0KIAotLSAKMi4xOS4yCgpfX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpJbnRlbC1nZnggbWFpbGluZyBsaXN0
CkludGVsLWdmeEBsaXN0cy5mcmVlZGVza3RvcC5vcmcKaHR0cHM6Ly9saXN0cy5mcmVlZGVza3Rv
cC5vcmcvbWFpbG1hbi9saXN0aW5mby9pbnRlbC1nZng=

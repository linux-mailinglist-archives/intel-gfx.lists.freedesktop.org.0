Return-Path: <intel-gfx-bounces@lists.freedesktop.org>
X-Original-To: lists+intel-gfx@lfdr.de
Delivered-To: lists+intel-gfx@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [131.252.210.177])
	by mail.lfdr.de (Postfix) with ESMTPS id 9162AE8229
	for <lists+intel-gfx@lfdr.de>; Tue, 29 Oct 2019 08:22:40 +0100 (CET)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 15DE56E0DF;
	Tue, 29 Oct 2019 07:22:36 +0000 (UTC)
X-Original-To: intel-gfx@lists.freedesktop.org
Delivered-To: intel-gfx@lists.freedesktop.org
Received: from mblankhorst.nl (mblankhorst.nl
 [IPv6:2a02:2308::216:3eff:fe92:dfa3])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 564BE6E0DB
 for <intel-gfx@lists.freedesktop.org>; Tue, 29 Oct 2019 07:22:33 +0000 (UTC)
From: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
To: intel-gfx@lists.freedesktop.org
Date: Tue, 29 Oct 2019 08:22:18 +0100
Message-Id: <20191029072229.27092-1-maarten.lankhorst@linux.intel.com>
X-Mailer: git-send-email 2.23.0
MIME-Version: 1.0
Subject: [Intel-gfx] [CI 01/12] drm/i915: Introduce
 intel_atomic_get_plane_state_after_check(), v2.
X-BeenThere: intel-gfx@lists.freedesktop.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: Intel graphics driver community testing & development
 <intel-gfx.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/intel-gfx>
List-Post: <mailto:intel-gfx@lists.freedesktop.org>
List-Help: <mailto:intel-gfx-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: intel-gfx-bounces@lists.freedesktop.org
Sender: "Intel-gfx" <intel-gfx-bounces@lists.freedesktop.org>

VXNlIHRoaXMgaW4gYWxsIHRoZSBwbGFjZXMgd2hlcmUgd2UgdHJ5IHRvIGFjcXVpcmUgcGxhbmVz
IGFmdGVyIHRoZSBwbGFuZXMKYXRvbWljX2NoZWNrKCkuCgpJbiBjYXNlIG9mIGludGVsX21vZGVz
ZXRfYWxsX3BpcGVzKCkgdGhpcyBpcyBub3QgeWV0IGRvbmUgYWZ0ZXIgYXRvbWljX2NoZWNrLApi
dXQgc2VlbXMgbGlrZSBpdCB3aWxsIGJlIGluIHRoZSBmdXR1cmUuIFRvIGFkZCBzb21lIHBhcmFu
b2lhLCBhZGQgYWxsIHBsYW5lcwpyYXRoZXIgdGhhbiBhY3RpdmUgcGxhbmVzLCBiZWNhdXNlIG9m
IGJpZ2pvaW5lciBhbmQgcGxhbmFyIFlVViBzdXBwb3J0IGhhdmluZwpleHRyYSBwbGFuZXMgb3V0
c2lkZSBvZiB0aGUgY29yZSdzIHZpZXcgdGhhdCB3b3VsZG4ndCBiZSBhZGRlZCBvdGhlcndpc2Uu
CgpDaGFuZ2VzIHNpbmNlIHYxOgotIEFsd2F5cyBhZGQgYWxsIHBsYW5lcywgdG8gaGFuZGxlIGZv
cmNlIHBsYW5lIHVwZGF0ZXMgdG8gd29yayBjb3JyZWN0bHkKICB3aXRoIGEgZGlzYWJsZWQgY3Vy
c29yIHBsYW5lLgoKU2lnbmVkLW9mZi1ieTogTWFhcnRlbiBMYW5raG9yc3QgPG1hYXJ0ZW4ubGFu
a2hvcnN0QGxpbnV4LmludGVsLmNvbT4KLS0tCiBkcml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5
L2ludGVsX2F0b21pYy5jICAgfCA0MSArKysrKysrKystLS0tLS0tLS0tCiAuLi4vZ3B1L2RybS9p
OTE1L2Rpc3BsYXkvaW50ZWxfYXRvbWljX3BsYW5lLmMgfCAxNSArKysrKysrCiBkcml2ZXJzL2dw
dS9kcm0vaTkxNS9kaXNwbGF5L2ludGVsX2NkY2xrLmMgICAgfCAxNSArKysrLS0tCiBkcml2ZXJz
L2dwdS9kcm0vaTkxNS9kaXNwbGF5L2ludGVsX2NvbG9yLmMgICAgfCAgNyArKy0tCiAuLi4vZHJt
L2k5MTUvZGlzcGxheS9pbnRlbF9kaXNwbGF5X3R5cGVzLmggICAgfCAgNiArKysKIGRyaXZlcnMv
Z3B1L2RybS9pOTE1L2ludGVsX3BtLmMgICAgICAgICAgICAgICB8IDE0ICsrKystLS0KIDYgZmls
ZXMgY2hhbmdlZCwgNjIgaW5zZXJ0aW9ucygrKSwgMzYgZGVsZXRpb25zKC0pCgpkaWZmIC0tZ2l0
IGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvZGlzcGxheS9pbnRlbF9hdG9taWMuYyBiL2RyaXZlcnMv
Z3B1L2RybS9pOTE1L2Rpc3BsYXkvaW50ZWxfYXRvbWljLmMKaW5kZXggOWNkNmQyMzQ4YTFlLi44
MGRmNmMyMzM1ODEgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkvaW50
ZWxfYXRvbWljLmMKKysrIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvZGlzcGxheS9pbnRlbF9hdG9t
aWMuYwpAQCAtMzEzLDEzICszMTMsMTAgQEAgaW50IGludGVsX2F0b21pY19zZXR1cF9zY2FsZXJz
KHN0cnVjdCBkcm1faTkxNV9wcml2YXRlICpkZXZfcHJpdiwKIAkJCSAgICAgICBzdHJ1Y3QgaW50
ZWxfY3J0YyAqaW50ZWxfY3J0YywKIAkJCSAgICAgICBzdHJ1Y3QgaW50ZWxfY3J0Y19zdGF0ZSAq
Y3J0Y19zdGF0ZSkKIHsKLQlzdHJ1Y3QgZHJtX3BsYW5lICpwbGFuZSA9IE5VTEw7Ci0Jc3RydWN0
IGludGVsX3BsYW5lICppbnRlbF9wbGFuZTsKLQlzdHJ1Y3QgaW50ZWxfcGxhbmVfc3RhdGUgKnBs
YW5lX3N0YXRlID0gTlVMTDsKIAlzdHJ1Y3QgaW50ZWxfY3J0Y19zY2FsZXJfc3RhdGUgKnNjYWxl
cl9zdGF0ZSA9CiAJCSZjcnRjX3N0YXRlLT5zY2FsZXJfc3RhdGU7CiAJc3RydWN0IGRybV9hdG9t
aWNfc3RhdGUgKmRybV9zdGF0ZSA9IGNydGNfc3RhdGUtPmJhc2Uuc3RhdGU7Ci0Jc3RydWN0IGlu
dGVsX2F0b21pY19zdGF0ZSAqaW50ZWxfc3RhdGUgPSB0b19pbnRlbF9hdG9taWNfc3RhdGUoZHJt
X3N0YXRlKTsKKwlzdHJ1Y3QgaW50ZWxfYXRvbWljX3N0YXRlICpzdGF0ZSA9IHRvX2ludGVsX2F0
b21pY19zdGF0ZShkcm1fc3RhdGUpOwogCWludCBudW1fc2NhbGVyc19uZWVkOwogCWludCBpOwog
CkBAIC0zNDYsNiArMzQzLDcgQEAgaW50IGludGVsX2F0b21pY19zZXR1cF9zY2FsZXJzKHN0cnVj
dCBkcm1faTkxNV9wcml2YXRlICpkZXZfcHJpdiwKIAogCS8qIHdhbGt0aHJvdWdoIHNjYWxlcl91
c2VycyBiaXRzIGFuZCBzdGFydCBhc3NpZ25pbmcgc2NhbGVycyAqLwogCWZvciAoaSA9IDA7IGkg
PCBzaXplb2Yoc2NhbGVyX3N0YXRlLT5zY2FsZXJfdXNlcnMpICogODsgaSsrKSB7CisJCXN0cnVj
dCBpbnRlbF9wbGFuZV9zdGF0ZSAqcGxhbmVfc3RhdGUgPSBOVUxMOwogCQlpbnQgKnNjYWxlcl9p
ZDsKIAkJY29uc3QgY2hhciAqbmFtZTsKIAkJaW50IGlkeDsKQEAgLTM2MSwxOSArMzU5LDE2IEBA
IGludCBpbnRlbF9hdG9taWNfc2V0dXBfc2NhbGVycyhzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0ZSAq
ZGV2X3ByaXYsCiAJCQkvKiBwYW5lbCBmaXR0ZXIgY2FzZTogYXNzaWduIGFzIGEgY3J0YyBzY2Fs
ZXIgKi8KIAkJCXNjYWxlcl9pZCA9ICZzY2FsZXJfc3RhdGUtPnNjYWxlcl9pZDsKIAkJfSBlbHNl
IHsKLQkJCW5hbWUgPSAiUExBTkUiOworCQkJc3RydWN0IGludGVsX3BsYW5lICpwbGFuZTsKIAog
CQkJLyogcGxhbmUgc2NhbGVyIGNhc2U6IGFzc2lnbiBhcyBhIHBsYW5lIHNjYWxlciAqLwogCQkJ
LyogZmluZCB0aGUgcGxhbmUgdGhhdCBzZXQgdGhlIGJpdCBhcyBzY2FsZXJfdXNlciAqLwotCQkJ
cGxhbmUgPSBkcm1fc3RhdGUtPnBsYW5lc1tpXS5wdHI7CiAKIAkJCS8qCiAJCQkgKiB0byBlbmFi
bGUvZGlzYWJsZSBocSBtb2RlLCBhZGQgcGxhbmVzIHRoYXQgYXJlIHVzaW5nIHNjYWxlcgogCQkJ
ICogaW50byB0aGlzIHRyYW5zYWN0aW9uCiAJCQkgKi8KLQkJCWlmICghcGxhbmUpIHsKLQkJCQlz
dHJ1Y3QgZHJtX3BsYW5lX3N0YXRlICpzdGF0ZTsKLQorCQkJaWYgKCFkcm1fc3RhdGUtPnBsYW5l
c1tpXS5wdHIpIHsKIAkJCQkvKgogCQkJCSAqIEdMSysgc2NhbGVycyBkb24ndCBoYXZlIGEgSFEg
bW9kZSBzbyBpdAogCQkJCSAqIGlzbid0IG5lY2Vzc2FyeSB0byBjaGFuZ2UgYmV0d2VlbiBIUSBh
bmQgZHluIG1vZGUKQEAgLTM4MiwyNCArMzc3LDI4IEBAIGludCBpbnRlbF9hdG9taWNfc2V0dXBf
c2NhbGVycyhzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0ZSAqZGV2X3ByaXYsCiAJCQkJaWYgKElOVEVM
X0dFTihkZXZfcHJpdikgPj0gMTAgfHwgSVNfR0VNSU5JTEFLRShkZXZfcHJpdikpCiAJCQkJCWNv
bnRpbnVlOwogCi0JCQkJcGxhbmUgPSBkcm1fcGxhbmVfZnJvbV9pbmRleCgmZGV2X3ByaXYtPmRy
bSwgaSk7Ci0JCQkJc3RhdGUgPSBkcm1fYXRvbWljX2dldF9wbGFuZV9zdGF0ZShkcm1fc3RhdGUs
IHBsYW5lKTsKLQkJCQlpZiAoSVNfRVJSKHN0YXRlKSkgewotCQkJCQlEUk1fREVCVUdfS01TKCJG
YWlsZWQgdG8gYWRkIFtQTEFORTolZF0gdG8gZHJtX3N0YXRlXG4iLAotCQkJCQkJcGxhbmUtPmJh
c2UuaWQpOwotCQkJCQlyZXR1cm4gUFRSX0VSUihzdGF0ZSk7CisJCQkJcGxhbmUgPSB0b19pbnRl
bF9wbGFuZShkcm1fcGxhbmVfZnJvbV9pbmRleCgmZGV2X3ByaXYtPmRybSwgaSkpOworCQkJCXBs
YW5lX3N0YXRlID0KKwkJCQkJaW50ZWxfYXRvbWljX2dldF9wbGFuZV9zdGF0ZV9hZnRlcl9jaGVj
ayhzdGF0ZSwKKwkJCQkJCQkJCQkgY3J0Y19zdGF0ZSwKKwkJCQkJCQkJCQkgcGxhbmUpOworCQkJ
CWlmIChJU19FUlIocGxhbmVfc3RhdGUpKSB7CisJCQkJCURSTV9ERUJVR19LTVMoIkZhaWxlZCB0
byBhZGQgW1BMQU5FOiVkXSB0byBkcm1fc3RhdGU6ICVsaVxuIiwKKwkJCQkJCXBsYW5lLT5iYXNl
LmJhc2UuaWQsIFBUUl9FUlIocGxhbmVfc3RhdGUpKTsKKwkJCQkJcmV0dXJuIFBUUl9FUlIocGxh
bmVfc3RhdGUpOwogCQkJCX0KKwkJCX0gZWxzZSB7CisJCQkJcGxhbmUgPSB0b19pbnRlbF9wbGFu
ZShkcm1fc3RhdGUtPnBsYW5lc1tpXS5wdHIpOworCQkJCXBsYW5lX3N0YXRlID0gaW50ZWxfYXRv
bWljX2dldF9uZXdfcGxhbmVfc3RhdGUoc3RhdGUsCisJCQkJCQkJCQkgICAgICAgcGxhbmUpOwog
CQkJfQogCi0JCQlpbnRlbF9wbGFuZSA9IHRvX2ludGVsX3BsYW5lKHBsYW5lKTsKLQkJCWlkeCA9
IHBsYW5lLT5iYXNlLmlkOwotCiAJCQkvKiBwbGFuZSBvbiBkaWZmZXJlbnQgY3J0YyBjYW5ub3Qg
YmUgYSBzY2FsZXIgdXNlciBvZiB0aGlzIGNydGMgKi8KLQkJCWlmIChXQVJOX09OKGludGVsX3Bs
YW5lLT5waXBlICE9IGludGVsX2NydGMtPnBpcGUpKQorCQkJaWYgKFdBUk5fT04ocGxhbmUtPnBp
cGUgIT0gaW50ZWxfY3J0Yy0+cGlwZSkpCiAJCQkJY29udGludWU7CiAKLQkJCXBsYW5lX3N0YXRl
ID0gaW50ZWxfYXRvbWljX2dldF9uZXdfcGxhbmVfc3RhdGUoaW50ZWxfc3RhdGUsCi0JCQkJCQkJ
CSAgICAgICBpbnRlbF9wbGFuZSk7CisJCQluYW1lID0gIlBMQU5FIjsKKwkJCWlkeCA9IHBsYW5l
LT5iYXNlLmJhc2UuaWQ7CiAJCQlzY2FsZXJfaWQgPSAmcGxhbmVfc3RhdGUtPnNjYWxlcl9pZDsK
IAkJfQogCmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5L2ludGVsX2F0
b21pY19wbGFuZS5jIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvZGlzcGxheS9pbnRlbF9hdG9taWNf
cGxhbmUuYwppbmRleCA5OGY1NTdhOWY4ZWUuLmE5ZTI2ODRjNmI2ZCAxMDA2NDQKLS0tIGEvZHJp
dmVycy9ncHUvZHJtL2k5MTUvZGlzcGxheS9pbnRlbF9hdG9taWNfcGxhbmUuYworKysgYi9kcml2
ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5L2ludGVsX2F0b21pY19wbGFuZS5jCkBAIC00MDIsNiAr
NDAyLDIxIEBAIHZvaWQgaTl4eF91cGRhdGVfcGxhbmVzX29uX2NydGMoc3RydWN0IGludGVsX2F0
b21pY19zdGF0ZSAqc3RhdGUsCiAJfQogfQogCitzdHJ1Y3QgaW50ZWxfcGxhbmVfc3RhdGUgKgor
aW50ZWxfYXRvbWljX2dldF9wbGFuZV9zdGF0ZV9hZnRlcl9jaGVjayhzdHJ1Y3QgaW50ZWxfYXRv
bWljX3N0YXRlICpzdGF0ZSwKKwkJCQkJIHN0cnVjdCBpbnRlbF9jcnRjX3N0YXRlICpuZXdfY3J0
Y19zdGF0ZSwKKwkJCQkJIHN0cnVjdCBpbnRlbF9wbGFuZSAqcGxhbmUpCit7CisJc3RydWN0IGlu
dGVsX3BsYW5lX3N0YXRlICpwbGFuZV9zdGF0ZSA9CisJCWludGVsX2F0b21pY19nZXRfcGxhbmVf
c3RhdGUoc3RhdGUsIHBsYW5lKTsKKworCWlmIChJU19FUlIocGxhbmVfc3RhdGUpKQorCQlyZXR1
cm4gcGxhbmVfc3RhdGU7CisKKwluZXdfY3J0Y19zdGF0ZS0+dXBkYXRlX3BsYW5lcyB8PSBCSVQo
cGxhbmUtPmlkKTsKKwlyZXR1cm4gcGxhbmVfc3RhdGU7Cit9CisKIGNvbnN0IHN0cnVjdCBkcm1f
cGxhbmVfaGVscGVyX2Z1bmNzIGludGVsX3BsYW5lX2hlbHBlcl9mdW5jcyA9IHsKIAkucHJlcGFy
ZV9mYiA9IGludGVsX3ByZXBhcmVfcGxhbmVfZmIsCiAJLmNsZWFudXBfZmIgPSBpbnRlbF9jbGVh
bnVwX3BsYW5lX2ZiLApkaWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvZGlzcGxheS9p
bnRlbF9jZGNsay5jIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvZGlzcGxheS9pbnRlbF9jZGNsay5j
CmluZGV4IDBjYWVmMjU5MmE3ZS4uYTllOTUxMGQyZDA3IDEwMDY0NAotLS0gYS9kcml2ZXJzL2dw
dS9kcm0vaTkxNS9kaXNwbGF5L2ludGVsX2NkY2xrLmMKKysrIGIvZHJpdmVycy9ncHUvZHJtL2k5
MTUvZGlzcGxheS9pbnRlbF9jZGNsay5jCkBAIC0yMjc1LDYgKzIyNzUsNyBAQCBzdGF0aWMgaW50
IGludGVsX21vZGVzZXRfYWxsX3BpcGVzKHN0cnVjdCBpbnRlbF9hdG9taWNfc3RhdGUgKnN0YXRl
KQogCSAqLwogCWZvcl9lYWNoX2ludGVsX2NydGMoJmRldl9wcml2LT5kcm0sIGNydGMpIHsKIAkJ
c3RydWN0IGludGVsX2NydGNfc3RhdGUgKmNydGNfc3RhdGU7CisJCXN0cnVjdCBpbnRlbF9wbGFu
ZSAqcGxhbmU7CiAJCWludCByZXQ7CiAKIAkJY3J0Y19zdGF0ZSA9IGludGVsX2F0b21pY19nZXRf
Y3J0Y19zdGF0ZSgmc3RhdGUtPmJhc2UsIGNydGMpOwpAQCAtMjI5MiwxMiArMjI5MywxNCBAQCBz
dGF0aWMgaW50IGludGVsX21vZGVzZXRfYWxsX3BpcGVzKHN0cnVjdCBpbnRlbF9hdG9taWNfc3Rh
dGUgKnN0YXRlKQogCQlpZiAocmV0KQogCQkJcmV0dXJuIHJldDsKIAotCQlyZXQgPSBkcm1fYXRv
bWljX2FkZF9hZmZlY3RlZF9wbGFuZXMoJnN0YXRlLT5iYXNlLAotCQkJCQkJICAgICAmY3J0Yy0+
YmFzZSk7Ci0JCWlmIChyZXQpCi0JCQlyZXR1cm4gcmV0OwotCi0JCWNydGNfc3RhdGUtPnVwZGF0
ZV9wbGFuZXMgfD0gY3J0Y19zdGF0ZS0+YWN0aXZlX3BsYW5lczsKKwkJZm9yX2VhY2hfaW50ZWxf
cGxhbmVfb25fY3J0YygmZGV2X3ByaXYtPmRybSwgY3J0YywgcGxhbmUpIHsKKwkJCXN0cnVjdCBp
bnRlbF9wbGFuZV9zdGF0ZSAqcGxhbmVfc3RhdGUgPQorCQkJCWludGVsX2F0b21pY19nZXRfcGxh
bmVfc3RhdGVfYWZ0ZXJfY2hlY2soc3RhdGUsCisJCQkJCQkJCQkgY3J0Y19zdGF0ZSwKKwkJCQkJ
CQkJCSBwbGFuZSk7CisJCQlpZiAoSVNfRVJSKHBsYW5lX3N0YXRlKSkKKwkJCQlyZXR1cm4gUFRS
X0VSUihwbGFuZV9zdGF0ZSk7CisJCX0KIAl9CiAKIAlyZXR1cm4gMDsKZGlmZiAtLWdpdCBhL2Ry
aXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkvaW50ZWxfY29sb3IuYyBiL2RyaXZlcnMvZ3B1L2Ry
bS9pOTE1L2Rpc3BsYXkvaW50ZWxfY29sb3IuYwppbmRleCBmYTQ0ZWI3M2QwODguLjk1NTg2YTU4
ODIzNCAxMDA2NDQKLS0tIGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvZGlzcGxheS9pbnRlbF9jb2xv
ci5jCisrKyBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkvaW50ZWxfY29sb3IuYwpAQCAt
MTA3NywxMSArMTA3NywxMiBAQCBpbnRlbF9jb2xvcl9hZGRfYWZmZWN0ZWRfcGxhbmVzKHN0cnVj
dCBpbnRlbF9jcnRjX3N0YXRlICpuZXdfY3J0Y19zdGF0ZSkKIAkJaWYgKCFuZWVkX3BsYW5lX3Vw
ZGF0ZShwbGFuZSwgbmV3X2NydGNfc3RhdGUpKQogCQkJY29udGludWU7CiAKLQkJcGxhbmVfc3Rh
dGUgPSBpbnRlbF9hdG9taWNfZ2V0X3BsYW5lX3N0YXRlKHN0YXRlLCBwbGFuZSk7CisJCXBsYW5l
X3N0YXRlID0KKwkJCWludGVsX2F0b21pY19nZXRfcGxhbmVfc3RhdGVfYWZ0ZXJfY2hlY2soc3Rh
dGUsCisJCQkJCQkJCSBuZXdfY3J0Y19zdGF0ZSwKKwkJCQkJCQkJIHBsYW5lKTsKIAkJaWYgKElT
X0VSUihwbGFuZV9zdGF0ZSkpCiAJCQlyZXR1cm4gUFRSX0VSUihwbGFuZV9zdGF0ZSk7Ci0KLQkJ
bmV3X2NydGNfc3RhdGUtPnVwZGF0ZV9wbGFuZXMgfD0gQklUKHBsYW5lLT5pZCk7CiAJfQogCiAJ
cmV0dXJuIDA7CmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5L2ludGVs
X2Rpc3BsYXlfdHlwZXMuaCBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkvaW50ZWxfZGlz
cGxheV90eXBlcy5oCmluZGV4IDQwMTg0ZTgyM2M4NC4uNjFlOWRiMDQxNjEzIDEwMDY0NAotLS0g
YS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5L2ludGVsX2Rpc3BsYXlfdHlwZXMuaAorKysg
Yi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5L2ludGVsX2Rpc3BsYXlfdHlwZXMuaApAQCAt
MTU2MSw0ICsxNTYxLDEwIEBAIHN0YXRpYyBpbmxpbmUgdTMyIGludGVsX3BsYW5lX2dndHRfb2Zm
c2V0KGNvbnN0IHN0cnVjdCBpbnRlbF9wbGFuZV9zdGF0ZSAqc3RhdGUpCiAJcmV0dXJuIGk5MTVf
Z2d0dF9vZmZzZXQoc3RhdGUtPnZtYSk7CiB9CiAKKy8qIGludGVsX2F0b21pY19wbGFuZS5jICov
CitzdHJ1Y3QgaW50ZWxfcGxhbmVfc3RhdGUgKgoraW50ZWxfYXRvbWljX2dldF9wbGFuZV9zdGF0
ZV9hZnRlcl9jaGVjayhzdHJ1Y3QgaW50ZWxfYXRvbWljX3N0YXRlICpzdGF0ZSwKKwkJCQkJIHN0
cnVjdCBpbnRlbF9jcnRjX3N0YXRlICpjcnRjX3N0YXRlLAorCQkJCQkgc3RydWN0IGludGVsX3Bs
YW5lICpwbGFuZSk7CisKICNlbmRpZiAvKiAgX19JTlRFTF9ESVNQTEFZX1RZUEVTX0hfXyAqLwpk
aWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvaW50ZWxfcG0uYyBiL2RyaXZlcnMvZ3B1
L2RybS9pOTE1L2ludGVsX3BtLmMKaW5kZXggNWQyYjQ2MGQzZWU1Li4wM2EyMzZhZDZhNmIgMTAw
NjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2ludGVsX3BtLmMKKysrIGIvZHJpdmVycy9n
cHUvZHJtL2k5MTUvaW50ZWxfcG0uYwpAQCAtNTE1OCwxMSArNTE1OCwxMiBAQCBza2xfZGRiX2Fk
ZF9hZmZlY3RlZF9wbGFuZXMoY29uc3Qgc3RydWN0IGludGVsX2NydGNfc3RhdGUgKm9sZF9jcnRj
X3N0YXRlLAogCQkJCQkmbmV3X2NydGNfc3RhdGUtPndtLnNrbC5wbGFuZV9kZGJfdXZbcGxhbmVf
aWRdKSkKIAkJCWNvbnRpbnVlOwogCi0JCXBsYW5lX3N0YXRlID0gaW50ZWxfYXRvbWljX2dldF9w
bGFuZV9zdGF0ZShzdGF0ZSwgcGxhbmUpOworCQlwbGFuZV9zdGF0ZSA9CisJCQlpbnRlbF9hdG9t
aWNfZ2V0X3BsYW5lX3N0YXRlX2FmdGVyX2NoZWNrKHN0YXRlLAorCQkJCQkJCQkgbmV3X2NydGNf
c3RhdGUsCisJCQkJCQkJCSBwbGFuZSk7CiAJCWlmIChJU19FUlIocGxhbmVfc3RhdGUpKQogCQkJ
cmV0dXJuIFBUUl9FUlIocGxhbmVfc3RhdGUpOwotCi0JCW5ld19jcnRjX3N0YXRlLT51cGRhdGVf
cGxhbmVzIHw9IEJJVChwbGFuZV9pZCk7CiAJfQogCiAJcmV0dXJuIDA7CkBAIC01NDM0LDExICs1
NDM1LDEyIEBAIHN0YXRpYyBpbnQgc2tsX3dtX2FkZF9hZmZlY3RlZF9wbGFuZXMoc3RydWN0IGlu
dGVsX2F0b21pY19zdGF0ZSAqc3RhdGUsCiAJCQkJCSZuZXdfY3J0Y19zdGF0ZS0+d20uc2tsLm9w
dGltYWwucGxhbmVzW3BsYW5lX2lkXSkpCiAJCQljb250aW51ZTsKIAotCQlwbGFuZV9zdGF0ZSA9
IGludGVsX2F0b21pY19nZXRfcGxhbmVfc3RhdGUoc3RhdGUsIHBsYW5lKTsKKwkJcGxhbmVfc3Rh
dGUgPQorCQkJaW50ZWxfYXRvbWljX2dldF9wbGFuZV9zdGF0ZV9hZnRlcl9jaGVjayhzdGF0ZSwK
KwkJCQkJCQkJIG5ld19jcnRjX3N0YXRlLAorCQkJCQkJCQkgcGxhbmUpOwogCQlpZiAoSVNfRVJS
KHBsYW5lX3N0YXRlKSkKIAkJCXJldHVybiBQVFJfRVJSKHBsYW5lX3N0YXRlKTsKLQotCQluZXdf
Y3J0Y19zdGF0ZS0+dXBkYXRlX3BsYW5lcyB8PSBCSVQocGxhbmVfaWQpOwogCX0KIAogCXJldHVy
biAwOwotLSAKMi4yMy4wCgpfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fXwpJbnRlbC1nZnggbWFpbGluZyBsaXN0CkludGVsLWdmeEBsaXN0cy5mcmVlZGVza3Rv
cC5vcmcKaHR0cHM6Ly9saXN0cy5mcmVlZGVza3RvcC5vcmcvbWFpbG1hbi9saXN0aW5mby9pbnRl
bC1nZng=

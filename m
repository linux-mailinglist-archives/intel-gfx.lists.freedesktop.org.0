Return-Path: <intel-gfx-bounces@lists.freedesktop.org>
X-Original-To: lists+intel-gfx@lfdr.de
Delivered-To: lists+intel-gfx@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [131.252.210.177])
	by mail.lfdr.de (Postfix) with ESMTPS id 8DDFAB28C6
	for <lists+intel-gfx@lfdr.de>; Sat, 14 Sep 2019 01:06:29 +0200 (CEST)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id ECDF26F4A2;
	Fri, 13 Sep 2019 23:06:27 +0000 (UTC)
X-Original-To: intel-gfx@lists.freedesktop.org
Delivered-To: intel-gfx@lists.freedesktop.org
Received: from mga14.intel.com (mga14.intel.com [192.55.52.115])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 3DE8C6F4A0
 for <intel-gfx@lists.freedesktop.org>; Fri, 13 Sep 2019 23:06:21 +0000 (UTC)
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from orsmga005.jf.intel.com ([10.7.209.41])
 by fmsmga103.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384;
 13 Sep 2019 16:06:20 -0700
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.64,489,1559545200"; d="scan'208";a="360924423"
Received: from unerlige-desk.jf.intel.com ([10.165.21.198])
 by orsmga005.jf.intel.com with ESMTP; 13 Sep 2019 16:06:20 -0700
From: Umesh Nerlige Ramappa <umesh.nerlige.ramappa@intel.com>
To: Umesh Nerlige Ramappa <umesh.nerlige.ramappa@intel.com>,
 Lionel G Landwerlin <lionel.g.landwerlin@intel.com>,
 intel-gfx@lists.freedesktop.org
Date: Fri, 13 Sep 2019 16:06:18 -0700
Message-Id: <20190913230620.15906-2-umesh.nerlige.ramappa@intel.com>
X-Mailer: git-send-email 2.20.1
In-Reply-To: <20190913230620.15906-1-umesh.nerlige.ramappa@intel.com>
References: <20190913230620.15906-1-umesh.nerlige.ramappa@intel.com>
MIME-Version: 1.0
Subject: [Intel-gfx] [PATCH 1/3] drm/i915/perf: rework aging tail workaround
X-BeenThere: intel-gfx@lists.freedesktop.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: Intel graphics driver community testing & development
 <intel-gfx.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/intel-gfx>
List-Post: <mailto:intel-gfx@lists.freedesktop.org>
List-Help: <mailto:intel-gfx-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: intel-gfx-bounces@lists.freedesktop.org
Sender: "Intel-gfx" <intel-gfx-bounces@lists.freedesktop.org>

RnJvbTogTGlvbmVsIExhbmR3ZXJsaW4gPGxpb25lbC5nLmxhbmR3ZXJsaW5AaW50ZWwuY29tPgoK
UmlnaHQgbm93IHRoZSB3b3JrYXJvdW5kIGFnYWluc3QgdGhlIE9BIHRhaWwgcG9pbnRlciByYWNl
IGNvbmRpdGlvbgpyZXF1aXJlcyBhdCBsZWFzdCB0d2ljZSB0aGUgaW50ZXJuYWwga2VybmVsIHBv
bGxpbmcgdGltZXIgdG8gbWFrZSBhbnkKZGF0YSBhdmFpbGFibGUuCgpUaGlzIGNoYW5nZXMgaW50
cm9kdWNlIGNoZWNrcyBvbiB0aGUgT0EgZGF0YSB3cml0dGVuIGludG8gdGhlIGNpcmN1bGFyCmJ1
ZmZlciB0byBtYWtlIGFzIG11Y2ggZGF0YSBhcyBwb3NzaWJsZSBhdmFpbGFibGUgb24gdGhlIGZp
cnN0Cml0ZXJhdGlvbiBvZiB0aGUgcG9sbGluZyB0aW1lci4KCnYyOiBVc2UgT0FfVEFLRU4gbWFj
cm8gd2l0aG91dCB0aGUgZ3R0X29mZnNldCAoTGlvbmVsKQoKU2lnbmVkLW9mZi1ieTogTGlvbmVs
IExhbmR3ZXJsaW4gPGxpb25lbC5nLmxhbmR3ZXJsaW5AaW50ZWwuY29tPgotLS0KIGRyaXZlcnMv
Z3B1L2RybS9pOTE1L2k5MTVfZHJ2LmggIHwgIDMwICsrLS0tCiBkcml2ZXJzL2dwdS9kcm0vaTkx
NS9pOTE1X3BlcmYuYyB8IDIwMCArKysrKysrKysrKysrKy0tLS0tLS0tLS0tLS0tLS0tCiAyIGZp
bGVzIGNoYW5nZWQsIDEwMyBpbnNlcnRpb25zKCspLCAxMjcgZGVsZXRpb25zKC0pCgpkaWZmIC0t
Z2l0IGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvaTkxNV9kcnYuaCBiL2RyaXZlcnMvZ3B1L2RybS9p
OTE1L2k5MTVfZHJ2LmgKaW5kZXggYmY2MDA4ODhiM2YxLi44NzZhZWFmMzU2OGUgMTAwNjQ0Ci0t
LSBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2k5MTVfZHJ2LmgKKysrIGIvZHJpdmVycy9ncHUvZHJt
L2k5MTUvaTkxNV9kcnYuaApAQCAtMTE4MCwyMSArMTE4MCwxMSBAQCBzdHJ1Y3QgaTkxNV9wZXJm
X3N0cmVhbSB7CiAJCXNwaW5sb2NrX3QgcHRyX2xvY2s7CiAKIAkJLyoqCi0JCSAqIE9uZSAnYWdp
bmcnIHRhaWwgcG9pbnRlciBhbmQgb25lICdhZ2VkJyB0YWlsIHBvaW50ZXIgcmVhZHkgdG8KLQkJ
ICogdXNlZCBmb3IgcmVhZGluZy4KLQkJICoKLQkJICogSW5pdGlhbCB2YWx1ZXMgb2YgMHhmZmZm
ZmZmZiBhcmUgaW52YWxpZCBhbmQgaW1wbHkgdGhhdCBhbgotCQkgKiB1cGRhdGUgaXMgcmVxdWly
ZWQgKGFuZCBzaG91bGQgYmUgaWdub3JlZCBieSBhbiBhdHRlbXB0ZWQKLQkJICogcmVhZCkKLQkJ
ICovCi0JCXN0cnVjdCB7Ci0JCQl1MzIgb2Zmc2V0OwotCQl9IHRhaWxzWzJdOwotCi0JCS8qKgot
CQkgKiBJbmRleCBmb3IgdGhlIGFnZWQgdGFpbCByZWFkeSB0byByZWFkKCkgZGF0YSB1cCB0by4K
KwkJICogVGhlIGxhc3QgSFcgdGFpbCByZXBvcnRlZCBieSBIVy4gVGhlIGRhdGEKKwkJICogbWln
aHQgbm90IGhhdmUgbWFkZSBpdCB0byBtZW1vcnkgeWV0CisJCSAqIHRob3VnaC4KIAkJICovCi0J
CXVuc2lnbmVkIGludCBhZ2VkX3RhaWxfaWR4OworCQl1MzIgYWdpbmdfdGFpbDsKIAogCQkvKioK
IAkJICogQSBtb25vdG9uaWMgdGltZXN0YW1wIGZvciB3aGVuIHRoZSBjdXJyZW50IGFnaW5nIHRh
aWwgcG9pbnRlcgpAQCAtMTIxMCw2ICsxMjAwLDEyIEBAIHN0cnVjdCBpOTE1X3BlcmZfc3RyZWFt
IHsKIAkJICogT0EgYnVmZmVyIGRhdGEgdG8gdXNlcnNwYWNlLgogCQkgKi8KIAkJdTMyIGhlYWQ7
CisKKwkJLyoqCisJCSAqIFRoZSBsYXN0IHZlcmlmaWVkIHRhaWwgdGhhdCBjYW4gYmUgcmVhZAor
CQkgKiBieSB1c2VyIHNwYWNlCisJCSAqLworCQl1MzIgdGFpbDsKIAl9IG9hX2J1ZmZlcjsKIH07
CiAKQEAgLTE2OTMsNiArMTY4OSwxMiBAQCBzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0ZSB7CiAJCSAq
LwogCQlzdHJ1Y3QgcmF0ZWxpbWl0X3N0YXRlIHNwdXJpb3VzX3JlcG9ydF9yczsKIAorCQkvKioK
KwkJICogRm9yIHJhdGUgbGltaXRpbmcgYW55IG5vdGlmaWNhdGlvbnMgb2YgdGFpbCBwb2ludGVy
CisJCSAqIHJhY2UuCisJCSAqLworCQlzdHJ1Y3QgcmF0ZWxpbWl0X3N0YXRlIHRhaWxfcG9pbnRl
cl9yYWNlOworCiAJCXN0cnVjdCBpOTE1X29hX2NvbmZpZyB0ZXN0X2NvbmZpZzsKIAogCQl1MzIg
Z2VuN19sYXRjaGVkX29hc3RhdHVzMTsKZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1
L2k5MTVfcGVyZi5jIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvaTkxNV9wZXJmLmMKaW5kZXggYzFi
NzY0MjMzNzYxLi41MGI2ZDE1NGZkNDYgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1
L2k5MTVfcGVyZi5jCisrKyBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2k5MTVfcGVyZi5jCkBAIC0y
MzcsMjMgKzIzNywxNCBAQAogICogZm9yIHRoaXMgZWFybGllciwgYXMgcGFydCBvZiB0aGUgb2Ff
YnVmZmVyX2NoZWNrIHRvIGF2b2lkIGxvdHMgb2YgcmVkdW5kYW50CiAgKiByZWFkKCkgYXR0ZW1w
dHMuCiAgKgotICogSW4gZWZmZWN0IHdlIGRlZmluZSBhIHRhaWwgcG9pbnRlciBmb3IgcmVhZGlu
ZyB0aGF0IGxhZ3MgdGhlIHJlYWwgdGFpbAotICogcG9pbnRlciBieSBhdCBsZWFzdCAlT0FfVEFJ
TF9NQVJHSU5fTlNFQyBuYW5vc2Vjb25kcywgd2hpY2ggZ2l2ZXMgZW5vdWdoCi0gKiB0aW1lIGZv
ciB0aGUgY29ycmVzcG9uZGluZyByZXBvcnRzIHRvIGJlY29tZSB2aXNpYmxlIHRvIHRoZSBDUFUu
Ci0gKgotICogVG8gbWFuYWdlIHRoaXMgd2UgYWN0dWFsbHkgdHJhY2sgdHdvIHRhaWwgcG9pbnRl
cnM6Ci0gKiAgMSkgQW4gJ2FnaW5nJyB0YWlsIHdpdGggYW4gYXNzb2NpYXRlZCB0aW1lc3RhbXAg
dGhhdCBpcyB0cmFja2VkIHVudGlsIHdlCi0gKiAgICAgY2FuIHRydXN0IHRoZSBjb3JyZXNwb25k
aW5nIGRhdGEgaXMgdmlzaWJsZSB0byB0aGUgQ1BVOyBhdCB3aGljaCBwb2ludAotICogICAgIGl0
IGlzIGNvbnNpZGVyZWQgJ2FnZWQnLgotICogIDIpIEFuICdhZ2VkJyB0YWlsIHRoYXQgY2FuIGJl
IHVzZWQgZm9yIHJlYWQoKWluZy4KLSAqCi0gKiBUaGUgdHdvIHNlcGFyYXRlIHBvaW50ZXJzIGxl
dCB1cyBkZWNvdXBsZSByZWFkKClzIGZyb20gdGFpbCBwb2ludGVyIGFnaW5nLgotICoKLSAqIFRo
ZSB0YWlsIHBvaW50ZXJzIGFyZSBjaGVja2VkIGFuZCB1cGRhdGVkIGF0IGEgbGltaXRlZCByYXRl
IHdpdGhpbiBhIGhydGltZXIKLSAqIGNhbGxiYWNrICh0aGUgc2FtZSBjYWxsYmFjayB0aGF0IGlz
IHVzZWQgZm9yIGRlbGl2ZXJpbmcgRVBPTExJTiBldmVudHMpCi0gKgotICogSW5pdGlhbGx5IHRo
ZSB0YWlscyBhcmUgbWFya2VkIGludmFsaWQgd2l0aCAlSU5WQUxJRF9UQUlMX1BUUiB3aGljaAot
ICogaW5kaWNhdGVzIHRoYXQgYW4gdXBkYXRlZCB0YWlsIHBvaW50ZXIgaXMgbmVlZGVkLgorICog
V2Ugd29ya2Fyb3VuZCB0aGlzIGlzc3VlIGluIG9hX2J1ZmZlcl9jaGVjaygpIGJ5IHJlYWRpbmcg
dGhlIHJlcG9ydHMgaW4gdGhlCisgKiBPQSBidWZmZXIsIHN0YXJ0aW5nIGZyb20gdGhlIHRhaWwg
cmVwb3J0ZWQgYnkgdGhlIEhXIHVudGlsIHdlIGZpbmQgMgorICogY29uc2VjdXRpdmUgcmVwb3J0
cyB3aXRoIHRoZWlyIGZpcnN0IDIgZHdvcmRzIG9mIG5vdCBhdCAwLiBUaG9zZSBkd29yZHMgYXJl
CisgKiBhbHNvIHNldCB0byAwIG9uY2UgcmVhZCBhbmQgdGhlIHdob2xlIGJ1ZmZlciBpcyBjbGVh
cmVkIHVwb24gT0EgYnVmZmVyCisgKiBpbml0aWFsaXphdGlvbi4gVGhlIGZpcnN0IGR3b3JkIGlz
IHRoZSByZWFzb24gZm9yIHRoaXMgcmVwb3J0IHdoaWxlIHRoZQorICogc2Vjb25kIGlzIHRoZSB0
aW1lc3RhbXAsIG1ha2luZyB0aGUgY2hhbmNlcyBvZiBoYXZpbmcgdGhvc2UgMiBmaWVsZHMgYXQg
MAorICogZmFpcmx5IHVubGlrZWx5LiBBIG1vcmUgZGV0YWlsZWQgZXhwbGFuYXRpb24gaXMgYXZh
aWxhYmxlIGluCisgKiBvYV9idWZmZXJfY2hlY2soKS4KICAqCiAgKiBNb3N0IG9mIHRoZSBpbXBs
ZW1lbnRhdGlvbiBkZXRhaWxzIGZvciB0aGlzIHdvcmthcm91bmQgYXJlIGluCiAgKiBvYV9idWZm
ZXJfY2hlY2tfdW5sb2NrZWQoKSBhbmQgX2FwcGVuZF9vYV9yZXBvcnRzKCkKQEAgLTI2Niw3ICsy
NTcsNiBAQAogICogZW5hYmxlZCB3aXRob3V0IGFueSBwZXJpb2RpYyBzYW1wbGluZy4KICAqLwog
I2RlZmluZSBPQV9UQUlMX01BUkdJTl9OU0VDCTEwMDAwMFVMTAotI2RlZmluZSBJTlZBTElEX1RB
SUxfUFRSCTB4ZmZmZmZmZmYKIAogLyogZnJlcXVlbmN5IGZvciBjaGVja2luZyB3aGV0aGVyIHRo
ZSBPQSB1bml0IGhhcyB3cml0dGVuIG5ldyByZXBvcnRzIHRvIHRoZQogICogY2lyY3VsYXIgT0Eg
YnVmZmVyLi4uCkBAIC00NTcsMTAgKzQ0NywxMCBAQCBzdGF0aWMgdTMyIGdlbjdfb2FfaHdfdGFp
bF9yZWFkKHN0cnVjdCBpOTE1X3BlcmZfc3RyZWFtICpzdHJlYW0pCiBzdGF0aWMgYm9vbCBvYV9i
dWZmZXJfY2hlY2tfdW5sb2NrZWQoc3RydWN0IGk5MTVfcGVyZl9zdHJlYW0gKnN0cmVhbSkKIHsK
IAlzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0ZSAqZGV2X3ByaXYgPSBzdHJlYW0tPmRldl9wcml2Owor
CXUzMiBndHRfb2Zmc2V0ID0gaTkxNV9nZ3R0X29mZnNldChzdHJlYW0tPm9hX2J1ZmZlci52bWEp
OwogCWludCByZXBvcnRfc2l6ZSA9IHN0cmVhbS0+b2FfYnVmZmVyLmZvcm1hdF9zaXplOwogCXVu
c2lnbmVkIGxvbmcgZmxhZ3M7Ci0JdW5zaWduZWQgaW50IGFnZWRfaWR4OwotCXUzMiBoZWFkLCBo
d190YWlsLCBhZ2VkX3RhaWwsIGFnaW5nX3RhaWw7CisJdTMyIGh3X3RhaWw7CiAJdTY0IG5vdzsK
IAogCS8qIFdlIGhhdmUgdG8gY29uc2lkZXIgdGhlICh1bmxpa2VseSkgcG9zc2liaWxpdHkgdGhh
dCByZWFkKCkgZXJyb3JzCkBAIC00NjksMTYgKzQ1OSw2IEBAIHN0YXRpYyBib29sIG9hX2J1ZmZl
cl9jaGVja191bmxvY2tlZChzdHJ1Y3QgaTkxNV9wZXJmX3N0cmVhbSAqc3RyZWFtKQogCSAqLwog
CXNwaW5fbG9ja19pcnFzYXZlKCZzdHJlYW0tPm9hX2J1ZmZlci5wdHJfbG9jaywgZmxhZ3MpOwog
Ci0JLyogTkI6IFRoZSBoZWFkIHdlIG9ic2VydmUgaGVyZSBtaWdodCBlZmZlY3RpdmVseSBiZSBh
IGxpdHRsZSBvdXQgb2YKLQkgKiBkYXRlIChiZXR3ZWVuIGhlYWQgYW5kIHRhaWxzW2FnZWRfaWR4
XS5vZmZzZXQgaWYgdGhlcmUgaXMgY3VycmVudGx5Ci0JICogYSByZWFkKCkgaW4gcHJvZ3Jlc3Mu
Ci0JICovCi0JaGVhZCA9IHN0cmVhbS0+b2FfYnVmZmVyLmhlYWQ7Ci0KLQlhZ2VkX2lkeCA9IHN0
cmVhbS0+b2FfYnVmZmVyLmFnZWRfdGFpbF9pZHg7Ci0JYWdlZF90YWlsID0gc3RyZWFtLT5vYV9i
dWZmZXIudGFpbHNbYWdlZF9pZHhdLm9mZnNldDsKLQlhZ2luZ190YWlsID0gc3RyZWFtLT5vYV9i
dWZmZXIudGFpbHNbIWFnZWRfaWR4XS5vZmZzZXQ7Ci0KIAlod190YWlsID0gZGV2X3ByaXYtPnBl
cmYub3BzLm9hX2h3X3RhaWxfcmVhZChzdHJlYW0pOwogCiAJLyogVGhlIHRhaWwgcG9pbnRlciBp
bmNyZWFzZXMgaW4gNjQgYnl0ZSBpbmNyZW1lbnRzLApAQCAtNDg4LDYzICs0NjgsNzUgQEAgc3Rh
dGljIGJvb2wgb2FfYnVmZmVyX2NoZWNrX3VubG9ja2VkKHN0cnVjdCBpOTE1X3BlcmZfc3RyZWFt
ICpzdHJlYW0pCiAKIAlub3cgPSBrdGltZV9nZXRfbW9ub19mYXN0X25zKCk7CiAKLQkvKiBVcGRh
dGUgdGhlIGFnZWQgdGFpbAotCSAqCi0JICogRmxpcCB0aGUgdGFpbCBwb2ludGVyIGF2YWlsYWJs
ZSBmb3IgcmVhZCgpcyBvbmNlIHRoZSBhZ2luZyB0YWlsIGlzCi0JICogb2xkIGVub3VnaCB0byB0
cnVzdCB0aGF0IHRoZSBjb3JyZXNwb25kaW5nIGRhdGEgd2lsbCBiZSB2aXNpYmxlIHRvCi0JICog
dGhlIENQVS4uLgotCSAqCi0JICogRG8gdGhpcyBiZWZvcmUgdXBkYXRpbmcgdGhlIGFnaW5nIHBv
aW50ZXIgaW4gY2FzZSB3ZSBtYXkgYmUgYWJsZSB0bwotCSAqIGltbWVkaWF0ZWx5IHN0YXJ0IGFn
aW5nIGEgbmV3IHBvaW50ZXIgdG9vIChpZiBuZXcgZGF0YSBoYXMgYmVjb21lCi0JICogYXZhaWxh
YmxlKSB3aXRob3V0IG5lZWRpbmcgdG8gd2FpdCBmb3IgYSBsYXRlciBocnRpbWVyIGNhbGxiYWNr
LgotCSAqLwotCWlmIChhZ2luZ190YWlsICE9IElOVkFMSURfVEFJTF9QVFIgJiYKLQkgICAgKChu
b3cgLSBzdHJlYW0tPm9hX2J1ZmZlci5hZ2luZ190aW1lc3RhbXApID4KLQkgICAgIE9BX1RBSUxf
TUFSR0lOX05TRUMpKSB7Ci0KLQkJYWdlZF9pZHggXj0gMTsKLQkJc3RyZWFtLT5vYV9idWZmZXIu
YWdlZF90YWlsX2lkeCA9IGFnZWRfaWR4OworCWlmIChod190YWlsID09IHN0cmVhbS0+b2FfYnVm
ZmVyLmFnaW5nX3RhaWwpIHsKKwkJLyogSWYgdGhlIEhXIHRhaWwgaGFzbid0IG1vdmUgc2luY2Ug
dGhlIGxhc3QgY2hlY2sgYW5kIHRoZSBIVworCQkgKiB0YWlsIGhhcyBiZWVuIGFnaW5nIGZvciBs
b25nIGVub3VnaCwgZGVjbGFyZSBpdCB0aGUgbmV3CisJCSAqIHRhaWwuCisJCSAqLworCQlpZiAo
KG5vdyAtIHN0cmVhbS0+b2FfYnVmZmVyLmFnaW5nX3RpbWVzdGFtcCkgPgorCQkgICAgT0FfVEFJ
TF9NQVJHSU5fTlNFQykgeworCQkJc3RyZWFtLT5vYV9idWZmZXIudGFpbCA9CisJCQkJc3RyZWFt
LT5vYV9idWZmZXIuYWdpbmdfdGFpbDsKKwkJfQorCX0gZWxzZSB7CisJCXUzMiBoZWFkLCB0YWls
LCBsYW5kZWRfcmVwb3J0X2hlYWRzOwogCi0JCWFnZWRfdGFpbCA9IGFnaW5nX3RhaWw7CisJCS8q
IE5COiBUaGUgaGVhZCB3ZSBvYnNlcnZlIGhlcmUgbWlnaHQgZWZmZWN0aXZlbHkgYmUgYSBsaXR0
bGUgb3V0IG9mCisJCSAqIGRhdGUgKGJldHdlZW4gaGVhZCBhbmQgdGFpbHNbYWdlZF9pZHhdLm9m
ZnNldCBpZiB0aGVyZSBpcyBjdXJyZW50bHkKKwkJICogYSByZWFkKCkgaW4gcHJvZ3Jlc3MuCisJ
CSAqLworCQloZWFkID0gc3RyZWFtLT5vYV9idWZmZXIuaGVhZCAtIGd0dF9vZmZzZXQ7CiAKLQkJ
LyogTWFyayB0aGF0IHdlIG5lZWQgYSBuZXcgcG9pbnRlciB0byBzdGFydCBhZ2luZy4uLiAqLwot
CQlzdHJlYW0tPm9hX2J1ZmZlci50YWlsc1shYWdlZF9pZHhdLm9mZnNldCA9IElOVkFMSURfVEFJ
TF9QVFI7Ci0JCWFnaW5nX3RhaWwgPSBJTlZBTElEX1RBSUxfUFRSOwotCX0KKwkJaHdfdGFpbCAt
PSBndHRfb2Zmc2V0OworCQl0YWlsID0gaHdfdGFpbDsKIAotCS8qIFVwZGF0ZSB0aGUgYWdpbmcg
dGFpbAotCSAqCi0JICogV2UgdGhyb3R0bGUgYWdpbmcgdGFpbCB1cGRhdGVzIHVudGlsIHdlIGhh
dmUgYSBuZXcgdGFpbCB0aGF0Ci0JICogcmVwcmVzZW50cyA+PSBvbmUgcmVwb3J0IG1vcmUgZGF0
YSB0aGFuIGlzIGFscmVhZHkgYXZhaWxhYmxlIGZvcgotCSAqIHJlYWRpbmcuIFRoaXMgZW5zdXJl
cyB0aGVyZSB3aWxsIGJlIGVub3VnaCBkYXRhIGZvciBhIHN1Y2Nlc3NmdWwKLQkgKiByZWFkIG9u
Y2UgdGhpcyBuZXcgcG9pbnRlciBoYXMgYWdlZCBhbmQgZW5zdXJlcyB3ZSB3aWxsIGdpdmUgdGhl
IG5ldwotCSAqIHBvaW50ZXIgdGltZSB0byBhZ2UuCi0JICovCi0JaWYgKGFnaW5nX3RhaWwgPT0g
SU5WQUxJRF9UQUlMX1BUUiAmJgotCSAgICAoYWdlZF90YWlsID09IElOVkFMSURfVEFJTF9QVFIg
fHwKLQkgICAgIE9BX1RBS0VOKGh3X3RhaWwsIGFnZWRfdGFpbCkgPj0gcmVwb3J0X3NpemUpKSB7
Ci0JCXN0cnVjdCBpOTE1X3ZtYSAqdm1hID0gc3RyZWFtLT5vYV9idWZmZXIudm1hOwotCQl1MzIg
Z3R0X29mZnNldCA9IGk5MTVfZ2d0dF9vZmZzZXQodm1hKTsKLQotCQkvKiBCZSBwYXJhbm9pZCBh
bmQgZG8gYSBib3VuZHMgY2hlY2sgb24gdGhlIHBvaW50ZXIgcmVhZCBiYWNrCi0JCSAqIGZyb20g
aGFyZHdhcmUsIGp1c3QgaW4gY2FzZSBzb21lIHNwdXJpb3VzIGhhcmR3YXJlIGNvbmRpdGlvbgot
CQkgKiBjb3VsZCBwdXQgdGhlIHRhaWwgb3V0IG9mIGJvdW5kcy4uLgorCQkvKiBXYWxrIHRoZSBz
dHJlYW0gYmFja3dhcmQgdW50aWwgd2UgZmluZCBhdCBsZWFzdCAyIHJlcG9ydHMKKwkJICogd2l0
aCBkd29yZCAwICYgMSBub3QgYXQgMC4gU2luY2UgdGhlIGNpcmN1bGFyIGJ1ZmZlcgorCQkgKiBw
b2ludGVycyBwcm9ncmVzcyBieSBpbmNyZW1lbnRzIG9mIDY0IGJ5dGVzIGFuZCB0aGF0CisJCSAq
IHJlcG9ydHMgY2FuIGJlIHVwIHRvIDI1NiBieXRlcyBsb25nLCB3ZSBjYW4ndCB0ZWxsIHdoZXRo
ZXIKKwkJICogYSByZXBvcnQgaGFzIGZ1bGx5IGxhbmRlZCBpbiBtZW1vcnkgYmVmb3JlIHRoZSBm
aXJzdCAyCisJCSAqIGR3b3JkcyBvZiB0aGUgZm9sbG93aW5nIHJlcG9ydCBoYXZlIGVmZmVjdGl2
ZWx5IGxhbmRlZC4KKwkJICoKKwkJICogVGhpcyBpcyBhc3N1bWluZyB0aGF0IHRoZSB3cml0ZXMg
b2YgdGhlIE9BIHVuaXQgbGFuZCBpbgorCQkgKiBtZW1vcnkgaW4gdGhlIG9yZGVyIHRoZXkgd2Vy
ZSB3cml0dGVuIHRvLgorCQkgKiBJZiBub3QgOiAo4pWvwrDilqHCsO+8ieKVr++4tSDilLvilIHi
lLsKIAkJICovCi0JCWlmIChod190YWlsID49IGd0dF9vZmZzZXQgJiYKLQkJICAgIGh3X3RhaWwg
PCAoZ3R0X29mZnNldCArIE9BX0JVRkZFUl9TSVpFKSkgewotCQkJc3RyZWFtLT5vYV9idWZmZXIu
dGFpbHNbIWFnZWRfaWR4XS5vZmZzZXQgPQotCQkJCWFnaW5nX3RhaWwgPSBod190YWlsOwotCQkJ
c3RyZWFtLT5vYV9idWZmZXIuYWdpbmdfdGltZXN0YW1wID0gbm93OwotCQl9IGVsc2UgewotCQkJ
RFJNX0VSUk9SKCJJZ25vcmluZyBzcHVyaW91cyBvdXQgb2YgcmFuZ2UgT0EgYnVmZmVyIHRhaWwg
cG9pbnRlciA9ICV1XG4iLAotCQkJCSAgaHdfdGFpbCk7CisJCWxhbmRlZF9yZXBvcnRfaGVhZHMg
PSAwOworCQl3aGlsZSAoT0FfVEFLRU4odGFpbCwgaGVhZCkgPj0gcmVwb3J0X3NpemUpIHsKKwkJ
CXUzMiBwcmV2aW91c190YWlsID0gKHRhaWwgLSByZXBvcnRfc2l6ZSkgJiAoT0FfQlVGRkVSX1NJ
WkUgLSAxKTsKKwkJCXU4ICpyZXBvcnQgPSBzdHJlYW0tPm9hX2J1ZmZlci52YWRkciArIHByZXZp
b3VzX3RhaWw7CisJCQl1MzIgKnJlcG9ydDMyID0gKHZvaWQgKikgcmVwb3J0OworCisJCQkvKiBI
ZWFkIG9mIHRoZSByZXBvcnQgaW5kaWNhdGVkIGJ5IHRoZSBIVyB0YWlsIHJlZ2lzdGVyIGhhcwor
CQkJICogaW5kZWVkIGxhbmRlZCBpbnRvIG1lbW9yeS4KKwkJCSAqLworCQkJaWYgKHJlcG9ydDMy
WzBdICE9IDAgfHwgcmVwb3J0WzFdICE9IDApIHsKKwkJCQlsYW5kZWRfcmVwb3J0X2hlYWRzKys7
CisKKwkJCQlpZiAobGFuZGVkX3JlcG9ydF9oZWFkcyA+PSAyKQorCQkJCQlicmVhazsKKwkJCX0K
KworCQkJdGFpbCA9IHByZXZpb3VzX3RhaWw7CisJCX0KKworCQlpZiAoYWJzKHRhaWwgLSBod190
YWlsKSA+PSAoMiAqIHJlcG9ydF9zaXplKSkgeworCQkJaWYgKF9fcmF0ZWxpbWl0KCZkZXZfcHJp
di0+cGVyZi50YWlsX3BvaW50ZXJfcmFjZSkpIHsKKwkJCQlEUk1fTk9URSgidW5sYW5kZWQgcmVw
b3J0KHMpIGhlYWQ9MHgleCAiCisJCQkJCSAidGFpbD0weCV4IGh3X3RhaWw9MHgleFxuIiwKKwkJ
CQkJIGhlYWQsIHRhaWwsIGh3X3RhaWwpOworCQkJfQogCQl9CisKKwkJc3RyZWFtLT5vYV9idWZm
ZXIudGFpbCA9IGd0dF9vZmZzZXQgKyB0YWlsOworCQlzdHJlYW0tPm9hX2J1ZmZlci5hZ2luZ190
YWlsID0gZ3R0X29mZnNldCArIGh3X3RhaWw7CisJCXN0cmVhbS0+b2FfYnVmZmVyLmFnaW5nX3Rp
bWVzdGFtcCA9IG5vdzsKIAl9CiAKIAlzcGluX3VubG9ja19pcnFyZXN0b3JlKCZzdHJlYW0tPm9h
X2J1ZmZlci5wdHJfbG9jaywgZmxhZ3MpOwogCi0JcmV0dXJuIGFnZWRfdGFpbCA9PSBJTlZBTElE
X1RBSUxfUFRSID8KLQkJZmFsc2UgOiBPQV9UQUtFTihhZ2VkX3RhaWwsIGhlYWQpID49IHJlcG9y
dF9zaXplOworCXJldHVybiBPQV9UQUtFTihzdHJlYW0tPm9hX2J1ZmZlci50YWlsIC0gZ3R0X29m
ZnNldCwKKwkJCXN0cmVhbS0+b2FfYnVmZmVyLmhlYWQgLSBndHRfb2Zmc2V0KSA+PSByZXBvcnRf
c2l6ZTsKIH0KIAogLyoqCkBAIC02NjIsNyArNjU0LDYgQEAgc3RhdGljIGludCBnZW44X2FwcGVu
ZF9vYV9yZXBvcnRzKHN0cnVjdCBpOTE1X3BlcmZfc3RyZWFtICpzdHJlYW0sCiAJdTMyIG1hc2sg
PSAoT0FfQlVGRkVSX1NJWkUgLSAxKTsKIAlzaXplX3Qgc3RhcnRfb2Zmc2V0ID0gKm9mZnNldDsK
IAl1bnNpZ25lZCBsb25nIGZsYWdzOwotCXVuc2lnbmVkIGludCBhZ2VkX3RhaWxfaWR4OwogCXUz
MiBoZWFkLCB0YWlsOwogCXUzMiB0YWtlbjsKIAlpbnQgcmV0ID0gMDsKQEAgLTY3MywxOCArNjY0
LDEwIEBAIHN0YXRpYyBpbnQgZ2VuOF9hcHBlbmRfb2FfcmVwb3J0cyhzdHJ1Y3QgaTkxNV9wZXJm
X3N0cmVhbSAqc3RyZWFtLAogCXNwaW5fbG9ja19pcnFzYXZlKCZzdHJlYW0tPm9hX2J1ZmZlci5w
dHJfbG9jaywgZmxhZ3MpOwogCiAJaGVhZCA9IHN0cmVhbS0+b2FfYnVmZmVyLmhlYWQ7Ci0JYWdl
ZF90YWlsX2lkeCA9IHN0cmVhbS0+b2FfYnVmZmVyLmFnZWRfdGFpbF9pZHg7Ci0JdGFpbCA9IHN0
cmVhbS0+b2FfYnVmZmVyLnRhaWxzW2FnZWRfdGFpbF9pZHhdLm9mZnNldDsKKwl0YWlsID0gc3Ry
ZWFtLT5vYV9idWZmZXIudGFpbDsKIAogCXNwaW5fdW5sb2NrX2lycXJlc3RvcmUoJnN0cmVhbS0+
b2FfYnVmZmVyLnB0cl9sb2NrLCBmbGFncyk7CiAKLQkvKgotCSAqIEFuIGludmFsaWQgdGFpbCBw
b2ludGVyIGhlcmUgbWVhbnMgd2UncmUgc3RpbGwgd2FpdGluZyBmb3IgdGhlIHBvbGwKLQkgKiBo
cnRpbWVyIGNhbGxiYWNrIHRvIGdpdmUgdXMgYSBwb2ludGVyCi0JICovCi0JaWYgKHRhaWwgPT0g
SU5WQUxJRF9UQUlMX1BUUikKLQkJcmV0dXJuIC1FQUdBSU47Ci0KIAkvKgogCSAqIE5COiBvYV9i
dWZmZXIuaGVhZC90YWlsIGluY2x1ZGUgdGhlIGd0dF9vZmZzZXQgd2hpY2ggd2UgZG9uJ3Qgd2Fu
dAogCSAqIHdoaWxlIGluZGV4aW5nIHJlbGF0aXZlIHRvIG9hX2J1Zl9iYXNlLgpAQCAtODEyLDEz
ICs3OTUsMTAgQEAgc3RhdGljIGludCBnZW44X2FwcGVuZF9vYV9yZXBvcnRzKHN0cnVjdCBpOTE1
X3BlcmZfc3RyZWFtICpzdHJlYW0sCiAJCX0KIAogCQkvKgotCQkgKiBUaGUgYWJvdmUgcmVhc29u
IGZpZWxkIHNhbml0eSBjaGVjayBpcyBiYXNlZCBvbgotCQkgKiB0aGUgYXNzdW1wdGlvbiB0aGF0
IHRoZSBPQSBidWZmZXIgaXMgaW5pdGlhbGx5Ci0JCSAqIHplcm9lZCBhbmQgd2UgcmVzZXQgdGhl
IGZpZWxkIGFmdGVyIGNvcHlpbmcgc28gdGhlCi0JCSAqIGNoZWNrIGlzIHN0aWxsIG1lYW5pbmdm
dWwgb25jZSBvbGQgcmVwb3J0cyBzdGFydAotCQkgKiBiZWluZyBvdmVyd3JpdHRlbi4KKwkJICog
Q2xlYXIgb3V0IHRoZSBmaXJzdCAyIGR3b3JkIGFzIGEgbWVhbiB0byBkZXRlY3QgdW5sYW5kZWQK
KwkJICogcmVwb3J0cy4KIAkJICovCi0JCXJlcG9ydDMyWzBdID0gMDsKKwkJcmVwb3J0MzJbMF0g
PSByZXBvcnQzMlsxXSA9IDA7CiAJfQogCiAJaWYgKHN0YXJ0X29mZnNldCAhPSAqb2Zmc2V0KSB7
CkBAIC05NTAsNyArOTMwLDYgQEAgc3RhdGljIGludCBnZW43X2FwcGVuZF9vYV9yZXBvcnRzKHN0
cnVjdCBpOTE1X3BlcmZfc3RyZWFtICpzdHJlYW0sCiAJdTMyIG1hc2sgPSAoT0FfQlVGRkVSX1NJ
WkUgLSAxKTsKIAlzaXplX3Qgc3RhcnRfb2Zmc2V0ID0gKm9mZnNldDsKIAl1bnNpZ25lZCBsb25n
IGZsYWdzOwotCXVuc2lnbmVkIGludCBhZ2VkX3RhaWxfaWR4OwogCXUzMiBoZWFkLCB0YWlsOwog
CXUzMiB0YWtlbjsKIAlpbnQgcmV0ID0gMDsKQEAgLTk2MSwxNyArOTQwLDEwIEBAIHN0YXRpYyBp
bnQgZ2VuN19hcHBlbmRfb2FfcmVwb3J0cyhzdHJ1Y3QgaTkxNV9wZXJmX3N0cmVhbSAqc3RyZWFt
LAogCXNwaW5fbG9ja19pcnFzYXZlKCZzdHJlYW0tPm9hX2J1ZmZlci5wdHJfbG9jaywgZmxhZ3Mp
OwogCiAJaGVhZCA9IHN0cmVhbS0+b2FfYnVmZmVyLmhlYWQ7Ci0JYWdlZF90YWlsX2lkeCA9IHN0
cmVhbS0+b2FfYnVmZmVyLmFnZWRfdGFpbF9pZHg7Ci0JdGFpbCA9IHN0cmVhbS0+b2FfYnVmZmVy
LnRhaWxzW2FnZWRfdGFpbF9pZHhdLm9mZnNldDsKKwl0YWlsID0gc3RyZWFtLT5vYV9idWZmZXIu
dGFpbDsKIAogCXNwaW5fdW5sb2NrX2lycXJlc3RvcmUoJnN0cmVhbS0+b2FfYnVmZmVyLnB0cl9s
b2NrLCBmbGFncyk7CiAKLQkvKiBBbiBpbnZhbGlkIHRhaWwgcG9pbnRlciBoZXJlIG1lYW5zIHdl
J3JlIHN0aWxsIHdhaXRpbmcgZm9yIHRoZSBwb2xsCi0JICogaHJ0aW1lciBjYWxsYmFjayB0byBn
aXZlIHVzIGEgcG9pbnRlcgotCSAqLwotCWlmICh0YWlsID09IElOVkFMSURfVEFJTF9QVFIpCi0J
CXJldHVybiAtRUFHQUlOOwotCiAJLyogTkI6IG9hX2J1ZmZlci5oZWFkL3RhaWwgaW5jbHVkZSB0
aGUgZ3R0X29mZnNldCB3aGljaCB3ZSBkb24ndCB3YW50CiAJICogd2hpbGUgaW5kZXhpbmcgcmVs
YXRpdmUgdG8gb2FfYnVmX2Jhc2UuCiAJICovCkBAIC0xMDI2LDEzICs5OTgsMTAgQEAgc3RhdGlj
IGludCBnZW43X2FwcGVuZF9vYV9yZXBvcnRzKHN0cnVjdCBpOTE1X3BlcmZfc3RyZWFtICpzdHJl
YW0sCiAJCWlmIChyZXQpCiAJCQlicmVhazsKIAotCQkvKiBUaGUgYWJvdmUgcmVwb3J0LWlkIGZp
ZWxkIHNhbml0eSBjaGVjayBpcyBiYXNlZCBvbgotCQkgKiB0aGUgYXNzdW1wdGlvbiB0aGF0IHRo
ZSBPQSBidWZmZXIgaXMgaW5pdGlhbGx5Ci0JCSAqIHplcm9lZCBhbmQgd2UgcmVzZXQgdGhlIGZp
ZWxkIGFmdGVyIGNvcHlpbmcgc28gdGhlCi0JCSAqIGNoZWNrIGlzIHN0aWxsIG1lYW5pbmdmdWwg
b25jZSBvbGQgcmVwb3J0cyBzdGFydAotCQkgKiBiZWluZyBvdmVyd3JpdHRlbi4KKwkJLyogQ2xl
YXIgb3V0IHRoZSBmaXJzdCAyIGR3b3JkcyBhcyBhIG1lYW4gdG8gZGV0ZWN0IHVubGFuZGVkCisJ
CSAqIHJlcG9ydHMuCiAJCSAqLwotCQlyZXBvcnQzMlswXSA9IDA7CisJCXJlcG9ydDMyWzBdID0g
cmVwb3J0MzJbMV0gPSAwOwogCX0KIAogCWlmIChzdGFydF9vZmZzZXQgIT0gKm9mZnNldCkgewpA
QCAtMTQxMSw4ICsxMzgwLDggQEAgc3RhdGljIHZvaWQgZ2VuN19pbml0X29hX2J1ZmZlcihzdHJ1
Y3QgaTkxNV9wZXJmX3N0cmVhbSAqc3RyZWFtKQogCUk5MTVfV1JJVEUoR0VON19PQVNUQVRVUzEs
IGd0dF9vZmZzZXQgfCBPQUJVRkZFUl9TSVpFXzE2TSk7IC8qIHRhaWwgKi8KIAogCS8qIE1hcmsg
dGhhdCB3ZSBuZWVkIHVwZGF0ZWQgdGFpbCBwb2ludGVycyB0byByZWFkIGZyb20uLi4gKi8KLQlz
dHJlYW0tPm9hX2J1ZmZlci50YWlsc1swXS5vZmZzZXQgPSBJTlZBTElEX1RBSUxfUFRSOwotCXN0
cmVhbS0+b2FfYnVmZmVyLnRhaWxzWzFdLm9mZnNldCA9IElOVkFMSURfVEFJTF9QVFI7CisJc3Ry
ZWFtLT5vYV9idWZmZXIuYWdpbmdfdGFpbCA9CisJCXN0cmVhbS0+b2FfYnVmZmVyLnRhaWwgPSBn
dHRfb2Zmc2V0OwogCiAJc3Bpbl91bmxvY2tfaXJxcmVzdG9yZSgmc3RyZWFtLT5vYV9idWZmZXIu
cHRyX2xvY2ssIGZsYWdzKTsKIApAQCAtMTQ2OCw4ICsxNDM3LDggQEAgc3RhdGljIHZvaWQgZ2Vu
OF9pbml0X29hX2J1ZmZlcihzdHJ1Y3QgaTkxNV9wZXJmX3N0cmVhbSAqc3RyZWFtKQogCUk5MTVf
V1JJVEUoR0VOOF9PQVRBSUxQVFIsIGd0dF9vZmZzZXQgJiBHRU44X09BVEFJTFBUUl9NQVNLKTsK
IAogCS8qIE1hcmsgdGhhdCB3ZSBuZWVkIHVwZGF0ZWQgdGFpbCBwb2ludGVycyB0byByZWFkIGZy
b20uLi4gKi8KLQlzdHJlYW0tPm9hX2J1ZmZlci50YWlsc1swXS5vZmZzZXQgPSBJTlZBTElEX1RB
SUxfUFRSOwotCXN0cmVhbS0+b2FfYnVmZmVyLnRhaWxzWzFdLm9mZnNldCA9IElOVkFMSURfVEFJ
TF9QVFI7CisJc3RyZWFtLT5vYV9idWZmZXIuYWdpbmdfdGFpbCA9CisJCXN0cmVhbS0+b2FfYnVm
ZmVyLnRhaWwgPSBndHRfb2Zmc2V0OwogCiAJLyoKIAkgKiBSZXNldCBzdGF0ZSB1c2VkIHRvIHJl
Y29nbmlzZSBjb250ZXh0IHN3aXRjaGVzLCBhZmZlY3Rpbmcgd2hpY2gKQEAgLTM2NzIsNiArMzY0
MSwxMSBAQCB2b2lkIGk5MTVfcGVyZl9pbml0KHN0cnVjdCBkcm1faTkxNV9wcml2YXRlICpkZXZf
cHJpdikKIAkJcmF0ZWxpbWl0X3NldF9mbGFncygmZGV2X3ByaXYtPnBlcmYuc3B1cmlvdXNfcmVw
b3J0X3JzLAogCQkJCSAgICBSQVRFTElNSVRfTVNHX09OX1JFTEVBU0UpOwogCisJCXJhdGVsaW1p
dF9zdGF0ZV9pbml0KCZkZXZfcHJpdi0+cGVyZi50YWlsX3BvaW50ZXJfcmFjZSwKKwkJCQkgICAg
IDUgKiBIWiwgMTApOworCQlyYXRlbGltaXRfc2V0X2ZsYWdzKCZkZXZfcHJpdi0+cGVyZi50YWls
X3BvaW50ZXJfcmFjZSwKKwkJCQkgICAgUkFURUxJTUlUX01TR19PTl9SRUxFQVNFKTsKKwogCQlk
ZXZfcHJpdi0+cGVyZi5pbml0aWFsaXplZCA9IHRydWU7CiAJfQogfQotLSAKMi4yMC4xCgpfX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpJbnRlbC1nZnggbWFp
bGluZyBsaXN0CkludGVsLWdmeEBsaXN0cy5mcmVlZGVza3RvcC5vcmcKaHR0cHM6Ly9saXN0cy5m
cmVlZGVza3RvcC5vcmcvbWFpbG1hbi9saXN0aW5mby9pbnRlbC1nZng=

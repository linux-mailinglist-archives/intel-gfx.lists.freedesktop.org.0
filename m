Return-Path: <intel-gfx-bounces@lists.freedesktop.org>
X-Original-To: lists+intel-gfx@lfdr.de
Delivered-To: lists+intel-gfx@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [131.252.210.177])
	by mail.lfdr.de (Postfix) with ESMTPS id 14E2E8F612
	for <lists+intel-gfx@lfdr.de>; Thu, 15 Aug 2019 22:57:19 +0200 (CEST)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id BF9AD6EA80;
	Thu, 15 Aug 2019 20:57:16 +0000 (UTC)
X-Original-To: intel-gfx@lists.freedesktop.org
Delivered-To: intel-gfx@lists.freedesktop.org
Received: from fireflyinternet.com (mail.fireflyinternet.com [109.228.58.192])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 9E4DB6EA7F
 for <intel-gfx@lists.freedesktop.org>; Thu, 15 Aug 2019 20:57:13 +0000 (UTC)
X-Default-Received-SPF: pass (skip=forwardok (res=PASS))
 x-ip-name=78.156.65.138; 
Received: from haswell.alporthouse.com (unverified [78.156.65.138]) 
 by fireflyinternet.com (Firefly Internet (M1)) with ESMTP id 18155952-1500050 
 for <intel-gfx@lists.freedesktop.org>; Thu, 15 Aug 2019 21:57:10 +0100
From: Chris Wilson <chris@chris-wilson.co.uk>
To: intel-gfx@lists.freedesktop.org
Date: Thu, 15 Aug 2019 21:57:09 +0100
Message-Id: <20190815205709.24285-4-chris@chris-wilson.co.uk>
X-Mailer: git-send-email 2.23.0.rc1
In-Reply-To: <20190815205709.24285-1-chris@chris-wilson.co.uk>
References: <20190815205709.24285-1-chris@chris-wilson.co.uk>
MIME-Version: 1.0
Subject: [Intel-gfx] [CI 4/4] drm/i915: Protect request retirement with
 timeline->mutex
X-BeenThere: intel-gfx@lists.freedesktop.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: Intel graphics driver community testing & development
 <intel-gfx.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/intel-gfx>
List-Post: <mailto:intel-gfx@lists.freedesktop.org>
List-Help: <mailto:intel-gfx-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: intel-gfx-bounces@lists.freedesktop.org
Sender: "Intel-gfx" <intel-gfx-bounces@lists.freedesktop.org>

Rm9yZ28gdGhlIHN0cnVjdF9tdXRleCByZXF1aXJlbWVudCBmb3IgcmVxdWVzdCByZXRpcmVtZW50
IGFzIHdlIGhhdmUKYmVlbiB0cmFuc2l0aW9uaW5nIG92ZXIgdG8gb25seSB1c2luZyB0aGUgdGlt
ZWxpbmUtPm11dGV4IGZvcgpjb250cm9sbGluZyB0aGUgbGlmZXRpbWUgb2YgYSByZXF1ZXN0IG9u
IHRoYXQgdGltZWxpbmUuCgpTaWduZWQtb2ZmLWJ5OiBDaHJpcyBXaWxzb24gPGNocmlzQGNocmlz
LXdpbHNvbi5jby51az4KUmV2aWV3ZWQtYnk6IE1hdHRoZXcgQXVsZCA8bWF0dGhldy5hdWxkQGlu
dGVsLmNvbT4KLS0tCiAuLi4vZ3B1L2RybS9pOTE1L2dlbS9pOTE1X2dlbV9leGVjYnVmZmVyLmMg
ICAgfCAxODMgKysrKysrKysrKy0tLS0tLS0tCiBkcml2ZXJzL2dwdS9kcm0vaTkxNS9ndC9pbnRl
bF9jb250ZXh0LmggICAgICAgfCAgMTggKy0KIGRyaXZlcnMvZ3B1L2RybS9pOTE1L2d0L2ludGVs
X2VuZ2luZV9jcy5jICAgICB8ICAgMSAtCiBkcml2ZXJzL2dwdS9kcm0vaTkxNS9ndC9pbnRlbF9l
bmdpbmVfdHlwZXMuaCAgfCAgIDMgLQogZHJpdmVycy9ncHUvZHJtL2k5MTUvZ3QvaW50ZWxfZ3Qu
YyAgICAgICAgICAgIHwgICAyIC0KIGRyaXZlcnMvZ3B1L2RybS9pOTE1L2d0L2ludGVsX2d0X3R5
cGVzLmggICAgICB8ICAgMiAtCiBkcml2ZXJzL2dwdS9kcm0vaTkxNS9ndC9pbnRlbF9scmMuYyAg
ICAgICAgICAgfCAgIDEgKwogZHJpdmVycy9ncHUvZHJtL2k5MTUvZ3QvaW50ZWxfcmluZ2J1ZmZl
ci5jICAgIHwgIDE5ICstCiBkcml2ZXJzL2dwdS9kcm0vaTkxNS9ndC9tb2NrX2VuZ2luZS5jICAg
ICAgICAgfCAgIDEgLQogZHJpdmVycy9ncHUvZHJtL2k5MTUvZ3Qvc2VsZnRlc3RfY29udGV4dC5j
ICAgIHwgICA5ICstCiBkcml2ZXJzL2dwdS9kcm0vaTkxNS9pOTE1X3JlcXVlc3QuYyAgICAgICAg
ICAgfCAxNTYgKysrKysrKy0tLS0tLS0tCiBkcml2ZXJzL2dwdS9kcm0vaTkxNS9pOTE1X3JlcXVl
c3QuaCAgICAgICAgICAgfCAgIDMgLQogMTIgZmlsZXMgY2hhbmdlZCwgMjA5IGluc2VydGlvbnMo
KyksIDE4OSBkZWxldGlvbnMoLSkKCmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9n
ZW0vaTkxNV9nZW1fZXhlY2J1ZmZlci5jIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvZ2VtL2k5MTVf
Z2VtX2V4ZWNidWZmZXIuYwppbmRleCA5MTUxMmNjNmQ3YTYuLjEyNjNiMDIwMTFmNCAxMDA2NDQK
LS0tIGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvZ2VtL2k5MTVfZ2VtX2V4ZWNidWZmZXIuYworKysg
Yi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9nZW0vaTkxNV9nZW1fZXhlY2J1ZmZlci5jCkBAIC03MzUs
NjMgKzczNSw2IEBAIHN0YXRpYyBpbnQgZWJfc2VsZWN0X2NvbnRleHQoc3RydWN0IGk5MTVfZXhl
Y2J1ZmZlciAqZWIpCiAJcmV0dXJuIDA7CiB9CiAKLXN0YXRpYyBzdHJ1Y3QgaTkxNV9yZXF1ZXN0
ICpfX2ViX3dhaXRfZm9yX3Jpbmcoc3RydWN0IGludGVsX3JpbmcgKnJpbmcpCi17Ci0Jc3RydWN0
IGk5MTVfcmVxdWVzdCAqcnE7Ci0KLQkvKgotCSAqIENvbXBsZXRlbHkgdW5zY2llbnRpZmljIGZp
bmdlci1pbi10aGUtYWlyIGVzdGltYXRlcyBmb3Igc3VpdGFibGUKLQkgKiBtYXhpbXVtIHVzZXIg
cmVxdWVzdCBzaXplICh0byBhdm9pZCBibG9ja2luZykgYW5kIHRoZW4gYmFja29mZi4KLQkgKi8K
LQlpZiAoaW50ZWxfcmluZ191cGRhdGVfc3BhY2UocmluZykgPj0gUEFHRV9TSVpFKQotCQlyZXR1
cm4gTlVMTDsKLQotCS8qCi0JICogRmluZCBhIHJlcXVlc3QgdGhhdCBhZnRlciB3YWl0aW5nIHVw
b24sIHRoZXJlIHdpbGwgYmUgYXQgbGVhc3QgaGFsZgotCSAqIHRoZSByaW5nIGF2YWlsYWJsZS4g
VGhlIGh5c3RlcmVzaXMgYWxsb3dzIHVzIHRvIGNvbXBldGUgZm9yIHRoZQotCSAqIHNoYXJlZCBy
aW5nIGFuZCBzaG91bGQgbWVhbiB0aGF0IHdlIHNsZWVwIGxlc3Mgb2Z0ZW4gcHJpb3IgdG8KLQkg
KiBjbGFpbWluZyBvdXIgcmVzb3VyY2VzLCBidXQgbm90IHNvIGxvbmcgdGhhdCB0aGUgcmluZyBj
b21wbGV0ZWx5Ci0JICogZHJhaW5zIGJlZm9yZSB3ZSBjYW4gc3VibWl0IG91ciBuZXh0IHJlcXVl
c3QuCi0JICovCi0JbGlzdF9mb3JfZWFjaF9lbnRyeShycSwgJnJpbmctPnJlcXVlc3RfbGlzdCwg
cmluZ19saW5rKSB7Ci0JCWlmIChfX2ludGVsX3Jpbmdfc3BhY2UocnEtPnBvc3RmaXgsCi0JCQkJ
ICAgICAgIHJpbmctPmVtaXQsIHJpbmctPnNpemUpID4gcmluZy0+c2l6ZSAvIDIpCi0JCQlicmVh
azsKLQl9Ci0JaWYgKCZycS0+cmluZ19saW5rID09ICZyaW5nLT5yZXF1ZXN0X2xpc3QpCi0JCXJl
dHVybiBOVUxMOyAvKiB3ZWlyZCwgd2Ugd2lsbCBjaGVjayBhZ2FpbiBsYXRlciBmb3IgcmVhbCAq
LwotCi0JcmV0dXJuIGk5MTVfcmVxdWVzdF9nZXQocnEpOwotfQotCi1zdGF0aWMgaW50IGViX3dh
aXRfZm9yX3JpbmcoY29uc3Qgc3RydWN0IGk5MTVfZXhlY2J1ZmZlciAqZWIpCi17Ci0Jc3RydWN0
IGk5MTVfcmVxdWVzdCAqcnE7Ci0JaW50IHJldCA9IDA7Ci0KLQkvKgotCSAqIEFwcGx5IGEgbGln
aHQgYW1vdW50IG9mIGJhY2twcmVzc3VyZSB0byBwcmV2ZW50IGV4Y2Vzc2l2ZSBob2dzCi0JICog
ZnJvbSBibG9ja2luZyB3YWl0aW5nIGZvciBzcGFjZSB3aGlsc3QgaG9sZGluZyBzdHJ1Y3RfbXV0
ZXggYW5kCi0JICoga2VlcGluZyBhbGwgb2YgdGhlaXIgcmVzb3VyY2VzIHBpbm5lZC4KLQkgKi8K
LQotCXJxID0gX19lYl93YWl0X2Zvcl9yaW5nKGViLT5jb250ZXh0LT5yaW5nKTsKLQlpZiAocnEp
IHsKLQkJbXV0ZXhfdW5sb2NrKCZlYi0+aTkxNS0+ZHJtLnN0cnVjdF9tdXRleCk7Ci0KLQkJaWYg
KGk5MTVfcmVxdWVzdF93YWl0KHJxLAotCQkJCSAgICAgIEk5MTVfV0FJVF9JTlRFUlJVUFRJQkxF
LAotCQkJCSAgICAgIE1BWF9TQ0hFRFVMRV9USU1FT1VUKSA8IDApCi0JCQlyZXQgPSAtRUlOVFI7
Ci0KLQkJaTkxNV9yZXF1ZXN0X3B1dChycSk7Ci0KLQkJbXV0ZXhfbG9jaygmZWItPmk5MTUtPmRy
bS5zdHJ1Y3RfbXV0ZXgpOwotCX0KLQotCXJldHVybiByZXQ7Ci19Ci0KIHN0YXRpYyBpbnQgZWJf
bG9va3VwX3ZtYXMoc3RydWN0IGk5MTVfZXhlY2J1ZmZlciAqZWIpCiB7CiAJc3RydWN0IHJhZGl4
X3RyZWVfcm9vdCAqaGFuZGxlc192bWEgPSAmZWItPmdlbV9jb250ZXh0LT5oYW5kbGVzX3ZtYTsK
QEAgLTIxMzIsMTAgKzIwNzUsNzUgQEAgc3RhdGljIGNvbnN0IGVudW0gaW50ZWxfZW5naW5lX2lk
IHVzZXJfcmluZ19tYXBbXSA9IHsKIAlbSTkxNV9FWEVDX1ZFQk9YXQk9IFZFQ1MwCiB9OwogCi1z
dGF0aWMgaW50IGViX3Bpbl9jb250ZXh0KHN0cnVjdCBpOTE1X2V4ZWNidWZmZXIgKmViLCBzdHJ1
Y3QgaW50ZWxfY29udGV4dCAqY2UpCitzdGF0aWMgc3RydWN0IGk5MTVfcmVxdWVzdCAqZWJfdGhy
b3R0bGUoc3RydWN0IGludGVsX2NvbnRleHQgKmNlKQoreworCXN0cnVjdCBpbnRlbF9yaW5nICpy
aW5nID0gY2UtPnJpbmc7CisJc3RydWN0IGludGVsX3RpbWVsaW5lICp0bCA9IGNlLT50aW1lbGlu
ZTsKKwlzdHJ1Y3QgaTkxNV9yZXF1ZXN0ICpycTsKKworCS8qCisJICogQ29tcGxldGVseSB1bnNj
aWVudGlmaWMgZmluZ2VyLWluLXRoZS1haXIgZXN0aW1hdGVzIGZvciBzdWl0YWJsZQorCSAqIG1h
eGltdW0gdXNlciByZXF1ZXN0IHNpemUgKHRvIGF2b2lkIGJsb2NraW5nKSBhbmQgdGhlbiBiYWNr
b2ZmLgorCSAqLworCWlmIChpbnRlbF9yaW5nX3VwZGF0ZV9zcGFjZShyaW5nKSA+PSBQQUdFX1NJ
WkUpCisJCXJldHVybiBOVUxMOworCisJLyoKKwkgKiBGaW5kIGEgcmVxdWVzdCB0aGF0IGFmdGVy
IHdhaXRpbmcgdXBvbiwgdGhlcmUgd2lsbCBiZSBhdCBsZWFzdCBoYWxmCisJICogdGhlIHJpbmcg
YXZhaWxhYmxlLiBUaGUgaHlzdGVyZXNpcyBhbGxvd3MgdXMgdG8gY29tcGV0ZSBmb3IgdGhlCisJ
ICogc2hhcmVkIHJpbmcgYW5kIHNob3VsZCBtZWFuIHRoYXQgd2Ugc2xlZXAgbGVzcyBvZnRlbiBw
cmlvciB0bworCSAqIGNsYWltaW5nIG91ciByZXNvdXJjZXMsIGJ1dCBub3Qgc28gbG9uZyB0aGF0
IHRoZSByaW5nIGNvbXBsZXRlbHkKKwkgKiBkcmFpbnMgYmVmb3JlIHdlIGNhbiBzdWJtaXQgb3Vy
IG5leHQgcmVxdWVzdC4KKwkgKi8KKwlsaXN0X2Zvcl9lYWNoX2VudHJ5KHJxLCAmdGwtPnJlcXVl
c3RzLCBsaW5rKSB7CisJCWlmIChycS0+cmluZyAhPSByaW5nKQorCQkJY29udGludWU7CisKKwkJ
aWYgKF9faW50ZWxfcmluZ19zcGFjZShycS0+cG9zdGZpeCwKKwkJCQkgICAgICAgcmluZy0+ZW1p
dCwgcmluZy0+c2l6ZSkgPiByaW5nLT5zaXplIC8gMikKKwkJCWJyZWFrOworCX0KKwlpZiAoJnJx
LT5saW5rID09ICZ0bC0+cmVxdWVzdHMpCisJCXJldHVybiBOVUxMOyAvKiB3ZWlyZCwgd2Ugd2ls
bCBjaGVjayBhZ2FpbiBsYXRlciBmb3IgcmVhbCAqLworCisJcmV0dXJuIGk5MTVfcmVxdWVzdF9n
ZXQocnEpOworfQorCitzdGF0aWMgaW50CitfX2ViX3Bpbl9jb250ZXh0KHN0cnVjdCBpOTE1X2V4
ZWNidWZmZXIgKmViLCBzdHJ1Y3QgaW50ZWxfY29udGV4dCAqY2UpCiB7CiAJaW50IGVycjsKIAor
CWlmIChsaWtlbHkoYXRvbWljX2luY19ub3RfemVybygmY2UtPnBpbl9jb3VudCkpKQorCQlyZXR1
cm4gMDsKKworCWVyciA9IG11dGV4X2xvY2tfaW50ZXJydXB0aWJsZSgmZWItPmk5MTUtPmRybS5z
dHJ1Y3RfbXV0ZXgpOworCWlmIChlcnIpCisJCXJldHVybiBlcnI7CisKKwllcnIgPSBfX2ludGVs
X2NvbnRleHRfZG9fcGluKGNlKTsKKwltdXRleF91bmxvY2soJmViLT5pOTE1LT5kcm0uc3RydWN0
X211dGV4KTsKKworCXJldHVybiBlcnI7Cit9CisKK3N0YXRpYyB2b2lkCitfX2ViX3VucGluX2Nv
bnRleHQoc3RydWN0IGk5MTVfZXhlY2J1ZmZlciAqZWIsIHN0cnVjdCBpbnRlbF9jb250ZXh0ICpj
ZSkKK3sKKwlpZiAobGlrZWx5KGF0b21pY19hZGRfdW5sZXNzKCZjZS0+cGluX2NvdW50LCAtMSwg
MSkpKQorCQlyZXR1cm47CisKKwltdXRleF9sb2NrKCZlYi0+aTkxNS0+ZHJtLnN0cnVjdF9tdXRl
eCk7CisJaW50ZWxfY29udGV4dF91bnBpbihjZSk7CisJbXV0ZXhfdW5sb2NrKCZlYi0+aTkxNS0+
ZHJtLnN0cnVjdF9tdXRleCk7Cit9CisKK3N0YXRpYyBpbnQgX19lYl9waW5fZW5naW5lKHN0cnVj
dCBpOTE1X2V4ZWNidWZmZXIgKmViLCBzdHJ1Y3QgaW50ZWxfY29udGV4dCAqY2UpCit7CisJc3Ry
dWN0IGludGVsX3RpbWVsaW5lICp0bDsKKwlzdHJ1Y3QgaTkxNV9yZXF1ZXN0ICpycTsKKwlpbnQg
ZXJyOworCiAJLyoKIAkgKiBBQkk6IEJlZm9yZSB1c2Vyc3BhY2UgYWNjZXNzZXMgdGhlIEdQVSAo
ZS5nLiBleGVjYnVmZmVyKSwgcmVwb3J0CiAJICogRUlPIGlmIHRoZSBHUFUgaXMgYWxyZWFkeSB3
ZWRnZWQuCkBAIC0yMTQ5LDcgKzIxNTcsNyBAQCBzdGF0aWMgaW50IGViX3Bpbl9jb250ZXh0KHN0
cnVjdCBpOTE1X2V4ZWNidWZmZXIgKmViLCBzdHJ1Y3QgaW50ZWxfY29udGV4dCAqY2UpCiAJICog
R0dUVCBzcGFjZSwgc28gZG8gdGhpcyBmaXJzdCBiZWZvcmUgd2UgcmVzZXJ2ZSBhIHNlcW5vIGZv
cgogCSAqIG91cnNlbHZlcy4KIAkgKi8KLQllcnIgPSBpbnRlbF9jb250ZXh0X3BpbihjZSk7CisJ
ZXJyID0gX19lYl9waW5fY29udGV4dChlYiwgY2UpOwogCWlmIChlcnIpCiAJCXJldHVybiBlcnI7
CiAKQEAgLTIxNjEsMjMgKzIxNjksNDMgQEAgc3RhdGljIGludCBlYl9waW5fY29udGV4dChzdHJ1
Y3QgaTkxNV9leGVjYnVmZmVyICplYiwgc3RydWN0IGludGVsX2NvbnRleHQgKmNlKQogCSAqIHVu
dGlsIHRoZSB0aW1lbGluZSBpcyBpZGxlLCB3aGljaCBpbiB0dXJuIHJlbGVhc2VzIHRoZSB3YWtl
cmVmCiAJICogdGFrZW4gb24gdGhlIGVuZ2luZSwgYW5kIHRoZSBwYXJlbnQgZGV2aWNlLgogCSAq
LwotCWVyciA9IGludGVsX2NvbnRleHRfdGltZWxpbmVfbG9jayhjZSk7Ci0JaWYgKGVycikKKwl0
bCA9IGludGVsX2NvbnRleHRfdGltZWxpbmVfbG9jayhjZSk7CisJaWYgKElTX0VSUih0bCkpIHsK
KwkJZXJyID0gUFRSX0VSUih0bCk7CiAJCWdvdG8gZXJyX3VucGluOworCX0KIAogCWludGVsX2Nv
bnRleHRfZW50ZXIoY2UpOwotCWludGVsX2NvbnRleHRfdGltZWxpbmVfdW5sb2NrKGNlKTsKKwly
cSA9IGViX3Rocm90dGxlKGNlKTsKKworCWludGVsX2NvbnRleHRfdGltZWxpbmVfdW5sb2NrKHRs
KTsKKworCWlmIChycSkgeworCQlpZiAoaTkxNV9yZXF1ZXN0X3dhaXQocnEsCisJCQkJICAgICAg
STkxNV9XQUlUX0lOVEVSUlVQVElCTEUsCisJCQkJICAgICAgTUFYX1NDSEVEVUxFX1RJTUVPVVQp
IDwgMCkgeworCQkJaTkxNV9yZXF1ZXN0X3B1dChycSk7CisJCQllcnIgPSAtRUlOVFI7CisJCQln
b3RvIGVycl9leGl0OworCQl9CisKKwkJaTkxNV9yZXF1ZXN0X3B1dChycSk7CisJfQogCiAJZWIt
PmVuZ2luZSA9IGNlLT5lbmdpbmU7CiAJZWItPmNvbnRleHQgPSBjZTsKIAlyZXR1cm4gMDsKIAor
ZXJyX2V4aXQ6CisJbXV0ZXhfbG9jaygmdGwtPm11dGV4KTsKKwlpbnRlbF9jb250ZXh0X2V4aXQo
Y2UpOworCWludGVsX2NvbnRleHRfdGltZWxpbmVfdW5sb2NrKHRsKTsKIGVycl91bnBpbjoKLQlp
bnRlbF9jb250ZXh0X3VucGluKGNlKTsKKwlfX2ViX3VucGluX2NvbnRleHQoZWIsIGNlKTsKIAly
ZXR1cm4gZXJyOwogfQogCi1zdGF0aWMgdm9pZCBlYl91bnBpbl9jb250ZXh0KHN0cnVjdCBpOTE1
X2V4ZWNidWZmZXIgKmViKQorc3RhdGljIHZvaWQgZWJfdW5waW5fZW5naW5lKHN0cnVjdCBpOTE1
X2V4ZWNidWZmZXIgKmViKQogewogCXN0cnVjdCBpbnRlbF9jb250ZXh0ICpjZSA9IGViLT5jb250
ZXh0OwogCXN0cnVjdCBpbnRlbF90aW1lbGluZSAqdGwgPSBjZS0+dGltZWxpbmU7CkBAIC0yMTg2
LDcgKzIyMTQsNyBAQCBzdGF0aWMgdm9pZCBlYl91bnBpbl9jb250ZXh0KHN0cnVjdCBpOTE1X2V4
ZWNidWZmZXIgKmViKQogCWludGVsX2NvbnRleHRfZXhpdChjZSk7CiAJbXV0ZXhfdW5sb2NrKCZ0
bC0+bXV0ZXgpOwogCi0JaW50ZWxfY29udGV4dF91bnBpbihjZSk7CisJX19lYl91bnBpbl9jb250
ZXh0KGViLCBjZSk7CiB9CiAKIHN0YXRpYyB1bnNpZ25lZCBpbnQKQEAgLTIyMzEsOSArMjI1OSw5
IEBAIGViX3NlbGVjdF9sZWdhY3lfcmluZyhzdHJ1Y3QgaTkxNV9leGVjYnVmZmVyICplYiwKIH0K
IAogc3RhdGljIGludAotZWJfc2VsZWN0X2VuZ2luZShzdHJ1Y3QgaTkxNV9leGVjYnVmZmVyICpl
YiwKLQkJIHN0cnVjdCBkcm1fZmlsZSAqZmlsZSwKLQkJIHN0cnVjdCBkcm1faTkxNV9nZW1fZXhl
Y2J1ZmZlcjIgKmFyZ3MpCitlYl9waW5fZW5naW5lKHN0cnVjdCBpOTE1X2V4ZWNidWZmZXIgKmVi
LAorCSAgICAgIHN0cnVjdCBkcm1fZmlsZSAqZmlsZSwKKwkgICAgICBzdHJ1Y3QgZHJtX2k5MTVf
Z2VtX2V4ZWNidWZmZXIyICphcmdzKQogewogCXN0cnVjdCBpbnRlbF9jb250ZXh0ICpjZTsKIAl1
bnNpZ25lZCBpbnQgaWR4OwpAQCAtMjI0OCw3ICsyMjc2LDcgQEAgZWJfc2VsZWN0X2VuZ2luZShz
dHJ1Y3QgaTkxNV9leGVjYnVmZmVyICplYiwKIAlpZiAoSVNfRVJSKGNlKSkKIAkJcmV0dXJuIFBU
Ul9FUlIoY2UpOwogCi0JZXJyID0gZWJfcGluX2NvbnRleHQoZWIsIGNlKTsKKwllcnIgPSBfX2Vi
X3Bpbl9lbmdpbmUoZWIsIGNlKTsKIAlpbnRlbF9jb250ZXh0X3B1dChjZSk7CiAKIAlyZXR1cm4g
ZXJyOwpAQCAtMjQ2NiwxNiArMjQ5NCwxMiBAQCBpOTE1X2dlbV9kb19leGVjYnVmZmVyKHN0cnVj
dCBkcm1fZGV2aWNlICpkZXYsCiAJaWYgKHVubGlrZWx5KGVycikpCiAJCWdvdG8gZXJyX2Rlc3Ry
b3k7CiAKLQllcnIgPSBpOTE1X211dGV4X2xvY2tfaW50ZXJydXB0aWJsZShkZXYpOwotCWlmIChl
cnIpCi0JCWdvdG8gZXJyX2NvbnRleHQ7Ci0KLQllcnIgPSBlYl9zZWxlY3RfZW5naW5lKCZlYiwg
ZmlsZSwgYXJncyk7CisJZXJyID0gZWJfcGluX2VuZ2luZSgmZWIsIGZpbGUsIGFyZ3MpOwogCWlm
ICh1bmxpa2VseShlcnIpKQotCQlnb3RvIGVycl91bmxvY2s7CisJCWdvdG8gZXJyX2NvbnRleHQ7
CiAKLQllcnIgPSBlYl93YWl0X2Zvcl9yaW5nKCZlYik7IC8qIG1heSB0ZW1wb3JhcmlseSBkcm9w
IHN0cnVjdF9tdXRleCAqLwotCWlmICh1bmxpa2VseShlcnIpKQorCWVyciA9IGk5MTVfbXV0ZXhf
bG9ja19pbnRlcnJ1cHRpYmxlKGRldik7CisJaWYgKGVycikKIAkJZ290byBlcnJfZW5naW5lOwog
CiAJZXJyID0gZWJfcmVsb2NhdGUoJmViKTsKQEAgLTI2MzMsMTAgKzI2NTcsOSBAQCBpOTE1X2dl
bV9kb19leGVjYnVmZmVyKHN0cnVjdCBkcm1fZGV2aWNlICpkZXYsCiBlcnJfdm1hOgogCWlmIChl
Yi5leGVjKQogCQllYl9yZWxlYXNlX3ZtYXMoJmViKTsKLWVycl9lbmdpbmU6Ci0JZWJfdW5waW5f
Y29udGV4dCgmZWIpOwotZXJyX3VubG9jazoKIAltdXRleF91bmxvY2soJmRldi0+c3RydWN0X211
dGV4KTsKK2Vycl9lbmdpbmU6CisJZWJfdW5waW5fZW5naW5lKCZlYik7CiBlcnJfY29udGV4dDoK
IAlpOTE1X2dlbV9jb250ZXh0X3B1dChlYi5nZW1fY29udGV4dCk7CiBlcnJfZGVzdHJveToKZGlm
ZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2d0L2ludGVsX2NvbnRleHQuaCBiL2RyaXZl
cnMvZ3B1L2RybS9pOTE1L2d0L2ludGVsX2NvbnRleHQuaAppbmRleCA5ZmE4YjU4OGYxOGUuLjA1
M2ExMzA3ZWNiNCAxMDA2NDQKLS0tIGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvZ3QvaW50ZWxfY29u
dGV4dC5oCisrKyBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2d0L2ludGVsX2NvbnRleHQuaApAQCAt
MTIsNiArMTIsNyBAQAogI2luY2x1ZGUgImk5MTVfYWN0aXZlLmgiCiAjaW5jbHVkZSAiaW50ZWxf
Y29udGV4dF90eXBlcy5oIgogI2luY2x1ZGUgImludGVsX2VuZ2luZV90eXBlcy5oIgorI2luY2x1
ZGUgImludGVsX3RpbWVsaW5lX3R5cGVzLmgiCiAKIHZvaWQgaW50ZWxfY29udGV4dF9pbml0KHN0
cnVjdCBpbnRlbF9jb250ZXh0ICpjZSwKIAkJCXN0cnVjdCBpOTE1X2dlbV9jb250ZXh0ICpjdHgs
CkBAIC0xMTgsMTcgKzExOSwyNCBAQCBzdGF0aWMgaW5saW5lIHZvaWQgaW50ZWxfY29udGV4dF9w
dXQoc3RydWN0IGludGVsX2NvbnRleHQgKmNlKQogCWtyZWZfcHV0KCZjZS0+cmVmLCBjZS0+b3Bz
LT5kZXN0cm95KTsKIH0KIAotc3RhdGljIGlubGluZSBpbnQgX19tdXN0X2NoZWNrCitzdGF0aWMg
aW5saW5lIHN0cnVjdCBpbnRlbF90aW1lbGluZSAqX19tdXN0X2NoZWNrCiBpbnRlbF9jb250ZXh0
X3RpbWVsaW5lX2xvY2soc3RydWN0IGludGVsX2NvbnRleHQgKmNlKQogCV9fYWNxdWlyZXMoJmNl
LT50aW1lbGluZS0+bXV0ZXgpCiB7Ci0JcmV0dXJuIG11dGV4X2xvY2tfaW50ZXJydXB0aWJsZSgm
Y2UtPnRpbWVsaW5lLT5tdXRleCk7CisJc3RydWN0IGludGVsX3RpbWVsaW5lICp0bCA9IGNlLT50
aW1lbGluZTsKKwlpbnQgZXJyOworCisJZXJyID0gbXV0ZXhfbG9ja19pbnRlcnJ1cHRpYmxlKCZ0
bC0+bXV0ZXgpOworCWlmIChlcnIpCisJCXJldHVybiBFUlJfUFRSKGVycik7CisKKwlyZXR1cm4g
dGw7CiB9CiAKLXN0YXRpYyBpbmxpbmUgdm9pZCBpbnRlbF9jb250ZXh0X3RpbWVsaW5lX3VubG9j
ayhzdHJ1Y3QgaW50ZWxfY29udGV4dCAqY2UpCi0JX19yZWxlYXNlcygmY2UtPnRpbWVsaW5lLT5t
dXRleCkKK3N0YXRpYyBpbmxpbmUgdm9pZCBpbnRlbF9jb250ZXh0X3RpbWVsaW5lX3VubG9jayhz
dHJ1Y3QgaW50ZWxfdGltZWxpbmUgKnRsKQorCV9fcmVsZWFzZXMoJnRsLT5tdXRleCkKIHsKLQlt
dXRleF91bmxvY2soJmNlLT50aW1lbGluZS0+bXV0ZXgpOworCW11dGV4X3VubG9jaygmdGwtPm11
dGV4KTsKIH0KIAogaW50IGludGVsX2NvbnRleHRfcHJlcGFyZV9yZW1vdGVfcmVxdWVzdChzdHJ1
Y3QgaW50ZWxfY29udGV4dCAqY2UsCmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9n
dC9pbnRlbF9lbmdpbmVfY3MuYyBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2d0L2ludGVsX2VuZ2lu
ZV9jcy5jCmluZGV4IGQyMDc1MGU0MjBjMC4uOTU3ZjI3YTJlYzk3IDEwMDY0NAotLS0gYS9kcml2
ZXJzL2dwdS9kcm0vaTkxNS9ndC9pbnRlbF9lbmdpbmVfY3MuYworKysgYi9kcml2ZXJzL2dwdS9k
cm0vaTkxNS9ndC9pbnRlbF9lbmdpbmVfY3MuYwpAQCAtNjc5LDcgKzY3OSw2IEBAIHN0YXRpYyBp
bnQgbWVhc3VyZV9icmVhZGNydW1iX2R3KHN0cnVjdCBpbnRlbF9lbmdpbmVfY3MgKmVuZ2luZSkK
IAkJCQllbmdpbmUtPnN0YXR1c19wYWdlLnZtYSkpCiAJCWdvdG8gb3V0X2ZyYW1lOwogCi0JSU5J
VF9MSVNUX0hFQUQoJmZyYW1lLT5yaW5nLnJlcXVlc3RfbGlzdCk7CiAJZnJhbWUtPnJpbmcudmFk
ZHIgPSBmcmFtZS0+Y3M7CiAJZnJhbWUtPnJpbmcuc2l6ZSA9IHNpemVvZihmcmFtZS0+Y3MpOwog
CWZyYW1lLT5yaW5nLmVmZmVjdGl2ZV9zaXplID0gZnJhbWUtPnJpbmcuc2l6ZTsKZGlmZiAtLWdp
dCBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2d0L2ludGVsX2VuZ2luZV90eXBlcy5oIGIvZHJpdmVy
cy9ncHUvZHJtL2k5MTUvZ3QvaW50ZWxfZW5naW5lX3R5cGVzLmgKaW5kZXggYTBmMzcyODA3ZGQ0
Li45OTY1YTMyNjAxZDYgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2d0L2ludGVs
X2VuZ2luZV90eXBlcy5oCisrKyBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2d0L2ludGVsX2VuZ2lu
ZV90eXBlcy5oCkBAIC02OSw5ICs2OSw2IEBAIHN0cnVjdCBpbnRlbF9yaW5nIHsKIAlzdHJ1Y3Qg
aTkxNV92bWEgKnZtYTsKIAl2b2lkICp2YWRkcjsKIAotCXN0cnVjdCBsaXN0X2hlYWQgcmVxdWVz
dF9saXN0OwotCXN0cnVjdCBsaXN0X2hlYWQgYWN0aXZlX2xpbms7Ci0KIAkvKgogCSAqIEFzIHdl
IGhhdmUgdHdvIHR5cGVzIG9mIHJpbmdzLCBvbmUgZ2xvYmFsIHRvIHRoZSBlbmdpbmUgdXNlZAog
CSAqIGJ5IHJpbmdidWZmZXIgc3VibWlzc2lvbiBhbmQgdGhvc2UgdGhhdCBhcmUgZXhjbHVzaXZl
IHRvIGEKZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2d0L2ludGVsX2d0LmMgYi9k
cml2ZXJzL2dwdS9kcm0vaTkxNS9ndC9pbnRlbF9ndC5jCmluZGV4IDkxNGJkMmRiM2JjNy4uZDQ4
ZWM5YTc2ZWQxIDEwMDY0NAotLS0gYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9ndC9pbnRlbF9ndC5j
CisrKyBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2d0L2ludGVsX2d0LmMKQEAgLTE1LDggKzE1LDYg
QEAgdm9pZCBpbnRlbF9ndF9pbml0X2Vhcmx5KHN0cnVjdCBpbnRlbF9ndCAqZ3QsIHN0cnVjdCBk
cm1faTkxNV9wcml2YXRlICppOTE1KQogCiAJc3Bpbl9sb2NrX2luaXQoJmd0LT5pcnFfbG9jayk7
CiAKLQlJTklUX0xJU1RfSEVBRCgmZ3QtPmFjdGl2ZV9yaW5ncyk7Ci0KIAlJTklUX0xJU1RfSEVB
RCgmZ3QtPmNsb3NlZF92bWEpOwogCXNwaW5fbG9ja19pbml0KCZndC0+Y2xvc2VkX2xvY2spOwog
CmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9ndC9pbnRlbF9ndF90eXBlcy5oIGIv
ZHJpdmVycy9ncHUvZHJtL2k5MTUvZ3QvaW50ZWxfZ3RfdHlwZXMuaAppbmRleCAxNDNiMmQ3OGMy
Y2MuLmY4ODJlMmNmMTU5YyAxMDA2NDQKLS0tIGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvZ3QvaW50
ZWxfZ3RfdHlwZXMuaAorKysgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9ndC9pbnRlbF9ndF90eXBl
cy5oCkBAIC00OCw4ICs0OCw2IEBAIHN0cnVjdCBpbnRlbF9ndCB7CiAJCXN0cnVjdCBsaXN0X2hl
YWQgaHdzcF9mcmVlX2xpc3Q7CiAJfSB0aW1lbGluZXM7CiAKLQlzdHJ1Y3QgbGlzdF9oZWFkIGFj
dGl2ZV9yaW5nczsKLQogCXN0cnVjdCBpbnRlbF93YWtlcmVmIHdha2VyZWY7CiAKIAlzdHJ1Y3Qg
bGlzdF9oZWFkIGNsb3NlZF92bWE7CmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9n
dC9pbnRlbF9scmMuYyBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2d0L2ludGVsX2xyYy5jCmluZGV4
IGI0YzI2NjJkYmM3NS4uZTk4NjNmNGQ4MjZiIDEwMDY0NAotLS0gYS9kcml2ZXJzL2dwdS9kcm0v
aTkxNS9ndC9pbnRlbF9scmMuYworKysgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9ndC9pbnRlbF9s
cmMuYwpAQCAtMTU4Myw2ICsxNTgzLDcgQEAgc3RhdGljIHZvaWQgZXhlY2xpc3RzX2NvbnRleHRf
dW5waW4oc3RydWN0IGludGVsX2NvbnRleHQgKmNlKQogewogCWk5MTVfZ2VtX2NvbnRleHRfdW5w
aW5faHdfaWQoY2UtPmdlbV9jb250ZXh0KTsKIAlpOTE1X2dlbV9vYmplY3RfdW5waW5fbWFwKGNl
LT5zdGF0ZS0+b2JqKTsKKwlpbnRlbF9yaW5nX3Jlc2V0KGNlLT5yaW5nLCBjZS0+cmluZy0+dGFp
bCk7CiB9CiAKIHN0YXRpYyB2b2lkCmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9n
dC9pbnRlbF9yaW5nYnVmZmVyLmMgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9ndC9pbnRlbF9yaW5n
YnVmZmVyLmMKaW5kZXggNDA5ZDc2NGY4YzZkLi4xZDljMTI1Yjc2ZDAgMTAwNjQ0Ci0tLSBhL2Ry
aXZlcnMvZ3B1L2RybS9pOTE1L2d0L2ludGVsX3JpbmdidWZmZXIuYworKysgYi9kcml2ZXJzL2dw
dS9kcm0vaTkxNS9ndC9pbnRlbF9yaW5nYnVmZmVyLmMKQEAgLTEyNTAsNyArMTI1MCw3IEBAIHZv
aWQgaW50ZWxfcmluZ191bnBpbihzdHJ1Y3QgaW50ZWxfcmluZyAqcmluZykKIAkJcmV0dXJuOwog
CiAJLyogRGlzY2FyZCBhbnkgdW51c2VkIGJ5dGVzIGJleW9uZCB0aGF0IHN1Ym1pdHRlZCB0byBo
dy4gKi8KLQlpbnRlbF9yaW5nX3Jlc2V0KHJpbmcsIHJpbmctPnRhaWwpOworCWludGVsX3Jpbmdf
cmVzZXQocmluZywgcmluZy0+ZW1pdCk7CiAKIAlpOTE1X3ZtYV91bnNldF9nZ3R0X3dyaXRlKHZt
YSk7CiAJaWYgKGk5MTVfdm1hX2lzX21hcF9hbmRfZmVuY2VhYmxlKHZtYSkpCkBAIC0xMzExLDcg
KzEzMTEsNiBAQCBpbnRlbF9lbmdpbmVfY3JlYXRlX3Jpbmcoc3RydWN0IGludGVsX2VuZ2luZV9j
cyAqZW5naW5lLCBpbnQgc2l6ZSkKIAkJcmV0dXJuIEVSUl9QVFIoLUVOT01FTSk7CiAKIAlrcmVm
X2luaXQoJnJpbmctPnJlZik7Ci0JSU5JVF9MSVNUX0hFQUQoJnJpbmctPnJlcXVlc3RfbGlzdCk7
CiAKIAlyaW5nLT5zaXplID0gc2l6ZTsKIAkvKiBXb3JrYXJvdW5kIGFuIGVycmF0dW0gb24gdGhl
IGk4MzAgd2hpY2ggY2F1c2VzIGEgaGFuZyBpZgpAQCAtMTg2NSw3ICsxODY0LDEwIEBAIHN0YXRp
YyBpbnQgcmluZ19yZXF1ZXN0X2FsbG9jKHN0cnVjdCBpOTE1X3JlcXVlc3QgKnJlcXVlc3QpCiAJ
cmV0dXJuIDA7CiB9CiAKLXN0YXRpYyBub2lubGluZSBpbnQgd2FpdF9mb3Jfc3BhY2Uoc3RydWN0
IGludGVsX3JpbmcgKnJpbmcsIHVuc2lnbmVkIGludCBieXRlcykKK3N0YXRpYyBub2lubGluZSBp
bnQKK3dhaXRfZm9yX3NwYWNlKHN0cnVjdCBpbnRlbF9yaW5nICpyaW5nLAorCSAgICAgICBzdHJ1
Y3QgaW50ZWxfdGltZWxpbmUgKnRsLAorCSAgICAgICB1bnNpZ25lZCBpbnQgYnl0ZXMpCiB7CiAJ
c3RydWN0IGk5MTVfcmVxdWVzdCAqdGFyZ2V0OwogCWxvbmcgdGltZW91dDsKQEAgLTE4NzMsMTUg
KzE4NzUsMTggQEAgc3RhdGljIG5vaW5saW5lIGludCB3YWl0X2Zvcl9zcGFjZShzdHJ1Y3QgaW50
ZWxfcmluZyAqcmluZywgdW5zaWduZWQgaW50IGJ5dGVzKQogCWlmIChpbnRlbF9yaW5nX3VwZGF0
ZV9zcGFjZShyaW5nKSA+PSBieXRlcykKIAkJcmV0dXJuIDA7CiAKLQlHRU1fQlVHX09OKGxpc3Rf
ZW1wdHkoJnJpbmctPnJlcXVlc3RfbGlzdCkpOwotCWxpc3RfZm9yX2VhY2hfZW50cnkodGFyZ2V0
LCAmcmluZy0+cmVxdWVzdF9saXN0LCByaW5nX2xpbmspIHsKKwlHRU1fQlVHX09OKGxpc3RfZW1w
dHkoJnRsLT5yZXF1ZXN0cykpOworCWxpc3RfZm9yX2VhY2hfZW50cnkodGFyZ2V0LCAmdGwtPnJl
cXVlc3RzLCBsaW5rKSB7CisJCWlmICh0YXJnZXQtPnJpbmcgIT0gcmluZykKKwkJCWNvbnRpbnVl
OworCiAJCS8qIFdvdWxkIGNvbXBsZXRpb24gb2YgdGhpcyByZXF1ZXN0IGZyZWUgZW5vdWdoIHNw
YWNlPyAqLwogCQlpZiAoYnl0ZXMgPD0gX19pbnRlbF9yaW5nX3NwYWNlKHRhcmdldC0+cG9zdGZp
eCwKIAkJCQkJCXJpbmctPmVtaXQsIHJpbmctPnNpemUpKQogCQkJYnJlYWs7CiAJfQogCi0JaWYg
KFdBUk5fT04oJnRhcmdldC0+cmluZ19saW5rID09ICZyaW5nLT5yZXF1ZXN0X2xpc3QpKQorCWlm
IChHRU1fV0FSTl9PTigmdGFyZ2V0LT5saW5rID09ICZ0bC0+cmVxdWVzdHMpKQogCQlyZXR1cm4g
LUVOT1NQQzsKIAogCXRpbWVvdXQgPSBpOTE1X3JlcXVlc3Rfd2FpdCh0YXJnZXQsCkBAIC0xOTQ4
LDcgKzE5NTMsNyBAQCB1MzIgKmludGVsX3JpbmdfYmVnaW4oc3RydWN0IGk5MTVfcmVxdWVzdCAq
cnEsIHVuc2lnbmVkIGludCBudW1fZHdvcmRzKQogCQkgKi8KIAkJR0VNX0JVR19PTighcnEtPnJl
c2VydmVkX3NwYWNlKTsKIAotCQlyZXQgPSB3YWl0X2Zvcl9zcGFjZShyaW5nLCB0b3RhbF9ieXRl
cyk7CisJCXJldCA9IHdhaXRfZm9yX3NwYWNlKHJpbmcsIHJxLT50aW1lbGluZSwgdG90YWxfYnl0
ZXMpOwogCQlpZiAodW5saWtlbHkocmV0KSkKIAkJCXJldHVybiBFUlJfUFRSKHJldCk7CiAJfQpk
aWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvZ3QvbW9ja19lbmdpbmUuYyBiL2RyaXZl
cnMvZ3B1L2RybS9pOTE1L2d0L21vY2tfZW5naW5lLmMKaW5kZXggNTRhMTFkZGUzMDc2Li41ZDQz
Y2JjM2YzNDUgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2d0L21vY2tfZW5naW5l
LmMKKysrIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvZ3QvbW9ja19lbmdpbmUuYwpAQCAtNTgsNyAr
NTgsNiBAQCBzdGF0aWMgc3RydWN0IGludGVsX3JpbmcgKm1vY2tfcmluZyhzdHJ1Y3QgaW50ZWxf
ZW5naW5lX2NzICplbmdpbmUpCiAJcmluZy0+dmFkZHIgPSAodm9pZCAqKShyaW5nICsgMSk7CiAJ
YXRvbWljX3NldCgmcmluZy0+cGluX2NvdW50LCAxKTsKIAotCUlOSVRfTElTVF9IRUFEKCZyaW5n
LT5yZXF1ZXN0X2xpc3QpOwogCWludGVsX3JpbmdfdXBkYXRlX3NwYWNlKHJpbmcpOwogCiAJcmV0
dXJuIHJpbmc7CmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9ndC9zZWxmdGVzdF9j
b250ZXh0LmMgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9ndC9zZWxmdGVzdF9jb250ZXh0LmMKaW5k
ZXggZGE5YzQ5ZTJhZGFmLi42ZmJjNzJiYzI5MGUgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2Ry
bS9pOTE1L2d0L3NlbGZ0ZXN0X2NvbnRleHQuYworKysgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9n
dC9zZWxmdGVzdF9jb250ZXh0LmMKQEAgLTIwLDEwICsyMCwxMyBAQCBzdGF0aWMgaW50IHJlcXVl
c3Rfc3luYyhzdHJ1Y3QgaTkxNV9yZXF1ZXN0ICpycSkKIAogCWk5MTVfcmVxdWVzdF9hZGQocnEp
OwogCXRpbWVvdXQgPSBpOTE1X3JlcXVlc3Rfd2FpdChycSwgMCwgSFogLyAxMCk7Ci0JaWYgKHRp
bWVvdXQgPCAwKQorCWlmICh0aW1lb3V0IDwgMCkgewogCQllcnIgPSB0aW1lb3V0OwotCWVsc2UK
Kwl9IGVsc2UgeworCQltdXRleF9sb2NrKCZycS0+dGltZWxpbmUtPm11dGV4KTsKIAkJaTkxNV9y
ZXF1ZXN0X3JldGlyZV91cHRvKHJxKTsKKwkJbXV0ZXhfdW5sb2NrKCZycS0+dGltZWxpbmUtPm11
dGV4KTsKKwl9CiAKIAlpOTE1X3JlcXVlc3RfcHV0KHJxKTsKIApAQCAtMzUsNiArMzgsNyBAQCBz
dGF0aWMgaW50IGNvbnRleHRfc3luYyhzdHJ1Y3QgaW50ZWxfY29udGV4dCAqY2UpCiAJc3RydWN0
IGludGVsX3RpbWVsaW5lICp0bCA9IGNlLT50aW1lbGluZTsKIAlpbnQgZXJyID0gMDsKIAorCW11
dGV4X2xvY2soJnRsLT5tdXRleCk7CiAJZG8gewogCQlzdHJ1Y3QgaTkxNV9yZXF1ZXN0ICpycTsK
IAkJbG9uZyB0aW1lb3V0OwpAQCAtNTUsNiArNTksNyBAQCBzdGF0aWMgaW50IGNvbnRleHRfc3lu
YyhzdHJ1Y3QgaW50ZWxfY29udGV4dCAqY2UpCiAKIAkJaTkxNV9yZXF1ZXN0X3B1dChycSk7CiAJ
fSB3aGlsZSAoIWVycik7CisJbXV0ZXhfdW5sb2NrKCZ0bC0+bXV0ZXgpOwogCiAJcmV0dXJuIGVy
cjsKIH0KZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2k5MTVfcmVxdWVzdC5jIGIv
ZHJpdmVycy9ncHUvZHJtL2k5MTUvaTkxNV9yZXF1ZXN0LmMKaW5kZXggOGEyYmMxZDMxN2U0Li4x
NzRjN2ZkZDAyZmYgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2k5MTVfcmVxdWVz
dC5jCisrKyBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2k5MTVfcmVxdWVzdC5jCkBAIC0xODEsNDAg
KzE4MSw2IEBAIGk5MTVfcmVxdWVzdF9yZW1vdmVfZnJvbV9jbGllbnQoc3RydWN0IGk5MTVfcmVx
dWVzdCAqcmVxdWVzdCkKIAlzcGluX3VubG9jaygmZmlsZV9wcml2LT5tbS5sb2NrKTsKIH0KIAot
c3RhdGljIHZvaWQgYWR2YW5jZV9yaW5nKHN0cnVjdCBpOTE1X3JlcXVlc3QgKnJlcXVlc3QpCi17
Ci0Jc3RydWN0IGludGVsX3JpbmcgKnJpbmcgPSByZXF1ZXN0LT5yaW5nOwotCXVuc2lnbmVkIGlu
dCB0YWlsOwotCi0JLyoKLQkgKiBXZSBrbm93IHRoZSBHUFUgbXVzdCBoYXZlIHJlYWQgdGhlIHJl
cXVlc3QgdG8gaGF2ZQotCSAqIHNlbnQgdXMgdGhlIHNlcW5vICsgaW50ZXJydXB0LCBzbyB1c2Ug
dGhlIHBvc2l0aW9uCi0JICogb2YgdGFpbCBvZiB0aGUgcmVxdWVzdCB0byB1cGRhdGUgdGhlIGxh
c3Qga25vd24gcG9zaXRpb24KLQkgKiBvZiB0aGUgR1BVIGhlYWQuCi0JICoKLQkgKiBOb3RlIHRo
aXMgcmVxdWlyZXMgdGhhdCB3ZSBhcmUgYWx3YXlzIGNhbGxlZCBpbiByZXF1ZXN0Ci0JICogY29t
cGxldGlvbiBvcmRlci4KLQkgKi8KLQlHRU1fQlVHX09OKCFsaXN0X2lzX2ZpcnN0KCZyZXF1ZXN0
LT5yaW5nX2xpbmssICZyaW5nLT5yZXF1ZXN0X2xpc3QpKTsKLQlpZiAobGlzdF9pc19sYXN0KCZy
ZXF1ZXN0LT5yaW5nX2xpbmssICZyaW5nLT5yZXF1ZXN0X2xpc3QpKSB7Ci0JCS8qCi0JCSAqIFdl
IG1heSByYWNlIGhlcmUgd2l0aCBleGVjbGlzdHMgcmVzdWJtaXR0aW5nIHRoaXMgcmVxdWVzdAot
CQkgKiBhcyB3ZSByZXRpcmUgaXQuIFRoZSByZXN1Ym1pc3Npb24gd2lsbCBtb3ZlIHRoZSByaW5n
LT50YWlsCi0JCSAqIGZvcndhcmRzICh0byByZXF1ZXN0LT53YV90YWlsKS4gV2UgZWl0aGVyIHJl
YWQgdGhlCi0JCSAqIGN1cnJlbnQgdmFsdWUgdGhhdCB3YXMgd3JpdHRlbiB0byBodywgb3IgdGhl
IHZhbHVlIHRoYXQKLQkJICogaXMganVzdCBhYm91dCB0byBiZS4gRWl0aGVyIHdvcmtzLCBpZiB3
ZSBtaXNzIHRoZSBsYXN0IHR3bwotCQkgKiBub29wcyAtIHRoZXkgYXJlIHNhZmUgdG8gYmUgcmVw
bGF5ZWQgb24gYSByZXNldC4KLQkJICovCi0JCXRhaWwgPSBSRUFEX09OQ0UocmVxdWVzdC0+dGFp
bCk7Ci0JCWxpc3RfZGVsKCZyaW5nLT5hY3RpdmVfbGluayk7Ci0JfSBlbHNlIHsKLQkJdGFpbCA9
IHJlcXVlc3QtPnBvc3RmaXg7Ci0JfQotCWxpc3RfZGVsX2luaXQoJnJlcXVlc3QtPnJpbmdfbGlu
ayk7Ci0KLQlyaW5nLT5oZWFkID0gdGFpbDsKLX0KLQogc3RhdGljIHZvaWQgZnJlZV9jYXB0dXJl
X2xpc3Qoc3RydWN0IGk5MTVfcmVxdWVzdCAqcmVxdWVzdCkKIHsKIAlzdHJ1Y3QgaTkxNV9jYXB0
dXJlX2xpc3QgKmNhcHR1cmU7CkBAIC0yMzIsNyArMTk4LDcgQEAgc3RhdGljIGJvb2wgaTkxNV9y
ZXF1ZXN0X3JldGlyZShzdHJ1Y3QgaTkxNV9yZXF1ZXN0ICpycSkKIHsKIAlzdHJ1Y3QgaTkxNV9h
Y3RpdmVfcmVxdWVzdCAqYWN0aXZlLCAqbmV4dDsKIAotCWxvY2tkZXBfYXNzZXJ0X2hlbGQoJnJx
LT5pOTE1LT5kcm0uc3RydWN0X211dGV4KTsKKwlsb2NrZGVwX2Fzc2VydF9oZWxkKCZycS0+dGlt
ZWxpbmUtPm11dGV4KTsKIAlpZiAoIWk5MTVfcmVxdWVzdF9jb21wbGV0ZWQocnEpKQogCQlyZXR1
cm4gZmFsc2U7CiAKQEAgLTI0NCw3ICsyMTAsMTcgQEAgc3RhdGljIGJvb2wgaTkxNV9yZXF1ZXN0
X3JldGlyZShzdHJ1Y3QgaTkxNV9yZXF1ZXN0ICpycSkKIAlHRU1fQlVHX09OKCFpOTE1X3N3X2Zl
bmNlX3NpZ25hbGVkKCZycS0+c3VibWl0KSk7CiAJdHJhY2VfaTkxNV9yZXF1ZXN0X3JldGlyZShy
cSk7CiAKLQlhZHZhbmNlX3JpbmcocnEpOworCS8qCisJICogV2Uga25vdyB0aGUgR1BVIG11c3Qg
aGF2ZSByZWFkIHRoZSByZXF1ZXN0IHRvIGhhdmUKKwkgKiBzZW50IHVzIHRoZSBzZXFubyArIGlu
dGVycnVwdCwgc28gdXNlIHRoZSBwb3NpdGlvbgorCSAqIG9mIHRhaWwgb2YgdGhlIHJlcXVlc3Qg
dG8gdXBkYXRlIHRoZSBsYXN0IGtub3duIHBvc2l0aW9uCisJICogb2YgdGhlIEdQVSBoZWFkLgor
CSAqCisJICogTm90ZSB0aGlzIHJlcXVpcmVzIHRoYXQgd2UgYXJlIGFsd2F5cyBjYWxsZWQgaW4g
cmVxdWVzdAorCSAqIGNvbXBsZXRpb24gb3JkZXIuCisJICovCisJR0VNX0JVR19PTighbGlzdF9p
c19maXJzdCgmcnEtPmxpbmssICZycS0+dGltZWxpbmUtPnJlcXVlc3RzKSk7CisJcnEtPnJpbmct
PmhlYWQgPSBycS0+cG9zdGZpeDsKIAogCS8qCiAJICogV2FsayB0aHJvdWdoIHRoZSBhY3RpdmUg
bGlzdCwgY2FsbGluZyByZXRpcmUgb24gZWFjaC4gVGhpcyBhbGxvd3MKQEAgLTMyMSw3ICsyOTcs
NyBAQCBzdGF0aWMgYm9vbCBpOTE1X3JlcXVlc3RfcmV0aXJlKHN0cnVjdCBpOTE1X3JlcXVlc3Qg
KnJxKQogCiB2b2lkIGk5MTVfcmVxdWVzdF9yZXRpcmVfdXB0byhzdHJ1Y3QgaTkxNV9yZXF1ZXN0
ICpycSkKIHsKLQlzdHJ1Y3QgaW50ZWxfcmluZyAqcmluZyA9IHJxLT5yaW5nOworCXN0cnVjdCBp
bnRlbF90aW1lbGluZSAqIGNvbnN0IHRsID0gcnEtPnRpbWVsaW5lOwogCXN0cnVjdCBpOTE1X3Jl
cXVlc3QgKnRtcDsKIAogCUdFTV9UUkFDRSgiJXMgZmVuY2UgJWxseDolbGxkLCBjdXJyZW50ICVk
XG4iLApAQCAtMzI5LDE1ICszMDUsMTEgQEAgdm9pZCBpOTE1X3JlcXVlc3RfcmV0aXJlX3VwdG8o
c3RydWN0IGk5MTVfcmVxdWVzdCAqcnEpCiAJCSAgcnEtPmZlbmNlLmNvbnRleHQsIHJxLT5mZW5j
ZS5zZXFubywKIAkJICBod3NwX3NlcW5vKHJxKSk7CiAKLQlsb2NrZGVwX2Fzc2VydF9oZWxkKCZy
cS0+aTkxNS0+ZHJtLnN0cnVjdF9tdXRleCk7CisJbG9ja2RlcF9hc3NlcnRfaGVsZCgmdGwtPm11
dGV4KTsKIAlHRU1fQlVHX09OKCFpOTE1X3JlcXVlc3RfY29tcGxldGVkKHJxKSk7CiAKLQlpZiAo
bGlzdF9lbXB0eSgmcnEtPnJpbmdfbGluaykpCi0JCXJldHVybjsKLQogCWRvIHsKLQkJdG1wID0g
bGlzdF9maXJzdF9lbnRyeSgmcmluZy0+cmVxdWVzdF9saXN0LAotCQkJCSAgICAgICB0eXBlb2Yo
KnRtcCksIHJpbmdfbGluayk7CisJCXRtcCA9IGxpc3RfZmlyc3RfZW50cnkoJnRsLT5yZXF1ZXN0
cywgdHlwZW9mKCp0bXApLCBsaW5rKTsKIAl9IHdoaWxlIChpOTE1X3JlcXVlc3RfcmV0aXJlKHRt
cCkgJiYgdG1wICE9IHJxKTsKIH0KIApAQCAtNTY0LDI5ICs1MzYsMjggQEAgc2VtYXBob3JlX25v
dGlmeShzdHJ1Y3QgaTkxNV9zd19mZW5jZSAqZmVuY2UsIGVudW0gaTkxNV9zd19mZW5jZV9ub3Rp
Znkgc3RhdGUpCiAJcmV0dXJuIE5PVElGWV9ET05FOwogfQogCi1zdGF0aWMgdm9pZCByaW5nX3Jl
dGlyZV9yZXF1ZXN0cyhzdHJ1Y3QgaW50ZWxfcmluZyAqcmluZykKK3N0YXRpYyB2b2lkIHJldGly
ZV9yZXF1ZXN0cyhzdHJ1Y3QgaW50ZWxfdGltZWxpbmUgKnRsKQogewogCXN0cnVjdCBpOTE1X3Jl
cXVlc3QgKnJxLCAqcm47CiAKLQlsaXN0X2Zvcl9lYWNoX2VudHJ5X3NhZmUocnEsIHJuLCAmcmlu
Zy0+cmVxdWVzdF9saXN0LCByaW5nX2xpbmspCisJbGlzdF9mb3JfZWFjaF9lbnRyeV9zYWZlKHJx
LCBybiwgJnRsLT5yZXF1ZXN0cywgbGluaykKIAkJaWYgKCFpOTE1X3JlcXVlc3RfcmV0aXJlKHJx
KSkKIAkJCWJyZWFrOwogfQogCiBzdGF0aWMgbm9pbmxpbmUgc3RydWN0IGk5MTVfcmVxdWVzdCAq
Ci1yZXF1ZXN0X2FsbG9jX3Nsb3coc3RydWN0IGludGVsX2NvbnRleHQgKmNlLCBnZnBfdCBnZnAp
CityZXF1ZXN0X2FsbG9jX3Nsb3coc3RydWN0IGludGVsX3RpbWVsaW5lICp0bCwgZ2ZwX3QgZ2Zw
KQogewotCXN0cnVjdCBpbnRlbF9yaW5nICpyaW5nID0gY2UtPnJpbmc7CiAJc3RydWN0IGk5MTVf
cmVxdWVzdCAqcnE7CiAKLQlpZiAobGlzdF9lbXB0eSgmcmluZy0+cmVxdWVzdF9saXN0KSkKKwlp
ZiAobGlzdF9lbXB0eSgmdGwtPnJlcXVlc3RzKSkKIAkJZ290byBvdXQ7CiAKIAlpZiAoIWdmcGZs
YWdzX2FsbG93X2Jsb2NraW5nKGdmcCkpCiAJCWdvdG8gb3V0OwogCiAJLyogTW92ZSBvdXIgb2xk
ZXN0IHJlcXVlc3QgdG8gdGhlIHNsYWItY2FjaGUgKGlmIG5vdCBpbiB1c2UhKSAqLwotCXJxID0g
bGlzdF9maXJzdF9lbnRyeSgmcmluZy0+cmVxdWVzdF9saXN0LCB0eXBlb2YoKnJxKSwgcmluZ19s
aW5rKTsKKwlycSA9IGxpc3RfZmlyc3RfZW50cnkoJnRsLT5yZXF1ZXN0cywgdHlwZW9mKCpycSks
IGxpbmspOwogCWk5MTVfcmVxdWVzdF9yZXRpcmUocnEpOwogCiAJcnEgPSBrbWVtX2NhY2hlX2Fs
bG9jKGdsb2JhbC5zbGFiX3JlcXVlc3RzLApAQCAtNTk1LDExICs1NjYsMTEgQEAgcmVxdWVzdF9h
bGxvY19zbG93KHN0cnVjdCBpbnRlbF9jb250ZXh0ICpjZSwgZ2ZwX3QgZ2ZwKQogCQlyZXR1cm4g
cnE7CiAKIAkvKiBSYXRlbGltaXQgb3Vyc2VsdmVzIHRvIHByZXZlbnQgb29tIGZyb20gbWFsaWNp
b3VzIGNsaWVudHMgKi8KLQlycSA9IGxpc3RfbGFzdF9lbnRyeSgmcmluZy0+cmVxdWVzdF9saXN0
LCB0eXBlb2YoKnJxKSwgcmluZ19saW5rKTsKKwlycSA9IGxpc3RfbGFzdF9lbnRyeSgmdGwtPnJl
cXVlc3RzLCB0eXBlb2YoKnJxKSwgbGluayk7CiAJY29uZF9zeW5jaHJvbml6ZV9yY3UocnEtPnJj
dXN0YXRlKTsKIAogCS8qIFJldGlyZSBvdXIgb2xkIHJlcXVlc3RzIGluIHRoZSBob3BlIHRoYXQg
d2UgZnJlZSBzb21lICovCi0JcmluZ19yZXRpcmVfcmVxdWVzdHMocmluZyk7CisJcmV0aXJlX3Jl
cXVlc3RzKHRsKTsKIAogb3V0OgogCXJldHVybiBrbWVtX2NhY2hlX2FsbG9jKGdsb2JhbC5zbGFi
X3JlcXVlc3RzLCBnZnApOwpAQCAtNjUwLDcgKzYyMSw3IEBAIF9faTkxNV9yZXF1ZXN0X2NyZWF0
ZShzdHJ1Y3QgaW50ZWxfY29udGV4dCAqY2UsIGdmcF90IGdmcCkKIAlycSA9IGttZW1fY2FjaGVf
YWxsb2MoZ2xvYmFsLnNsYWJfcmVxdWVzdHMsCiAJCQkgICAgICBnZnAgfCBfX0dGUF9SRVRSWV9N
QVlGQUlMIHwgX19HRlBfTk9XQVJOKTsKIAlpZiAodW5saWtlbHkoIXJxKSkgewotCQlycSA9IHJl
cXVlc3RfYWxsb2Nfc2xvdyhjZSwgZ2ZwKTsKKwkJcnEgPSByZXF1ZXN0X2FsbG9jX3Nsb3codGws
IGdmcCk7CiAJCWlmICghcnEpIHsKIAkJCXJldCA9IC1FTk9NRU07CiAJCQlnb3RvIGVycl91bnJl
c2VydmU7CkBAIC03NDIsMTUgKzcxMywxNSBAQCBzdHJ1Y3QgaTkxNV9yZXF1ZXN0ICoKIGk5MTVf
cmVxdWVzdF9jcmVhdGUoc3RydWN0IGludGVsX2NvbnRleHQgKmNlKQogewogCXN0cnVjdCBpOTE1
X3JlcXVlc3QgKnJxOwotCWludCBlcnI7CisJc3RydWN0IGludGVsX3RpbWVsaW5lICp0bDsKIAot
CWVyciA9IGludGVsX2NvbnRleHRfdGltZWxpbmVfbG9jayhjZSk7Ci0JaWYgKGVycikKLQkJcmV0
dXJuIEVSUl9QVFIoZXJyKTsKKwl0bCA9IGludGVsX2NvbnRleHRfdGltZWxpbmVfbG9jayhjZSk7
CisJaWYgKElTX0VSUih0bCkpCisJCXJldHVybiBFUlJfQ0FTVCh0bCk7CiAKIAkvKiBNb3ZlIG91
ciBvbGRlc3QgcmVxdWVzdCB0byB0aGUgc2xhYi1jYWNoZSAoaWYgbm90IGluIHVzZSEpICovCi0J
cnEgPSBsaXN0X2ZpcnN0X2VudHJ5KCZjZS0+cmluZy0+cmVxdWVzdF9saXN0LCB0eXBlb2YoKnJx
KSwgcmluZ19saW5rKTsKLQlpZiAoIWxpc3RfaXNfbGFzdCgmcnEtPnJpbmdfbGluaywgJmNlLT5y
aW5nLT5yZXF1ZXN0X2xpc3QpKQorCXJxID0gbGlzdF9maXJzdF9lbnRyeSgmdGwtPnJlcXVlc3Rz
LCB0eXBlb2YoKnJxKSwgbGluayk7CisJaWYgKCFsaXN0X2lzX2xhc3QoJnJxLT5saW5rLCAmdGwt
PnJlcXVlc3RzKSkKIAkJaTkxNV9yZXF1ZXN0X3JldGlyZShycSk7CiAKIAlpbnRlbF9jb250ZXh0
X2VudGVyKGNlKTsKQEAgLTc2MCwyMiArNzMxLDIyIEBAIGk5MTVfcmVxdWVzdF9jcmVhdGUoc3Ry
dWN0IGludGVsX2NvbnRleHQgKmNlKQogCQlnb3RvIGVycl91bmxvY2s7CiAKIAkvKiBDaGVjayB0
aGF0IHdlIGRvIG5vdCBpbnRlcnJ1cHQgb3Vyc2VsdmVzIHdpdGggYSBuZXcgcmVxdWVzdCAqLwot
CXJxLT5jb29raWUgPSBsb2NrZGVwX3Bpbl9sb2NrKCZjZS0+dGltZWxpbmUtPm11dGV4KTsKKwly
cS0+Y29va2llID0gbG9ja2RlcF9waW5fbG9jaygmdGwtPm11dGV4KTsKIAogCXJldHVybiBycTsK
IAogZXJyX3VubG9jazoKLQlpbnRlbF9jb250ZXh0X3RpbWVsaW5lX3VubG9jayhjZSk7CisJaW50
ZWxfY29udGV4dF90aW1lbGluZV91bmxvY2sodGwpOwogCXJldHVybiBycTsKIH0KIAogc3RhdGlj
IGludAogaTkxNV9yZXF1ZXN0X2F3YWl0X3N0YXJ0KHN0cnVjdCBpOTE1X3JlcXVlc3QgKnJxLCBz
dHJ1Y3QgaTkxNV9yZXF1ZXN0ICpzaWduYWwpCiB7Ci0JaWYgKGxpc3RfaXNfZmlyc3QoJnNpZ25h
bC0+cmluZ19saW5rLCAmc2lnbmFsLT5yaW5nLT5yZXF1ZXN0X2xpc3QpKQorCWlmIChsaXN0X2lz
X2ZpcnN0KCZzaWduYWwtPmxpbmssICZzaWduYWwtPnRpbWVsaW5lLT5yZXF1ZXN0cykpCiAJCXJl
dHVybiAwOwogCi0Jc2lnbmFsID0gbGlzdF9wcmV2X2VudHJ5KHNpZ25hbCwgcmluZ19saW5rKTsK
KwlzaWduYWwgPSBsaXN0X3ByZXZfZW50cnkoc2lnbmFsLCBsaW5rKTsKIAlpZiAoaW50ZWxfdGlt
ZWxpbmVfc3luY19pc19sYXRlcihycS0+dGltZWxpbmUsICZzaWduYWwtPmZlbmNlKSkKIAkJcmV0
dXJuIDA7CiAKQEAgLTExNTUsNyArMTEyNiw2IEBAIHN0cnVjdCBpOTE1X3JlcXVlc3QgKl9faTkx
NV9yZXF1ZXN0X2NvbW1pdChzdHJ1Y3QgaTkxNV9yZXF1ZXN0ICpycSkKIHsKIAlzdHJ1Y3QgaW50
ZWxfZW5naW5lX2NzICplbmdpbmUgPSBycS0+ZW5naW5lOwogCXN0cnVjdCBpbnRlbF9yaW5nICpy
aW5nID0gcnEtPnJpbmc7Ci0Jc3RydWN0IGk5MTVfcmVxdWVzdCAqcHJldjsKIAl1MzIgKmNzOwog
CiAJR0VNX1RSQUNFKCIlcyBmZW5jZSAlbGx4OiVsbGRcbiIsCkBAIC0xMTY4LDYgKzExMzgsNyBA
QCBzdHJ1Y3QgaTkxNV9yZXF1ZXN0ICpfX2k5MTVfcmVxdWVzdF9jb21taXQoc3RydWN0IGk5MTVf
cmVxdWVzdCAqcnEpCiAJICovCiAJR0VNX0JVR19PTihycS0+cmVzZXJ2ZWRfc3BhY2UgPiByaW5n
LT5zcGFjZSk7CiAJcnEtPnJlc2VydmVkX3NwYWNlID0gMDsKKwlycS0+ZW1pdHRlZF9qaWZmaWVz
ID0gamlmZmllczsKIAogCS8qCiAJICogUmVjb3JkIHRoZSBwb3NpdGlvbiBvZiB0aGUgc3RhcnQg
b2YgdGhlIGJyZWFkY3J1bWIgc28gdGhhdApAQCAtMTE3OSwxNCArMTE1MCw3IEBAIHN0cnVjdCBp
OTE1X3JlcXVlc3QgKl9faTkxNV9yZXF1ZXN0X2NvbW1pdChzdHJ1Y3QgaTkxNV9yZXF1ZXN0ICpy
cSkKIAlHRU1fQlVHX09OKElTX0VSUihjcykpOwogCXJxLT5wb3N0Zml4ID0gaW50ZWxfcmluZ19v
ZmZzZXQocnEsIGNzKTsKIAotCXByZXYgPSBfX2k5MTVfcmVxdWVzdF9hZGRfdG9fdGltZWxpbmUo
cnEpOwotCi0JbGlzdF9hZGRfdGFpbCgmcnEtPnJpbmdfbGluaywgJnJpbmctPnJlcXVlc3RfbGlz
dCk7Ci0JaWYgKGxpc3RfaXNfZmlyc3QoJnJxLT5yaW5nX2xpbmssICZyaW5nLT5yZXF1ZXN0X2xp
c3QpKQotCQlsaXN0X2FkZCgmcmluZy0+YWN0aXZlX2xpbmssICZycS0+aTkxNS0+Z3QuYWN0aXZl
X3JpbmdzKTsKLQlycS0+ZW1pdHRlZF9qaWZmaWVzID0gamlmZmllczsKLQotCXJldHVybiBwcmV2
OworCXJldHVybiBfX2k5MTVfcmVxdWVzdF9hZGRfdG9fdGltZWxpbmUocnEpOwogfQogCiB2b2lk
IF9faTkxNV9yZXF1ZXN0X3F1ZXVlKHN0cnVjdCBpOTE1X3JlcXVlc3QgKnJxLApAQCAtMTIxMiwx
MCArMTE3NiwxMSBAQCB2b2lkIF9faTkxNV9yZXF1ZXN0X3F1ZXVlKHN0cnVjdCBpOTE1X3JlcXVl
c3QgKnJxLAogdm9pZCBpOTE1X3JlcXVlc3RfYWRkKHN0cnVjdCBpOTE1X3JlcXVlc3QgKnJxKQog
ewogCXN0cnVjdCBpOTE1X3NjaGVkX2F0dHIgYXR0ciA9IHJxLT5nZW1fY29udGV4dC0+c2NoZWQ7
CisJc3RydWN0IGludGVsX3RpbWVsaW5lICogY29uc3QgdGwgPSBycS0+dGltZWxpbmU7CiAJc3Ry
dWN0IGk5MTVfcmVxdWVzdCAqcHJldjsKIAotCWxvY2tkZXBfYXNzZXJ0X2hlbGQoJnJxLT50aW1l
bGluZS0+bXV0ZXgpOwotCWxvY2tkZXBfdW5waW5fbG9jaygmcnEtPnRpbWVsaW5lLT5tdXRleCwg
cnEtPmNvb2tpZSk7CisJbG9ja2RlcF9hc3NlcnRfaGVsZCgmdGwtPm11dGV4KTsKKwlsb2NrZGVw
X3VucGluX2xvY2soJnRsLT5tdXRleCwgcnEtPmNvb2tpZSk7CiAKIAl0cmFjZV9pOTE1X3JlcXVl
c3RfYWRkKHJxKTsKIApAQCAtMTI2NiwxMCArMTIzMSwxMCBAQCB2b2lkIGk5MTVfcmVxdWVzdF9h
ZGQoc3RydWN0IGk5MTVfcmVxdWVzdCAqcnEpCiAJICogd29yayBvbiBiZWhhbGYgb2Ygb3RoZXJz
IC0tIGJ1dCBpbnN0ZWFkIHdlIHNob3VsZCBiZW5lZml0IGZyb20KIAkgKiBpbXByb3ZlZCByZXNv
dXJjZSBtYW5hZ2VtZW50LiAoV2VsbCwgdGhhdCdzIHRoZSB0aGVvcnkgYXQgbGVhc3QuKQogCSAq
LwotCWlmIChwcmV2ICYmIGk5MTVfcmVxdWVzdF9jb21wbGV0ZWQocHJldikpCisJaWYgKHByZXYg
JiYgaTkxNV9yZXF1ZXN0X2NvbXBsZXRlZChwcmV2KSAmJiBwcmV2LT50aW1lbGluZSA9PSB0bCkK
IAkJaTkxNV9yZXF1ZXN0X3JldGlyZV91cHRvKHByZXYpOwogCi0JbXV0ZXhfdW5sb2NrKCZycS0+
dGltZWxpbmUtPm11dGV4KTsKKwltdXRleF91bmxvY2soJnRsLT5tdXRleCk7CiB9CiAKIHN0YXRp
YyB1bnNpZ25lZCBsb25nIGxvY2FsX2Nsb2NrX3VzKHVuc2lnbmVkIGludCAqY3B1KQpAQCAtMTQ4
OSwxOCArMTQ1NCw0MyBAQCBsb25nIGk5MTVfcmVxdWVzdF93YWl0KHN0cnVjdCBpOTE1X3JlcXVl
c3QgKnJxLAogCiBib29sIGk5MTVfcmV0aXJlX3JlcXVlc3RzKHN0cnVjdCBkcm1faTkxNV9wcml2
YXRlICppOTE1KQogewotCXN0cnVjdCBpbnRlbF9yaW5nICpyaW5nLCAqdG1wOworCXN0cnVjdCBp
bnRlbF9ndF90aW1lbGluZXMgKnRpbWVsaW5lcyA9ICZpOTE1LT5ndC50aW1lbGluZXM7CisJc3Ry
dWN0IGludGVsX3RpbWVsaW5lICp0bCwgKnRuOworCUxJU1RfSEVBRChmcmVlKTsKKworCXNwaW5f
bG9jaygmdGltZWxpbmVzLT5sb2NrKTsKKwlsaXN0X2Zvcl9lYWNoX2VudHJ5X3NhZmUodGwsIHRu
LCAmdGltZWxpbmVzLT5hY3RpdmVfbGlzdCwgbGluaykgeworCQlpZiAoIW11dGV4X3RyeWxvY2so
JnRsLT5tdXRleCkpCisJCQljb250aW51ZTsKIAotCWxvY2tkZXBfYXNzZXJ0X2hlbGQoJmk5MTUt
PmRybS5zdHJ1Y3RfbXV0ZXgpOworCQlpbnRlbF90aW1lbGluZV9nZXQodGwpOworCQlHRU1fQlVH
X09OKCF0bC0+YWN0aXZlX2NvdW50KTsKKwkJdGwtPmFjdGl2ZV9jb3VudCsrOyAvKiBwaW4gdGhl
IGxpc3QgZWxlbWVudCAqLworCQlzcGluX3VubG9jaygmdGltZWxpbmVzLT5sb2NrKTsKIAotCWxp
c3RfZm9yX2VhY2hfZW50cnlfc2FmZShyaW5nLCB0bXAsCi0JCQkJICZpOTE1LT5ndC5hY3RpdmVf
cmluZ3MsIGFjdGl2ZV9saW5rKSB7Ci0JCWludGVsX3JpbmdfZ2V0KHJpbmcpOyAvKiBsYXN0IHJx
IGhvbGRzIHJlZmVyZW5jZSEgKi8KLQkJcmluZ19yZXRpcmVfcmVxdWVzdHMocmluZyk7Ci0JCWlu
dGVsX3JpbmdfcHV0KHJpbmcpOworCQlyZXRpcmVfcmVxdWVzdHModGwpOworCisJCXNwaW5fbG9j
aygmdGltZWxpbmVzLT5sb2NrKTsKKworCQkvKiBSZXN1bWUgaXRlcmF0aW9uIGFmdGVyIGRyb3Bw
aW5nIGxvY2sgKi8KKwkJbGlzdF9zYWZlX3Jlc2V0X25leHQodGwsIHRuLCBsaW5rKTsKKwkJaWYg
KCEtLXRsLT5hY3RpdmVfY291bnQpCisJCQlsaXN0X2RlbCgmdGwtPmxpbmspOworCisJCW11dGV4
X3VubG9jaygmdGwtPm11dGV4KTsKKworCQkvKiBEZWZlciB0aGUgZmluYWwgcmVsZWFzZSB0byBh
ZnRlciB0aGUgc3BpbmxvY2sgKi8KKwkJaWYgKHJlZmNvdW50X2RlY19hbmRfdGVzdCgmdGwtPmty
ZWYucmVmY291bnQpKSB7CisJCQlHRU1fQlVHX09OKHRsLT5hY3RpdmVfY291bnQpOworCQkJbGlz
dF9hZGQoJnRsLT5saW5rLCAmZnJlZSk7CisJCX0KIAl9CisJc3Bpbl91bmxvY2soJnRpbWVsaW5l
cy0+bG9jayk7CisKKwlsaXN0X2Zvcl9lYWNoX2VudHJ5X3NhZmUodGwsIHRuLCAmZnJlZSwgbGlu
aykKKwkJX19pbnRlbF90aW1lbGluZV9mcmVlKCZ0bC0+a3JlZik7CiAKLQlyZXR1cm4gIWxpc3Rf
ZW1wdHkoJmk5MTUtPmd0LmFjdGl2ZV9yaW5ncyk7CisJcmV0dXJuICFsaXN0X2VtcHR5KCZ0aW1l
bGluZXMtPmFjdGl2ZV9saXN0KTsKIH0KIAogI2lmIElTX0VOQUJMRUQoQ09ORklHX0RSTV9JOTE1
X1NFTEZURVNUKQpkaWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvaTkxNV9yZXF1ZXN0
LmggYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9pOTE1X3JlcXVlc3QuaAppbmRleCBmZWMxZDVmMTdj
OTQuLjhhYzZlMTIyNmE1NiAxMDA2NDQKLS0tIGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvaTkxNV9y
ZXF1ZXN0LmgKKysrIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvaTkxNV9yZXF1ZXN0LmgKQEAgLTIy
Myw5ICsyMjMsNiBAQCBzdHJ1Y3QgaTkxNV9yZXF1ZXN0IHsKIAkvKiogdGltZWxpbmUtPnJlcXVl
c3QgZW50cnkgZm9yIHRoaXMgcmVxdWVzdCAqLwogCXN0cnVjdCBsaXN0X2hlYWQgbGluazsKIAot
CS8qKiByaW5nLT5yZXF1ZXN0X2xpc3QgZW50cnkgZm9yIHRoaXMgcmVxdWVzdCAqLwotCXN0cnVj
dCBsaXN0X2hlYWQgcmluZ19saW5rOwotCiAJc3RydWN0IGRybV9pOTE1X2ZpbGVfcHJpdmF0ZSAq
ZmlsZV9wcml2OwogCS8qKiBmaWxlX3ByaXYgbGlzdCBlbnRyeSBmb3IgdGhpcyByZXF1ZXN0ICov
CiAJc3RydWN0IGxpc3RfaGVhZCBjbGllbnRfbGluazsKLS0gCjIuMjMuMC5yYzEKCl9fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCkludGVsLWdmeCBtYWlsaW5n
IGxpc3QKSW50ZWwtZ2Z4QGxpc3RzLmZyZWVkZXNrdG9wLm9yZwpodHRwczovL2xpc3RzLmZyZWVk
ZXNrdG9wLm9yZy9tYWlsbWFuL2xpc3RpbmZvL2ludGVsLWdmeA==

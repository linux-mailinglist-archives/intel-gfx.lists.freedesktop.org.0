Return-Path: <intel-gfx-bounces@lists.freedesktop.org>
X-Original-To: lists+intel-gfx@lfdr.de
Delivered-To: lists+intel-gfx@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [131.252.210.177])
	by mail.lfdr.de (Postfix) with ESMTPS id 0A6C3AB4F3
	for <lists+intel-gfx@lfdr.de>; Fri,  6 Sep 2019 11:33:27 +0200 (CEST)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 428A66E220;
	Fri,  6 Sep 2019 09:33:25 +0000 (UTC)
X-Original-To: intel-gfx@lists.freedesktop.org
Delivered-To: intel-gfx@lists.freedesktop.org
Received: from mga18.intel.com (mga18.intel.com [134.134.136.126])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 9F4326E21B
 for <intel-gfx@lists.freedesktop.org>; Fri,  6 Sep 2019 09:33:24 +0000 (UTC)
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from orsmga003.jf.intel.com ([10.7.209.27])
 by orsmga106.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384;
 06 Sep 2019 02:33:24 -0700
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.64,472,1559545200"; d="scan'208";a="185737773"
Received: from chlopez-mobl1.amr.corp.intel.com (HELO
 delly.ger.corp.intel.com) ([10.252.36.202])
 by orsmga003.jf.intel.com with ESMTP; 06 Sep 2019 02:33:23 -0700
From: Lionel Landwerlin <lionel.g.landwerlin@intel.com>
To: intel-gfx@lists.freedesktop.org
Date: Fri,  6 Sep 2019 12:32:53 +0300
Message-Id: <20190906093256.26198-11-lionel.g.landwerlin@intel.com>
X-Mailer: git-send-email 2.23.0
In-Reply-To: <20190906093256.26198-1-lionel.g.landwerlin@intel.com>
References: <20190906093256.26198-1-lionel.g.landwerlin@intel.com>
MIME-Version: 1.0
Subject: [Intel-gfx] [PATCH v15 10/13] drm/i915/perf: execute OA
 configuration from command stream
X-BeenThere: intel-gfx@lists.freedesktop.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: Intel graphics driver community testing & development
 <intel-gfx.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/intel-gfx>
List-Post: <mailto:intel-gfx@lists.freedesktop.org>
List-Help: <mailto:intel-gfx-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: intel-gfx-bounces@lists.freedesktop.org
Sender: "Intel-gfx" <intel-gfx-bounces@lists.freedesktop.org>

V2UgaGF2ZW4ndCBydW4gaW50byBpc3N1ZXMgd2l0aCBwcm9ncmFtbWluZyB0aGUgZ2xvYmFsIE9B
L05PQQpyZWdpc3RlcnMgY29uZmlndXJhdGlvbiBmcm9tIENQVSBzbyBmYXIsIGJ1dCBIVyBlbmdp
bmVlcnMgYWN0dWFsbHkKcmVjb21tZW5kIGRvaW5nIHRoaXMgZnJvbSB0aGUgY29tbWFuZCBzdHJl
YW1lci4gT24gVEdMIGluIHBhcnRpY3VsYXIKb25lIG9mIHRoZSBjbG9jayBkb21haW4gaW4gd2hp
Y2ggc29tZSBvZiB0aGF0IHByb2dyYW1taW5nIGdvZXMgbWlnaHQKbm90IGJlIHBvd2VyZWQgd2hl
biB3ZSBwb2tlIHRoaW5ncyBmcm9tIHRoZSBDUFUuCgpTaW5jZSB3ZSBoYXZlIGEgY29tbWFuZCBi
dWZmZXIgcHJlcGFyZWQgZm9yIHRoZSBleGVjYnVmZmVyIHNpZGUgb2YKdGhpbmdzLCB3ZSBjYW4g
cmV1c2UgdGhhdCBhcHByb2FjaCBoZXJlIHRvby4KClRoaXMgYWxzbyBhbGxvd3MgdXMgdG8gc2ln
bmlmaWNhbnRseSByZWR1Y2UgdGhlIGFtb3VudCBvZiB0aW1lIHdlIGhvbGQKdGhlIG1haW4gbG9j
ay4KCnYyOiBEcm9wIHRoZSBnbG9iYWwgbG9jayBhcyBtdWNoIGFzIHBvc3NpYmxlCgp2MzogVGFr
ZSBnbG9iYWwgbG9jayB0byBwaW4gZ2xvYmFsCgp2NDogQ3JlYXRlIGk5MTUgcmVxdWVzdCBpbiBl
bWl0X29hX2NvbmZpZygpIHRvIGF2b2lkIGRlYWRsb2NrcyAoTGlvbmVsKQoKdjU6IE1vdmUgbG9j
a2luZyB0byB0aGUgc3RyZWFtIChMaW9uZWwpCgp2NjogTW92ZSBhY3RpdmUgcmVjb25maWd1cmF0
aW9uIHJlcXVlc3QgaW50byBpOTE1X3BlcmZfc3RyZWFtIChMaW9uZWwpCgp2NzogUGluIFZNQSBv
dXRzaWRlIHJlcXVlc3QgY3JlYXRpb24gKENocmlzKQogICAgTG9jayBWTUEgYmVmb3JlIG1vdmUg
dG8gYWN0aXZlIChDaHJpcykKCnY4OiBGaXggZG91YmxlIGZyZWUgb24gc3RyZWFtLT5pbml0aWFs
X29hX2NvbmZpZ19ibyAoTGlvbmVsKQogICAgRG9uJ3QgYWxsb3cgaW50ZXJydXB0aW9uIHdoZW4g
d2FpdGluZyBvbiBhY3RpdmUgY29uZmlnIHJlcXVlc3QKICAgIChMaW9uZWwpCgpTaWduZWQtb2Zm
LWJ5OiBMaW9uZWwgTGFuZHdlcmxpbiA8bGlvbmVsLmcubGFuZHdlcmxpbkBpbnRlbC5jb20+Ci0t
LQogZHJpdmVycy9ncHUvZHJtL2k5MTUvaTkxNV9wZXJmLmMgICAgICAgfCAxNzAgKysrKysrKysr
KysrKysrKy0tLS0tLS0tLQogZHJpdmVycy9ncHUvZHJtL2k5MTUvaTkxNV9wZXJmX3R5cGVzLmgg
fCAgMTMgKy0KIDIgZmlsZXMgY2hhbmdlZCwgMTIyIGluc2VydGlvbnMoKyksIDYxIGRlbGV0aW9u
cygtKQoKZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2k5MTVfcGVyZi5jIGIvZHJp
dmVycy9ncHUvZHJtL2k5MTUvaTkxNV9wZXJmLmMKaW5kZXggZjJiNzc4ZDg0YjUyLi44ZTM1MzI1
MTgxMzkgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2k5MTVfcGVyZi5jCisrKyBi
L2RyaXZlcnMvZ3B1L2RybS9pOTE1L2k5MTVfcGVyZi5jCkBAIC0xNTU4LDE4ICsxNTU4LDIzIEBA
IGZyZWVfb2FfY29uZmlncyhzdHJ1Y3QgaTkxNV9wZXJmX3N0cmVhbSAqc3RyZWFtKQogc3RhdGlj
IHZvaWQgaTkxNV9vYV9zdHJlYW1fZGVzdHJveShzdHJ1Y3QgaTkxNV9wZXJmX3N0cmVhbSAqc3Ry
ZWFtKQogewogCXN0cnVjdCBkcm1faTkxNV9wcml2YXRlICpkZXZfcHJpdiA9IHN0cmVhbS0+ZGV2
X3ByaXY7CisJaW50IGVycjsKIAogCUJVR19PTihzdHJlYW0gIT0gZGV2X3ByaXYtPnBlcmYuZXhj
bHVzaXZlX3N0cmVhbSk7CiAKLQkvKgotCSAqIFVuc2V0IGV4Y2x1c2l2ZV9zdHJlYW0gZmlyc3Qs
IGl0IHdpbGwgYmUgY2hlY2tlZCB3aGlsZSBkaXNhYmxpbmcKLQkgKiB0aGUgbWV0cmljIHNldCBv
biBnZW44Ky4KLQkgKi8KIAltdXRleF9sb2NrKCZkZXZfcHJpdi0+ZHJtLnN0cnVjdF9tdXRleCk7
Ci0JZGV2X3ByaXYtPnBlcmYuZXhjbHVzaXZlX3N0cmVhbSA9IE5VTEw7CisJbXV0ZXhfbG9jaygm
c3RyZWFtLT5jb25maWdfbXV0ZXgpOwogCWRldl9wcml2LT5wZXJmLm9wcy5kaXNhYmxlX21ldHJp
Y19zZXQoc3RyZWFtKTsKKwllcnIgPSBpOTE1X2FjdGl2ZV9yZXF1ZXN0X3JldGlyZSgmc3RyZWFt
LT5hY3RpdmVfY29uZmlnX3JxLCAwLAorCQkJCQkgJnN0cmVhbS0+Y29uZmlnX211dGV4KTsKKwlt
dXRleF91bmxvY2soJnN0cmVhbS0+Y29uZmlnX211dGV4KTsKKwlkZXZfcHJpdi0+cGVyZi5leGNs
dXNpdmVfc3RyZWFtID0gTlVMTDsKIAltdXRleF91bmxvY2soJmRldl9wcml2LT5kcm0uc3RydWN0
X211dGV4KTsKIAorCWlmIChlcnIpCisJCURSTV9FUlJPUigiRmFpbGVkIHRvIGRpc2FibGUgcGVy
ZiBzdHJlYW1cbiIpOworCisKIAlmcmVlX29hX2J1ZmZlcihzdHJlYW0pOwogCWZyZWVfbm9hX3dh
aXQoc3RyZWFtKTsKIApAQCAtMTc5NSw2ICsxODAwLDEwIEBAIHN0YXRpYyBpbnQgYWxsb2Nfbm9h
X3dhaXQoc3RydWN0IGk5MTVfcGVyZl9zdHJlYW0gKnN0cmVhbSkKIAkJcmV0dXJuIFBUUl9FUlIo
Ym8pOwogCX0KIAorCXJldCA9IGk5MTVfbXV0ZXhfbG9ja19pbnRlcnJ1cHRpYmxlKCZpOTE1LT5k
cm0pOworCWlmIChyZXQpCisJCWdvdG8gZXJyX3VucmVmOworCiAJLyoKIAkgKiBXZSBwaW4gaW4g
R0dUVCBiZWNhdXNlIHdlIGp1bXAgaW50byB0aGlzIGJ1ZmZlciBub3cgYmVjYXVzZQogCSAqIG11
bHRpcGxlIE9BIGNvbmZpZyBCT3Mgd2lsbCBoYXZlIGEganVtcCB0byB0aGlzIGFkZHJlc3MgYW5k
IGl0CkBAIC0xODAyLDEwICsxODExLDEzIEBAIHN0YXRpYyBpbnQgYWxsb2Nfbm9hX3dhaXQoc3Ry
dWN0IGk5MTVfcGVyZl9zdHJlYW0gKnN0cmVhbSkKIAkgKi8KIAl2bWEgPSBpOTE1X2dlbV9vYmpl
Y3RfZ2d0dF9waW4oYm8sIE5VTEwsIDAsIDQwOTYsIDApOwogCWlmIChJU19FUlIodm1hKSkgewor
CQltdXRleF91bmxvY2soJmk5MTUtPmRybS5zdHJ1Y3RfbXV0ZXgpOwogCQlyZXQgPSBQVFJfRVJS
KHZtYSk7CiAJCWdvdG8gZXJyX3VucmVmOwogCX0KIAorCW11dGV4X3VubG9jaygmaTkxNS0+ZHJt
LnN0cnVjdF9tdXRleCk7CisKIAliYXRjaCA9IGNzID0gaTkxNV9nZW1fb2JqZWN0X3Bpbl9tYXAo
Ym8sIEk5MTVfTUFQX1dCKTsKIAlpZiAoSVNfRVJSKGJhdGNoKSkgewogCQlyZXQgPSBQVFJfRVJS
KGJhdGNoKTsKQEAgLTE5MzksNyArMTk1MSw5IEBAIHN0YXRpYyBpbnQgYWxsb2Nfbm9hX3dhaXQo
c3RydWN0IGk5MTVfcGVyZl9zdHJlYW0gKnN0cmVhbSkKIAlyZXR1cm4gMDsKIAogZXJyX3VucGlu
OgotCV9faTkxNV92bWFfdW5waW4odm1hKTsKKwltdXRleF9sb2NrKCZpOTE1LT5kcm0uc3RydWN0
X211dGV4KTsKKwlpOTE1X3ZtYV91bnBpbl9hbmRfcmVsZWFzZSgmdm1hLCAwKTsKKwltdXRleF91
bmxvY2soJmk5MTUtPmRybS5zdHJ1Y3RfbXV0ZXgpOwogCiBlcnJfdW5yZWY6CiAJaTkxNV9nZW1f
b2JqZWN0X3B1dChibyk7CkBAIC0xOTQ3LDUwICsxOTYxLDczIEBAIHN0YXRpYyBpbnQgYWxsb2Nf
bm9hX3dhaXQoc3RydWN0IGk5MTVfcGVyZl9zdHJlYW0gKnN0cmVhbSkKIAlyZXR1cm4gcmV0Owog
fQogCi1zdGF0aWMgdm9pZCBjb25maWdfb2FfcmVncyhzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0ZSAq
ZGV2X3ByaXYsCi0JCQkgICBjb25zdCBzdHJ1Y3QgaTkxNV9vYV9yZWcgKnJlZ3MsCi0JCQkgICB1
MzIgbl9yZWdzKQorc3RhdGljIGludCBlbWl0X29hX2NvbmZpZyhzdHJ1Y3QgZHJtX2k5MTVfcHJp
dmF0ZSAqaTkxNSwKKwkJCSAgc3RydWN0IGk5MTVfcGVyZl9zdHJlYW0gKnN0cmVhbSkKIHsKLQl1
MzIgaTsKKwlzdHJ1Y3QgaTkxNV9yZXF1ZXN0ICpycTsKKwlzdHJ1Y3QgaTkxNV92bWEgKnZtYTsK
Kwl1MzIgKmNzOworCWludCBlcnI7CiAKLQlmb3IgKGkgPSAwOyBpIDwgbl9yZWdzOyBpKyspIHsK
LQkJY29uc3Qgc3RydWN0IGk5MTVfb2FfcmVnICpyZWcgPSByZWdzICsgaTsKKwlsb2NrZGVwX2Fz
c2VydF9oZWxkKCZzdHJlYW0tPmNvbmZpZ19tdXRleCk7CisKKwl2bWEgPSBpOTE1X3ZtYV9pbnN0
YW5jZShzdHJlYW0tPmluaXRpYWxfb2FfY29uZmlnX2JvLAorCQkJCSZzdHJlYW0tPmVuZ2luZS0+
Z3QtPmdndHQtPnZtLCBOVUxMKTsKKwlpZiAodW5saWtlbHkoSVNfRVJSKHZtYSkpKQorCQlyZXR1
cm4gUFRSX0VSUih2bWEpOwogCi0JCUk5MTVfV1JJVEUocmVnLT5hZGRyLCByZWctPnZhbHVlKTsK
KwllcnIgPSBpOTE1X3ZtYV9waW4odm1hLCAwLCAwLCBQSU5fR0xPQkFMKTsKKwlpZiAoZXJyKQor
CQlnb3RvIGVycl92bWFfdW5waW47CisKKwlycSA9IGk5MTVfcmVxdWVzdF9jcmVhdGUoc3RyZWFt
LT5lbmdpbmUtPmtlcm5lbF9jb250ZXh0KTsKKwlpZiAoSVNfRVJSKHJxKSkgeworCQllcnIgPSBQ
VFJfRVJSKHJxKTsKKwkJZ290byBlcnJfYWRkX3JlcXVlc3Q7CiAJfQotfQogCi1zdGF0aWMgdm9p
ZCBkZWxheV9hZnRlcl9tdXgodm9pZCkKLXsKLQkvKgotCSAqIEl0IGFwcGFyZW50bHkgdGFrZXMg
YSBmYWlybHkgbG9uZyB0aW1lIGZvciBhIG5ldyBNVVgKLQkgKiBjb25maWd1cmF0aW9uIHRvIGJl
IGJlIGFwcGxpZWQgYWZ0ZXIgdGhlc2UgcmVnaXN0ZXIgd3JpdGVzLgotCSAqIFRoaXMgZGVsYXkg
ZHVyYXRpb24gd2FzIGRlcml2ZWQgZW1waXJpY2FsbHkgYmFzZWQgb24gdGhlCi0JICogcmVuZGVy
X2Jhc2ljIGNvbmZpZyBidXQgaG9wZWZ1bGx5IGl0IGNvdmVycyB0aGUgbWF4aW11bQotCSAqIGNv
bmZpZ3VyYXRpb24gbGF0ZW5jeS4KLQkgKgotCSAqIEFzIGEgZmFsbGJhY2ssIHRoZSBjaGVja3Mg
aW4gX2FwcGVuZF9vYV9yZXBvcnRzKCkgdG8gc2tpcAotCSAqIGludmFsaWQgT0EgcmVwb3J0cyBk
byBhbHNvIHNlZW0gdG8gd29yayB0byBkaXNjYXJkIHJlcG9ydHMKLQkgKiBnZW5lcmF0ZWQgYmVm
b3JlIHRoaXMgY29uZmlnIGhhcyBjb21wbGV0ZWQgLSBhbGJlaXQgbm90Ci0JICogc2lsZW50bHku
Ci0JICoKLQkgKiBVbmZvcnR1bmF0ZWx5IHRoaXMgaXMgZXNzZW50aWFsbHkgYSBtYWdpYyBudW1i
ZXIsIHNpbmNlIHdlCi0JICogZG9uJ3QgY3VycmVudGx5IGtub3cgb2YgYSByZWxpYWJsZSBtZWNo
YW5pc20gZm9yIHByZWRpY3RpbmcKLQkgKiBob3cgbG9uZyB0aGUgTVVYIGNvbmZpZyB3aWxsIHRh
a2UgdG8gYXBwbHkgYW5kIGJlc2lkZXMKLQkgKiBzZWVpbmcgaW52YWxpZCByZXBvcnRzIHdlIGRv
bid0IGtub3cgb2YgYSByZWxpYWJsZSB3YXkgdG8KLQkgKiBleHBsaWNpdGx5IGNoZWNrIHRoYXQg
dGhlIE1VWCBjb25maWcgaGFzIGxhbmRlZC4KLQkgKgotCSAqIEl0J3MgZXZlbiBwb3NzaWJsZSB3
ZSd2ZSBtaXNzIGNoYXJhY3Rlcml6ZWQgdGhlIHVuZGVybHlpbmcKLQkgKiBwcm9ibGVtIC0gaXQg
anVzdCBzZWVtcyBsaWtlIHRoZSBzaW1wbGVzdCBleHBsYW5hdGlvbiB3aHkKLQkgKiBhIGRlbGF5
IGF0IHRoaXMgbG9jYXRpb24gd291bGQgbWl0aWdhdGUgYW55IGludmFsaWQgcmVwb3J0cy4KLQkg
Ki8KLQl1c2xlZXBfcmFuZ2UoMTUwMDAsIDIwMDAwKTsKKwllcnIgPSBpOTE1X2FjdGl2ZV9yZXF1
ZXN0X3NldCgmc3RyZWFtLT5hY3RpdmVfY29uZmlnX3JxLAorCQkJCSAgICAgIHJxKTsKKwlpZiAo
ZXJyKQorCQlnb3RvIGVycl9hZGRfcmVxdWVzdDsKKworCWk5MTVfdm1hX2xvY2sodm1hKTsKKwll
cnIgPSBpOTE1X3JlcXVlc3RfYXdhaXRfb2JqZWN0KHJxLCB2bWEtPm9iaiwgMCk7CisJaWYgKCFl
cnIpCisJCWVyciA9IGk5MTVfdm1hX21vdmVfdG9fYWN0aXZlKHZtYSwgcnEsIDApOworCWk5MTVf
dm1hX3VubG9jayh2bWEpOworCWlmIChlcnIpCisJCWdvdG8gZXJyX2FkZF9yZXF1ZXN0OworCisJ
Y3MgPSBpbnRlbF9yaW5nX2JlZ2luKHJxLCBJTlRFTF9HRU4oaTkxNSkgPj0gOCA/IDQgOiAyKTsK
KwlpZiAoSVNfRVJSKGNzKSkgeworCQllcnIgPSBQVFJfRVJSKGNzKTsKKwkJZ290byBlcnJfYWRk
X3JlcXVlc3Q7CisJfQorCisJaWYgKElOVEVMX0dFTihpOTE1KSA+IDgpIHsKKwkJKmNzKysgPSBN
SV9CQVRDSF9CVUZGRVJfU1RBUlRfR0VOODsKKwkJKmNzKysgPSBsb3dlcl8zMl9iaXRzKHZtYS0+
bm9kZS5zdGFydCk7CisJCSpjcysrID0gdXBwZXJfMzJfYml0cyh2bWEtPm5vZGUuc3RhcnQpOwor
CQkqY3MrKyA9IE1JX05PT1A7CisJfSBlbHNlIHsKKwkJKmNzKysgPSBNSV9CQVRDSF9CVUZGRVJf
U1RBUlQ7CisJCSpjcysrID0gdm1hLT5ub2RlLnN0YXJ0OworCX0KKworCWludGVsX3JpbmdfYWR2
YW5jZShycSwgY3MpOworCitlcnJfYWRkX3JlcXVlc3Q6CisJaTkxNV9yZXF1ZXN0X2FkZChycSk7
CitlcnJfdm1hX3VucGluOgorCWk5MTVfdm1hX3VucGluKHZtYSk7CisKKwlyZXR1cm4gZXJyOwog
fQogCiBzdGF0aWMgaW50IGhzd19lbmFibGVfbWV0cmljX3NldChzdHJ1Y3QgaTkxNV9wZXJmX3N0
cmVhbSAqc3RyZWFtKQogewogCXN0cnVjdCBkcm1faTkxNV9wcml2YXRlICpkZXZfcHJpdiA9IHN0
cmVhbS0+ZGV2X3ByaXY7Ci0JY29uc3Qgc3RydWN0IGk5MTVfb2FfY29uZmlnICpvYV9jb25maWcg
PSBzdHJlYW0tPm9hX2NvbmZpZzsKIAogCS8qCiAJICogUFJNOgpAQCAtMjAwNywxMyArMjA0NCw3
IEBAIHN0YXRpYyBpbnQgaHN3X2VuYWJsZV9tZXRyaWNfc2V0KHN0cnVjdCBpOTE1X3BlcmZfc3Ry
ZWFtICpzdHJlYW0pCiAJSTkxNV9XUklURShHRU42X1VDR0NUTDEsIChJOTE1X1JFQUQoR0VONl9V
Q0dDVEwxKSB8CiAJCQkJICBHRU42X0NTVU5JVF9DTE9DS19HQVRFX0RJU0FCTEUpKTsKIAotCWNv
bmZpZ19vYV9yZWdzKGRldl9wcml2LCBvYV9jb25maWctPm11eF9yZWdzLCBvYV9jb25maWctPm11
eF9yZWdzX2xlbik7Ci0JZGVsYXlfYWZ0ZXJfbXV4KCk7Ci0KLQljb25maWdfb2FfcmVncyhkZXZf
cHJpdiwgb2FfY29uZmlnLT5iX2NvdW50ZXJfcmVncywKLQkJICAgICAgIG9hX2NvbmZpZy0+Yl9j
b3VudGVyX3JlZ3NfbGVuKTsKLQotCXJldHVybiAwOworCXJldHVybiBlbWl0X29hX2NvbmZpZyhk
ZXZfcHJpdiwgc3RyZWFtKTsKIH0KIAogc3RhdGljIHZvaWQgaHN3X2Rpc2FibGVfbWV0cmljX3Nl
dChzdHJ1Y3QgaTkxNV9wZXJmX3N0cmVhbSAqc3RyZWFtKQpAQCAtMjM3MiwxMyArMjQwMyw3IEBA
IHN0YXRpYyBpbnQgZ2VuOF9lbmFibGVfbWV0cmljX3NldChzdHJ1Y3QgaTkxNV9wZXJmX3N0cmVh
bSAqc3RyZWFtKQogCWlmIChyZXQpCiAJCXJldHVybiByZXQ7CiAKLQljb25maWdfb2FfcmVncyhk
ZXZfcHJpdiwgb2FfY29uZmlnLT5tdXhfcmVncywgb2FfY29uZmlnLT5tdXhfcmVnc19sZW4pOwot
CWRlbGF5X2FmdGVyX211eCgpOwotCi0JY29uZmlnX29hX3JlZ3MoZGV2X3ByaXYsIG9hX2NvbmZp
Zy0+Yl9jb3VudGVyX3JlZ3MsCi0JCSAgICAgICBvYV9jb25maWctPmJfY291bnRlcl9yZWdzX2xl
bik7Ci0KLQlyZXR1cm4gMDsKKwlyZXR1cm4gZW1pdF9vYV9jb25maWcoZGV2X3ByaXYsIHN0cmVh
bSk7CiB9CiAKIHN0YXRpYyB2b2lkIGdlbjhfZGlzYWJsZV9tZXRyaWNfc2V0KHN0cnVjdCBpOTE1
X3BlcmZfc3RyZWFtICpzdHJlYW0pCkBAIC0yNTk3LDYgKzI2MjIsOSBAQCBzdGF0aWMgaW50IGk5
MTVfb2Ffc3RyZWFtX2luaXQoc3RydWN0IGk5MTVfcGVyZl9zdHJlYW0gKnN0cmVhbSwKIAogCXN0
cmVhbS0+ZW5naW5lID0gcHJvcHMtPmVuZ2luZTsKIAorCUlOSVRfQUNUSVZFX1JFUVVFU1QoJnN0
cmVhbS0+YWN0aXZlX2NvbmZpZ19ycSwKKwkJCSAgICAmc3RyZWFtLT5jb25maWdfbXV0ZXgpOwor
CiAJc3RyZWFtLT5zYW1wbGVfZmxhZ3MgfD0gU0FNUExFX09BX1JFUE9SVDsKIAlzdHJlYW0tPnNh
bXBsZV9zaXplICs9IGZvcm1hdF9zaXplOwogCkBAIC0yNjI1LDggKzI2NTMsOSBAQCBzdGF0aWMg
aW50IGk5MTVfb2Ffc3RyZWFtX2luaXQoc3RydWN0IGk5MTVfcGVyZl9zdHJlYW0gKnN0cmVhbSwK
IAkJZ290byBlcnJfbm9hX3dhaXRfYWxsb2M7CiAJfQogCi0JcmV0ID0gaTkxNV9wZXJmX2dldF9v
YV9jb25maWcoZGV2X3ByaXYsIHByb3BzLT5tZXRyaWNzX3NldCwKLQkJCQkgICAgICAmc3RyZWFt
LT5vYV9jb25maWcpOworCXJldCA9IGk5MTVfcGVyZl9nZXRfb2FfY29uZmlnX2FuZF9ibyhzdHJl
YW0sIHByb3BzLT5tZXRyaWNzX3NldCwKKwkJCQkJICAgICAmc3RyZWFtLT5vYV9jb25maWcsCisJ
CQkJCSAgICAgJnN0cmVhbS0+aW5pdGlhbF9vYV9jb25maWdfYm8pOwogCWlmIChyZXQpIHsKIAkJ
RFJNX0RFQlVHKCJJbnZhbGlkIE9BIGNvbmZpZyBpZD0laVxuIiwgcHJvcHMtPm1ldHJpY3Nfc2V0
KTsKIAkJZ290byBlcnJfY29uZmlnOwpAQCAtMjY1OCwxNiArMjY4NywzMSBAQCBzdGF0aWMgaW50
IGk5MTVfb2Ffc3RyZWFtX2luaXQoc3RydWN0IGk5MTVfcGVyZl9zdHJlYW0gKnN0cmVhbSwKIAlz
dHJlYW0tPm9wcyA9ICZpOTE1X29hX3N0cmVhbV9vcHM7CiAJZGV2X3ByaXYtPnBlcmYuZXhjbHVz
aXZlX3N0cmVhbSA9IHN0cmVhbTsKIAorCW11dGV4X2xvY2soJnN0cmVhbS0+Y29uZmlnX211dGV4
KTsKIAlyZXQgPSBkZXZfcHJpdi0+cGVyZi5vcHMuZW5hYmxlX21ldHJpY19zZXQoc3RyZWFtKTsK
IAlpZiAocmV0KSB7CiAJCURSTV9ERUJVRygiVW5hYmxlIHRvIGVuYWJsZSBtZXRyaWMgc2V0XG4i
KTsKLQkJZ290byBlcnJfZW5hYmxlOworCQkvKgorCQkgKiBJZ25vcmUgdGhlIHJldHVybiB2YWx1
ZSBzaW5jZSB3ZSBhbHJlYWR5IGhhdmUgYW4gZXJyb3IgZnJvbQorCQkgKiB0aGUgZW5hYmxlIHZm
dW5jLgorCQkgKi8KKwkJaTkxNV9hY3RpdmVfcmVxdWVzdF9yZXRpcmUoJnN0cmVhbS0+YWN0aXZl
X2NvbmZpZ19ycSwgMCwKKwkJCQkJICAgJnN0cmVhbS0+Y29uZmlnX211dGV4KTsKKwl9IGVsc2Ug
eworCQlyZXQgPSBpOTE1X2FjdGl2ZV9yZXF1ZXN0X3JldGlyZSgmc3RyZWFtLT5hY3RpdmVfY29u
ZmlnX3JxLCAwLAorCQkJCQkJICZzdHJlYW0tPmNvbmZpZ19tdXRleCk7CiAJfQogCi0JRFJNX0RF
QlVHKCJvcGVuaW5nIHN0cmVhbSBvYSBjb25maWcgdXVpZD0lc1xuIiwgc3RyZWFtLT5vYV9jb25m
aWctPnV1aWQpOwotCisJbXV0ZXhfdW5sb2NrKCZzdHJlYW0tPmNvbmZpZ19tdXRleCk7CiAJbXV0
ZXhfdW5sb2NrKCZkZXZfcHJpdi0+ZHJtLnN0cnVjdF9tdXRleCk7CiAKKwlpOTE1X2dlbV9vYmpl
Y3RfcHV0KHN0cmVhbS0+aW5pdGlhbF9vYV9jb25maWdfYm8pOworCXN0cmVhbS0+aW5pdGlhbF9v
YV9jb25maWdfYm8gPSBOVUxMOworCWlmIChyZXQpCisJCWdvdG8gZXJyX2VuYWJsZTsKKworCURS
TV9ERUJVRygib3BlbmluZyBzdHJlYW0gb2EgY29uZmlnIHV1aWQ9JXNcbiIsIHN0cmVhbS0+b2Ff
Y29uZmlnLT51dWlkKTsKKwogCWhydGltZXJfaW5pdCgmc3RyZWFtLT5wb2xsX2NoZWNrX3RpbWVy
LAogCQkgICAgIENMT0NLX01PTk9UT05JQywgSFJUSU1FUl9NT0RFX1JFTCk7CiAJc3RyZWFtLT5w
b2xsX2NoZWNrX3RpbWVyLmZ1bmN0aW9uID0gb2FfcG9sbF9jaGVja190aW1lcl9jYjsKQEAgLTI2
NzcsOCArMjcyMSwxMSBAQCBzdGF0aWMgaW50IGk5MTVfb2Ffc3RyZWFtX2luaXQoc3RydWN0IGk5
MTVfcGVyZl9zdHJlYW0gKnN0cmVhbSwKIAlyZXR1cm4gMDsKIAogZXJyX2VuYWJsZToKLQlkZXZf
cHJpdi0+cGVyZi5leGNsdXNpdmVfc3RyZWFtID0gTlVMTDsKKwltdXRleF9sb2NrKCZkZXZfcHJp
di0+ZHJtLnN0cnVjdF9tdXRleCk7CisJbXV0ZXhfbG9jaygmc3RyZWFtLT5jb25maWdfbXV0ZXgp
OwogCWRldl9wcml2LT5wZXJmLm9wcy5kaXNhYmxlX21ldHJpY19zZXQoc3RyZWFtKTsKKwltdXRl
eF91bmxvY2soJnN0cmVhbS0+Y29uZmlnX211dGV4KTsKKwlkZXZfcHJpdi0+cGVyZi5leGNsdXNp
dmVfc3RyZWFtID0gTlVMTDsKIAltdXRleF91bmxvY2soJmRldl9wcml2LT5kcm0uc3RydWN0X211
dGV4KTsKIAogZXJyX2xvY2s6CkBAIC0yNjkwLDYgKzI3MzcsOSBAQCBzdGF0aWMgaW50IGk5MTVf
b2Ffc3RyZWFtX2luaXQoc3RydWN0IGk5MTVfcGVyZl9zdHJlYW0gKnN0cmVhbSwKIAogCWZyZWVf
b2FfY29uZmlncyhzdHJlYW0pOwogCisJaWYgKHN0cmVhbS0+aW5pdGlhbF9vYV9jb25maWdfYm8p
CisJCWk5MTVfZ2VtX29iamVjdF9wdXQoc3RyZWFtLT5pbml0aWFsX29hX2NvbmZpZ19ibyk7CisK
IGVycl9jb25maWc6CiAJZnJlZV9ub2Ffd2FpdChzdHJlYW0pOwogCmRpZmYgLS1naXQgYS9kcml2
ZXJzL2dwdS9kcm0vaTkxNS9pOTE1X3BlcmZfdHlwZXMuaCBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1
L2k5MTVfcGVyZl90eXBlcy5oCmluZGV4IDY5NWM2YWQyZmNkNS4uMWJhNTExYzEyNjczIDEwMDY0
NAotLS0gYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9pOTE1X3BlcmZfdHlwZXMuaAorKysgYi9kcml2
ZXJzL2dwdS9kcm0vaTkxNS9pOTE1X3BlcmZfdHlwZXMuaApAQCAtMTY2LDcgKzE2Niw4IEBAIHN0
cnVjdCBpOTE1X3BlcmZfc3RyZWFtIHsKIAljb25zdCBzdHJ1Y3QgaTkxNV9wZXJmX3N0cmVhbV9v
cHMgKm9wczsKIAogCS8qKgotCSAqIEBhY3RpdmVfY29uZmlnX211dGV4OiBQcm90ZWN0cyBhY2Nl
c3MgdG8gQG9hX2NvbmZpZyAmIEBvYV9jb25maWdfYm9zLgorCSAqIEBhY3RpdmVfY29uZmlnX211
dGV4OiBQcm90ZWN0cyBhY2Nlc3MgdG8gQGFjdGl2ZV9jb25maWdfcnEsCisJICogQG9hX2NvbmZp
ZyAmIEBvYV9jb25maWdfYm9zLgogCSAqLwogCXN0cnVjdCBtdXRleCBjb25maWdfbXV0ZXg7CiAK
QEAgLTE4MSw2ICsxODIsMTYgQEAgc3RydWN0IGk5MTVfcGVyZl9zdHJlYW0gewogCSAqLwogCXN0
cnVjdCBsaXN0X2hlYWQgb2FfY29uZmlnX2JvczsKIAorCS8qKgorCSAqIEBhY3RpdmVfY29uZmln
X3JxOiBMYXN0IHJlcXVlc3QgcmVjb25maWd1cmluZyB0aGUgSFcuCisJICovCisJc3RydWN0IGk5
MTVfYWN0aXZlX3JlcXVlc3QgYWN0aXZlX2NvbmZpZ19ycTsKKworCS8qKgorCSAqIEBpbml0aWFs
X29hX2NvbmZpZ19ibzogRmlyc3QgT0EgY29uZmlndXJhdGlvbiBCTyB0byBiZSBydW4uCisJICov
CisJc3RydWN0IGRybV9pOTE1X2dlbV9vYmplY3QgKmluaXRpYWxfb2FfY29uZmlnX2JvOworCiAJ
LyoqCiAJICogVGhlIE9BIGNvbnRleHQgc3BlY2lmaWMgaW5mb3JtYXRpb24uCiAJICovCi0tIAoy
LjIzLjAKCl9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCklu
dGVsLWdmeCBtYWlsaW5nIGxpc3QKSW50ZWwtZ2Z4QGxpc3RzLmZyZWVkZXNrdG9wLm9yZwpodHRw
czovL2xpc3RzLmZyZWVkZXNrdG9wLm9yZy9tYWlsbWFuL2xpc3RpbmZvL2ludGVsLWdmeA==

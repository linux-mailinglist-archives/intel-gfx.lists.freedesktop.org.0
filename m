Return-Path: <intel-gfx-bounces@lists.freedesktop.org>
X-Original-To: lists+intel-gfx@lfdr.de
Delivered-To: lists+intel-gfx@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [131.252.210.177])
	by mail.lfdr.de (Postfix) with ESMTPS id EEE6418DC24
	for <lists+intel-gfx@lfdr.de>; Sat, 21 Mar 2020 00:38:15 +0100 (CET)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id BC5B06E221;
	Fri, 20 Mar 2020 23:38:13 +0000 (UTC)
X-Original-To: intel-gfx@lists.freedesktop.org
Delivered-To: intel-gfx@lists.freedesktop.org
Received: from mga01.intel.com (mga01.intel.com [192.55.52.88])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 9BA586E221
 for <intel-gfx@lists.freedesktop.org>; Fri, 20 Mar 2020 23:38:12 +0000 (UTC)
IronPort-SDR: cJo1isBBxsC7IRg9MzJFHK+Jj1uU+yyL6W7GXiRVKesWyjDTH62onyfy6tUPtg89FL4o1qmKDH
 RcIjg0h5vBsA==
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from orsmga003.jf.intel.com ([10.7.209.27])
 by fmsmga101.fm.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384;
 20 Mar 2020 16:38:12 -0700
IronPort-SDR: zcvvythez0TOj9QyrrXGe83u49RUUTWbhEA2lGgb7VTDOJxz+KKvajJL7d7iJb/tuA7iNV6HqA
 2Q0zvT+V6hrA==
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.72,286,1580803200"; d="scan'208";a="245630579"
Received: from fmsmsx106.amr.corp.intel.com ([10.18.124.204])
 by orsmga003.jf.intel.com with ESMTP; 20 Mar 2020 16:38:11 -0700
Received: from fmsmsx113.amr.corp.intel.com (10.18.116.7) by
 FMSMSX106.amr.corp.intel.com (10.18.124.204) with Microsoft SMTP Server (TLS)
 id 14.3.439.0; Fri, 20 Mar 2020 16:37:44 -0700
Received: from fmsmsx116.amr.corp.intel.com ([169.254.2.62]) by
 FMSMSX113.amr.corp.intel.com ([169.254.13.150]) with mapi id 14.03.0439.000;
 Fri, 20 Mar 2020 16:37:44 -0700
From: "Souza, Jose" <jose.souza@intel.com>
To: "ville.syrjala@linux.intel.com" <ville.syrjala@linux.intel.com>,
 "intel-gfx@lists.freedesktop.org" <intel-gfx@lists.freedesktop.org>
Thread-Topic: [PATCH 01/13] drm/i915/mst: Use .compute_config_late() to
 compute master transcoder
Thread-Index: AQHV+ViturRns7pJlU+iZeo9VySJZahSpB6A
Date: Fri, 20 Mar 2020 23:37:44 +0000
Message-ID: <dc175f622548c99b8fa7c262262b34250b9b1813.camel@intel.com>
References: <20200313164831.5980-1-ville.syrjala@linux.intel.com>
 <20200313164831.5980-2-ville.syrjala@linux.intel.com>
In-Reply-To: <20200313164831.5980-2-ville.syrjala@linux.intel.com>
Accept-Language: en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-originating-ip: [10.24.15.8]
Content-ID: <3C1CF8A2D9513F4AB8535B6F5650042B@intel.com>
MIME-Version: 1.0
Subject: Re: [Intel-gfx] [PATCH 01/13] drm/i915/mst: Use
 .compute_config_late() to compute master transcoder
X-BeenThere: intel-gfx@lists.freedesktop.org
X-Mailman-Version: 2.1.29
Precedence: list
List-Id: Intel graphics driver community testing & development
 <intel-gfx.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/intel-gfx>
List-Post: <mailto:intel-gfx@lists.freedesktop.org>
List-Help: <mailto:intel-gfx-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: intel-gfx-bounces@lists.freedesktop.org
Sender: "Intel-gfx" <intel-gfx-bounces@lists.freedesktop.org>

VGhpcyB3aWxsIG5vdCB3b3JrIGZvciBNU1QsIGhlcmUgYSBleGFtcGxlDQoNClByZXZpb3VzIHN0
YXRlOg0KTVNUIG1hc3RlciBwaXBlIEENCk1TVCBzbGF2ZSBwaXBlIEINCg0KTmV3IHN0YXRlOg0K
UGlwZSBBIGJlaW5nIGRpc2FibGVkDQoNCk9uIGRybV9hdG9taWNfaGVscGVyX2NoZWNrX21vZGVz
ZXQoKSBib3RoIGludGVsX2NydGNfc3RhdGVzIHdpbGwgYmUNCmFkZGVkIHRvIHRoZSBzdGF0ZSB3
aXRoIGNydGNfc3RhdGUtPnVhcGkubW9kZV9jaGFuZ2VkPXRydWUuDQpUaGVuIG9uIHRoZSByZWd1
bGFyIGZvcl9lYWNoX29sZG5ld19pbnRlbF9jcnRjX2luX3N0YXRlKCkgbG9vcCBjb25maWcNCm9m
IENSVEMgQiB3aWxsIGhhdmUgbXN0X21hc3Rlcl90cmFuc2NvZGVyPUlOVkFMSURfVFJBTlNDT0RF
UiB0aGF0DQpkaWZmZXJzIGZyb20gVFJBTlNDT0RFUl9BIGFuZCB3aWxsIGtlZXAgbW9kZV9jaGFu
Z2VkIHNldC4NClRoZW4gb24gdGhlIGNvbmZpZ19sYXRlIGxvb3AgaXQgd2lsbCBza2lwIHRoZSBp
bnRlcmF0aW9uIG9uIHRoZQ0KbmVlZHNfbW9kZXNldCgpIGNoZWNrIGtlZXBpbmcgQ1JUQyBCIHdp
dGgNCm1zdF9tYXN0ZXJfdHJhbnNjb2Rlcj1JTlZBTElEX1RSQU5TQ09ERVIuDQoNClRoYXQgd291
bGQgYmUgY2F1Z2ggYnkgQ0kgaWYgdGhpcyB0ZXN0cyB3ZXJlIG1lcmdlZCBhbmQgdGhlIFRHTCBt
YWNoaW5lDQp3aXRoIE1TVCBpcyBzdGlsbCBvbjogaHR0cHM6Ly9wYXRjaHdvcmsuZnJlZWRlc2t0
b3Aub3JnL3Nlcmllcy83MjIxMS8NCg0KT24gRnJpLCAyMDIwLTAzLTEzIGF0IDE4OjQ4ICswMjAw
LCBWaWxsZSBTeXJqYWxhIHdyb3RlOg0KPiBGcm9tOiBWaWxsZSBTeXJqw6Rsw6QgPHZpbGxlLnN5
cmphbGFAbGludXguaW50ZWwuY29tPg0KPiANCj4gVXNlIHRoZSByZWNlbnRseSBpbnRyb2R1Y2Vk
IGVuY29kZXIgLmNvbXB1dGVfY29uZmlnX2xhdGUoKSBob29rIHRvDQo+IGRvIHRoZSBNU1QgbWFz
dGVyIHRyYW5zY29kZXIgYXNzaWdubWVudC4gQXZvaWRzIGhhdmluZyB0byBkbyBpdA0KPiBpbiBh
IGZ1bm55IHdheSBiZWZvcmUgd2Uga25vdyB0aGUgQ1BVIHRyYW5zY29kZXIgb2YgZWFjaCBwaXBl
Lg0KPiANCj4gQW5kIG5vdyB3ZSBjYW4gYWxzbyBwcm9wZXJseSB1c2UgaHcuYWN0aXZlIGluc3Rl
YWQgb2YgdWFwaS5hY3RpdmUNCj4gc2luY2UgaXQgdG9vIGhhcyBiZWVuIGNhbGN1bGF0ZWQgZWFy
bGllciBmb3IgZXZlcnlvbmUuDQo+IA0KPiBDYzogSm9zw6kgUm9iZXJ0byBkZSBTb3V6YSA8am9z
ZS5zb3V6YUBpbnRlbC5jb20+DQo+IFNpZ25lZC1vZmYtYnk6IFZpbGxlIFN5cmrDpGzDpCA8dmls
bGUuc3lyamFsYUBsaW51eC5pbnRlbC5jb20+DQo+IC0tLQ0KPiAgZHJpdmVycy9ncHUvZHJtL2k5
MTUvZGlzcGxheS9pbnRlbF9kcF9tc3QuYyB8IDk4ICsrKysrKysrKysrLS0tLS0tDQo+IC0tLS0N
Cj4gIDEgZmlsZSBjaGFuZ2VkLCA1MSBpbnNlcnRpb25zKCspLCA0NyBkZWxldGlvbnMoLSkNCj4g
DQo+IGRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5L2ludGVsX2RwX21z
dC5jDQo+IGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvZGlzcGxheS9pbnRlbF9kcF9tc3QuYw0KPiBp
bmRleCA0NGYzZmQyNTFjYTEuLmI5YWZjMTEzNWI5YiAxMDA2NDQNCj4gLS0tIGEvZHJpdmVycy9n
cHUvZHJtL2k5MTUvZGlzcGxheS9pbnRlbF9kcF9tc3QuYw0KPiArKysgYi9kcml2ZXJzL2dwdS9k
cm0vaTkxNS9kaXNwbGF5L2ludGVsX2RwX21zdC5jDQo+IEBAIC04OCw1NiArODgsMTAgQEAgc3Rh
dGljIGludA0KPiBpbnRlbF9kcF9tc3RfY29tcHV0ZV9saW5rX2NvbmZpZyhzdHJ1Y3QgaW50ZWxf
ZW5jb2RlciAqZW5jb2RlciwNCj4gIAlyZXR1cm4gMDsNCj4gIH0NCj4gIA0KPiAtLyoNCj4gLSAq
IEl0ZXJhdGUgb3ZlciBhbGwgY29ubmVjdG9ycyBhbmQgcmV0dXJuIHRoZSBzbWFsbGVzdCB0cmFu
c2NvZGVyIGluDQo+IHRoZSBNU1QNCj4gLSAqIHN0cmVhbQ0KPiAtICovDQo+IC1zdGF0aWMgZW51
bSB0cmFuc2NvZGVyDQo+IC1pbnRlbF9kcF9tc3RfbWFzdGVyX3RyYW5zX2NvbXB1dGUoc3RydWN0
IGludGVsX2F0b21pY19zdGF0ZSAqc3RhdGUsDQo+IC0JCQkJICBzdHJ1Y3QgaW50ZWxfZHAgKm1z
dF9wb3J0KQ0KPiAtew0KPiAtCXN0cnVjdCBkcm1faTkxNV9wcml2YXRlICpkZXZfcHJpdiA9IHRv
X2k5MTUoc3RhdGUtPmJhc2UuZGV2KTsNCj4gLQlzdHJ1Y3QgaW50ZWxfZGlnaXRhbF9jb25uZWN0
b3Jfc3RhdGUgKmNvbm5fc3RhdGU7DQo+IC0Jc3RydWN0IGludGVsX2Nvbm5lY3RvciAqY29ubmVj
dG9yOw0KPiAtCWVudW0gcGlwZSByZXQgPSBJOTE1X01BWF9QSVBFUzsNCj4gLQlpbnQgaTsNCj4g
LQ0KPiAtCWlmIChJTlRFTF9HRU4oZGV2X3ByaXYpIDwgMTIpDQo+IC0JCXJldHVybiBJTlZBTElE
X1RSQU5TQ09ERVI7DQo+IC0NCj4gLQlmb3JfZWFjaF9uZXdfaW50ZWxfY29ubmVjdG9yX2luX3N0
YXRlKHN0YXRlLCBjb25uZWN0b3IsDQo+IGNvbm5fc3RhdGUsIGkpIHsNCj4gLQkJc3RydWN0IGlu
dGVsX2NydGNfc3RhdGUgKmNydGNfc3RhdGU7DQo+IC0JCXN0cnVjdCBpbnRlbF9jcnRjICpjcnRj
Ow0KPiAtDQo+IC0JCWlmIChjb25uZWN0b3ItPm1zdF9wb3J0ICE9IG1zdF9wb3J0IHx8ICFjb25u
X3N0YXRlLQ0KPiA+YmFzZS5jcnRjKQ0KPiAtCQkJY29udGludWU7DQo+IC0NCj4gLQkJY3J0YyA9
IHRvX2ludGVsX2NydGMoY29ubl9zdGF0ZS0+YmFzZS5jcnRjKTsNCj4gLQkJY3J0Y19zdGF0ZSA9
IGludGVsX2F0b21pY19nZXRfbmV3X2NydGNfc3RhdGUoc3RhdGUsDQo+IGNydGMpOw0KPiAtCQlp
ZiAoIWNydGNfc3RhdGUtPnVhcGkuYWN0aXZlKQ0KPiAtCQkJY29udGludWU7DQo+IC0NCj4gLQkJ
LyoNCj4gLQkJICogVXNpbmcgY3J0Yy0+cGlwZSBiZWNhdXNlIGNydGNfc3RhdGUtPmNwdV90cmFu
c2NvZGVyDQo+IGlzDQo+IC0JCSAqIGNvbXB1dGVkLCBzbyBvdGhlcnMgQ1JUQ3MgY291bGQgaGF2
ZSBub24tY29tcHV0ZWQNCj4gLQkJICogY3B1X3RyYW5zY29kZXINCj4gLQkJICovDQo+IC0JCWlm
IChjcnRjLT5waXBlIDwgcmV0KQ0KPiAtCQkJcmV0ID0gY3J0Yy0+cGlwZTsNCj4gLQl9DQo+IC0N
Cj4gLQlpZiAocmV0ID09IEk5MTVfTUFYX1BJUEVTKQ0KPiAtCQlyZXR1cm4gSU5WQUxJRF9UUkFO
U0NPREVSOw0KPiAtDQo+IC0JLyogU2ltcGxlIGNhc3Qgd29ya3MgYmVjYXVzZSBUR0wgZG9uJ3Qg
aGF2ZSBhIGVEUCB0cmFuc2NvZGVyICovDQo+IC0JcmV0dXJuIChlbnVtIHRyYW5zY29kZXIpcmV0
Ow0KPiAtfQ0KPiAtDQo+ICBzdGF0aWMgaW50IGludGVsX2RwX21zdF9jb21wdXRlX2NvbmZpZyhz
dHJ1Y3QgaW50ZWxfZW5jb2Rlcg0KPiAqZW5jb2RlciwNCj4gIAkJCQkgICAgICAgc3RydWN0IGlu
dGVsX2NydGNfc3RhdGUNCj4gKnBpcGVfY29uZmlnLA0KPiAgCQkJCSAgICAgICBzdHJ1Y3QgZHJt
X2Nvbm5lY3Rvcl9zdGF0ZQ0KPiAqY29ubl9zdGF0ZSkNCj4gIHsNCj4gLQlzdHJ1Y3QgaW50ZWxf
YXRvbWljX3N0YXRlICpzdGF0ZSA9DQo+IHRvX2ludGVsX2F0b21pY19zdGF0ZShjb25uX3N0YXRl
LT5zdGF0ZSk7DQo+ICAJc3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmRldl9wcml2ID0gdG9faTkx
NShlbmNvZGVyLT5iYXNlLmRldik7DQo+ICAJc3RydWN0IGludGVsX2RwX21zdF9lbmNvZGVyICpp
bnRlbF9tc3QgPSBlbmNfdG9fbXN0KGVuY29kZXIpOw0KPiAgCXN0cnVjdCBpbnRlbF9kcCAqaW50
ZWxfZHAgPSAmaW50ZWxfbXN0LT5wcmltYXJ5LT5kcDsNCj4gQEAgLTIwMSw3ICsxNTUsNTYgQEAg
c3RhdGljIGludCBpbnRlbF9kcF9tc3RfY29tcHV0ZV9jb25maWcoc3RydWN0DQo+IGludGVsX2Vu
Y29kZXIgKmVuY29kZXIsDQo+ICANCj4gIAlpbnRlbF9kZGlfY29tcHV0ZV9taW5fdm9sdGFnZV9s
ZXZlbChkZXZfcHJpdiwgcGlwZV9jb25maWcpOw0KPiAgDQo+IC0JcGlwZV9jb25maWctPm1zdF9t
YXN0ZXJfdHJhbnNjb2RlciA9DQo+IGludGVsX2RwX21zdF9tYXN0ZXJfdHJhbnNfY29tcHV0ZShz
dGF0ZSwgaW50ZWxfZHApOw0KPiArCXJldHVybiAwOw0KPiArfQ0KPiArDQo+ICsvKg0KPiArICog
SXRlcmF0ZSBvdmVyIGFsbCBjb25uZWN0b3JzIGFuZCByZXR1cm4gYSBtYXNrIG9mDQo+ICsgKiBh
bGwgQ1BVIHRyYW5zY29kZXJzIHN0cmVhbWluZyBvdmVyIHRoZSBzYW1lIERQIGxpbmsuDQo+ICsg
Ki8NCj4gK3N0YXRpYyB1bnNpZ25lZCBpbnQNCj4gK2ludGVsX2RwX21zdF90cmFuc2NvZGVyX21h
c2soc3RydWN0IGludGVsX2F0b21pY19zdGF0ZSAqc3RhdGUsDQo+ICsJCQkgICAgIHN0cnVjdCBp
bnRlbF9kcCAqbXN0X3BvcnQpDQo+ICt7DQo+ICsJc3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmRl
dl9wcml2ID0gdG9faTkxNShzdGF0ZS0+YmFzZS5kZXYpOw0KPiArCWNvbnN0IHN0cnVjdCBpbnRl
bF9kaWdpdGFsX2Nvbm5lY3Rvcl9zdGF0ZSAqY29ubl9zdGF0ZTsNCj4gKwlzdHJ1Y3QgaW50ZWxf
Y29ubmVjdG9yICpjb25uZWN0b3I7DQo+ICsJdTggdHJhbnNjb2RlcnMgPSAwOw0KPiArCWludCBp
Ow0KPiArDQo+ICsJaWYgKElOVEVMX0dFTihkZXZfcHJpdikgPCAxMikNCj4gKwkJcmV0dXJuIDA7
DQo+ICsNCj4gKwlmb3JfZWFjaF9uZXdfaW50ZWxfY29ubmVjdG9yX2luX3N0YXRlKHN0YXRlLCBj
b25uZWN0b3IsDQo+IGNvbm5fc3RhdGUsIGkpIHsNCj4gKwkJY29uc3Qgc3RydWN0IGludGVsX2Ny
dGNfc3RhdGUgKmNydGNfc3RhdGU7DQo+ICsJCXN0cnVjdCBpbnRlbF9jcnRjICpjcnRjOw0KPiAr
DQo+ICsJCWlmIChjb25uZWN0b3ItPm1zdF9wb3J0ICE9IG1zdF9wb3J0IHx8ICFjb25uX3N0YXRl
LQ0KPiA+YmFzZS5jcnRjKQ0KPiArCQkJY29udGludWU7DQo+ICsNCj4gKwkJY3J0YyA9IHRvX2lu
dGVsX2NydGMoY29ubl9zdGF0ZS0+YmFzZS5jcnRjKTsNCj4gKwkJY3J0Y19zdGF0ZSA9IGludGVs
X2F0b21pY19nZXRfbmV3X2NydGNfc3RhdGUoc3RhdGUsDQo+IGNydGMpOw0KPiArDQo+ICsJCWlm
ICghY3J0Y19zdGF0ZS0+aHcuYWN0aXZlKQ0KPiArCQkJY29udGludWU7DQo+ICsNCj4gKwkJdHJh
bnNjb2RlcnMgfD0gQklUKGNydGNfc3RhdGUtPmNwdV90cmFuc2NvZGVyKTsNCj4gKwl9DQo+ICsN
Cj4gKwlyZXR1cm4gdHJhbnNjb2RlcnM7DQo+ICt9DQo+ICsNCj4gK3N0YXRpYyBpbnQgaW50ZWxf
ZHBfbXN0X2NvbXB1dGVfY29uZmlnX2xhdGUoc3RydWN0IGludGVsX2VuY29kZXINCj4gKmVuY29k
ZXIsDQo+ICsJCQkJCSAgICBzdHJ1Y3QgaW50ZWxfY3J0Y19zdGF0ZQ0KPiAqY3J0Y19zdGF0ZSwN
Cj4gKwkJCQkJICAgIHN0cnVjdCBkcm1fY29ubmVjdG9yX3N0YXRlDQo+ICpjb25uX3N0YXRlKQ0K
PiArew0KPiArCXN0cnVjdCBpbnRlbF9hdG9taWNfc3RhdGUgKnN0YXRlID0NCj4gdG9faW50ZWxf
YXRvbWljX3N0YXRlKGNvbm5fc3RhdGUtPnN0YXRlKTsNCj4gKwlzdHJ1Y3QgaW50ZWxfZHBfbXN0
X2VuY29kZXIgKmludGVsX21zdCA9IGVuY190b19tc3QoZW5jb2Rlcik7DQo+ICsJc3RydWN0IGlu
dGVsX2RwICppbnRlbF9kcCA9ICZpbnRlbF9tc3QtPnByaW1hcnktPmRwOw0KPiArDQo+ICsJLyog
bG93ZXN0IG51bWJlcmVkIHRyYW5zY29kZXIgd2lsbCBiZSBkZXNpZ25hdGVkIG1hc3RlciAqLw0K
PiArCWNydGNfc3RhdGUtPm1zdF9tYXN0ZXJfdHJhbnNjb2RlciA9DQo+ICsJCWZmcyhpbnRlbF9k
cF9tc3RfdHJhbnNjb2Rlcl9tYXNrKHN0YXRlLCBpbnRlbF9kcCkpIC0gMTsNCj4gIA0KPiAgCXJl
dHVybiAwOw0KPiAgfQ0KPiBAQCAtNzg2LDYgKzc4OSw3IEBAIGludGVsX2RwX2NyZWF0ZV9mYWtl
X21zdF9lbmNvZGVyKHN0cnVjdA0KPiBpbnRlbF9kaWdpdGFsX3BvcnQgKmludGVsX2RpZ19wb3J0
LCBlbnVtDQo+ICAJaW50ZWxfZW5jb2Rlci0+cGlwZV9tYXNrID0gfjA7DQo+ICANCj4gIAlpbnRl
bF9lbmNvZGVyLT5jb21wdXRlX2NvbmZpZyA9IGludGVsX2RwX21zdF9jb21wdXRlX2NvbmZpZzsN
Cj4gKwlpbnRlbF9lbmNvZGVyLT5jb21wdXRlX2NvbmZpZ19sYXRlID0NCj4gaW50ZWxfZHBfbXN0
X2NvbXB1dGVfY29uZmlnX2xhdGU7DQo+ICAJaW50ZWxfZW5jb2Rlci0+ZGlzYWJsZSA9IGludGVs
X21zdF9kaXNhYmxlX2RwOw0KPiAgCWludGVsX2VuY29kZXItPnBvc3RfZGlzYWJsZSA9IGludGVs
X21zdF9wb3N0X2Rpc2FibGVfZHA7DQo+ICAJaW50ZWxfZW5jb2Rlci0+cHJlX3BsbF9lbmFibGUg
PSBpbnRlbF9tc3RfcHJlX3BsbF9lbmFibGVfZHA7DQpfX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fXwpJbnRlbC1nZnggbWFpbGluZyBsaXN0CkludGVsLWdmeEBs
aXN0cy5mcmVlZGVza3RvcC5vcmcKaHR0cHM6Ly9saXN0cy5mcmVlZGVza3RvcC5vcmcvbWFpbG1h
bi9saXN0aW5mby9pbnRlbC1nZngK

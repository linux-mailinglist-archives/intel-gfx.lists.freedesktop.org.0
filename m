Return-Path: <intel-gfx-bounces@lists.freedesktop.org>
X-Original-To: lists+intel-gfx@lfdr.de
Delivered-To: lists+intel-gfx@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [131.252.210.177])
	by mail.lfdr.de (Postfix) with ESMTPS id 2D87BFF47A
	for <lists+intel-gfx@lfdr.de>; Sat, 16 Nov 2019 18:51:58 +0100 (CET)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 285896E199;
	Sat, 16 Nov 2019 17:51:52 +0000 (UTC)
X-Original-To: intel-gfx@lists.freedesktop.org
Delivered-To: intel-gfx@lists.freedesktop.org
Received: from fireflyinternet.com (mail.fireflyinternet.com [109.228.58.192])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 06B0F6E187
 for <intel-gfx@lists.freedesktop.org>; Sat, 16 Nov 2019 17:51:50 +0000 (UTC)
X-Default-Received-SPF: pass (skip=forwardok (res=PASS))
 x-ip-name=78.156.65.138; 
Received: from haswell.alporthouse.com (unverified [78.156.65.138]) 
 by fireflyinternet.com (Firefly Internet (M1)) with ESMTP id 19226419-1500050 
 for multiple; Sat, 16 Nov 2019 17:51:41 +0000
From: Chris Wilson <chris@chris-wilson.co.uk>
To: intel-gfx@lists.freedesktop.org
Date: Sat, 16 Nov 2019 17:51:30 +0000
Message-Id: <20191116175139.1790440-2-chris@chris-wilson.co.uk>
X-Mailer: git-send-email 2.24.0
In-Reply-To: <20191116175139.1790440-1-chris@chris-wilson.co.uk>
References: <20191116175139.1790440-1-chris@chris-wilson.co.uk>
MIME-Version: 1.0
Subject: [Intel-gfx] [PATCH 02/11] drm/i915: Mark up the calling context for
 intel_wakeref_put()
X-BeenThere: intel-gfx@lists.freedesktop.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: Intel graphics driver community testing & development
 <intel-gfx.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/intel-gfx>
List-Post: <mailto:intel-gfx@lists.freedesktop.org>
List-Help: <mailto:intel-gfx-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: intel-gfx-bounces@lists.freedesktop.org
Sender: "Intel-gfx" <intel-gfx-bounces@lists.freedesktop.org>

UHJldmlvdXNseSwgd2UgYXNzdW1lZCB3ZSBjb3VsZCB1c2UgbXV0ZXhfdHJ5bG9jaygpIHdpdGhp
biBhbiBhdG9taWMKY29udGV4dCwgZmFsbGluZyBiYWNrIHRvIGEgd29ya2luZyBpZiBjb250ZW5k
ZWQuIEhvd2V2ZXIsIHN1Y2ggdHJpY2tlcnkKaXMgaWxsZWdhbCBpbnNpZGUgaW50ZXJydXB0IGNv
bnRleHQsIGFuZCBzbyB3ZSBuZWVkIHRvIGFsd2F5cyB1c2UgYQp3b3JrZXIgdW5kZXIgc3VjaCBj
aXJjdW1zdGFuY2VzLiBBcyB3ZSBub3JtYWxseSBhcmUgaW4gcHJvY2VzcyBjb250ZXh0LAp3ZSBj
YW4gdHlwaWNhbGx5IHVzZSBhIHBsYWluIG11dGV4LCBhbmQgb25seSBkZWZlciB0byBhIHdvcmsg
d2hlbiB3ZQprbm93IHdlIGFyZSBjYWxsZXIgZnJvbSBhbiBpbnRlcnJ1cHQgcGF0aC4KCkZpeGVz
OiA1MWZiZDhkZTg3ZGMgKCJkcm0vaTkxNS9wbXU6IEF0b21pY2FsbHkgYWNxdWlyZSB0aGUgZ3Rf
cG0gd2FrZXJlZiIpClJlZmVyZW5jZXM6IGEwODU1ZDI0ZmMyMmQgKCJsb2NraW5nL211dGV4OiBD
b21wbGFpbiB1cG9uIG11dGV4IEFQSSBtaXN1c2UgaW4gSVJRIGNvbnRleHRzIikKUmVmZXJlbmNl
czogaHR0cHM6Ly9idWdzLmZyZWVkZXNrdG9wLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTExNjI2ClNp
Z25lZC1vZmYtYnk6IENocmlzIFdpbHNvbiA8Y2hyaXNAY2hyaXMtd2lsc29uLmNvLnVrPgpDYzog
VHZydGtvIFVyc3VsaW4gPHR2cnRrby51cnN1bGluQGludGVsLmNvbT4KLS0tCiBkcml2ZXJzL2dw
dS9kcm0vaTkxNS9ndC9pbnRlbF9lbmdpbmVfcG0uaCB8ICA1ICsrKwogZHJpdmVycy9ncHUvZHJt
L2k5MTUvZ3QvaW50ZWxfZ3RfcG0uYyAgICAgfCAgMSAtCiBkcml2ZXJzL2dwdS9kcm0vaTkxNS9n
dC9pbnRlbF9ndF9wbS5oICAgICB8ICA1ICsrKwogZHJpdmVycy9ncHUvZHJtL2k5MTUvZ3QvaW50
ZWxfbHJjLmMgICAgICAgfCAgMiArLQogZHJpdmVycy9ncHUvZHJtL2k5MTUvaTkxNV9wbXUuYyAg
ICAgICAgICAgfCAgNiArKy0tCiBkcml2ZXJzL2dwdS9kcm0vaTkxNS9pbnRlbF93YWtlcmVmLmMg
ICAgICB8IDM3ICsrKysrKysrKy0tLS0tLS0tLS0tLS0tCiBkcml2ZXJzL2dwdS9kcm0vaTkxNS9p
bnRlbF93YWtlcmVmLmggICAgICB8IDI3ICsrKysrKysrKysrLS0tLS0tCiA3IGZpbGVzIGNoYW5n
ZWQsIDQ2IGluc2VydGlvbnMoKyksIDM3IGRlbGV0aW9ucygtKQoKZGlmZiAtLWdpdCBhL2RyaXZl
cnMvZ3B1L2RybS9pOTE1L2d0L2ludGVsX2VuZ2luZV9wbS5oIGIvZHJpdmVycy9ncHUvZHJtL2k5
MTUvZ3QvaW50ZWxfZW5naW5lX3BtLmgKaW5kZXggNzM5YzUwZmVmY2VmLi42ZGIwN2JkZDFlZWYg
MTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2d0L2ludGVsX2VuZ2luZV9wbS5oCisr
KyBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2d0L2ludGVsX2VuZ2luZV9wbS5oCkBAIC0zMSw2ICsz
MSwxMSBAQCBzdGF0aWMgaW5saW5lIHZvaWQgaW50ZWxfZW5naW5lX3BtX3B1dChzdHJ1Y3QgaW50
ZWxfZW5naW5lX2NzICplbmdpbmUpCiAJaW50ZWxfd2FrZXJlZl9wdXQoJmVuZ2luZS0+d2FrZXJl
Zik7CiB9CiAKK3N0YXRpYyBpbmxpbmUgdm9pZCBpbnRlbF9lbmdpbmVfcG1fcHV0X2FzeW5jKHN0
cnVjdCBpbnRlbF9lbmdpbmVfY3MgKmVuZ2luZSkKK3sKKwlpbnRlbF93YWtlcmVmX3B1dF9hc3lu
YygmZW5naW5lLT53YWtlcmVmKTsKK30KKwogdm9pZCBpbnRlbF9lbmdpbmVfaW5pdF9fcG0oc3Ry
dWN0IGludGVsX2VuZ2luZV9jcyAqZW5naW5lKTsKIAogI2VuZGlmIC8qIElOVEVMX0VOR0lORV9Q
TV9IICovCmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9ndC9pbnRlbF9ndF9wbS5j
IGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvZ3QvaW50ZWxfZ3RfcG0uYwppbmRleCBlNjFmNzUyYTNj
ZDUuLjdhOTA0NGFjNGI3NSAxMDA2NDQKLS0tIGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvZ3QvaW50
ZWxfZ3RfcG0uYworKysgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9ndC9pbnRlbF9ndF9wbS5jCkBA
IC0xMDUsNyArMTA1LDYgQEAgc3RhdGljIGludCBfX2d0X3Bhcmsoc3RydWN0IGludGVsX3dha2Vy
ZWYgKndmKQogc3RhdGljIGNvbnN0IHN0cnVjdCBpbnRlbF93YWtlcmVmX29wcyB3Zl9vcHMgPSB7
CiAJLmdldCA9IF9fZ3RfdW5wYXJrLAogCS5wdXQgPSBfX2d0X3BhcmssCi0JLmZsYWdzID0gSU5U
RUxfV0FLRVJFRl9QVVRfQVNZTkMsCiB9OwogCiB2b2lkIGludGVsX2d0X3BtX2luaXRfZWFybHko
c3RydWN0IGludGVsX2d0ICpndCkKZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2d0
L2ludGVsX2d0X3BtLmggYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9ndC9pbnRlbF9ndF9wbS5oCmlu
ZGV4IGIzZTE3Mzk5YmU5Yi4uOTkwZWZjMjdhNGU0IDEwMDY0NAotLS0gYS9kcml2ZXJzL2dwdS9k
cm0vaTkxNS9ndC9pbnRlbF9ndF9wbS5oCisrKyBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2d0L2lu
dGVsX2d0X3BtLmgKQEAgLTMyLDYgKzMyLDExIEBAIHN0YXRpYyBpbmxpbmUgdm9pZCBpbnRlbF9n
dF9wbV9wdXQoc3RydWN0IGludGVsX2d0ICpndCkKIAlpbnRlbF93YWtlcmVmX3B1dCgmZ3QtPndh
a2VyZWYpOwogfQogCitzdGF0aWMgaW5saW5lIHZvaWQgaW50ZWxfZ3RfcG1fcHV0X2FzeW5jKHN0
cnVjdCBpbnRlbF9ndCAqZ3QpCit7CisJaW50ZWxfd2FrZXJlZl9wdXRfYXN5bmMoJmd0LT53YWtl
cmVmKTsKK30KKwogc3RhdGljIGlubGluZSBpbnQgaW50ZWxfZ3RfcG1fd2FpdF9mb3JfaWRsZShz
dHJ1Y3QgaW50ZWxfZ3QgKmd0KQogewogCXJldHVybiBpbnRlbF93YWtlcmVmX3dhaXRfZm9yX2lk
bGUoJmd0LT53YWtlcmVmKTsKZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2d0L2lu
dGVsX2xyYy5jIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvZ3QvaW50ZWxfbHJjLmMKaW5kZXggMzNj
ZTI1OGQ0ODRmLi5iNjViYzA2ODU1YjAgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1
L2d0L2ludGVsX2xyYy5jCisrKyBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2d0L2ludGVsX2xyYy5j
CkBAIC0xMTcyLDcgKzExNzIsNyBAQCBfX2V4ZWNsaXN0c19zY2hlZHVsZV9vdXQoc3RydWN0IGk5
MTVfcmVxdWVzdCAqcnEsCiAKIAlpbnRlbF9lbmdpbmVfY29udGV4dF9vdXQoZW5naW5lKTsKIAll
eGVjbGlzdHNfY29udGV4dF9zdGF0dXNfY2hhbmdlKHJxLCBJTlRFTF9DT05URVhUX1NDSEVEVUxF
X09VVCk7Ci0JaW50ZWxfZ3RfcG1fcHV0KGVuZ2luZS0+Z3QpOworCWludGVsX2d0X3BtX3B1dF9h
c3luYyhlbmdpbmUtPmd0KTsKIAogCS8qCiAJICogSWYgdGhpcyBpcyBwYXJ0IG9mIGEgdmlydHVh
bCBlbmdpbmUsIGl0cyBuZXh0IHJlcXVlc3QgbWF5CmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9k
cm0vaTkxNS9pOTE1X3BtdS5jIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvaTkxNV9wbXUuYwppbmRl
eCA5YjAyYmUwYWQ0ZTYuLjk1ZTgyNGE3OGQ0ZCAxMDA2NDQKLS0tIGEvZHJpdmVycy9ncHUvZHJt
L2k5MTUvaTkxNV9wbXUuYworKysgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9pOTE1X3BtdS5jCkBA
IC0xOTAsNyArMTkwLDcgQEAgc3RhdGljIHU2NCBnZXRfcmM2KHN0cnVjdCBpbnRlbF9ndCAqZ3Qp
CiAJdmFsID0gMDsKIAlpZiAoaW50ZWxfZ3RfcG1fZ2V0X2lmX2F3YWtlKGd0KSkgewogCQl2YWwg
PSBfX2dldF9yYzYoZ3QpOwotCQlpbnRlbF9ndF9wbV9wdXQoZ3QpOworCQlpbnRlbF9ndF9wbV9w
dXRfYXN5bmMoZ3QpOwogCX0KIAogCXNwaW5fbG9ja19pcnFzYXZlKCZwbXUtPmxvY2ssIGZsYWdz
KTsKQEAgLTM2MCw3ICszNjAsNyBAQCBlbmdpbmVzX3NhbXBsZShzdHJ1Y3QgaW50ZWxfZ3QgKmd0
LCB1bnNpZ25lZCBpbnQgcGVyaW9kX25zKQogc2tpcDoKIAkJaWYgKHVubGlrZWx5KG1taW9fbG9j
aykpCiAJCQlzcGluX3VubG9ja19pcnFyZXN0b3JlKG1taW9fbG9jaywgZmxhZ3MpOwotCQlpbnRl
bF9lbmdpbmVfcG1fcHV0KGVuZ2luZSk7CisJCWludGVsX2VuZ2luZV9wbV9wdXRfYXN5bmMoZW5n
aW5lKTsKIAl9CiB9CiAKQEAgLTM5OCw3ICszOTgsNyBAQCBmcmVxdWVuY3lfc2FtcGxlKHN0cnVj
dCBpbnRlbF9ndCAqZ3QsIHVuc2lnbmVkIGludCBwZXJpb2RfbnMpCiAJCQlpZiAoc3RhdCkKIAkJ
CQl2YWwgPSBpbnRlbF9nZXRfY2FnZihycHMsIHN0YXQpOwogCi0JCQlpbnRlbF9ndF9wbV9wdXQo
Z3QpOworCQkJaW50ZWxfZ3RfcG1fcHV0X2FzeW5jKGd0KTsKIAkJfQogCiAJCWFkZF9zYW1wbGVf
bXVsdCgmcG11LT5zYW1wbGVbX19JOTE1X1NBTVBMRV9GUkVRX0FDVF0sCmRpZmYgLS1naXQgYS9k
cml2ZXJzL2dwdS9kcm0vaTkxNS9pbnRlbF93YWtlcmVmLmMgYi9kcml2ZXJzL2dwdS9kcm0vaTkx
NS9pbnRlbF93YWtlcmVmLmMKaW5kZXggODY4Y2M3ODA0OGQwLi44MDg0Y2RlZDYyZGIgMTAwNjQ0
Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2ludGVsX3dha2VyZWYuYworKysgYi9kcml2ZXJz
L2dwdS9kcm0vaTkxNS9pbnRlbF93YWtlcmVmLmMKQEAgLTUyLDkgKzUyLDIwIEBAIGludCBfX2lu
dGVsX3dha2VyZWZfZ2V0X2ZpcnN0KHN0cnVjdCBpbnRlbF93YWtlcmVmICp3ZikKIAlyZXR1cm4g
MDsKIH0KIAotc3RhdGljIHZvaWQgX19fX2ludGVsX3dha2VyZWZfcHV0X2xhc3Qoc3RydWN0IGlu
dGVsX3dha2VyZWYgKndmKQordm9pZCBfX2ludGVsX3dha2VyZWZfcHV0X2xhc3Qoc3RydWN0IGlu
dGVsX3dha2VyZWYgKndmLCB1bnNpZ25lZCBsb25nIGZsYWdzKQogewotCWlmICghYXRvbWljX2Rl
Y19hbmRfdGVzdCgmd2YtPmNvdW50KSkKKwlJTlRFTF9XQUtFUkVGX0JVR19PTih3b3JrX3BlbmRp
bmcoJndmLT53b3JrKSk7CisKKwkvKiBBc3N1bWUgd2UgYXJlIG5vdCBpbiBwcm9jZXNzIGNvbnRl
eHQgYW5kIHNvIGNhbm5vdCBzbGVlcC4gKi8KKwlpZiAoZmxhZ3MgJiBJTlRFTF9XQUtFUkVGX1BV
VF9BU1lOQykgeworCQlzY2hlZHVsZV93b3JrKCZ3Zi0+d29yayk7CisJCXJldHVybjsKKwl9CisK
KwltdXRleF9sb2NrKCZ3Zi0+bXV0ZXgpOworCisJSU5URUxfV0FLRVJFRl9CVUdfT04oYXRvbWlj
X3JlYWQoJndmLT5jb3VudCkgPD0gMCk7CisJaWYgKHVubGlrZWx5KCFhdG9taWNfZGVjX2FuZF90
ZXN0KCZ3Zi0+Y291bnQpKSkKIAkJZ290byB1bmxvY2s7CiAKIAkvKiBvcHMtPnB1dCgpIG11c3Qg
cmVzY2hlZHVsZSBpdHMgb3duIHJlbGVhc2Ugb24gZXJyb3IvZGVmZXJyYWwgKi8KQEAgLTY3LDI5
ICs3OCw5IEBAIHN0YXRpYyB2b2lkIF9fX19pbnRlbF93YWtlcmVmX3B1dF9sYXN0KHN0cnVjdCBp
bnRlbF93YWtlcmVmICp3ZikKIAltdXRleF91bmxvY2soJndmLT5tdXRleCk7CiB9CiAKLXZvaWQg
X19pbnRlbF93YWtlcmVmX3B1dF9sYXN0KHN0cnVjdCBpbnRlbF93YWtlcmVmICp3ZikKLXsKLQlJ
TlRFTF9XQUtFUkVGX0JVR19PTih3b3JrX3BlbmRpbmcoJndmLT53b3JrKSk7Ci0KLQkvKiBBc3N1
bWUgd2UgYXJlIG5vdCBpbiBwcm9jZXNzIGNvbnRleHQgYW5kIHNvIGNhbm5vdCBzbGVlcC4gKi8K
LQlpZiAod2YtPm9wcy0+ZmxhZ3MgJiBJTlRFTF9XQUtFUkVGX1BVVF9BU1lOQyB8fAotCSAgICAh
bXV0ZXhfdHJ5bG9jaygmd2YtPm11dGV4KSkgewotCQlzY2hlZHVsZV93b3JrKCZ3Zi0+d29yayk7
Ci0JCXJldHVybjsKLQl9Ci0KLQlfX19faW50ZWxfd2FrZXJlZl9wdXRfbGFzdCh3Zik7Ci19Ci0K
IHN0YXRpYyB2b2lkIF9faW50ZWxfd2FrZXJlZl9wdXRfd29yayhzdHJ1Y3Qgd29ya19zdHJ1Y3Qg
KndyaykKIHsKLQlzdHJ1Y3QgaW50ZWxfd2FrZXJlZiAqd2YgPSBjb250YWluZXJfb2Yod3JrLCB0
eXBlb2YoKndmKSwgd29yayk7Ci0KLQlpZiAoYXRvbWljX2FkZF91bmxlc3MoJndmLT5jb3VudCwg
LTEsIDEpKQotCQlyZXR1cm47Ci0KLQltdXRleF9sb2NrKCZ3Zi0+bXV0ZXgpOwotCV9fX19pbnRl
bF93YWtlcmVmX3B1dF9sYXN0KHdmKTsKKwlpbnRlbF93YWtlcmVmX3B1dChjb250YWluZXJfb2Yo
d3JrLCBzdHJ1Y3QgaW50ZWxfd2FrZXJlZiwgd29yaykpOwogfQogCiB2b2lkIF9faW50ZWxfd2Fr
ZXJlZl9pbml0KHN0cnVjdCBpbnRlbF93YWtlcmVmICp3ZiwKZGlmZiAtLWdpdCBhL2RyaXZlcnMv
Z3B1L2RybS9pOTE1L2ludGVsX3dha2VyZWYuaCBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2ludGVs
X3dha2VyZWYuaAppbmRleCA1ZjBjOTcyYTgwZmIuLmZmNDg3NjA5MzU0MSAxMDA2NDQKLS0tIGEv
ZHJpdmVycy9ncHUvZHJtL2k5MTUvaW50ZWxfd2FrZXJlZi5oCisrKyBiL2RyaXZlcnMvZ3B1L2Ry
bS9pOTE1L2ludGVsX3dha2VyZWYuaApAQCAtMjksOSArMjksNiBAQCB0eXBlZGVmIGRlcG90X3N0
YWNrX2hhbmRsZV90IGludGVsX3dha2VyZWZfdDsKIHN0cnVjdCBpbnRlbF93YWtlcmVmX29wcyB7
CiAJaW50ICgqZ2V0KShzdHJ1Y3QgaW50ZWxfd2FrZXJlZiAqd2YpOwogCWludCAoKnB1dCkoc3Ry
dWN0IGludGVsX3dha2VyZWYgKndmKTsKLQotCXVuc2lnbmVkIGxvbmcgZmxhZ3M7Ci0jZGVmaW5l
IElOVEVMX1dBS0VSRUZfUFVUX0FTWU5DIEJJVCgwKQogfTsKIAogc3RydWN0IGludGVsX3dha2Vy
ZWYgewpAQCAtNTcsNyArNTQsNyBAQCB2b2lkIF9faW50ZWxfd2FrZXJlZl9pbml0KHN0cnVjdCBp
bnRlbF93YWtlcmVmICp3ZiwKIH0gd2hpbGUgKDApCiAKIGludCBfX2ludGVsX3dha2VyZWZfZ2V0
X2ZpcnN0KHN0cnVjdCBpbnRlbF93YWtlcmVmICp3Zik7Ci12b2lkIF9faW50ZWxfd2FrZXJlZl9w
dXRfbGFzdChzdHJ1Y3QgaW50ZWxfd2FrZXJlZiAqd2YpOwordm9pZCBfX2ludGVsX3dha2VyZWZf
cHV0X2xhc3Qoc3RydWN0IGludGVsX3dha2VyZWYgKndmLCB1bnNpZ25lZCBsb25nIGZsYWdzKTsK
IAogLyoqCiAgKiBpbnRlbF93YWtlcmVmX2dldDogQWNxdWlyZSB0aGUgd2FrZXJlZgpAQCAtMTAw
LDEwICs5Nyw5IEBAIGludGVsX3dha2VyZWZfZ2V0X2lmX2FjdGl2ZShzdHJ1Y3QgaW50ZWxfd2Fr
ZXJlZiAqd2YpCiB9CiAKIC8qKgotICogaW50ZWxfd2FrZXJlZl9wdXQ6IFJlbGVhc2UgdGhlIHdh
a2VyZWYKLSAqIEBpOTE1OiB0aGUgZHJtX2k5MTVfcHJpdmF0ZSBkZXZpY2UKKyAqIGludGVsX3dh
a2VyZWZfcHV0X2ZsYWdzOiBSZWxlYXNlIHRoZSB3YWtlcmVmCiAgKiBAd2Y6IHRoZSB3YWtlcmVm
Ci0gKiBAZm46IGNhbGxiYWNrIGZvciByZWxlYXNpbmcgdGhlIHdha2VyZWYsIGNhbGxlZCBvbmx5
IG9uIGZpbmFsIHJlbGVhc2UuCisgKiBAZmxhZ3M6IGNvbnRyb2wgZmxhZ3MKICAqCiAgKiBSZWxl
YXNlIG91ciBob2xkIG9uIHRoZSB3YWtlcmVmLiBXaGVuIHRoZXJlIGFyZSBubyBtb3JlIHVzZXJz
LAogICogdGhlIHJ1bnRpbWUgcG0gd2FrZXJlZiB3aWxsIGJlIHJlbGVhc2VkIGFmdGVyIHRoZSBA
Zm4gY2FsbGJhY2sgaXMgY2FsbGVkCkBAIC0xMTYsMTEgKzExMiwyNCBAQCBpbnRlbF93YWtlcmVm
X2dldF9pZl9hY3RpdmUoc3RydWN0IGludGVsX3dha2VyZWYgKndmKQogICogY29kZSBvdGhlcndp
c2UuCiAgKi8KIHN0YXRpYyBpbmxpbmUgdm9pZAotaW50ZWxfd2FrZXJlZl9wdXQoc3RydWN0IGlu
dGVsX3dha2VyZWYgKndmKQorX19pbnRlbF93YWtlcmVmX3B1dChzdHJ1Y3QgaW50ZWxfd2FrZXJl
ZiAqd2YsIHVuc2lnbmVkIGxvbmcgZmxhZ3MpCisjZGVmaW5lIElOVEVMX1dBS0VSRUZfUFVUX0FT
WU5DIEJJVCgwKQogewogCUlOVEVMX1dBS0VSRUZfQlVHX09OKGF0b21pY19yZWFkKCZ3Zi0+Y291
bnQpIDw9IDApOwogCWlmICh1bmxpa2VseSghYXRvbWljX2FkZF91bmxlc3MoJndmLT5jb3VudCwg
LTEsIDEpKSkKLQkJX19pbnRlbF93YWtlcmVmX3B1dF9sYXN0KHdmKTsKKwkJX19pbnRlbF93YWtl
cmVmX3B1dF9sYXN0KHdmLCBmbGFncyk7Cit9CisKK3N0YXRpYyBpbmxpbmUgdm9pZAoraW50ZWxf
d2FrZXJlZl9wdXQoc3RydWN0IGludGVsX3dha2VyZWYgKndmKQoreworCV9faW50ZWxfd2FrZXJl
Zl9wdXQod2YsIDApOworfQorCitzdGF0aWMgaW5saW5lIHZvaWQKK2ludGVsX3dha2VyZWZfcHV0
X2FzeW5jKHN0cnVjdCBpbnRlbF93YWtlcmVmICp3ZikKK3sKKwlfX2ludGVsX3dha2VyZWZfcHV0
KHdmLCBJTlRFTF9XQUtFUkVGX1BVVF9BU1lOQyk7CiB9CiAKIC8qKgotLSAKMi4yNC4wCgpfX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpJbnRlbC1nZnggbWFp
bGluZyBsaXN0CkludGVsLWdmeEBsaXN0cy5mcmVlZGVza3RvcC5vcmcKaHR0cHM6Ly9saXN0cy5m
cmVlZGVza3RvcC5vcmcvbWFpbG1hbi9saXN0aW5mby9pbnRlbC1nZng=

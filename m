Return-Path: <intel-gfx-bounces@lists.freedesktop.org>
X-Original-To: lists+intel-gfx@lfdr.de
Delivered-To: lists+intel-gfx@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [IPv6:2610:10:20:722:a800:ff:fe36:1795])
	by mail.lfdr.de (Postfix) with ESMTPS id E0E19181500
	for <lists+intel-gfx@lfdr.de>; Wed, 11 Mar 2020 10:35:03 +0100 (CET)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 314B16E95C;
	Wed, 11 Mar 2020 09:34:59 +0000 (UTC)
X-Original-To: intel-gfx@lists.freedesktop.org
Delivered-To: intel-gfx@lists.freedesktop.org
Received: from fireflyinternet.com (mail.fireflyinternet.com [109.228.58.192])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 0B11D6E95A;
 Wed, 11 Mar 2020 09:34:57 +0000 (UTC)
X-Default-Received-SPF: pass (skip=forwardok (res=PASS))
 x-ip-name=78.156.65.138; 
Received: from haswell.alporthouse.com (unverified [78.156.65.138]) 
 by fireflyinternet.com (Firefly Internet (M1)) with ESMTP id 20518711-1500050 
 for multiple; Wed, 11 Mar 2020 09:34:51 +0000
From: Chris Wilson <chris@chris-wilson.co.uk>
To: intel-gfx@lists.freedesktop.org
Date: Wed, 11 Mar 2020 09:34:47 +0000
Message-Id: <20200311093448.4103262-4-chris@chris-wilson.co.uk>
X-Mailer: git-send-email 2.25.1
In-Reply-To: <20200311093448.4103262-1-chris@chris-wilson.co.uk>
References: <20200311093448.4103262-1-chris@chris-wilson.co.uk>
MIME-Version: 1.0
Subject: [Intel-gfx] [PATCH i-g-t 4/5] i915: Exercise sysfs heartbeat
 controls
X-BeenThere: intel-gfx@lists.freedesktop.org
X-Mailman-Version: 2.1.29
Precedence: list
List-Id: Intel graphics driver community testing & development
 <intel-gfx.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/intel-gfx>
List-Post: <mailto:intel-gfx@lists.freedesktop.org>
List-Help: <mailto:intel-gfx-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=subscribe>
Cc: igt-dev@lists.freedesktop.org
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: intel-gfx-bounces@lists.freedesktop.org
Sender: "Intel-gfx" <intel-gfx-bounces@lists.freedesktop.org>

V2UgW3dpbGxdIGV4cG9zZSB2YXJpb3VzIHBlci1lbmdpbmUgc2NoZWR1bGluZyBjb250cm9scy4g
T25lIG9mIHdoaWNoLAonaGVhcnRiZWF0X2R1cmF0aW9uX21zJywgZGVmaW5lcyBob3cgb2Z0ZW4g
d2Ugc2VuZCBhIGhlYXJ0YmVhdCBkb3duIHRoZQplbmdpbmUgdG8gY2hlY2sgdXBvbiB0aGUgaGVh
bHRoIG9mIHRoZSBlbmdpbmUuIElmIGEgaGVhcnRiZWF0IGRvZXMgbm90CmNvbXBsZXRlIHdpdGhp
biB0aGUgaW50ZXJ2YWwgKG9yIHR3byksIHRoZSBlbmdpbmUgaXMgZGVjbGFyZWQgaHVuZy4KClNp
Z25lZC1vZmYtYnk6IENocmlzIFdpbHNvbiA8Y2hyaXNAY2hyaXMtd2lsc29uLmNvLnVrPgotLS0K
IHRlc3RzL01ha2VmaWxlLnNvdXJjZXMgICAgICAgICAgICAgICAgfCAgIDMgKwogdGVzdHMvaTkx
NS9zeXNmc19oZWFydGJlYXRfaW50ZXJ2YWwuYyB8IDQ0NiArKysrKysrKysrKysrKysrKysrKysr
KysrKwogdGVzdHMvaW50ZWwtY2kvYmxhY2tsaXN0LnR4dCAgICAgICAgICB8ICAgMSArCiB0ZXN0
cy9tZXNvbi5idWlsZCAgICAgICAgICAgICAgICAgICAgIHwgICAxICsKIDQgZmlsZXMgY2hhbmdl
ZCwgNDUxIGluc2VydGlvbnMoKykKIGNyZWF0ZSBtb2RlIDEwMDY0NCB0ZXN0cy9pOTE1L3N5c2Zz
X2hlYXJ0YmVhdF9pbnRlcnZhbC5jCgpkaWZmIC0tZ2l0IGEvdGVzdHMvTWFrZWZpbGUuc291cmNl
cyBiL3Rlc3RzL01ha2VmaWxlLnNvdXJjZXMKaW5kZXggYzE3MTFiMzM2Li43YjFmODE5NGQgMTAw
NjQ0Ci0tLSBhL3Rlc3RzL01ha2VmaWxlLnNvdXJjZXMKKysrIGIvdGVzdHMvTWFrZWZpbGUuc291
cmNlcwpAQCAtMTA0LDYgKzEwNCw5IEBAIFRFU1RTX3Byb2dzID0gXAogCXZnZW1fc2xvdyBcCiAJ
JChOVUxMKQogCitURVNUU19wcm9ncyArPSBzeXNmc19oZWFydGJlYXRfaW50ZXJ2YWwKK3N5c2Zz
X2hlYXJ0YmVhdF9pbnRlcnZhbF9TT1VSQ0VTID0gaTkxNS9zeXNmc19oZWFydGJlYXRfaW50ZXJ2
YWwuYworCiBURVNUU19wcm9ncyArPSBzeXNmc19wcmVlbXB0X3RpbWVvdXQKIHN5c2ZzX3ByZWVt
cHRfdGltZW91dF9TT1VSQ0VTID0gaTkxNS9zeXNmc19wcmVlbXB0X3RpbWVvdXQuYwogCmRpZmYg
LS1naXQgYS90ZXN0cy9pOTE1L3N5c2ZzX2hlYXJ0YmVhdF9pbnRlcnZhbC5jIGIvdGVzdHMvaTkx
NS9zeXNmc19oZWFydGJlYXRfaW50ZXJ2YWwuYwpuZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRleCAw
MDAwMDAwMDAuLjBiYTE5YjI2MwotLS0gL2Rldi9udWxsCisrKyBiL3Rlc3RzL2k5MTUvc3lzZnNf
aGVhcnRiZWF0X2ludGVydmFsLmMKQEAgLTAsMCArMSw0NDYgQEAKKy8qCisgKiBDb3B5cmlnaHQg
wqkgMjAxOSBJbnRlbCBDb3Jwb3JhdGlvbgorICoKKyAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdy
YW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhCisgKiBjb3B5
IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhl
ICJTb2Z0d2FyZSIpLAorICogdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmlj
dGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbgorICogdGhlIHJpZ2h0cyB0byB1c2Us
IGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsCisg
KiBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNv
bnMgdG8gd2hvbSB0aGUKKyAqIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVj
dCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6CisgKgorICogVGhlIGFib3ZlIGNvcHlyaWdo
dCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2UgKGluY2x1ZGluZyB0aGUgbmV4dAor
ICogcGFyYWdyYXBoKSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50
aWFsIHBvcnRpb25zIG9mIHRoZQorICogU29mdHdhcmUuCisgKgorICogVEhFIFNPRlRXQVJFIElT
IFBST1ZJREVEICJBUyBJUyIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Mg
T1IKKyAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJ
RVMgT0YgTUVSQ0hBTlRBQklMSVRZLAorICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBP
U0UgQU5EIE5PTklORlJJTkdFTUVOVC4gIElOIE5PIEVWRU5UIFNIQUxMCisgKiBUSEUgQVVUSE9S
UyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBP
UiBPVEhFUgorICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwg
VE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcKKyAqIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNU
SU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MKKyAqIElO
IFRIRSBTT0ZUV0FSRS4KKyAqLworCisjaW5jbHVkZSA8ZGlyZW50Lmg+CisjaW5jbHVkZSA8ZXJy
bm8uaD4KKyNpbmNsdWRlIDxmY250bC5oPgorI2luY2x1ZGUgPGludHR5cGVzLmg+CisjaW5jbHVk
ZSA8c2lnbmFsLmg+CisjaW5jbHVkZSA8c3lzL3N0YXQuaD4KKyNpbmNsdWRlIDxzeXMvdHlwZXMu
aD4KKyNpbmNsdWRlIDxzeXMvd2FpdC5oPgorI2luY2x1ZGUgPHVuaXN0ZC5oPgorCisjaW5jbHVk
ZSAiZHJtdGVzdC5oIiAvKiBnZW1fcXVpZXNjZW50X2dwdSgpISAqLworI2luY2x1ZGUgImk5MTUv
Z2VtX2VuZ2luZV90b3BvbG9neS5oIgorI2luY2x1ZGUgImlndF9kdW1teWxvYWQuaCIKKyNpbmNs
dWRlICJpZ3Rfc3lzZnMuaCIKKyNpbmNsdWRlICJpb2N0bF93cmFwcGVycy5oIiAvKiBpZ3RfcmVx
dWlyZV9nZW0oKSEgKi8KKyNpbmNsdWRlICJzd19zeW5jLmgiCisKKyNpbmNsdWRlICJpZ3RfZGVi
dWdmcy5oIgorCisjZGVmaW5lIEFUVFIgImhlYXJ0YmVhdF9pbnRlcnZhbF9tcyIKKyNkZWZpbmUg
UkVTRVRfVElNRU9VVCAyMCAvKiBtaWxsaXNlY29uZHMsIGF0IGxlYXN0IG9uZSBqaWZmaWUgZm9y
IGt3b3JrZXIgKi8KKworc3RhdGljIGJvb2wgX19lbmFibGVfaGFuZ2NoZWNrKGludCBkaXIsIGJv
b2wgc3RhdGUpCit7CisJcmV0dXJuIGlndF9zeXNmc19zZXQoZGlyLCAiZW5hYmxlX2hhbmdjaGVj
ayIsIHN0YXRlID8gIjEiIDogIjAiKTsKK30KKworc3RhdGljIHZvaWQgZW5hYmxlX2hhbmdjaGVj
ayhpbnQgaTkxNSwgYm9vbCBzdGF0ZSkKK3sKKwlpbnQgZGlyOworCisJZGlyID0gaWd0X3N5c2Zz
X29wZW5fcGFyYW1ldGVycyhpOTE1KTsKKwlpZiAoZGlyIDwgMCkgLyogbm8gcGFyYW1ldGVycywg
bXVzdCBiZSBkZWZhdWx0ISAqLworCQlyZXR1cm47CisKKwlfX2VuYWJsZV9oYW5nY2hlY2soZGly
LCBzdGF0ZSk7CisJY2xvc2UoZGlyKTsKK30KKworc3RhdGljIHZvaWQgc2V0X2hlYXJ0YmVhdChp
bnQgZW5naW5lLCB1bnNpZ25lZCBpbnQgdmFsdWUpCit7CisJdW5zaWduZWQgaW50IGRlbGF5ID0g
fnZhbHVlOworCisJaWd0X2RlYnVnKCJzZXQgJXM6JWRcbiIsIEFUVFIsIHZhbHVlKTsKKwlpZ3Rf
cmVxdWlyZShpZ3Rfc3lzZnNfcHJpbnRmKGVuZ2luZSwgQVRUUiwgIiV1IiwgdmFsdWUpID4gMCk7
CisJaWd0X3N5c2ZzX3NjYW5mKGVuZ2luZSwgQVRUUiwgIiV1IiwgJmRlbGF5KTsKKwlpZ3RfYXNz
ZXJ0X2VxKGRlbGF5LCB2YWx1ZSk7Cit9CisKK3N0YXRpYyB2b2lkIHRlc3RfaWRlbXBvdGVudChp
bnQgaTkxNSwgaW50IGVuZ2luZSkKK3sKKwl1bnNpZ25lZCBpbnQgZGVsYXlzW10gPSB7IDEsIDEw
MDAsIDUwMDAsIDUwMDAwLCAxMjM0NTY3ODkgfTsKKwl1bnNpZ25lZCBpbnQgc2F2ZWQ7CisKKwkv
KiBRdWljayB0ZXN0IHRoYXQgdGhlIHByb3BlcnR5IHJlcG9ydHMgdGhlIHZhbHVlcyB3ZSBzZXQg
Ki8KKworCWlndF9hc3NlcnQoaWd0X3N5c2ZzX3NjYW5mKGVuZ2luZSwgQVRUUiwgIiV1IiwgJnNh
dmVkKSA9PSAxKTsKKwlpZ3RfZGVidWcoIkluaXRpYWwgJXM6JXVcbiIsIEFUVFIsIHNhdmVkKTsK
KworCWZvciAoaW50IGkgPSAwOyBpIDwgQVJSQVlfU0laRShkZWxheXMpOyBpKyspCisJCXNldF9o
ZWFydGJlYXQoZW5naW5lLCBkZWxheXNbaV0pOworCisJc2V0X2hlYXJ0YmVhdChlbmdpbmUsIHNh
dmVkKTsKK30KKworc3RhdGljIHZvaWQgdGVzdF9pbnZhbGlkKGludCBpOTE1LCBpbnQgZW5naW5l
KQoreworCXVuc2lnbmVkIGludCBzYXZlZCwgZGVsYXk7CisKKwkvKiBRdWljayB0ZXN0IHRoYXQg
d2UgcmVqZWN0IGFueSB1bnJlcHJlc2VudGFibGUgaW50ZXJ2YWxzICovCisKKwlpZ3RfYXNzZXJ0
KGlndF9zeXNmc19zY2FuZihlbmdpbmUsIEFUVFIsICIldSIsICZzYXZlZCkgPT0gMSk7CisJaWd0
X2RlYnVnKCJJbml0aWFsICVzOiV1XG4iLCBBVFRSLCBzYXZlZCk7CisKKwlpZ3Rfc3lzZnNfcHJp
bnRmKGVuZ2luZSwgQVRUUiwgUFJJdTY0LCAtMSk7CisJaWd0X3N5c2ZzX3NjYW5mKGVuZ2luZSwg
QVRUUiwgIiV1IiwgJmRlbGF5KTsKKwlpZ3RfYXNzZXJ0X2VxKGRlbGF5LCBzYXZlZCk7CisKKwlp
Z3Rfc3lzZnNfcHJpbnRmKGVuZ2luZSwgQVRUUiwgUFJJdTY0LCAxMHVsbCA8PCAzMik7CisJaWd0
X3N5c2ZzX3NjYW5mKGVuZ2luZSwgQVRUUiwgIiV1IiwgJmRlbGF5KTsKKwlpZ3RfYXNzZXJ0X2Vx
KGRlbGF5LCBzYXZlZCk7Cit9CisKK3N0YXRpYyB2b2lkIHNldF91bmJhbm5hYmxlKGludCBpOTE1
LCB1aW50MzJfdCBjdHgpCit7CisJc3RydWN0IGRybV9pOTE1X2dlbV9jb250ZXh0X3BhcmFtIHAg
PSB7CisJCS5jdHhfaWQgPSBjdHgsCisJCS5wYXJhbSA9IEk5MTVfQ09OVEVYVF9QQVJBTV9CQU5O
QUJMRSwKKwl9OworCisJZ2VtX2NvbnRleHRfc2V0X3BhcmFtKGk5MTUsICZwKTsKK30KKworc3Rh
dGljIHVpbnQzMl90IGNyZWF0ZV9jb250ZXh0KGludCBpOTE1LCB1bnNpZ25lZCBpbnQgY2xhc3Ms
IHVuc2lnbmVkIGludCBpbnN0LCBpbnQgcHJpbykKK3sKKwl1aW50MzJfdCBjdHg7CisKKwljdHgg
PSBnZW1fY29udGV4dF9jcmVhdGVfZm9yX2VuZ2luZShpOTE1LCBjbGFzcywgaW5zdCk7CisJc2V0
X3VuYmFubmFibGUoaTkxNSwgY3R4KTsKKwlnZW1fY29udGV4dF9zZXRfcHJpb3JpdHkoaTkxNSwg
Y3R4LCBwcmlvKTsKKworCXJldHVybiBjdHg7Cit9CisKK3N0YXRpYyB1aW50NjRfdCBfX3Rlc3Rf
dGltZW91dChpbnQgaTkxNSwgaW50IGVuZ2luZSwgdW5zaWduZWQgaW50IHRpbWVvdXQpCit7CisJ
dW5zaWduZWQgaW50IGNsYXNzLCBpbnN0OworCXN0cnVjdCB0aW1lc3BlYyB0cyA9IHt9OworCWln
dF9zcGluX3QgKnNwaW5bMl07CisJdWludDY0X3QgZWxhcHNlZDsKKwl1aW50MzJfdCBjdHhbMl07
CisKKwlpZ3RfYXNzZXJ0KGlndF9zeXNmc19zY2FuZihlbmdpbmUsICJjbGFzcyIsICIldSIsICZj
bGFzcykgPT0gMSk7CisJaWd0X2Fzc2VydChpZ3Rfc3lzZnNfc2NhbmYoZW5naW5lLCAiaW5zdGFu
Y2UiLCAiJXUiLCAmaW5zdCkgPT0gMSk7CisKKwlzZXRfaGVhcnRiZWF0KGVuZ2luZSwgdGltZW91
dCk7CisKKwljdHhbMF0gPSBjcmVhdGVfY29udGV4dChpOTE1LCBjbGFzcywgaW5zdCwgMTAyMyk7
CisJc3BpblswXSA9IGlndF9zcGluX25ldyhpOTE1LCBjdHhbMF0sCisJCQkgICAgICAgLmZsYWdz
ID0gKElHVF9TUElOX05PX1BSRUVNUFRJT04gfAorCQkJCQkgSUdUX1NQSU5fUE9MTF9SVU4gfAor
CQkJCQkgSUdUX1NQSU5fRkVOQ0VfT1VUKSk7CisJaWd0X3NwaW5fYnVzeXdhaXRfdW50aWxfc3Rh
cnRlZChzcGluWzBdKTsKKworCWN0eFsxXSA9IGNyZWF0ZV9jb250ZXh0KGk5MTUsIGNsYXNzLCBp
bnN0LCAtMTAyMyk7CisJaWd0X25zZWNfZWxhcHNlZCgmdHMpOworCXNwaW5bMV0gPSBpZ3Rfc3Bp
bl9uZXcoaTkxNSwgY3R4WzFdLCAuZmxhZ3MgPSBJR1RfU1BJTl9QT0xMX1JVTik7CisJaWd0X3Nw
aW5fYnVzeXdhaXRfdW50aWxfc3RhcnRlZChzcGluWzFdKTsKKwllbGFwc2VkID0gaWd0X25zZWNf
ZWxhcHNlZCgmdHMpOworCisJaWd0X3NwaW5fZnJlZShpOTE1LCBzcGluWzFdKTsKKworCWlndF9h
c3NlcnRfZXEoc3luY19mZW5jZV93YWl0KHNwaW5bMF0tPm91dF9mZW5jZSwgUkVTRVRfVElNRU9V
VCksIDApOworCWlndF9hc3NlcnRfZXEoc3luY19mZW5jZV9zdGF0dXMoc3BpblswXS0+b3V0X2Zl
bmNlKSwgLUVJTyk7CisKKwlpZ3Rfc3Bpbl9mcmVlKGk5MTUsIHNwaW5bMF0pOworCisJZ2VtX2Nv
bnRleHRfZGVzdHJveShpOTE1LCBjdHhbMV0pOworCWdlbV9jb250ZXh0X2Rlc3Ryb3koaTkxNSwg
Y3R4WzBdKTsKKwlnZW1fcXVpZXNjZW50X2dwdShpOTE1KTsKKworCXJldHVybiBlbGFwc2VkOwor
fQorCitzdGF0aWMgdm9pZCB0ZXN0X3ByZWNpc2UoaW50IGk5MTUsIGludCBlbmdpbmUpCit7CisJ
aW50IGRlbGF5c1tdID0geyAxLCA1MCwgMTAwLCA1MDAgfTsKKwl1bnNpZ25lZCBpbnQgc2F2ZWQ7
CisKKwkvKgorCSAqIFRoZSBoZWFydGJlYXQgaW50ZXJ2YWwgZGVmaW5lcyBob3cgbG9uZyB0aGUg
a2VybmVsIHdhaXRzIGJldHdlZW4KKwkgKiBjaGVja2luZyBvbiB0aGUgc3RhdHVzIG9mIHRoZSBl
bmdpbmVzLiBJdCBmaXJzdCBzZW5kcyBkb3duIGEKKwkgKiBoZWFydGJlYXQgcHVsc2UsIHdhaXRz
IHRoZSBpbnRlcnZhbCBhbmQgc2VlcyBpZiB0aGUgc3lzdGVtIG1hbmFnZWQKKwkgKiB0byBjb21w
bGV0ZSB0aGUgcHVsc2UuIElmIG5vdCwgaXQgZ2l2ZXMgYSBwcmlvcml0eSBidW1wIHRvIHRoZSBw
dWxzZQorCSAqIGFuZCB3YWl0cyBhZ2Fpbi4gVGhpcyBpcyByZXBlYXRlZCB1bnRpbCB0aGUgcHJp
b3JpdHkgY2Fubm90IGJlIGJ1bXBlZAorCSAqIGFueSBtb3JlLCBhbmQgdGhlIHN5c3RlbSBpcyBk
ZWNsYXJlZCBodW5nLgorCSAqCisJICogSWYgd2UgY29tYmluZSB0aGUgcHJlZW1wdGl2ZSBwdWxz
ZSB3aXRoIGZvcmNlZCBwcmVlbXB0aW9uLCB3ZSBpbnN0ZWFkCisJICogZ2V0IGEgbXVjaCBmYXN0
ZXIgaGFuZyBkZXRlY3Rpb24uIFRodXMgaW4gY29tYmluYXRpb24gd2UgY2FuIG1lYXN1cmUKKwkg
KiB0aGUgc3lzdGVtIHJlc3BvbnNlIHRpbWUgdG8gcmVzZXRpbmcgYSBob2cgYXMgYSBtZWFzdXJl
IG9mIHRoZQorCSAqIGhlYXJ0YmVhdCBpbnRlcnZhbCwgYW5kIHNvIGNvbmZpcm0gaXQgbWF0Y2hl
cyBvdXIgc3BlY2lmaWNhdGlvbi4KKwkgKi8KKworCWlndF9yZXF1aXJlKGlndF9zeXNmc19wcmlu
dGYoZW5naW5lLCAicHJlZW1wdF90aW1lb3V0X21zIiwgIiV1IiwgMSkgPT0gMSk7CisKKwlpZ3Rf
YXNzZXJ0KGlndF9zeXNmc19zY2FuZihlbmdpbmUsIEFUVFIsICIldSIsICZzYXZlZCkgPT0gMSk7
CisJaWd0X2RlYnVnKCJJbml0aWFsICVzOiV1XG4iLCBBVFRSLCBzYXZlZCk7CisJZ2VtX3F1aWVz
Y2VudF9ncHUoaTkxNSk7CisKKwlmb3IgKGludCBpID0gMDsgaSA8IEFSUkFZX1NJWkUoZGVsYXlz
KTsgaSsrKSB7CisJCXVpbnQ2NF90IGVsYXBzZWQ7CisKKwkJZWxhcHNlZCA9IF9fdGVzdF90aW1l
b3V0KGk5MTUsIGVuZ2luZSwgZGVsYXlzW2ldKTsKKwkJaWd0X2luZm8oIiVzOiVkLCBlbGFwc2Vk
PSUuM2Ztc1slZF1cbiIsIEFUVFIsCisJCQkgZGVsYXlzW2ldLCBlbGFwc2VkICogMWUtNiwKKwkJ
CSAoaW50KShlbGFwc2VkIC8gMTAwMCAvIDEwMDApKTsKKworCQkvKgorCQkgKiBJdCB0YWtlcyBh
IGNvdXBsZSBvZiBtaXNzZWQgaGVhcnRiZWF0cyBiZWZvcmUgd2Ugc3RhcnQKKwkJICogdGVybWlu
YXRpbmcgaG9ncywgYW5kIGEgbGl0dGxlIGJpdCBvZiBqaWZmaWUgc2xhY2sgZm9yCisJCSAqIHNj
aGVkdWxpbmcgYXQgZWFjaCBzdGVwLiAxNTBtcyBzaG91bGQgY292ZXIgYWxsIG9mIG91cgorCQkg
KiBzaW5zIGFuZCBiZSB1c2VmdWwgdG9sZXJhbmNlLgorCQkgKi8KKwkJaWd0X2Fzc2VydF9mKGVs
YXBzZWQgLyAxMDAwIC8gMTAwMCA8IDMgKiBkZWxheXNbaV0gKyAxNTAsCisJCQkgICAgICJIZWFy
dGJlYXQgaW50ZXJ2YWwgKGFuZCBDUFIpIGV4Y2VlZGVkIHJlcXVlc3QhXG4iKTsKKwl9CisKKwln
ZW1fcXVpZXNjZW50X2dwdShpOTE1KTsKKwlzZXRfaGVhcnRiZWF0KGVuZ2luZSwgc2F2ZWQpOwor
fQorCitzdGF0aWMgdm9pZCB0ZXN0X25vcHJlZW1wdChpbnQgaTkxNSwgaW50IGVuZ2luZSkKK3sK
KwlpbnQgZGVsYXlzW10gPSB7IDEsIDUwLCAxMDAsIDUwMCB9OworCXVuc2lnbmVkIGludCBzYXZl
ZDsKKworCS8qCisJICogVGhlIHNhbWUgcHJpbmNpcGxlIGFzIHRlc3RfcHJlY2lzZSgpLCBleGNl
cHQgdGhhdCBmb3JjZWQgcHJlZW1wdGlvbgorCSAqIGlzIGRpc2FibGVkIChvciBzaW1wbHkgbm90
IHN1cHBvcnRlZCBieSB0aGUgcGxhdGZvcm0pLiBUaGlzIHRpbWUsCisJICogaXQgd2FpdHMgdW50
aWwgdGhlIHN5c3RlbSBtaXNzZXMgYSBmZXcgaGVhcnRiZWF0IGJlZm9yZSBkb2luZyBhCisJICog
cGVyLWVuZ2luZS9mdWxsLWdwdSByZXNldC4gQXMgc3VjaCBpdCBpcyBsZXNzIHByZWNpc2UsIGJ1
dCB3ZQorCSAqIGNhbiBzdGlsbCBlc3RpbWF0ZSBhbiB1cHBlciBib3VuZCBmb3Igb3VyIHNwZWNp
ZmllZCBoZWFydGJlYXQKKwkgKiBpbnRlcnZhbCBhbmQgdmVyaWZ5IHRoZSBzeXN0ZW0gY29uZm9y
bXMuCisJICovCisKKwkvKiBUZXN0IGhlYXJ0YmVhdHMgd2l0aCBmb3JjZWQgcHJlZW1wdGlvbiAg
ZGlzYWJsZWQgKi8KKwlpZ3Rfc3lzZnNfcHJpbnRmKGVuZ2luZSwgInByZWVtcHRfdGltZW91dF9t
cyIsICIldSIsIDApOworCisJaWd0X2Fzc2VydChpZ3Rfc3lzZnNfc2NhbmYoZW5naW5lLCBBVFRS
LCAiJXUiLCAmc2F2ZWQpID09IDEpOworCWlndF9kZWJ1ZygiSW5pdGlhbCAlczoldVxuIiwgQVRU
Uiwgc2F2ZWQpOworCWdlbV9xdWllc2NlbnRfZ3B1KGk5MTUpOworCisJZm9yIChpbnQgaSA9IDA7
IGkgPCBBUlJBWV9TSVpFKGRlbGF5cyk7IGkrKykgeworCQl1aW50NjRfdCBlbGFwc2VkOworCisJ
CWVsYXBzZWQgPSBfX3Rlc3RfdGltZW91dChpOTE1LCBlbmdpbmUsIGRlbGF5c1tpXSk7CisJCWln
dF9pbmZvKCIlczolZCwgZWxhcHNlZD0lLjNmbXNbJWRdXG4iLCBBVFRSLAorCQkJIGRlbGF5c1tp
XSwgZWxhcHNlZCAqIDFlLTYsCisJCQkgKGludCkoZWxhcHNlZCAvIDEwMDAgLyAxMDAwKSk7CisK
KwkJLyoKKwkJICogSXQgdGFrZXMgYSBmZXcgbWlzc2VkIGhlYXJ0YmVhdHMgYmVmb3JlIHdlIHN0
YXJ0CisJCSAqIHRlcm1pbmF0aW5nIGhvZ3MsIGFuZCBhIGxpdHRsZSBiaXQgb2YgamlmZmllIHNs
YWNrIGZvcgorCQkgKiBzY2hlZHVsaW5nIGF0IGVhY2ggc3RlcC4gMjUwbXMgc2hvdWxkIGNvdmVy
IGFsbCBvZiBvdXIKKwkJICogc2lucyBhbmQgYmUgdXNlZnVsIHRvbGVyYW5jZS4KKwkJICovCisJ
CWlndF9hc3NlcnRfZihlbGFwc2VkIC8gMTAwMCAvIDEwMDAgPCA1ICogZGVsYXlzW2ldICsgMjUw
LAorCQkJICAgICAiSGVhcnRiZWF0IGludGVydmFsIChhbmQgQ1BSKSBleGNlZWRlZCByZXF1ZXN0
IVxuIik7CisJfQorCisJZ2VtX3F1aWVzY2VudF9ncHUoaTkxNSk7CisJc2V0X2hlYXJ0YmVhdChl
bmdpbmUsIHNhdmVkKTsKK30KKworc3RhdGljIHZvaWQgY2xpZW50KGludCBpOTE1LCBpbnQgZW5n
aW5lLCBpbnQgKmN0bCwgaW50IGR1cmF0aW9uLCBpbnQgZXhwZWN0KQoreworCXVuc2lnbmVkIGlu
dCBjbGFzcywgaW5zdDsKKwl1bnNpZ25lZCBsb25nIGNvdW50ID0gMDsKKwl1aW50MzJfdCBjdHg7
CisKKwlpZ3RfYXNzZXJ0KGlndF9zeXNmc19zY2FuZihlbmdpbmUsICJjbGFzcyIsICIldSIsICZj
bGFzcykgPT0gMSk7CisJaWd0X2Fzc2VydChpZ3Rfc3lzZnNfc2NhbmYoZW5naW5lLCAiaW5zdGFu
Y2UiLCAiJXUiLCAmaW5zdCkgPT0gMSk7CisKKwljdHggPSBjcmVhdGVfY29udGV4dChpOTE1LCBj
bGFzcywgaW5zdCwgMCk7CisKKwl3aGlsZSAoIVJFQURfT05DRSgqY3RsKSkgeworCQlpZ3Rfc3Bp
bl90ICpzcGluOworCisJCXNwaW4gPSBpZ3Rfc3Bpbl9uZXcoaTkxNSwgY3R4LAorCQkJCSAgICAu
ZmxhZ3MgPSAoSUdUX1NQSU5fTk9fUFJFRU1QVElPTiB8CisJCQkJCSAgICAgIElHVF9TUElOX1BP
TExfUlVOIHwKKwkJCQkJICAgICAgSUdUX1NQSU5fRkVOQ0VfT1VUKSk7CisJCWlndF9zcGluX2J1
c3l3YWl0X3VudGlsX3N0YXJ0ZWQoc3Bpbik7CisKKwkJaWd0X3NwaW5fc2V0X3RpbWVvdXQoc3Bp
biwgKHVpbnQ2NF90KWR1cmF0aW9uICogMTAwMCAqIDEwMDApOworCQlzeW5jX2ZlbmNlX3dhaXQo
c3Bpbi0+b3V0X2ZlbmNlLCAtMSk7CisKKwkJaWd0X2Fzc2VydF9lcShzeW5jX2ZlbmNlX3N0YXR1
cyhzcGluLT5vdXRfZmVuY2UpLCBleHBlY3QpOworCQljb3VudCsrOworCX0KKworCWdlbV9jb250
ZXh0X2Rlc3Ryb3koaTkxNSwgY3R4KTsKKwlpZ3RfaW5mbygiJXMgY2xpZW50IGNvbXBsZXRlZCAl
bHUgc3BpbnNcbiIsCisJCSBleHBlY3QgPCAwID8gIkJhZCIgOiAiR29vZCIsIGNvdW50KTsKK30K
Kworc3RhdGljIHZvaWQgX190ZXN0X21peGVkKGludCBpOTE1LCBpbnQgZW5naW5lLAorCQkJIGlu
dCBoZWFydGJlYXQsCisJCQkgaW50IGdvb2QsCisJCQkgaW50IGJhZCwKKwkJCSBpbnQgZHVyYXRp
b24pCit7CisJdW5zaWduZWQgaW50IHNhdmVkOworCWludCAqc2hhcmVkOworCisJLyoKKwkgKiBH
aXZlbiB0d28gY2xpZW50cyBvZiB3aGljaCBvbmUgaXMgYSBob2csIGJlIHN1cmUgd2UgY2xlYW5s
eQorCSAqIHRlcm1pbmF0ZSB0aGUgaG9nIGxlYXZpbmcgdGhlIGdvb2QgY2xpZW50IHRvIHJ1bi4K
KwkgKi8KKworCWlndF9hc3NlcnQoaWd0X3N5c2ZzX3NjYW5mKGVuZ2luZSwgQVRUUiwgIiV1Iiwg
JnNhdmVkKSA9PSAxKTsKKwlpZ3RfZGVidWcoIkluaXRpYWwgJXM6JXVcbiIsIEFUVFIsIHNhdmVk
KTsKKwlnZW1fcXVpZXNjZW50X2dwdShpOTE1KTsKKworCXNoYXJlZCA9IG1tYXAoTlVMTCwgNDA5
NiwgUFJPVF9XUklURSwgTUFQX1NIQVJFRCB8IE1BUF9BTk9OLCAtMSwgMCk7CisJaWd0X2Fzc2Vy
dChzaGFyZWQgIT0gTUFQX0ZBSUxFRCk7CisKKwlzZXRfaGVhcnRiZWF0KGVuZ2luZSwgaGVhcnRi
ZWF0KTsKKworCWlndF9mb3JrKGNoaWxkLCAxKSAvKiBnb29kIGNsaWVudCAqLworCQljbGllbnQo
aTkxNSwgZW5naW5lLCBzaGFyZWQsIGdvb2QsIDEpOworCWlndF9mb3JrKGNoaWxkLCAxKSAvKiBi
YWQgY2xpZW50ICovCisJCWNsaWVudChpOTE1LCBlbmdpbmUsIHNoYXJlZCwgYmFkLCAtRUlPKTsK
KworCXNsZWVwKGR1cmF0aW9uKTsKKworCSpzaGFyZWQgPSB0cnVlOworCWlndF93YWl0Y2hpbGRy
ZW4oKTsKKwltdW5tYXAoc2hhcmVkLCA0MDk2KTsKKworCWdlbV9xdWllc2NlbnRfZ3B1KGk5MTUp
OworCXNldF9oZWFydGJlYXQoZW5naW5lLCBzYXZlZCk7Cit9CisKK3N0YXRpYyB2b2lkIHRlc3Rf
bWl4ZWQoaW50IGk5MTUsIGludCBlbmdpbmUpCit7CisJLyoKKwkgKiBIb2dzIHJhcmVseSBydW4g
YWxvbmUuIE91ciBoYW5nIGRldGVjdGlvbiBtdXN0IGNhcmVmdWxseSB3ZWFuCisJICogb3V0IHRo
ZSBob2dzIGZyb20gdGhlIGlubm9jZW50IGNsaWVudHMuIFRodXMgd2UgcnVuIGEgbWl4ZWQgd29y
a2xvYWQKKwkgKiB3aXRoIG5vbi1wcmVlbXB0YWJsZSBob2dzIHRoYXQgZXhjZWVkIHRoZSBoZWFy
dGJlYXQsIGFuZCBxdWlja2VyCisJICogaW5ub2NlbnRzLiBXZSBpbnNwZWN0IHRoZSBmZW5jZSBz
dGF0dXMgb2YgZWFjaCB0byB2ZXJpZnkgdGhhdAorCSAqIG9ubHkgdGhlIGhvZ3MgYXJlIHJlc2V0
LgorCSAqLworCWlndF9yZXF1aXJlKGlndF9zeXNmc19wcmludGYoZW5naW5lLCAicHJlZW1wdF90
aW1lb3V0X21zIiwgIiV1IiwgMSkgPT0gMSk7CisJX190ZXN0X21peGVkKGk5MTUsIGVuZ2luZSwg
MTAsIDEwLCAxMDAsIDUpOworfQorCitzdGF0aWMgdm9pZCB0ZXN0X2xvbmcoaW50IGk5MTUsIGlu
dCBlbmdpbmUpCit7CisJLyoKKwkgKiBTb21lIGNsaWVudHMgcmVsaXNoIGJlaW5nIGhvZ3MsIGFu
ZCBkZW1hbmQgdGhhdCB0aGUgc3lzdGVtCisJICogbmV2ZXIgZG8gaGFuZ2NoZWNraW5nLiBOZXZl
ciBpcyBoYXJkIHRvIHRlc3QsIHNvIGluc3RlYWQgd2UKKwkgKiBydW4gb3ZlciBhIGRheSBhbmQg
dmVyaWZ5IHRoYXQgb25seSB0aGUgc3VwZXIgaG9ncyBhcmUgcmVzZXQuCisJICovCisJaWd0X3N5
c2ZzX3ByaW50ZihlbmdpbmUsICJwcmVlbXB0X3RpbWVvdXRfbXMiLCAiJXUiLCAwKTsKKwlfX3Rl
c3RfbWl4ZWQoaTkxNSwgZW5naW5lLAorCQkgICAgIDYwICogMTAwMCwgLyogNjBzICovCisJCSAg
ICAgNjAgKiAxMDAwLCAvKiA2MHMgKi8KKwkJICAgICAzMDAgKiAxMDAwLCAvKiA1bWluICovCisJ
CSAgICAgMjQgKiAzNjAwIC8qIDI0aG91cnMgKi8pOworfQorCitzdGF0aWMgdm9pZCB0ZXN0X29m
ZihpbnQgaTkxNSwgaW50IGVuZ2luZSkKK3sKKwl1bnNpZ25lZCBpbnQgY2xhc3MsIGluc3Q7CisJ
dW5zaWduZWQgaW50IHNhdmVkOworCWlndF9zcGluX3QgKnNwaW47CisJdWludDMyX3QgY3R4Owor
CisJLyoKKwkgKiBTb21lIG90aGVyIGNsaWVudHMgcmVxdWVzdCB0aGF0IHRoZXJlIGlzIG5ldmVy
IGFueSBpbnRlcnJ1cHRpb24KKwkgKiBvciBqaXR0ZXIgaW4gdGhlaXIgd29ya2xvYWQgYW5kIHNv
IGRlbWFuZCB0aGF0IHRoZSBrZXJuZWwgbmV2ZXIKKwkgKiBzZW5kcyBhIGhlYXJ0YmVhdCB0byBz
dGVhbCBwcmVjaW91cyBjeWNsZXMgZnJvbSB0aGVpciB3b3JrbG9hZC4KKwkgKiBUdXJuIG9mZiB0
aGUgaGVhcnRiZWF0IGFuZCBjaGVjayB0aGF0IHRoZSB3b3JrbG9hZCBpcyB1bmludGVycnVwdGVk
CisJICogZm9yIDE1MHMuCisJICovCisKKwlpZ3RfYXNzZXJ0KGlndF9zeXNmc19zY2FuZihlbmdp
bmUsIEFUVFIsICIldSIsICZzYXZlZCkgPT0gMSk7CisJaWd0X2RlYnVnKCJJbml0aWFsICVzOiV1
XG4iLCBBVFRSLCBzYXZlZCk7CisJZ2VtX3F1aWVzY2VudF9ncHUoaTkxNSk7CisKKwlpZ3RfYXNz
ZXJ0KGlndF9zeXNmc19zY2FuZihlbmdpbmUsICJjbGFzcyIsICIldSIsICZjbGFzcykgPT0gMSk7
CisJaWd0X2Fzc2VydChpZ3Rfc3lzZnNfc2NhbmYoZW5naW5lLCAiaW5zdGFuY2UiLCAiJXUiLCAm
aW5zdCkgPT0gMSk7CisKKwlzZXRfaGVhcnRiZWF0KGVuZ2luZSwgMCk7CisKKwljdHggPSBjcmVh
dGVfY29udGV4dChpOTE1LCBjbGFzcywgaW5zdCwgMCk7CisKKwlzcGluID0gaWd0X3NwaW5fbmV3
KGk5MTUsIGN0eCwKKwkJCSAgICAuZmxhZ3MgPSAoSUdUX1NQSU5fUE9MTF9SVU4gfAorCQkJCSAg
ICAgIElHVF9TUElOX05PX1BSRUVNUFRJT04gfAorCQkJCSAgICAgIElHVF9TUElOX0ZFTkNFX09V
VCkpOworCWlndF9zcGluX2J1c3l3YWl0X3VudGlsX3N0YXJ0ZWQoc3Bpbik7CisKKwlmb3IgKGlu
dCBpID0gMDsgaSA8IDE1MDsgaSsrKSB7CisJCWlndF9hc3NlcnRfZXEoc3luY19mZW5jZV9zdGF0
dXMoc3Bpbi0+b3V0X2ZlbmNlKSwgMCk7CisJCXNsZWVwKDEpOworCX0KKworCXNldF9oZWFydGJl
YXQoZW5naW5lLCAxKTsKKworCWlndF9hc3NlcnRfZXEoc3luY19mZW5jZV93YWl0KHNwaW4tPm91
dF9mZW5jZSwgMjUwKSwgMCk7CisJaWd0X2Fzc2VydF9lcShzeW5jX2ZlbmNlX3N0YXR1cyhzcGlu
LT5vdXRfZmVuY2UpLCAtRUlPKTsKKworCWlndF9zcGluX2ZyZWUoaTkxNSwgc3Bpbik7CisKKwln
ZW1fcXVpZXNjZW50X2dwdShpOTE1KTsKKwlzZXRfaGVhcnRiZWF0KGVuZ2luZSwgc2F2ZWQpOwor
fQorCitpZ3RfbWFpbgoreworCXN0YXRpYyBjb25zdCBzdHJ1Y3QgeworCQljb25zdCBjaGFyICpu
YW1lOworCQl2b2lkICgqZm4pKGludCwgaW50KTsKKwl9IHRlc3RzW10gPSB7CisJCXsgImlkZW1w
b3RlbnQiLCB0ZXN0X2lkZW1wb3RlbnQgfSwKKwkJeyAiaW52YWxpZCIsIHRlc3RfaW52YWxpZCB9
LAorCQl7ICJwcmVjaXNlIiwgdGVzdF9wcmVjaXNlIH0sCisJCXsgIm5vcHJlZW1wdCIsIHRlc3Rf
bm9wcmVlbXB0IH0sCisJCXsgIm1peGVkIiwgdGVzdF9taXhlZCB9LAorCQl7ICJvZmYiLCB0ZXN0
X29mZiB9LAorCQl7ICJsb25nIiwgdGVzdF9sb25nIH0sCisJCXsgfQorCX07CisJaW50IGk5MTUg
PSAtMSwgZW5naW5lcyA9IC0xOworCisJaWd0X2ZpeHR1cmUgeworCQlpbnQgc3lzOworCisJCWk5
MTUgPSBkcm1fb3Blbl9kcml2ZXIoRFJJVkVSX0lOVEVMKTsKKwkJaWd0X3JlcXVpcmVfZ2VtKGk5
MTUpOworCQlpZ3RfYWxsb3dfaGFuZyhpOTE1LCAwLCAwKTsKKworCQlzeXMgPSBpZ3Rfc3lzZnNf
b3BlbihpOTE1KTsKKwkJaWd0X3JlcXVpcmUoc3lzICE9IC0xKTsKKworCQllbmdpbmVzID0gb3Bl
bmF0KHN5cywgImVuZ2luZSIsIE9fUkRPTkxZKTsKKwkJaWd0X3JlcXVpcmUoZW5naW5lcyAhPSAt
MSk7CisJCWNsb3NlKHN5cyk7CisKKwkJZW5hYmxlX2hhbmdjaGVjayhpOTE1LCB0cnVlKTsKKwl9
CisKKwlmb3IgKHR5cGVvZigqdGVzdHMpICp0ID0gdGVzdHM7IHQtPm5hbWU7IHQrKykKKwkJaWd0
X3N1YnRlc3Rfd2l0aF9keW5hbWljKHQtPm5hbWUpCisJCQlkeW5fc3lzZnNfZW5naW5lcyhpOTE1
LCBlbmdpbmVzLCBBVFRSLCB0LT5mbik7CisKKwlpZ3RfZml4dHVyZSB7CisJCWNsb3NlKGVuZ2lu
ZXMpOworCQljbG9zZShpOTE1KTsKKwl9Cit9CmRpZmYgLS1naXQgYS90ZXN0cy9pbnRlbC1jaS9i
bGFja2xpc3QudHh0IGIvdGVzdHMvaW50ZWwtY2kvYmxhY2tsaXN0LnR4dAppbmRleCAxYjU0NDIy
NzguLmEwMmVmNjdlNiAxMDA2NDQKLS0tIGEvdGVzdHMvaW50ZWwtY2kvYmxhY2tsaXN0LnR4dAor
KysgYi90ZXN0cy9pbnRlbC1jaS9ibGFja2xpc3QudHh0CkBAIC02MCw2ICs2MCw3IEBAIGlndEBn
ZW1fc3luY0AoPyEuKmJhc2ljKS4qCiBpZ3RAZ2VtX3RpbGVkX3N3YXBwaW5nQCg/IW5vbi10aHJl
YWRlZCkuKgogaWd0QGdlbV91c2VycHRyX2JsaXRzQChtYWpvcnxtaW5vcnxmb3JrZWR8bWxvY2tl
ZHxzd2FwcGluZykuKgogaWd0QGdlbV93YWl0QC4qaGFuZy4qCitpZ3RAc3lzZnNfaGVhcnRiZWF0
X3RpbWVvdXRAbG9uZy4qCiBpZ3RAc3lzZnNfcHJlZW1wdGlvbl90aW1lb3V0QG9mZi4qCiAjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogIyBHRU06IE5vdCB3
b3J0aCBmaXhpbmcKZGlmZiAtLWdpdCBhL3Rlc3RzL21lc29uLmJ1aWxkIGIvdGVzdHMvbWVzb24u
YnVpbGQKaW5kZXggYmFmZDAwNTEzLi4zZTU5NTIxMDEgMTAwNjQ0Ci0tLSBhL3Rlc3RzL21lc29u
LmJ1aWxkCisrKyBiL3Rlc3RzL21lc29uLmJ1aWxkCkBAIC0yMjcsNiArMjI3LDcgQEAgaTkxNV9w
cm9ncyA9IFsKIAknaTkxNV9xdWVyeScsCiAJJ2k5MTVfc2VsZnRlc3QnLAogCSdpOTE1X3N1c3Bl
bmQnLAorCSdzeXNmc19oZWFydGJlYXRfaW50ZXJ2YWwnLAogCSdzeXNmc19wcmVlbXB0X3RpbWVv
dXQnLAogXQogCi0tIAoyLjI1LjEKCl9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fCkludGVsLWdmeCBtYWlsaW5nIGxpc3QKSW50ZWwtZ2Z4QGxpc3RzLmZyZWVk
ZXNrdG9wLm9yZwpodHRwczovL2xpc3RzLmZyZWVkZXNrdG9wLm9yZy9tYWlsbWFuL2xpc3RpbmZv
L2ludGVsLWdmeAo=

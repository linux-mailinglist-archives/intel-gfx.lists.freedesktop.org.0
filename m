Return-Path: <intel-gfx-bounces@lists.freedesktop.org>
X-Original-To: lists+intel-gfx@lfdr.de
Delivered-To: lists+intel-gfx@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [131.252.210.177])
	by mail.lfdr.de (Postfix) with ESMTPS id BE5E215AD0B
	for <lists+intel-gfx@lfdr.de>; Wed, 12 Feb 2020 17:18:04 +0100 (CET)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 110A26F547;
	Wed, 12 Feb 2020 16:18:03 +0000 (UTC)
X-Original-To: intel-gfx@lists.freedesktop.org
Delivered-To: intel-gfx@lists.freedesktop.org
Received: from mga14.intel.com (mga14.intel.com [192.55.52.115])
 by gabe.freedesktop.org (Postfix) with ESMTPS id BB30A6F548
 for <intel-gfx@lists.freedesktop.org>; Wed, 12 Feb 2020 16:18:01 +0000 (UTC)
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from fmsmga001.fm.intel.com ([10.253.24.23])
 by fmsmga103.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384;
 12 Feb 2020 08:18:01 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.70,433,1574150400"; d="scan'208";a="347540077"
Received: from stinkbox.fi.intel.com (HELO stinkbox) ([10.237.72.174])
 by fmsmga001.fm.intel.com with SMTP; 12 Feb 2020 08:17:59 -0800
Received: by stinkbox (sSMTP sendmail emulation);
 Wed, 12 Feb 2020 18:17:58 +0200
From: Ville Syrjala <ville.syrjala@linux.intel.com>
To: intel-gfx@lists.freedesktop.org
Date: Wed, 12 Feb 2020 18:17:37 +0200
Message-Id: <20200212161738.28141-8-ville.syrjala@linux.intel.com>
X-Mailer: git-send-email 2.24.1
In-Reply-To: <20200212161738.28141-1-ville.syrjala@linux.intel.com>
References: <20200212161738.28141-1-ville.syrjala@linux.intel.com>
MIME-Version: 1.0
Subject: [Intel-gfx] [PATCH v2 7/8] drm/i915: Pass connector state to pfit
 calculations
X-BeenThere: intel-gfx@lists.freedesktop.org
X-Mailman-Version: 2.1.29
Precedence: list
List-Id: Intel graphics driver community testing & development
 <intel-gfx.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/intel-gfx>
List-Post: <mailto:intel-gfx@lists.freedesktop.org>
List-Help: <mailto:intel-gfx-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: intel-gfx-bounces@lists.freedesktop.org
Sender: "Intel-gfx" <intel-gfx-bounces@lists.freedesktop.org>

RnJvbTogVmlsbGUgU3lyasOkbMOkIDx2aWxsZS5zeXJqYWxhQGxpbnV4LmludGVsLmNvbT4KClBh
c3MgdGhlIGVudGlyZSBjb25uZWN0b3Igc3RhdGUgdG8gaW50ZWxfe2dtY2gscGNofV9wYW5lbF9m
aXR0aW5nKCkuCkZvciBub3cgd2UganVzdCBuZWVkIHRvIGdldCBhdCAuc2NhbGluZ19tb2RlIGJ1
dCBpbiB0aGUgZnV0dXJlIHdlJ2xsCndhbnQgYWNjZXNzIHRvIHRoZSBtYXJnaW4gcHJvcGVydGll
cyBhcyB3ZWxsLgoKdjI6IERlYWwgd2l0aCBpbnRlbF9kcF95Y2JjcjQyMF9jb25maWcoKQoKU2ln
bmVkLW9mZi1ieTogVmlsbGUgU3lyasOkbMOkIDx2aWxsZS5zeXJqYWxhQGxpbnV4LmludGVsLmNv
bT4KLS0tCiBkcml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5L2ljbF9kc2kuYyAgICAgfCAgMiAr
LQogZHJpdmVycy9ncHUvZHJtL2k5MTUvZGlzcGxheS9pbnRlbF9kcC5jICAgIHwgMTcgKysrKysr
KystLS0tLS0tLS0KIGRyaXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkvaW50ZWxfaGRtaS5jICB8
IDEyICsrKysrKystLS0tLQogZHJpdmVycy9ncHUvZHJtL2k5MTUvZGlzcGxheS9pbnRlbF9sdmRz
LmMgIHwgIDcgKystLS0tLQogZHJpdmVycy9ncHUvZHJtL2k5MTUvZGlzcGxheS9pbnRlbF9wYW5l
bC5jIHwgMTcgKysrKysrKysrKy0tLS0tLS0KIGRyaXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkv
aW50ZWxfcGFuZWwuaCB8ICA0ICsrLS0KIGRyaXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkvdmx2
X2RzaS5jICAgICB8ICA2ICsrLS0tLQogNyBmaWxlcyBjaGFuZ2VkLCAzMiBpbnNlcnRpb25zKCsp
LCAzMyBkZWxldGlvbnMoLSkKCmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNw
bGF5L2ljbF9kc2kuYyBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkvaWNsX2RzaS5jCmlu
ZGV4IDc0ODFlYzA0ODgzYS4uZDUxNzhiZTQ4MjI2IDEwMDY0NAotLS0gYS9kcml2ZXJzL2dwdS9k
cm0vaTkxNS9kaXNwbGF5L2ljbF9kc2kuYworKysgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNw
bGF5L2ljbF9kc2kuYwpAQCAtMTQyNyw3ICsxNDI3LDcgQEAgc3RhdGljIGludCBnZW4xMV9kc2lf
Y29tcHV0ZV9jb25maWcoc3RydWN0IGludGVsX2VuY29kZXIgKmVuY29kZXIsCiAKIAlwaXBlX2Nv
bmZpZy0+b3V0cHV0X2Zvcm1hdCA9IElOVEVMX09VVFBVVF9GT1JNQVRfUkdCOwogCWludGVsX2Zp
eGVkX3BhbmVsX21vZGUoZml4ZWRfbW9kZSwgYWRqdXN0ZWRfbW9kZSk7Ci0JaW50ZWxfcGNoX3Bh
bmVsX2ZpdHRpbmcocGlwZV9jb25maWcsIGNvbm5fc3RhdGUtPnNjYWxpbmdfbW9kZSk7CisJaW50
ZWxfcGNoX3BhbmVsX2ZpdHRpbmcocGlwZV9jb25maWcsIGNvbm5fc3RhdGUpOwogCiAJYWRqdXN0
ZWRfbW9kZS0+ZmxhZ3MgPSAwOwogCmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9k
aXNwbGF5L2ludGVsX2RwLmMgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5L2ludGVsX2Rw
LmMKaW5kZXggYTM1MmZkY2JhMjBjLi4wMzg0NWJkN2Q5MjcgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMv
Z3B1L2RybS9pOTE1L2Rpc3BsYXkvaW50ZWxfZHAuYworKysgYi9kcml2ZXJzL2dwdS9kcm0vaTkx
NS9kaXNwbGF5L2ludGVsX2RwLmMKQEAgLTIzMDAsOSArMjMwMCwxMCBAQCBpbnRlbF9kcF9jb21w
dXRlX2xpbmtfY29uZmlnKHN0cnVjdCBpbnRlbF9lbmNvZGVyICplbmNvZGVyLAogCiBzdGF0aWMg
aW50CiBpbnRlbF9kcF95Y2JjcjQyMF9jb25maWcoc3RydWN0IGludGVsX2RwICppbnRlbF9kcCwK
LQkJCSBzdHJ1Y3QgZHJtX2Nvbm5lY3RvciAqY29ubmVjdG9yLAotCQkJIHN0cnVjdCBpbnRlbF9j
cnRjX3N0YXRlICpjcnRjX3N0YXRlKQorCQkJIHN0cnVjdCBpbnRlbF9jcnRjX3N0YXRlICpjcnRj
X3N0YXRlLAorCQkJIGNvbnN0IHN0cnVjdCBkcm1fY29ubmVjdG9yX3N0YXRlICpjb25uX3N0YXRl
KQogeworCXN0cnVjdCBkcm1fY29ubmVjdG9yICpjb25uZWN0b3IgPSBjb25uX3N0YXRlLT5jb25u
ZWN0b3I7CiAJY29uc3Qgc3RydWN0IGRybV9kaXNwbGF5X2luZm8gKmluZm8gPSAmY29ubmVjdG9y
LT5kaXNwbGF5X2luZm87CiAJY29uc3Qgc3RydWN0IGRybV9kaXNwbGF5X21vZGUgKmFkanVzdGVk
X21vZGUgPQogCQkmY3J0Y19zdGF0ZS0+aHcuYWRqdXN0ZWRfbW9kZTsKQEAgLTIzMTQsNyArMjMx
NSw3IEBAIGludGVsX2RwX3ljYmNyNDIwX2NvbmZpZyhzdHJ1Y3QgaW50ZWxfZHAgKmludGVsX2Rw
LAogCiAJY3J0Y19zdGF0ZS0+b3V0cHV0X2Zvcm1hdCA9IElOVEVMX09VVFBVVF9GT1JNQVRfWUNC
Q1I0MjA7CiAKLQlpbnRlbF9wY2hfcGFuZWxfZml0dGluZyhjcnRjX3N0YXRlLCBEUk1fTU9ERV9T
Q0FMRV9GVUxMU0NSRUVOKTsKKwlpbnRlbF9wY2hfcGFuZWxfZml0dGluZyhjcnRjX3N0YXRlLCBj
b25uX3N0YXRlKTsKIAogCXJldHVybiAwOwogfQpAQCAtMjM4OCw4ICsyMzg5LDggQEAgaW50ZWxf
ZHBfY29tcHV0ZV9jb25maWcoc3RydWN0IGludGVsX2VuY29kZXIgKmVuY29kZXIsCiAJaWYgKGxz
cGNvbi0+YWN0aXZlKQogCQlsc3Bjb25feWNiY3I0MjBfY29uZmlnKCZpbnRlbF9jb25uZWN0b3It
PmJhc2UsIHBpcGVfY29uZmlnKTsKIAllbHNlCi0JCXJldCA9IGludGVsX2RwX3ljYmNyNDIwX2Nv
bmZpZyhpbnRlbF9kcCwgJmludGVsX2Nvbm5lY3Rvci0+YmFzZSwKLQkJCQkJICAgICAgIHBpcGVf
Y29uZmlnKTsKKwkJcmV0ID0gaW50ZWxfZHBfeWNiY3I0MjBfY29uZmlnKGludGVsX2RwLCBwaXBl
X2NvbmZpZywKKwkJCQkJICAgICAgIGNvbm5fc3RhdGUpOwogCWlmIChyZXQpCiAJCXJldHVybiBy
ZXQ7CiAKQEAgLTI0MDYsMTEgKzI0MDcsOSBAQCBpbnRlbF9kcF9jb21wdXRlX2NvbmZpZyhzdHJ1
Y3QgaW50ZWxfZW5jb2RlciAqZW5jb2RlciwKIAkJCQkgICAgICAgYWRqdXN0ZWRfbW9kZSk7CiAK
IAkJaWYgKEhBU19HTUNIKGRldl9wcml2KSkKLQkJCWludGVsX2dtY2hfcGFuZWxfZml0dGluZyhw
aXBlX2NvbmZpZywKLQkJCQkJCSBjb25uX3N0YXRlLT5zY2FsaW5nX21vZGUpOworCQkJaW50ZWxf
Z21jaF9wYW5lbF9maXR0aW5nKHBpcGVfY29uZmlnLCBjb25uX3N0YXRlKTsKIAkJZWxzZQotCQkJ
aW50ZWxfcGNoX3BhbmVsX2ZpdHRpbmcocGlwZV9jb25maWcsCi0JCQkJCQljb25uX3N0YXRlLT5z
Y2FsaW5nX21vZGUpOworCQkJaW50ZWxfcGNoX3BhbmVsX2ZpdHRpbmcocGlwZV9jb25maWcsIGNv
bm5fc3RhdGUpOwogCX0KIAogCWlmIChhZGp1c3RlZF9tb2RlLT5mbGFncyAmIERSTV9NT0RFX0ZM
QUdfREJMU0NBTikKZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkvaW50
ZWxfaGRtaS5jIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvZGlzcGxheS9pbnRlbF9oZG1pLmMKaW5k
ZXggMjIzNDU4ODBjOGY1Li41ZTc4ZDk5M2NlNzcgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2Ry
bS9pOTE1L2Rpc3BsYXkvaW50ZWxfaGRtaS5jCisrKyBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2Rp
c3BsYXkvaW50ZWxfaGRtaS5jCkBAIC0yMjk2LDE3ICsyMjk2LDE5IEBAIHN0YXRpYyBib29sIGhk
bWlfZGVlcF9jb2xvcl9wb3NzaWJsZShjb25zdCBzdHJ1Y3QgaW50ZWxfY3J0Y19zdGF0ZSAqY3J0
Y19zdGF0ZSwKIH0KIAogc3RhdGljIGJvb2wKLWludGVsX2hkbWlfeWNiY3I0MjBfY29uZmlnKHN0
cnVjdCBkcm1fY29ubmVjdG9yICpjb25uZWN0b3IsCi0JCQkgICBzdHJ1Y3QgaW50ZWxfY3J0Y19z
dGF0ZSAqY29uZmlnKQoraW50ZWxfaGRtaV95Y2JjcjQyMF9jb25maWcoc3RydWN0IGludGVsX2Ny
dGNfc3RhdGUgKmNydGNfc3RhdGUsCisJCQkgICBjb25zdCBzdHJ1Y3QgZHJtX2Nvbm5lY3Rvcl9z
dGF0ZSAqY29ubl9zdGF0ZSkKIHsKKwlzdHJ1Y3QgZHJtX2Nvbm5lY3RvciAqY29ubmVjdG9yID0g
Y29ubl9zdGF0ZS0+Y29ubmVjdG9yOworCiAJaWYgKCFjb25uZWN0b3ItPnljYmNyXzQyMF9hbGxv
d2VkKSB7CiAJCURSTV9FUlJPUigiUGxhdGZvcm0gZG9lc24ndCBzdXBwb3J0IFlDQkNSNDIwIG91
dHB1dFxuIik7CiAJCXJldHVybiBmYWxzZTsKIAl9CiAKLQljb25maWctPm91dHB1dF9mb3JtYXQg
PSBJTlRFTF9PVVRQVVRfRk9STUFUX1lDQkNSNDIwOworCWNydGNfc3RhdGUtPm91dHB1dF9mb3Jt
YXQgPSBJTlRFTF9PVVRQVVRfRk9STUFUX1lDQkNSNDIwOwogCi0JaW50ZWxfcGNoX3BhbmVsX2Zp
dHRpbmcoY29uZmlnLCBEUk1fTU9ERV9TQ0FMRV9GVUxMU0NSRUVOKTsKKwlpbnRlbF9wY2hfcGFu
ZWxfZml0dGluZyhjcnRjX3N0YXRlLCBjb25uX3N0YXRlKTsKIAogCXJldHVybiB0cnVlOwogfQpA
QCAtMjQzNCw3ICsyNDM2LDcgQEAgaW50IGludGVsX2hkbWlfY29tcHV0ZV9jb25maWcoc3RydWN0
IGludGVsX2VuY29kZXIgKmVuY29kZXIsCiAJCXBpcGVfY29uZmlnLT5waXhlbF9tdWx0aXBsaWVy
ID0gMjsKIAogCWlmIChkcm1fbW9kZV9pc180MjBfb25seSgmY29ubmVjdG9yLT5kaXNwbGF5X2lu
Zm8sIGFkanVzdGVkX21vZGUpKSB7Ci0JCWlmICghaW50ZWxfaGRtaV95Y2JjcjQyMF9jb25maWco
Y29ubmVjdG9yLCBwaXBlX2NvbmZpZykpIHsKKwkJaWYgKCFpbnRlbF9oZG1pX3ljYmNyNDIwX2Nv
bmZpZyhwaXBlX2NvbmZpZywgY29ubl9zdGF0ZSkpIHsKIAkJCURSTV9FUlJPUigiQ2FuJ3Qgc3Vw
cG9ydCBZQ0JDUjQyMCBvdXRwdXRcbiIpOwogCQkJcmV0dXJuIC1FSU5WQUw7CiAJCX0KZGlmZiAt
LWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkvaW50ZWxfbHZkcy5jIGIvZHJpdmVy
cy9ncHUvZHJtL2k5MTUvZGlzcGxheS9pbnRlbF9sdmRzLmMKaW5kZXggYmY4ZjRkNzlkMDgzLi5l
ZWU2YmI2Y2E1M2IgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkvaW50
ZWxfbHZkcy5jCisrKyBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkvaW50ZWxfbHZkcy5j
CkBAIC00MzAsMTIgKzQzMCw5IEBAIHN0YXRpYyBpbnQgaW50ZWxfbHZkc19jb21wdXRlX2NvbmZp
ZyhzdHJ1Y3QgaW50ZWxfZW5jb2RlciAqaW50ZWxfZW5jb2RlciwKIAlpZiAoSEFTX1BDSF9TUExJ
VChkZXZfcHJpdikpIHsKIAkJcGlwZV9jb25maWctPmhhc19wY2hfZW5jb2RlciA9IHRydWU7CiAK
LQkJaW50ZWxfcGNoX3BhbmVsX2ZpdHRpbmcocGlwZV9jb25maWcsCi0JCQkJCWNvbm5fc3RhdGUt
PnNjYWxpbmdfbW9kZSk7CisJCWludGVsX3BjaF9wYW5lbF9maXR0aW5nKHBpcGVfY29uZmlnLCBj
b25uX3N0YXRlKTsKIAl9IGVsc2UgewotCQlpbnRlbF9nbWNoX3BhbmVsX2ZpdHRpbmcocGlwZV9j
b25maWcsCi0JCQkJCSBjb25uX3N0YXRlLT5zY2FsaW5nX21vZGUpOwotCisJCWludGVsX2dtY2hf
cGFuZWxfZml0dGluZyhwaXBlX2NvbmZpZywgY29ubl9zdGF0ZSk7CiAJfQogCiAJLyoKZGlmZiAt
LWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkvaW50ZWxfcGFuZWwuYyBiL2RyaXZl
cnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkvaW50ZWxfcGFuZWwuYwppbmRleCBhMzZmMTdlZjk3ZjEu
LjI5NWMwN2NlYzE5YiAxMDA2NDQKLS0tIGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvZGlzcGxheS9p
bnRlbF9wYW5lbC5jCisrKyBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkvaW50ZWxfcGFu
ZWwuYwpAQCAtMTc4LDcgKzE3OCw3IEBAIGludGVsX3BhbmVsX3ZidF9maXhlZF9tb2RlKHN0cnVj
dCBpbnRlbF9jb25uZWN0b3IgKmNvbm5lY3RvcikKIC8qIGFkanVzdGVkX21vZGUgaGFzIGJlZW4g
cHJlc2V0IHRvIGJlIHRoZSBwYW5lbCdzIGZpeGVkIG1vZGUgKi8KIHZvaWQKIGludGVsX3BjaF9w
YW5lbF9maXR0aW5nKHN0cnVjdCBpbnRlbF9jcnRjX3N0YXRlICpjcnRjX3N0YXRlLAotCQkJaW50
IGZpdHRpbmdfbW9kZSkKKwkJCWNvbnN0IHN0cnVjdCBkcm1fY29ubmVjdG9yX3N0YXRlICpjb25u
X3N0YXRlKQogewogCWNvbnN0IHN0cnVjdCBkcm1fZGlzcGxheV9tb2RlICphZGp1c3RlZF9tb2Rl
ID0KIAkJJmNydGNfc3RhdGUtPmh3LmFkanVzdGVkX21vZGU7CkBAIC0xOTAsNyArMTkwLDcgQEAg
aW50ZWxfcGNoX3BhbmVsX2ZpdHRpbmcoc3RydWN0IGludGVsX2NydGNfc3RhdGUgKmNydGNfc3Rh
dGUsCiAJICAgIGNydGNfc3RhdGUtPm91dHB1dF9mb3JtYXQgIT0gSU5URUxfT1VUUFVUX0ZPUk1B
VF9ZQ0JDUjQyMCkKIAkJcmV0dXJuOwogCi0Jc3dpdGNoIChmaXR0aW5nX21vZGUpIHsKKwlzd2l0
Y2ggKGNvbm5fc3RhdGUtPnNjYWxpbmdfbW9kZSkgewogCWNhc2UgRFJNX01PREVfU0NBTEVfQ0VO
VEVSOgogCQl3aWR0aCA9IGNydGNfc3RhdGUtPnBpcGVfc3JjX3c7CiAJCWhlaWdodCA9IGNydGNf
c3RhdGUtPnBpcGVfc3JjX2g7CkBAIC0yMjcsNiArMjI3LDEwIEBAIGludGVsX3BjaF9wYW5lbF9m
aXR0aW5nKHN0cnVjdCBpbnRlbF9jcnRjX3N0YXRlICpjcnRjX3N0YXRlLAogCQl9CiAJCWJyZWFr
OwogCisJY2FzZSBEUk1fTU9ERV9TQ0FMRV9OT05FOgorCQlXQVJOX09OKGFkanVzdGVkX21vZGUt
PmNydGNfaGRpc3BsYXkgIT0gY3J0Y19zdGF0ZS0+cGlwZV9zcmNfdyk7CisJCVdBUk5fT04oYWRq
dXN0ZWRfbW9kZS0+Y3J0Y192ZGlzcGxheSAhPSBjcnRjX3N0YXRlLT5waXBlX3NyY19oKTsKKwkJ
LyogZmFsbCB0aHJvdWdoICovCiAJY2FzZSBEUk1fTU9ERV9TQ0FMRV9GVUxMU0NSRUVOOgogCQl4
ID0geSA9IDA7CiAJCXdpZHRoID0gYWRqdXN0ZWRfbW9kZS0+Y3J0Y19oZGlzcGxheTsKQEAgLTIz
NCw3ICsyMzgsNyBAQCBpbnRlbF9wY2hfcGFuZWxfZml0dGluZyhzdHJ1Y3QgaW50ZWxfY3J0Y19z
dGF0ZSAqY3J0Y19zdGF0ZSwKIAkJYnJlYWs7CiAKIAlkZWZhdWx0OgotCQlNSVNTSU5HX0NBU0Uo
Zml0dGluZ19tb2RlKTsKKwkJTUlTU0lOR19DQVNFKGNvbm5fc3RhdGUtPnNjYWxpbmdfbW9kZSk7
CiAJCXJldHVybjsKIAl9CiAKQEAgLTM3OCw3ICszODIsNyBAQCBzdGF0aWMgdm9pZCBpOXh4X3Nj
YWxlX2FzcGVjdChzdHJ1Y3QgaW50ZWxfY3J0Y19zdGF0ZSAqY3J0Y19zdGF0ZSwKIH0KIAogdm9p
ZCBpbnRlbF9nbWNoX3BhbmVsX2ZpdHRpbmcoc3RydWN0IGludGVsX2NydGNfc3RhdGUgKmNydGNf
c3RhdGUsCi0JCQkgICAgICBpbnQgZml0dGluZ19tb2RlKQorCQkJICAgICAgY29uc3Qgc3RydWN0
IGRybV9jb25uZWN0b3Jfc3RhdGUgKmNvbm5fc3RhdGUpCiB7CiAJc3RydWN0IGludGVsX2NydGMg
KmNydGMgPSB0b19pbnRlbF9jcnRjKGNydGNfc3RhdGUtPnVhcGkuY3J0Yyk7CiAJc3RydWN0IGRy
bV9pOTE1X3ByaXZhdGUgKmRldl9wcml2ID0gdG9faTkxNShjcnRjLT5iYXNlLmRldik7CkBAIC0z
OTAsNyArMzk0LDcgQEAgdm9pZCBpbnRlbF9nbWNoX3BhbmVsX2ZpdHRpbmcoc3RydWN0IGludGVs
X2NydGNfc3RhdGUgKmNydGNfc3RhdGUsCiAJICAgIGFkanVzdGVkX21vZGUtPmNydGNfdmRpc3Bs
YXkgPT0gY3J0Y19zdGF0ZS0+cGlwZV9zcmNfaCkKIAkJZ290byBvdXQ7CiAKLQlzd2l0Y2ggKGZp
dHRpbmdfbW9kZSkgeworCXN3aXRjaCAoY29ubl9zdGF0ZS0+c2NhbGluZ19tb2RlKSB7CiAJY2Fz
ZSBEUk1fTU9ERV9TQ0FMRV9DRU5URVI6CiAJCS8qCiAJCSAqIEZvciBjZW50ZXJlZCBtb2Rlcywg
d2UgaGF2ZSB0byBjYWxjdWxhdGUgYm9yZGVyIHdpZHRocyAmCkBAIC00MjYsOCArNDMwLDcgQEAg
dm9pZCBpbnRlbF9nbWNoX3BhbmVsX2ZpdHRpbmcoc3RydWN0IGludGVsX2NydGNfc3RhdGUgKmNy
dGNfc3RhdGUsCiAJCX0KIAkJYnJlYWs7CiAJZGVmYXVsdDoKLQkJZHJtX1dBUk4oJmRldl9wcml2
LT5kcm0sIDEsICJiYWQgcGFuZWwgZml0IG1vZGU6ICVkXG4iLAotCQkJIGZpdHRpbmdfbW9kZSk7
CisJCU1JU1NJTkdfQ0FTRShjb25uX3N0YXRlLT5zY2FsaW5nX21vZGUpOwogCQlyZXR1cm47CiAJ
fQogCmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5L2ludGVsX3BhbmVs
LmggYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5L2ludGVsX3BhbmVsLmgKaW5kZXggZTE4
MDRlNmU4MzI1Li5lMmZhMTU0M2E2MWYgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1
L2Rpc3BsYXkvaW50ZWxfcGFuZWwuaAorKysgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5
L2ludGVsX3BhbmVsLmgKQEAgLTI2LDkgKzI2LDkgQEAgdm9pZCBpbnRlbF9wYW5lbF9maW5pKHN0
cnVjdCBpbnRlbF9wYW5lbCAqcGFuZWwpOwogdm9pZCBpbnRlbF9maXhlZF9wYW5lbF9tb2RlKGNv
bnN0IHN0cnVjdCBkcm1fZGlzcGxheV9tb2RlICpmaXhlZF9tb2RlLAogCQkJICAgIHN0cnVjdCBk
cm1fZGlzcGxheV9tb2RlICphZGp1c3RlZF9tb2RlKTsKIHZvaWQgaW50ZWxfcGNoX3BhbmVsX2Zp
dHRpbmcoc3RydWN0IGludGVsX2NydGNfc3RhdGUgKmNydGNfc3RhdGUsCi0JCQkgICAgIGludCBm
aXR0aW5nX21vZGUpOworCQkJICAgICBjb25zdCBzdHJ1Y3QgZHJtX2Nvbm5lY3Rvcl9zdGF0ZSAq
Y29ubl9zdGF0ZSk7CiB2b2lkIGludGVsX2dtY2hfcGFuZWxfZml0dGluZyhzdHJ1Y3QgaW50ZWxf
Y3J0Y19zdGF0ZSAqY3J0Y19zdGF0ZSwKLQkJCSAgICAgIGludCBmaXR0aW5nX21vZGUpOworCQkJ
ICAgICAgY29uc3Qgc3RydWN0IGRybV9jb25uZWN0b3Jfc3RhdGUgKmNvbm5fc3RhdGUpOwogdm9p
ZCBpbnRlbF9wYW5lbF9zZXRfYmFja2xpZ2h0X2FjcGkoY29uc3Qgc3RydWN0IGRybV9jb25uZWN0
b3Jfc3RhdGUgKmNvbm5fc3RhdGUsCiAJCQkJICAgIHUzMiBsZXZlbCwgdTMyIG1heCk7CiBpbnQg
aW50ZWxfcGFuZWxfc2V0dXBfYmFja2xpZ2h0KHN0cnVjdCBkcm1fY29ubmVjdG9yICpjb25uZWN0
b3IsCmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5L3Zsdl9kc2kuYyBi
L2RyaXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkvdmx2X2RzaS5jCmluZGV4IGNkMmY5ZjQ2Y2Y5
Zi4uOTdmNzJkMzIwZDg3IDEwMDY0NAotLS0gYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5
L3Zsdl9kc2kuYworKysgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5L3Zsdl9kc2kuYwpA
QCAtMjc4LDExICsyNzgsOSBAQCBzdGF0aWMgaW50IGludGVsX2RzaV9jb21wdXRlX2NvbmZpZyhz
dHJ1Y3QgaW50ZWxfZW5jb2RlciAqZW5jb2RlciwKIAkJaW50ZWxfZml4ZWRfcGFuZWxfbW9kZShm
aXhlZF9tb2RlLCBhZGp1c3RlZF9tb2RlKTsKIAogCQlpZiAoSEFTX0dNQ0goZGV2X3ByaXYpKQot
CQkJaW50ZWxfZ21jaF9wYW5lbF9maXR0aW5nKHBpcGVfY29uZmlnLAotCQkJCQkJIGNvbm5fc3Rh
dGUtPnNjYWxpbmdfbW9kZSk7CisJCQlpbnRlbF9nbWNoX3BhbmVsX2ZpdHRpbmcocGlwZV9jb25m
aWcsIGNvbm5fc3RhdGUpOwogCQllbHNlCi0JCQlpbnRlbF9wY2hfcGFuZWxfZml0dGluZyhwaXBl
X2NvbmZpZywKLQkJCQkJCWNvbm5fc3RhdGUtPnNjYWxpbmdfbW9kZSk7CisJCQlpbnRlbF9wY2hf
cGFuZWxfZml0dGluZyhwaXBlX2NvbmZpZywgY29ubl9zdGF0ZSk7CiAJfQogCiAJaWYgKGFkanVz
dGVkX21vZGUtPmZsYWdzICYgRFJNX01PREVfRkxBR19EQkxTQ0FOKQotLSAKMi4yNC4xCgpfX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpJbnRlbC1nZnggbWFp
bGluZyBsaXN0CkludGVsLWdmeEBsaXN0cy5mcmVlZGVza3RvcC5vcmcKaHR0cHM6Ly9saXN0cy5m
cmVlZGVza3RvcC5vcmcvbWFpbG1hbi9saXN0aW5mby9pbnRlbC1nZngK

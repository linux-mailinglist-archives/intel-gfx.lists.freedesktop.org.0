Return-Path: <intel-gfx-bounces@lists.freedesktop.org>
X-Original-To: lists+intel-gfx@lfdr.de
Delivered-To: lists+intel-gfx@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [131.252.210.177])
	by mail.lfdr.de (Postfix) with ESMTPS id 1EC60FE0AD
	for <lists+intel-gfx@lfdr.de>; Fri, 15 Nov 2019 15:56:59 +0100 (CET)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 3162A6E785;
	Fri, 15 Nov 2019 14:56:57 +0000 (UTC)
X-Original-To: intel-gfx@lists.freedesktop.org
Delivered-To: intel-gfx@lists.freedesktop.org
Received: from mga14.intel.com (mga14.intel.com [192.55.52.115])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 7341B6E634
 for <intel-gfx@lists.freedesktop.org>; Fri, 15 Nov 2019 14:56:43 +0000 (UTC)
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from fmsmga008.fm.intel.com ([10.253.24.58])
 by fmsmga103.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384;
 15 Nov 2019 06:56:43 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.68,308,1569308400"; d="scan'208";a="203408580"
Received: from slisovsk-lenovo-ideapad-720s-13ikb.fi.intel.com ([10.237.72.89])
 by fmsmga008.fm.intel.com with ESMTP; 15 Nov 2019 06:56:40 -0800
From: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
To: intel-gfx@lists.freedesktop.org
Date: Fri, 15 Nov 2019 16:54:01 +0200
Message-Id: <20191115145401.20709-3-stanislav.lisovskiy@intel.com>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <20191115145401.20709-1-stanislav.lisovskiy@intel.com>
References: <20191115145401.20709-1-stanislav.lisovskiy@intel.com>
MIME-Version: 1.0
Subject: [Intel-gfx] [PATCH v12 2/2] drm/i915: Restrict qgv points which
 don't have enough bandwidth.
X-BeenThere: intel-gfx@lists.freedesktop.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: Intel graphics driver community testing & development
 <intel-gfx.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/intel-gfx>
List-Post: <mailto:intel-gfx@lists.freedesktop.org>
List-Help: <mailto:intel-gfx-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: intel-gfx-bounces@lists.freedesktop.org
Sender: "Intel-gfx" <intel-gfx-bounces@lists.freedesktop.org>

QWNjb3JkaW5nIHRvIEJTcGVjIDUzOTk4LCB3ZSBzaG91bGQgdHJ5IHRvCnJlc3RyaWN0IHFndiBw
b2ludHMsIHdoaWNoIGNhbid0IHByb3ZpZGUKZW5vdWdoIGJhbmR3aWR0aCBmb3IgZGVzaXJlZCBk
aXNwbGF5IGNvbmZpZ3VyYXRpb24uCgpDdXJyZW50bHkgd2UgYXJlIGp1c3QgY29tcGFyaW5nIGFn
YWluc3QgYWxsIG9mCnRob3NlIGFuZCB0YWtlIG1pbmltdW0od29yc3QgY2FzZSkuCgp2MjogRml4
ZWQgd3JvbmcgUENvZGUgcmVwbHkgbWFzaywgcmVtb3ZlZCBoYXJkY29kZWQKICAgIHZhbHVlcy4K
CnYzOiBGb3JiaWQgc2ltdWx0YW5lb3VzIGxlZ2FjeSBTQUdWIFBDb2RlIHJlcXVlc3RzIGFuZAog
ICAgcmVzdHJpY3RpbmcgcWd2IHBvaW50cy4gUHV0IHRoZSBhY3R1YWwgcmVzdHJpY3Rpb24KICAg
IHRvIGNvbW1pdCBmdW5jdGlvbiwgYWRkZWQgc2VyaWFsaXphdGlvbih0aGFua3MgdG8gVmlsbGUp
CiAgICB0byBwcmV2ZW50IGNvbW1pdCBiZWluZyBhcHBsaWVkIG91dCBvZiBvcmRlciBpbiBjYXNl
IG9mCiAgICBub25ibG9ja2luZyBhbmQvb3Igbm9tb2Rlc2V0IGNvbW1pdHMuCgp2NDoKICAgIC0g
TWlub3IgY29kZSByZWZhY3RvcmluZywgZml4ZWQgZmV3IHR5cG9zKHRoYW5rcyB0byBKYW1lcyBB
dXNtdXMpCiAgICAtIENoYW5nZSB0aGUgbmFtaW5nIG9mIHFndiBwb2ludAogICAgICBtYXNraW5n
L3VubWFza2luZyBmdW5jdGlvbnMoSmFtZXMgQXVzbXVzKS4KICAgIC0gU2ltcGxpZnkgdGhlIG1h
c2tpbmcvdW5tYXNraW5nIG9wZXJhdGlvbiBpdHNlbGYsCiAgICAgIGFzIHdlIGRvbid0IG5lZWQg
dG8gbWFzayBvbmx5IHNpbmdsZSBwb2ludCBwZXIgcmVxdWVzdChKYW1lcyBBdXNtdXMpCiAgICAt
IFJlamVjdCBhbmQgc3RpY2sgdG8gaGlnaGVzdCBiYW5kd2lkdGggcG9pbnQgaWYgU0FHVgogICAg
ICBjYW4ndCBiZSBlbmFibGVkKEJTcGVjKQoKdjU6CiAgICAtIEFkZCBuZXcgbWFpbGJveCByZXBs
eSBjb2Rlcywgd2hpY2ggc2VlbXMgdG8gaGFwcGVuIGR1cmluZyBib290CiAgICAgIHRpbWUgZm9y
IFRHTCBhbmQgaW5kaWNhdGUgdGhhdCBRR1Ygc2V0dGluZyBpcyBub3QgeWV0IGF2YWlsYWJsZS4K
CnY2OgogICAgLSBJbmNyZWFzZSBudW1iZXIgb2Ygc3VwcG9ydGVkIFFHViBwb2ludHMgdG8gYmUg
aW4gc3luYyB3aXRoIEJTcGVjLgoKdjc6IC0gUmViYXNlZCBhbmQgcmVzb2x2ZWQgY29uZmxpY3Qg
dG8gZml4IGJ1aWxkIGZhaWx1cmUuCiAgICAtIEZpeCBOVU1fUUdWX1BPSU5UUyB0byA4IGFuZCBt
b3ZlZCB0aGF0IHRvIGhlYWRlciBmaWxlKEphbWVzIEF1c211cykKCnY4OiAtIERvbid0IHJlcG9y
dCBhbiBlcnJvciBpZiB3ZSBjYW4ndCByZXN0cmljdCBxZ3YgcG9pbnRzLCBhcyBTQUdWCiAgICAg
IGNhbiBiZSBkaXNhYmxlZCBieSBCSU9TLCB3aGljaCBpcyBjb21wbGV0ZWx5IGxlZ2FsLiBTbyBk
b24ndAogICAgICBtYWtlIENJIHBhbmljLiBJbnN0ZWFkIGlmIHdlIGRldGVjdCB0aGF0IHRoZXJl
IGlzIG9ubHkgMSBRR1YKICAgICAgcG9pbnQgYWNjZXNzaWJsZSBqdXN0IGFuYWx5emUgaWYgd2Ug
Y2FuIGZpdCB0aGUgcmVxdWlyZWQgYmFuZHdpZHRoCiAgICAgIHJlcXVpcmVtZW50cywgYnV0IG5v
IG5lZWQgaW4gcmVzdHJpY3RpbmcuCgp2OTogLSBGaXggd3JvbmcgUUdWIHRyYW5zaXRpb24gaWYg
d2UgaGF2ZSAwIHBsYW5lcyBhbmQgbm8gU0FHVgogICAgICBzaW11bHRhbmVvdXNseS4KCnYxMDog
LSBGaXggQ0RDTEsgY29ycnVwdGlvbiwgYmVjYXVzZSBvZiBnbG9iYWwgc3RhdGUgZ2V0dGluZyBz
ZXJpYWxpemVkCiAgICAgICB3aXRob3V0IG1vZGVzZXQsIHdoaWNoIGNhdXNlZCBjb3B5aW5nIG9m
IG5vbi1jYWxjdWxhdGVkIGNkY2xrCiAgICAgICB0byBiZSBjb3BpZWQgdG8gZGV2X3ByaXYodGhh
bmtzIHRvIFZpbGxlIGZvciB0aGUgaGludCkuCgp2MTE6IC0gUmVtb3ZlIHVubmVlZGVkIGhlYWRl
cnMgYW5kIHNwYWNlcyhNYXR0aGV3IFJvcGVyKQogICAgIC0gUmVtb3ZlIHVubmVlZGVkIGludGVs
X3Fndl9pbmZvIHFpIHN0cnVjdCBmcm9tIGJ3IGNoZWNrIGFuZCB6ZXJvCiAgICAgICBvdXQgdGhl
IG5lZWRlZCBvbmUoTWF0dGhldyBSb3BlcikKICAgICAtIENoYW5nZWQgUUdWIGVycm9yIG1lc3Nh
Z2UgdG8gaGF2ZSBtb3JlIGNsZWFyIG1lYW5pbmcoTWF0dGhldyBSb3BlcikKICAgICAtIFVzZSBz
dGF0ZS0+bW9kZXNldF9zZXQgaW5zdGVhZCBvZiBhbnlfbXMoTWF0dGhldyBSb3BlcikKICAgICAt
IE1vdmVkIE5VTV9TQUdWX1BPSU5UUyBmcm9tIGk5MTVfcmVnLmggdG8gaTkxNV9kcnYuaCB3aGVy
ZSBpdCdzIHVzZWQKICAgICAtIEtlZXAgdXNpbmcgY3J0Y19zdGF0ZS0+aHcuYWN0aXZlIGluc3Rl
YWQgb2YgLmVuYWJsZShNYXR0aGV3IFJvcGVyKQogICAgIC0gTW92ZWQgdW5yZWxhdGVkIGNoYW5n
ZXMgdG8gb3RoZXIgcGF0Y2godXNpbmcgbGF0ZW5jeSBhcyBwYXJhbWV0ZXIKICAgICAgIGZvciBw
bGFuZSB3bSBjYWxjdWxhdGlvbiwgbW92ZWQgdG8gU0FHViByZWZhY3RvcmluZyBwYXRjaCkKClJl
dmlld2VkLWJ5OiBKYW1lcyBBdXNtdXMgPGphbWVzLmF1c211c0BpbnRlbC5jb20+ClNpZ25lZC1v
ZmYtYnk6IFN0YW5pc2xhdiBMaXNvdnNraXkgPHN0YW5pc2xhdi5saXNvdnNraXlAaW50ZWwuY29t
PgpDYzogVmlsbGUgU3lyasOkbMOkIDx2aWxsZS5zeXJqYWxhQGludGVsLmNvbT4KQ2M6IEphbWVz
IEF1c211cyA8amFtZXMuYXVzbXVzQGludGVsLmNvbT4KLS0tCiBkcml2ZXJzL2dwdS9kcm0vaTkx
NS9kaXNwbGF5L2ludGVsX2F0b21pYy5oICAgfCAgIDIgKwogZHJpdmVycy9ncHUvZHJtL2k5MTUv
ZGlzcGxheS9pbnRlbF9idy5jICAgICAgIHwgMTM0ICsrKysrKysrKysrKysrKy0tLQogZHJpdmVy
cy9ncHUvZHJtL2k5MTUvZGlzcGxheS9pbnRlbF9idy5oICAgICAgIHwgICAyICsKIGRyaXZlcnMv
Z3B1L2RybS9pOTE1L2Rpc3BsYXkvaW50ZWxfZGlzcGxheS5jICB8ICA5MSArKysrKysrKysrKy0K
IC4uLi9kcm0vaTkxNS9kaXNwbGF5L2ludGVsX2Rpc3BsYXlfdHlwZXMuaCAgICB8ICAgMyArCiBk
cml2ZXJzL2dwdS9kcm0vaTkxNS9pOTE1X2Rydi5oICAgICAgICAgICAgICAgfCAgIDcgKy0KIGRy
aXZlcnMvZ3B1L2RybS9pOTE1L2k5MTVfcmVnLmggICAgICAgICAgICAgICB8ICAgNSArCiBkcml2
ZXJzL2dwdS9kcm0vaTkxNS9pbnRlbF9zaWRlYmFuZC5jICAgICAgICAgfCAgMjcgKysrLQogOCBm
aWxlcyBjaGFuZ2VkLCAyNDEgaW5zZXJ0aW9ucygrKSwgMzAgZGVsZXRpb25zKC0pCgpkaWZmIC0t
Z2l0IGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvZGlzcGxheS9pbnRlbF9hdG9taWMuaCBiL2RyaXZl
cnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkvaW50ZWxfYXRvbWljLmgKaW5kZXggN2I0OTYyMzQxOWJh
Li40MWEyYTg5YzliZGIgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkv
aW50ZWxfYXRvbWljLmgKKysrIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvZGlzcGxheS9pbnRlbF9h
dG9taWMuaApAQCAtNDEsNiArNDEsOCBAQCB2b2lkIGludGVsX2NydGNfY29weV9jb2xvcl9ibG9i
cyhzdHJ1Y3QgaW50ZWxfY3J0Y19zdGF0ZSAqY3J0Y19zdGF0ZSk7CiBzdHJ1Y3QgZHJtX2F0b21p
Y19zdGF0ZSAqaW50ZWxfYXRvbWljX3N0YXRlX2FsbG9jKHN0cnVjdCBkcm1fZGV2aWNlICpkZXYp
Owogdm9pZCBpbnRlbF9hdG9taWNfc3RhdGVfY2xlYXIoc3RydWN0IGRybV9hdG9taWNfc3RhdGUg
KnN0YXRlKTsKIAoraW50IGludGVsX2F0b21pY19zZXJpYWxpemVfZ2xvYmFsX3N0YXRlKHN0cnVj
dCBpbnRlbF9hdG9taWNfc3RhdGUgKnN0YXRlKTsKKwogc3RydWN0IGludGVsX2NydGNfc3RhdGUg
KgogaW50ZWxfYXRvbWljX2dldF9jcnRjX3N0YXRlKHN0cnVjdCBkcm1fYXRvbWljX3N0YXRlICpz
dGF0ZSwKIAkJCSAgICBzdHJ1Y3QgaW50ZWxfY3J0YyAqY3J0Yyk7CmRpZmYgLS1naXQgYS9kcml2
ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5L2ludGVsX2J3LmMgYi9kcml2ZXJzL2dwdS9kcm0vaTkx
NS9kaXNwbGF5L2ludGVsX2J3LmMKaW5kZXggM2Y2ZTI5ZjYxMzIzLi44MDlmYzFiZjk5YzUgMTAw
NjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkvaW50ZWxfYncuYworKysgYi9k
cml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5L2ludGVsX2J3LmMKQEAgLTgsNiArOCw5IEBACiAj
aW5jbHVkZSAiaW50ZWxfYncuaCIKICNpbmNsdWRlICJpbnRlbF9kaXNwbGF5X3R5cGVzLmgiCiAj
aW5jbHVkZSAiaW50ZWxfc2lkZWJhbmQuaCIKKyNpbmNsdWRlICJpbnRlbF9hdG9taWMuaCIKKyNp
bmNsdWRlICJpbnRlbF9wbS5oIgorCiAKIC8qIFBhcmFtZXRlcnMgZm9yIFFjbGsgR2V5c2Vydmls
bGUgKFFHVikgKi8KIHN0cnVjdCBpbnRlbF9xZ3ZfcG9pbnQgewpAQCAtMTUsNyArMTgsNyBAQCBz
dHJ1Y3QgaW50ZWxfcWd2X3BvaW50IHsKIH07CiAKIHN0cnVjdCBpbnRlbF9xZ3ZfaW5mbyB7Ci0J
c3RydWN0IGludGVsX3Fndl9wb2ludCBwb2ludHNbM107CisJc3RydWN0IGludGVsX3Fndl9wb2lu
dCBwb2ludHNbTlVNX1NBR1ZfUE9JTlRTXTsKIAl1OCBudW1fcG9pbnRzOwogCXU4IG51bV9jaGFu
bmVsczsKIAl1OCB0X2JsOwpAQCAtMTEzLDYgKzExNiwyNiBAQCBzdGF0aWMgaW50IGljbF9wY29k
ZV9yZWFkX3Fndl9wb2ludF9pbmZvKHN0cnVjdCBkcm1faTkxNV9wcml2YXRlICpkZXZfcHJpdiwK
IAlyZXR1cm4gMDsKIH0KIAoraW50IGljbF9wY29kZV9yZXN0cmljdF9xZ3ZfcG9pbnRzKHN0cnVj
dCBkcm1faTkxNV9wcml2YXRlICpkZXZfcHJpdiwKKwkJCQkgIHUzMiBwb2ludHNfbWFzaykKK3sK
KwlpbnQgcmV0OworCisJLyogYnNwZWMgc2F5cyB0byBrZWVwIHJldHJ5aW5nIGZvciBhdCBsZWFz
dCAxIG1zICovCisJcmV0ID0gc2tsX3Bjb2RlX3JlcXVlc3QoZGV2X3ByaXYsIElDTF9QQ09ERV9T
QUdWX0RFX01FTV9TU19DT05GSUcsCisJCQkJcG9pbnRzX21hc2ssCisJCQkJR0VOMTFfUENPREVf
UE9JTlRTX1JFU1RSSUNURURfTUFTSywKKwkJCQlHRU4xMV9QQ09ERV9QT0lOVFNfUkVTVFJJQ1RF
RCwKKwkJCQkxKTsKKworCWlmIChyZXQgPCAwKSB7CisJCURSTV9FUlJPUigiRmFpbGVkIHRvIGRp
c2FibGUgcWd2IHBvaW50cyAoJWQpXG4iLCByZXQpOworCQlyZXR1cm4gcmV0OworCX0KKworCXJl
dHVybiAwOworfQorCiBzdGF0aWMgaW50IGljbF9nZXRfcWd2X3BvaW50cyhzdHJ1Y3QgZHJtX2k5
MTVfcHJpdmF0ZSAqZGV2X3ByaXYsCiAJCQkgICAgICBzdHJ1Y3QgaW50ZWxfcWd2X2luZm8gKnFp
KQogewpAQCAtMjcwLDIyICsyOTMsNiBAQCB2b2lkIGludGVsX2J3X2luaXRfaHcoc3RydWN0IGRy
bV9pOTE1X3ByaXZhdGUgKmRldl9wcml2KQogCQlpY2xfZ2V0X2J3X2luZm8oZGV2X3ByaXYsICZp
Y2xfc2FfaW5mbyk7CiB9CiAKLXN0YXRpYyB1bnNpZ25lZCBpbnQgaW50ZWxfbWF4X2RhdGFfcmF0
ZShzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0ZSAqZGV2X3ByaXYsCi0JCQkJCWludCBudW1fcGxhbmVz
KQotewotCWlmIChJTlRFTF9HRU4oZGV2X3ByaXYpID49IDExKQotCQkvKgotCQkgKiBGSVhNRSB3
aXRoIFNBR1YgZGlzYWJsZWQgbWF5YmUgd2UgY2FuIGFzc3VtZQotCQkgKiBwb2ludCAxIHdpbGwg
YWx3YXlzIGJlIHVzZWQ/IFNlZW1zIHRvIG1hdGNoCi0JCSAqIHRoZSBiZWhhdmlvdXIgb2JzZXJ2
ZWQgaW4gdGhlIHdpbGQuCi0JCSAqLwotCQlyZXR1cm4gbWluMyhpY2xfbWF4X2J3KGRldl9wcml2
LCBudW1fcGxhbmVzLCAwKSwKLQkJCSAgICBpY2xfbWF4X2J3KGRldl9wcml2LCBudW1fcGxhbmVz
LCAxKSwKLQkJCSAgICBpY2xfbWF4X2J3KGRldl9wcml2LCBudW1fcGxhbmVzLCAyKSk7Ci0JZWxz
ZQotCQlyZXR1cm4gVUlOVF9NQVg7Ci19Ci0KIHN0YXRpYyB1bnNpZ25lZCBpbnQgaW50ZWxfYndf
Y3J0Y19udW1fYWN0aXZlX3BsYW5lcyhjb25zdCBzdHJ1Y3QgaW50ZWxfY3J0Y19zdGF0ZSAqY3J0
Y19zdGF0ZSkKIHsKIAkvKgpAQCAtMzc3LDcgKzM4NCwxMSBAQCBpbnQgaW50ZWxfYndfYXRvbWlj
X2NoZWNrKHN0cnVjdCBpbnRlbF9hdG9taWNfc3RhdGUgKnN0YXRlKQogCXVuc2lnbmVkIGludCBk
YXRhX3JhdGUsIG1heF9kYXRhX3JhdGU7CiAJdW5zaWduZWQgaW50IG51bV9hY3RpdmVfcGxhbmVz
OwogCXN0cnVjdCBpbnRlbF9jcnRjICpjcnRjOwotCWludCBpOworCWludCBpLCByZXQ7CisJdTMy
IGFsbG93ZWRfcG9pbnRzID0gMDsKKwl1bnNpZ25lZCBpbnQgbWF4X2J3X3BvaW50ID0gMCwgbWF4
X2J3ID0gMDsKKwl1bnNpZ25lZCBpbnQgbnVtX3Fndl9wb2ludHMgPSBkZXZfcHJpdi0+bWF4X2J3
WzBdLm51bV9xZ3ZfcG9pbnRzOworCXUzMiBtYXNrID0gKDEgPDwgbnVtX3Fndl9wb2ludHMpIC0g
MTsKIAogCS8qIEZJWE1FIGVhcmxpZXIgZ2VucyBuZWVkIHNvbWUgY2hlY2tzIHRvbyAqLwogCWlm
IChJTlRFTF9HRU4oZGV2X3ByaXYpIDwgMTEpCkBAIC00MjEsMTYgKzQzMiw5MyBAQCBpbnQgaW50
ZWxfYndfYXRvbWljX2NoZWNrKHN0cnVjdCBpbnRlbF9hdG9taWNfc3RhdGUgKnN0YXRlKQogCWRh
dGFfcmF0ZSA9IGludGVsX2J3X2RhdGFfcmF0ZShkZXZfcHJpdiwgYndfc3RhdGUpOwogCW51bV9h
Y3RpdmVfcGxhbmVzID0gaW50ZWxfYndfbnVtX2FjdGl2ZV9wbGFuZXMoZGV2X3ByaXYsIGJ3X3N0
YXRlKTsKIAotCW1heF9kYXRhX3JhdGUgPSBpbnRlbF9tYXhfZGF0YV9yYXRlKGRldl9wcml2LCBu
dW1fYWN0aXZlX3BsYW5lcyk7Ci0KIAlkYXRhX3JhdGUgPSBESVZfUk9VTkRfVVAoZGF0YV9yYXRl
LCAxMDAwKTsKIAotCWlmIChkYXRhX3JhdGUgPiBtYXhfZGF0YV9yYXRlKSB7Ci0JCURSTV9ERUJV
R19LTVMoIkJhbmR3aWR0aCAldSBNQi9zIGV4Y2VlZHMgbWF4IGF2YWlsYWJsZSAlZCBNQi9zICgl
ZCBhY3RpdmUgcGxhbmVzKVxuIiwKLQkJCSAgICAgIGRhdGFfcmF0ZSwgbWF4X2RhdGFfcmF0ZSwg
bnVtX2FjdGl2ZV9wbGFuZXMpOworCWZvciAoaSA9IDA7IGkgPCBudW1fcWd2X3BvaW50czsgaSsr
KSB7CisJCW1heF9kYXRhX3JhdGUgPSBpY2xfbWF4X2J3KGRldl9wcml2LCBudW1fYWN0aXZlX3Bs
YW5lcywgaSk7CisJCS8qCisJCSAqIFdlIG5lZWQgdG8ga25vdyB3aGljaCBxZ3YgcG9pbnQgZ2l2
ZXMgdXMKKwkJICogbWF4aW11bSBiYW5kd2lkdGggaW4gb3JkZXIgdG8gZGlzYWJsZSBTQUdWCisJ
CSAqIGlmIHdlIGZpbmQgdGhhdCB3ZSBleGNlZWQgU0FHViBibG9jayB0aW1lCisJCSAqIHdpdGgg
d2F0ZXJtYXJrcy4gQnkgdGhhdCBtb21lbnQgd2UgYWxyZWFkeQorCQkgKiBoYXZlIHRob3NlLCBh
cyBpdCBpcyBjYWxjdWxhdGVkIGVhcmxpZXIgaW4KKwkJICogaW50ZWxfYXRvbWljX2NoZWNrLAor
CQkgKi8KKwkJaWYgKG1heF9kYXRhX3JhdGUgPiBtYXhfYncpIHsKKwkJCW1heF9id19wb2ludCA9
IGk7CisJCQltYXhfYncgPSBtYXhfZGF0YV9yYXRlOworCQl9CisJCWlmIChtYXhfZGF0YV9yYXRl
ID49IGRhdGFfcmF0ZSkKKwkJCWFsbG93ZWRfcG9pbnRzIHw9IEJJVChpKTsKKwkJRFJNX0RFQlVH
X0tNUygiUUdWIHBvaW50ICVkOiBtYXggYncgJWQgcmVxdWlyZWQgJWRcbiIsCisJCQkgICAgICBp
LCBtYXhfZGF0YV9yYXRlLCBkYXRhX3JhdGUpOworCX0KKworCS8qCisJICogQlNwZWMgc3RhdGVz
IHRoYXQgd2UgYWx3YXlzIHNob3VsZCBoYXZlIGF0IGxlYXN0IG9uZSBhbGxvd2VkIHBvaW50CisJ
ICogbGVmdCwgc28gaWYgd2UgY291bGRuJ3QgLSBzaW1wbHkgcmVqZWN0IHRoZSBjb25maWd1cmF0
aW9uIGZvciBvYnZpb3VzCisJICogcmVhc29ucy4KKwkgKi8KKwlpZiAoYWxsb3dlZF9wb2ludHMg
PT0gMCkgeworCQlEUk1fREVCVUdfS01TKCJObyBRR1YgcG9pbnRzIHByb3ZpZGUgc3VmZmljaWVu
dCBtZW1vcnkiCisJCQkgICAgICAiIGJhbmR3aWR0aCBmb3IgZGlzcGxheSBjb25maWd1cmF0aW9u
LlxuIik7CiAJCXJldHVybiAtRUlOVkFMOwogCX0KIAorCS8qCisJICogSW4gY2FzZSBpZiBTQUdW
IGlzIGRpc2FibGVkIGluIEJJT1MsIHdlIGFsd2F5cyBnZXQgMQorCSAqIFNBR1YgcG9pbnQsIGJ1
dCB3ZSBjYW4ndCBzZW5kIFBDb2RlIGNvbW1hbmRzIHRvIHJlc3RyaWN0IGl0CisJICogYXMgaXQg
d2lsbCBmYWlsIGFuZCBwb2ludGxlc3MgYW55d2F5LgorCSAqLworCWlmIChudW1fcWd2X3BvaW50
cyA9PSAxKQorCQlkZXZfcHJpdi0+c2Fndl9zdGF0dXMgPSBJOTE1X1NBR1ZfTk9UX0NPTlRST0xM
RUQ7CisJZWxzZQorCQlkZXZfcHJpdi0+c2Fndl9zdGF0dXMgPSBJOTE1X1NBR1ZfRU5BQkxFRDsK
KworCS8qCisJICogTGVhdmUgb25seSBzaW5nbGUgcG9pbnQgd2l0aCBoaWdoZXN0IGJhbmR3aWR0
aCwgaWYKKwkgKiB3ZSBjYW4ndCBlbmFibGUgU0FHViBhY2NvcmRpbmcgdG8gQlNwZWMuCisJICov
CisJaWYgKCFpbnRlbF9jYW5fZW5hYmxlX3NhZ3Yoc3RhdGUpKSB7CisKKwkJLyoKKwkJICogVGhp
cyBpcyBhIGJvcmRlciBsaW5lIGNvbmRpdGlvbiB3aGVuIHdlIGhhdmUgMCBwbGFuZXMKKwkJICog
YW5kIFNBR1Ygbm90IGVuYWJsZWQgbWVhbnMgdGhhdCB3ZSBzaG91bGQga2VlcCBRR1Ygd2l0aAor
CQkgKiBoaWdoZXN0IGJhbmR3aWR0aCwgaG93ZXZlciBhbGdvcml0aG0gcmV0dXJucyB3cm9uZyBy
ZXN1bHQKKwkJICogZm9yIDAgcGxhbmVzIGFuZCAwIGRhdGEgcmF0ZSwgc28ganVzdCBzdGljayB0
byBsYXN0IGNvbmZpZworCQkgKiB0aGVuLiBPdGhlcndpc2UgdXNlIHRoZSBRR1YgcG9pbnQgd2l0
aCBoaWdoZXN0IEJXIGFjY29yZGluZworCQkgKiB0byBCU3BlYy4KKwkJICovCisJCWlmICghZGF0
YV9yYXRlICYmICFudW1fYWN0aXZlX3BsYW5lcykgeworCQkJRFJNX0RFQlVHX0tNUygiTm8gU0FH
ViwgdXNpbmcgb2xkIFFHViBtYXNrXG4iKTsKKwkJCWFsbG93ZWRfcG9pbnRzID0gKH5kZXZfcHJp
di0+cWd2X3BvaW50c19tYXNrKSAmIG1hc2s7CisJCX0gZWxzZSB7CisJCQlhbGxvd2VkX3BvaW50
cyA9IDEgPDwgbWF4X2J3X3BvaW50OworCQkJRFJNX0RFQlVHX0tNUygiTm8gU0FHViwgdXNpbmcg
c2luZ2xlIFFHViBwb2ludCAlZFxuIiwKKwkJCQkgICAgICBtYXhfYndfcG9pbnQpOworCQl9CisJ
fQorCS8qCisJICogV2Ugc3RvcmUgdGhlIG9uZXMgd2hpY2ggbmVlZCB0byBiZSBtYXNrZWQgYXMg
dGhhdCBpcyB3aGF0IFBDb2RlCisJICogYWN0dWFsbHkgYWNjZXB0cyBhcyBhIHBhcmFtZXRlci4K
KwkgKi8KKwlzdGF0ZS0+cWd2X3BvaW50c19tYXNrID0gKH5hbGxvd2VkX3BvaW50cykgJiBtYXNr
OworCisJRFJNX0RFQlVHX0tNUygiTmV3IHN0YXRlICVwIHFndiBtYXNrICV4XG4iLAorCQkgICAg
ICBzdGF0ZSwgc3RhdGUtPnFndl9wb2ludHNfbWFzayk7CisKKwkvKgorCSAqIElmIHRoZSBhY3R1
YWwgbWFzayBoYWQgY2hhbmdlZCB3ZSBuZWVkIHRvIG1ha2Ugc3VyZSB0aGF0CisJICogdGhlIGNv
bW1pdHMgYXJlIHNlcmlhbGl6ZWQoaW4gY2FzZSB0aGlzIGlzIGEgbm9tb2Rlc2V0LCBub25ibG9j
a2luZykKKwkgKi8KKwlpZiAoc3RhdGUtPnFndl9wb2ludHNfbWFzayAhPSBkZXZfcHJpdi0+cWd2
X3BvaW50c19tYXNrKSB7CisJCXJldCA9IGludGVsX2F0b21pY19zZXJpYWxpemVfZ2xvYmFsX3N0
YXRlKHN0YXRlKTsKKwkJaWYgKHJldCkgeworCQkJRFJNX0RFQlVHX0tNUygiQ291bGQgbm90IHNl
cmlhbGl6ZSBnbG9iYWwgc3RhdGVcbiIpOworCQkJcmV0dXJuIHJldDsKKwkJfQorCX0KKwogCXJl
dHVybiAwOwogfQogCmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5L2lu
dGVsX2J3LmggYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5L2ludGVsX2J3LmgKaW5kZXgg
OWRiMTBhZjAxMmY0Li42NmJmOWJjMTBiNzMgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS9p
OTE1L2Rpc3BsYXkvaW50ZWxfYncuaAorKysgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5
L2ludGVsX2J3LmgKQEAgLTI4LDUgKzI4LDcgQEAgaW50IGludGVsX2J3X2luaXQoc3RydWN0IGRy
bV9pOTE1X3ByaXZhdGUgKmRldl9wcml2KTsKIGludCBpbnRlbF9id19hdG9taWNfY2hlY2soc3Ry
dWN0IGludGVsX2F0b21pY19zdGF0ZSAqc3RhdGUpOwogdm9pZCBpbnRlbF9id19jcnRjX3VwZGF0
ZShzdHJ1Y3QgaW50ZWxfYndfc3RhdGUgKmJ3X3N0YXRlLAogCQkJICBjb25zdCBzdHJ1Y3QgaW50
ZWxfY3J0Y19zdGF0ZSAqY3J0Y19zdGF0ZSk7CitpbnQgaWNsX3Bjb2RlX3Jlc3RyaWN0X3Fndl9w
b2ludHMoc3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmRldl9wcml2LAorCQkJCSAgdTMyIHBvaW50
c19tYXNrKTsKIAogI2VuZGlmIC8qIF9fSU5URUxfQldfSF9fICovCmRpZmYgLS1naXQgYS9kcml2
ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5L2ludGVsX2Rpc3BsYXkuYyBiL2RyaXZlcnMvZ3B1L2Ry
bS9pOTE1L2Rpc3BsYXkvaW50ZWxfZGlzcGxheS5jCmluZGV4IDdmMzFlMzNkMGIxNi4uZmQzNWQw
YjA2OTljIDEwMDY0NAotLS0gYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5L2ludGVsX2Rp
c3BsYXkuYworKysgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5L2ludGVsX2Rpc3BsYXku
YwpAQCAtMTQ3NTUsNiArMTQ3NTUsODAgQEAgc3RhdGljIHZvaWQgaW50ZWxfYXRvbWljX2NsZWFu
dXBfd29yayhzdHJ1Y3Qgd29ya19zdHJ1Y3QgKndvcmspCiAJaW50ZWxfYXRvbWljX2hlbHBlcl9m
cmVlX3N0YXRlKGk5MTUpOwogfQogCitzdGF0aWMgdm9pZCBpbnRlbF9xZ3ZfcG9pbnRzX21hc2so
c3RydWN0IGludGVsX2F0b21pY19zdGF0ZSAqc3RhdGUpCit7CisJc3RydWN0IGRybV9kZXZpY2Ug
KmRldiA9IHN0YXRlLT5iYXNlLmRldjsKKwlzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0ZSAqZGV2X3By
aXYgPSB0b19pOTE1KGRldik7CisJaW50IHJldDsKKwl1MzIgbmV3X21hc2sgPSBkZXZfcHJpdi0+
cWd2X3BvaW50c19tYXNrIHwgc3RhdGUtPnFndl9wb2ludHNfbWFzazsKKwl1bnNpZ25lZCBpbnQg
bnVtX3Fndl9wb2ludHMgPSBkZXZfcHJpdi0+bWF4X2J3WzBdLm51bV9xZ3ZfcG9pbnRzOworCXVu
c2lnbmVkIGludCBtYXNrID0gKDEgPDwgbnVtX3Fndl9wb2ludHMpIC0gMTsKKworCS8qCisJICog
QXMgd2UgZG9uJ3Qga25vdyBpbml0aWFsIGhhcmR3YXJlIHN0YXRlIGR1cmluZyBpbml0aWFsIGNv
bW1pdAorCSAqIHdlIHNob3VsZCBub3QgZG8gYW55dGhpbmcsIHVudGlsIHdlIGFjdHVhbGx5IGZp
Z3VyZSBvdXQsCisJICogd2hhdCBhcmUgdGhlIHFndiBwb2ludHMgdG8gbWFzay4KKwkgKi8KKwlp
ZiAoIW5ld19tYXNrKQorCQlyZXR1cm47CisKKwlXQVJOX09OKG5ld19tYXNrID09IG1hc2spOwor
CisJLyoKKwkgKiBKdXN0IHJldHVybiBpZiB3ZSBjYW4ndCBjb250cm9sIFNBR1Ygb3IgZG9uJ3Qg
aGF2ZSBpdC4KKwkgKi8KKwlpZiAoIWludGVsX2hhc19zYWd2KGRldl9wcml2KSkKKwkJcmV0dXJu
OworCisJLyoKKwkgKiBSZXN0cmljdCByZXF1aXJlZCBxZ3YgcG9pbnRzIGJlZm9yZSB1cGRhdGlu
ZyB0aGUgY29uZmlndXJhdGlvbi4KKwkgKiBBY2NvcmRpbmcgdG8gQlNwZWMgd2UgY2FuJ3QgbWFz
ayBhbmQgdW5tYXNrIHFndiBwb2ludHMgYXQgdGhlIHNhbWUKKwkgKiB0aW1lLiBBbHNvIG1hc2tp
bmcgc2hvdWxkIGJlIGRvbmUgYmVmb3JlIHVwZGF0aW5nIHRoZSBjb25maWd1cmF0aW9uCisJICog
YW5kIHVubWFza2luZyBhZnRlcndhcmRzLgorCSAqLworCXJldCA9IGljbF9wY29kZV9yZXN0cmlj
dF9xZ3ZfcG9pbnRzKGRldl9wcml2LCBuZXdfbWFzayk7CisJaWYgKHJldCA8IDApCisJCURSTV9E
RUJVR19LTVMoIkNvdWxkIG5vdCByZXN0cmljdCByZXF1aXJlZCBxZ3YgcG9pbnRzKCVkKVxuIiwK
KwkJCSAgICAgIHJldCk7CisJZWxzZQorCQlkZXZfcHJpdi0+cWd2X3BvaW50c19tYXNrID0gbmV3
X21hc2s7Cit9CisKK3N0YXRpYyB2b2lkIGludGVsX3Fndl9wb2ludHNfdW5tYXNrKHN0cnVjdCBp
bnRlbF9hdG9taWNfc3RhdGUgKnN0YXRlKQoreworCXN0cnVjdCBkcm1fZGV2aWNlICpkZXYgPSBz
dGF0ZS0+YmFzZS5kZXY7CisJc3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmRldl9wcml2ID0gdG9f
aTkxNShkZXYpOworCWludCByZXQ7CisJdTMyIG5ld19tYXNrID0gZGV2X3ByaXYtPnFndl9wb2lu
dHNfbWFzayAmIHN0YXRlLT5xZ3ZfcG9pbnRzX21hc2s7CisKKwkvKgorCSAqIEFzIHdlIGRvbid0
IGtub3cgaW5pdGlhbCBoYXJkd2FyZSBzdGF0ZSBkdXJpbmcgaW5pdGlhbCBjb21taXQKKwkgKiB3
ZSBzaG91bGQgbm90IGRvIGFueXRoaW5nLCB1bnRpbCB3ZSBhY3R1YWxseSBmaWd1cmUgb3V0LAor
CSAqIHdoYXQgYXJlIHRoZSBxZ3YgcG9pbnRzIHRvIG1hc2suCisJICovCisJaWYgKCFuZXdfbWFz
aykKKwkJcmV0dXJuOworCisJLyoKKwkgKiBKdXN0IHJldHVybiBpZiB3ZSBjYW4ndCBjb250cm9s
IFNBR1Ygb3IgZG9uJ3QgaGF2ZSBpdC4KKwkgKi8KKwlpZiAoIWludGVsX2hhc19zYWd2KGRldl9w
cml2KSkKKwkJcmV0dXJuOworCisJLyoKKwkgKiBBbGxvdyByZXF1aXJlZCBxZ3YgcG9pbnRzIGFm
dGVyIHVwZGF0aW5nIHRoZSBjb25maWd1cmF0aW9uLgorCSAqIEFjY29yZGluZyB0byBCU3BlYyB3
ZSBjYW4ndCBtYXNrIGFuZCB1bm1hc2sgcWd2IHBvaW50cyBhdCB0aGUgc2FtZQorCSAqIHRpbWUu
IEFsc28gbWFza2luZyBzaG91bGQgYmUgZG9uZSBiZWZvcmUgdXBkYXRpbmcgdGhlIGNvbmZpZ3Vy
YXRpb24KKwkgKiBhbmQgdW5tYXNraW5nIGFmdGVyd2FyZHMuCisJICovCisJcmV0ID0gaWNsX3Bj
b2RlX3Jlc3RyaWN0X3Fndl9wb2ludHMoZGV2X3ByaXYsIG5ld19tYXNrKTsKKwlpZiAocmV0IDwg
MCkKKwkJRFJNX0RFQlVHX0tNUygiQ291bGQgbm90IHJlc3RyaWN0IHJlcXVpcmVkIHFndiBwb2lu
dHMoJWQpXG4iLAorCQkJICAgICAgcmV0KTsKKwllbHNlCisJCWRldl9wcml2LT5xZ3ZfcG9pbnRz
X21hc2sgPSBuZXdfbWFzazsKK30KKwogc3RhdGljIHZvaWQgaW50ZWxfYXRvbWljX2NvbW1pdF90
YWlsKHN0cnVjdCBpbnRlbF9hdG9taWNfc3RhdGUgKnN0YXRlKQogewogCXN0cnVjdCBkcm1fZGV2
aWNlICpkZXYgPSBzdGF0ZS0+YmFzZS5kZXY7CkBAIC0xNDc4Miw2ICsxNDg1Niw5IEBAIHN0YXRp
YyB2b2lkIGludGVsX2F0b21pY19jb21taXRfdGFpbChzdHJ1Y3QgaW50ZWxfYXRvbWljX3N0YXRl
ICpzdGF0ZSkKIAkJfQogCX0KIAorCWlmICgoSU5URUxfR0VOKGRldl9wcml2KSA+PSAxMSkpCisJ
CWludGVsX3Fndl9wb2ludHNfbWFzayhzdGF0ZSk7CisKIAlpbnRlbF9jb21taXRfbW9kZXNldF9k
aXNhYmxlcyhzdGF0ZSk7CiAKIAkvKiBGSVhNRTogRXZlbnR1YWxseSBnZXQgcmlkIG9mIG91ciBj
cnRjLT5jb25maWcgcG9pbnRlciAqLwpAQCAtMTQ4MDAsOCArMTQ4NzcsOSBAQCBzdGF0aWMgdm9p
ZCBpbnRlbF9hdG9taWNfY29tbWl0X3RhaWwoc3RydWN0IGludGVsX2F0b21pY19zdGF0ZSAqc3Rh
dGUpCiAJCSAqIFNLTCB3b3JrYXJvdW5kOiBic3BlYyByZWNvbW1lbmRzIHdlIGRpc2FibGUgdGhl
IFNBR1Ygd2hlbiB3ZQogCQkgKiBoYXZlIG1vcmUgdGhlbiBvbmUgcGlwZSBlbmFibGVkCiAJCSAq
LwotCQlpZiAoIWludGVsX2Nhbl9lbmFibGVfc2FndihzdGF0ZSkpCi0JCQlpbnRlbF9kaXNhYmxl
X3NhZ3YoZGV2X3ByaXYpOworCQlpZiAoSU5URUxfR0VOKGRldl9wcml2KSA8IDExKQorCQkJaWYg
KCFpbnRlbF9jYW5fZW5hYmxlX3NhZ3Yoc3RhdGUpKQorCQkJCWludGVsX2Rpc2FibGVfc2Fndihk
ZXZfcHJpdik7CiAKIAkJaW50ZWxfbW9kZXNldF92ZXJpZnlfZGlzYWJsZWQoZGV2X3ByaXYsIHN0
YXRlKTsKIAl9CkBAIC0xNDg4Myw4ICsxNDk2MSwxMSBAQCBzdGF0aWMgdm9pZCBpbnRlbF9hdG9t
aWNfY29tbWl0X3RhaWwoc3RydWN0IGludGVsX2F0b21pY19zdGF0ZSAqc3RhdGUpCiAJaWYgKHN0
YXRlLT5tb2Rlc2V0KQogCQlpbnRlbF92ZXJpZnlfcGxhbmVzKHN0YXRlKTsKIAotCWlmIChzdGF0
ZS0+bW9kZXNldCAmJiBpbnRlbF9jYW5fZW5hYmxlX3NhZ3Yoc3RhdGUpKQotCQlpbnRlbF9lbmFi
bGVfc2FndihkZXZfcHJpdik7CisJaWYgKElOVEVMX0dFTihkZXZfcHJpdikgPCAxMSkgeworCQlp
ZiAoc3RhdGUtPm1vZGVzZXQgJiYgaW50ZWxfY2FuX2VuYWJsZV9zYWd2KHN0YXRlKSkKKwkJCWlu
dGVsX2VuYWJsZV9zYWd2KGRldl9wcml2KTsKKwl9IGVsc2UKKwkJaW50ZWxfcWd2X3BvaW50c191
bm1hc2soc3RhdGUpOwogCiAJZHJtX2F0b21pY19oZWxwZXJfY29tbWl0X2h3X2RvbmUoJnN0YXRl
LT5iYXNlKTsKIApAQCAtMTUwMzEsNyArMTUxMTIsNyBAQCBzdGF0aWMgaW50IGludGVsX2F0b21p
Y19jb21taXQoc3RydWN0IGRybV9kZXZpY2UgKmRldiwKIAlpbnRlbF9zaGFyZWRfZHBsbF9zd2Fw
X3N0YXRlKHN0YXRlKTsKIAlpbnRlbF9hdG9taWNfdHJhY2tfZmJzKHN0YXRlKTsKIAotCWlmIChz
dGF0ZS0+Z2xvYmFsX3N0YXRlX2NoYW5nZWQpIHsKKwlpZiAoc3RhdGUtPmdsb2JhbF9zdGF0ZV9j
aGFuZ2VkICYmIHN0YXRlLT5tb2Rlc2V0KSB7CiAJCWFzc2VydF9nbG9iYWxfc3RhdGVfbG9ja2Vk
KGRldl9wcml2KTsKIAogCQltZW1jcHkoZGV2X3ByaXYtPm1pbl9jZGNsaywgc3RhdGUtPm1pbl9j
ZGNsaywKZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkvaW50ZWxfZGlz
cGxheV90eXBlcy5oIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvZGlzcGxheS9pbnRlbF9kaXNwbGF5
X3R5cGVzLmgKaW5kZXggNmEzMDBjYWM4ODNmLi4zNTM1ODU3ZGZlZDIgMTAwNjQ0Ci0tLSBhL2Ry
aXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkvaW50ZWxfZGlzcGxheV90eXBlcy5oCisrKyBiL2Ry
aXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkvaW50ZWxfZGlzcGxheV90eXBlcy5oCkBAIC01MzQs
NiArNTM0LDkgQEAgc3RydWN0IGludGVsX2F0b21pY19zdGF0ZSB7CiAJc3RydWN0IGk5MTVfc3df
ZmVuY2UgY29tbWl0X3JlYWR5OwogCiAJc3RydWN0IGxsaXN0X25vZGUgZnJlZWQ7CisKKwkvKiBH
ZW4xMSsgb25seSAqLworCXUzMiBxZ3ZfcG9pbnRzX21hc2s7CiB9OwogCiBzdHJ1Y3QgaW50ZWxf
cGxhbmVfc3RhdGUgewpkaWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvaTkxNV9kcnYu
aCBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2k5MTVfZHJ2LmgKaW5kZXggMGFjOWQ3YjAwNmNhLi41
NDY1N2I2ODAxMGEgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2k5MTVfZHJ2LmgK
KysrIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvaTkxNV9kcnYuaApAQCAtODUwLDYgKzg1MCw5IEBA
IGVudW0gaW50ZWxfcGlwZV9jcmNfc291cmNlIHsKIAlJTlRFTF9QSVBFX0NSQ19TT1VSQ0VfTUFY
LAogfTsKIAorLyogQlNwZWMgcHJlY2lzZWx5IGRlZmluZXMgdGhpcyAqLworI2RlZmluZSBOVU1f
U0FHVl9QT0lOVFMgOAorCiAjZGVmaW5lIElOVEVMX1BJUEVfQ1JDX0VOVFJJRVNfTlIJMTI4CiBz
dHJ1Y3QgaW50ZWxfcGlwZV9jcmMgewogCXNwaW5sb2NrX3QgbG9jazsKQEAgLTEyMzgsMTEgKzEy
NDEsMTMgQEAgc3RydWN0IGRybV9pOTE1X3ByaXZhdGUgewogCX0gZHJhbV9pbmZvOwogCiAJc3Ry
dWN0IGludGVsX2J3X2luZm8gewotCQl1bnNpZ25lZCBpbnQgZGVyYXRlZGJ3WzNdOyAvKiBmb3Ig
ZWFjaCBRR1YgcG9pbnQgKi8KKwkJdW5zaWduZWQgaW50IGRlcmF0ZWRid1tOVU1fU0FHVl9QT0lO
VFNdOyAvKiBmb3IgZWFjaCBRR1YgcG9pbnQgKi8KIAkJdTggbnVtX3Fndl9wb2ludHM7CiAJCXU4
IG51bV9wbGFuZXM7CiAJfSBtYXhfYndbNl07CiAKKwl1MzIgcWd2X3BvaW50c19tYXNrOworCiAJ
c3RydWN0IGRybV9wcml2YXRlX29iaiBid19vYmo7CiAKIAlzdHJ1Y3QgaW50ZWxfcnVudGltZV9w
bSBydW50aW1lX3BtOwpkaWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvaTkxNV9yZWcu
aCBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2k5MTVfcmVnLmgKaW5kZXggYTRlNWE0YWUzODg1Li4y
ZWE4M2ZmNjgxYjkgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2k5MTVfcmVnLmgK
KysrIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvaTkxNV9yZWcuaApAQCAtODk4MSw2ICs4OTgxLDgg
QEAgZW51bSB7CiAjZGVmaW5lICAgICBHRU42X1BDT0RFX1VOSU1QTEVNRU5URURfQ01ECTB4RkYK
ICNkZWZpbmUgICAgIEdFTjdfUENPREVfVElNRU9VVAkJCTB4MgogI2RlZmluZSAgICAgR0VON19Q
Q09ERV9JTExFR0FMX0RBVEEJCTB4MworI2RlZmluZSAgICAgR0VOMTFfUENPREVfTUFJTF9CT1hf
TE9DS0VECQkweDYKKyNkZWZpbmUgICAgIEdFTjExX1BDT0RFX1JFSkVDVEVECQkweDExCiAjZGVm
aW5lICAgICBHRU43X1BDT0RFX01JTl9GUkVRX1RBQkxFX0dUX1JBVElPX09VVF9PRl9SQU5HRSAw
eDEwCiAjZGVmaW5lICAgR0VONl9QQ09ERV9XUklURV9SQzZWSURTCQkweDQKICNkZWZpbmUgICBH
RU42X1BDT0RFX1JFQURfUkM2VklEUwkJMHg1CkBAIC05MDAyLDYgKzkwMDQsNyBAQCBlbnVtIHsK
ICNkZWZpbmUgICBJQ0xfUENPREVfTUVNX1NVQlNZU1lTVEVNX0lORk8JMHhkCiAjZGVmaW5lICAg
ICBJQ0xfUENPREVfTUVNX1NTX1JFQURfR0xPQkFMX0lORk8JKDB4MCA8PCA4KQogI2RlZmluZSAg
ICAgSUNMX1BDT0RFX01FTV9TU19SRUFEX1FHVl9QT0lOVF9JTkZPKHBvaW50KQkoKChwb2ludCkg
PDwgMTYpIHwgKDB4MSA8PCA4KSkKKyNkZWZpbmUgICBJQ0xfUENPREVfU0FHVl9ERV9NRU1fU1Nf
Q09ORklHCTB4ZQogI2RlZmluZSAgIEdFTjZfUENPREVfUkVBRF9EX0NPTVAJCTB4MTAKICNkZWZp
bmUgICBHRU42X1BDT0RFX1dSSVRFX0RfQ09NUAkJMHgxMQogI2RlZmluZSAgIEhTV19QQ09ERV9E
RV9XUklURV9GUkVRX1JFUQkJMHgxNwpAQCAtOTAxNCw2ICs5MDE3LDggQEAgZW51bSB7CiAjZGVm
aW5lICAgICBHRU45X1NBR1ZfSVNfRElTQUJMRUQJCTB4MQogI2RlZmluZSAgICAgR0VOOV9TQUdW
X0VOQUJMRQkJCTB4MwogI2RlZmluZSBHRU4xMl9QQ09ERV9SRUFEX1NBR1ZfQkxPQ0tfVElNRV9V
UwkweDIzCisjZGVmaW5lIEdFTjExX1BDT0RFX1BPSU5UU19SRVNUUklDVEVECQkweDAKKyNkZWZp
bmUgR0VOMTFfUENPREVfUE9JTlRTX1JFU1RSSUNURURfTUFTSwkweDEKICNkZWZpbmUgR0VONl9Q
Q09ERV9EQVRBCQkJCV9NTUlPKDB4MTM4MTI4KQogI2RlZmluZSAgIEdFTjZfUENPREVfRlJFUV9J
QV9SQVRJT19TSElGVAk4CiAjZGVmaW5lICAgR0VONl9QQ09ERV9GUkVRX1JJTkdfUkFUSU9fU0hJ
RlQJMTYKZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2ludGVsX3NpZGViYW5kLmMg
Yi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9pbnRlbF9zaWRlYmFuZC5jCmluZGV4IGUwNmIzNWI4NDRh
MC4uZmY5ZGJlZDA5NGQ4IDEwMDY0NAotLS0gYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9pbnRlbF9z
aWRlYmFuZC5jCisrKyBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2ludGVsX3NpZGViYW5kLmMKQEAg
LTM3MSw2ICszNzEsMjkgQEAgc3RhdGljIGlubGluZSBpbnQgZ2VuN19jaGVja19tYWlsYm94X3N0
YXR1cyh1MzIgbWJveCkKIAl9CiB9CiAKK3N0YXRpYyBpbmxpbmUgaW50IGdlbjExX2NoZWNrX21h
aWxib3hfc3RhdHVzKHUzMiBtYm94KQoreworCXN3aXRjaCAobWJveCAmIEdFTjZfUENPREVfRVJS
T1JfTUFTSykgeworCWNhc2UgR0VONl9QQ09ERV9TVUNDRVNTOgorCQlyZXR1cm4gMDsKKwljYXNl
IEdFTjZfUENPREVfSUxMRUdBTF9DTUQ6CisJCXJldHVybiAtRU5YSU87CisJY2FzZSBHRU43X1BD
T0RFX1RJTUVPVVQ6CisJCXJldHVybiAtRVRJTUVET1VUOworCWNhc2UgR0VON19QQ09ERV9JTExF
R0FMX0RBVEE6CisJCXJldHVybiAtRUlOVkFMOworCWNhc2UgR0VON19QQ09ERV9NSU5fRlJFUV9U
QUJMRV9HVF9SQVRJT19PVVRfT0ZfUkFOR0U6CisJCXJldHVybiAtRU9WRVJGTE9XOworCWNhc2Ug
R0VOMTFfUENPREVfTUFJTF9CT1hfTE9DS0VEOgorCQlyZXR1cm4gLUVBR0FJTjsKKwljYXNlIEdF
TjExX1BDT0RFX1JFSkVDVEVEOgorCQlyZXR1cm4gLUVBQ0NFUzsKKwlkZWZhdWx0OgorCQlNSVNT
SU5HX0NBU0UobWJveCAmIEdFTjZfUENPREVfRVJST1JfTUFTSyk7CisJCXJldHVybiAwOworCX0K
K30KKwogc3RhdGljIGludCBfX3NhbmR5YnJpZGdlX3Bjb2RlX3J3KHN0cnVjdCBkcm1faTkxNV9w
cml2YXRlICppOTE1LAogCQkJCSAgdTMyIG1ib3gsIHUzMiAqdmFsLCB1MzIgKnZhbDEsCiAJCQkJ
ICBpbnQgZmFzdF90aW1lb3V0X3VzLApAQCAtNDA4LDcgKzQzMSw5IEBAIHN0YXRpYyBpbnQgX19z
YW5keWJyaWRnZV9wY29kZV9ydyhzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0ZSAqaTkxNSwKIAlpZiAo
aXNfcmVhZCAmJiB2YWwxKQogCQkqdmFsMSA9IGludGVsX3VuY29yZV9yZWFkX2Z3KHVuY29yZSwg
R0VONl9QQ09ERV9EQVRBMSk7CiAKLQlpZiAoSU5URUxfR0VOKGk5MTUpID4gNikKKwlpZiAoSU5U
RUxfR0VOKGk5MTUpID49IDExKQorCQlyZXR1cm4gZ2VuMTFfY2hlY2tfbWFpbGJveF9zdGF0dXMo
bWJveCk7CisJZWxzZSBpZiAoSU5URUxfR0VOKGk5MTUpID4gNikKIAkJcmV0dXJuIGdlbjdfY2hl
Y2tfbWFpbGJveF9zdGF0dXMobWJveCk7CiAJZWxzZQogCQlyZXR1cm4gZ2VuNl9jaGVja19tYWls
Ym94X3N0YXR1cyhtYm94KTsKLS0gCjIuMTcuMQoKX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX18KSW50ZWwtZ2Z4IG1haWxpbmcgbGlzdApJbnRlbC1nZnhAbGlz
dHMuZnJlZWRlc2t0b3Aub3JnCmh0dHBzOi8vbGlzdHMuZnJlZWRlc2t0b3Aub3JnL21haWxtYW4v
bGlzdGluZm8vaW50ZWwtZ2Z4

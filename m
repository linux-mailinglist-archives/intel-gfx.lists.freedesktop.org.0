Return-Path: <intel-gfx-bounces@lists.freedesktop.org>
X-Original-To: lists+intel-gfx@lfdr.de
Delivered-To: lists+intel-gfx@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [131.252.210.177])
	by mail.lfdr.de (Postfix) with ESMTPS id DD4D931DDEA
	for <lists+intel-gfx@lfdr.de>; Wed, 17 Feb 2021 18:06:10 +0100 (CET)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 36A706E5B0;
	Wed, 17 Feb 2021 17:06:09 +0000 (UTC)
X-Original-To: intel-gfx@lists.freedesktop.org
Delivered-To: intel-gfx@lists.freedesktop.org
Received: from mga12.intel.com (mga12.intel.com [192.55.52.136])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 42C786E5BB
 for <intel-gfx@lists.freedesktop.org>; Wed, 17 Feb 2021 17:06:08 +0000 (UTC)
IronPort-SDR: /svNHjGzc6JrjDp8F8ZxbWOox51HYAb2VVmssZT3jILcV0fnVTkgHD8Oamvp+hrUhV5EfsDP9u
 kB1L7Ko1X18g==
X-IronPort-AV: E=McAfee;i="6000,8403,9898"; a="162383956"
X-IronPort-AV: E=Sophos;i="5.81,184,1610438400"; d="scan'208";a="162383956"
Received: from fmsmga004.fm.intel.com ([10.253.24.48])
 by fmsmga106.fm.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384;
 17 Feb 2021 09:04:53 -0800
IronPort-SDR: Jk8BtkaUdlGRi33V+XrlOCKq9PGJoMiGi4Qj/UdE/N9Gy9cEYAAVSRMcYzQgf4jMe+2WUTLrsi
 63HXiZc6Sn8Q==
X-IronPort-AV: E=Sophos;i="5.81,184,1610438400"; d="scan'208";a="419147021"
Received: from mvalka-mobl1.ger.corp.intel.com (HELO localhost)
 ([10.252.39.140])
 by fmsmga004-auth.fm.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384;
 17 Feb 2021 09:04:46 -0800
From: Jani Nikula <jani.nikula@intel.com>
To: intel-gfx@lists.freedesktop.org
Date: Wed, 17 Feb 2021 19:03:40 +0200
Message-Id: <a22d2cbb7d3a960656c502a011b21b41601af9f4.1613580193.git.jani.nikula@intel.com>
X-Mailer: git-send-email 2.20.1
In-Reply-To: <cover.1613580193.git.jani.nikula@intel.com>
References: <cover.1613580193.git.jani.nikula@intel.com>
MIME-Version: 1.0
Subject: [Intel-gfx] [PATCH 10/12] drm/i915/bios: start using the
 intel_bios_encoder_data directly
X-BeenThere: intel-gfx@lists.freedesktop.org
X-Mailman-Version: 2.1.29
Precedence: list
List-Id: Intel graphics driver community testing & development
 <intel-gfx.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/intel-gfx>
List-Post: <mailto:intel-gfx@lists.freedesktop.org>
List-Help: <mailto:intel-gfx-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=subscribe>
Cc: jani.nikula@intel.com, Lucas De Marchi <lucas.demarchi@intel.com>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: intel-gfx-bounces@lists.freedesktop.org
Sender: "Intel-gfx" <intel-gfx-bounces@lists.freedesktop.org>

U3RhcnQgdXNpbmcgc3RydWN0IGludGVsX2Jpb3NfZW5jb2Rlcl9kYXRhIGRpcmVjdGx5LiBXZSds
bCBzdGFydApzYW5pdGl6aW5nIHRoZSBjaGlsZCBkZXZpY2UgZGF0YSBkaXJlY3RseSBhcyB3ZWxs
LCBpbnN0ZWFkIG9mIHRoZSBjYWNoZWQKZGF0YSBpbiBkZGlfcG9ydF9pbmZvW10uIFRoZSBvbmUg
ZG93bnNpZGUgaGVyZSBpcyBoYXZpbmcgdG8gc3RvcmUgYQpub24tY29uc3QgcG9pbnRlciBiYWNr
IHRvIGludGVsX2Jpb3NfZW5jb2Rlcl9kYXRhLgoKRXZlbnR1YWxseSB3ZSdsbCBiZSBhYmxlIHRv
IGhhdmUgYSBkaXJlY3QgcG9pbnRlciBmcm9tIGVuY29kZXIgdG8KaW50ZWxfYmlvc19lbmNvZGVy
X2RhdGEsIHJlbW92aW5nIHRoZSBuZWVkIHRvIGdvIHRocm91Z2ggdGhlCmRkaV9wb3J0X2luZm9b
XSBhcnJheSBhbHRvZ2V0aGVyLiBBbmQgd2UnbGwgYmUgYWJsZSB0byByZW1vdmUgdGhlIGNhY2hl
ZApkYXRhIGluIGRkaV9wb3J0X2luZm9bXS4KCkNjOiBMdWNhcyBEZSBNYXJjaGkgPGx1Y2FzLmRl
bWFyY2hpQGludGVsLmNvbT4KQ2M6IFZpbGxlIFN5cmrDpGzDpCA8dmlsbGUuc3lyamFsYUBsaW51
eC5pbnRlbC5jb20+ClNpZ25lZC1vZmYtYnk6IEphbmkgTmlrdWxhIDxqYW5pLm5pa3VsYUBpbnRl
bC5jb20+Ci0tLQogZHJpdmVycy9ncHUvZHJtL2k5MTUvZGlzcGxheS9pbnRlbF9iaW9zLmMgfCAz
NyArKysrKysrKystLS0tLS0tLS0tLS0tLQogZHJpdmVycy9ncHUvZHJtL2k5MTUvZGlzcGxheS9p
bnRlbF9iaW9zLmggfCAxMCArKysrLS0KIGRyaXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkvaW50
ZWxfZGRpLmMgIHwgMTUgKysrKysrKy0tCiBkcml2ZXJzL2dwdS9kcm0vaTkxNS9pOTE1X2Rydi5o
ICAgICAgICAgICB8ICA0ICstLQogNCBmaWxlcyBjaGFuZ2VkLCAzNSBpbnNlcnRpb25zKCspLCAz
MSBkZWxldGlvbnMoLSkKCmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5
L2ludGVsX2Jpb3MuYyBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkvaW50ZWxfYmlvcy5j
CmluZGV4IDQ3ZTljNjA5ZjgyYS4uZDI2MzA0ZWJjNmI5IDEwMDY0NAotLS0gYS9kcml2ZXJzL2dw
dS9kcm0vaTkxNS9kaXNwbGF5L2ludGVsX2Jpb3MuYworKysgYi9kcml2ZXJzL2dwdS9kcm0vaTkx
NS9kaXNwbGF5L2ludGVsX2Jpb3MuYwpAQCAtMTUyOSw2ICsxNTI5LDggQEAgc3RhdGljIHZvaWQg
c2FuaXRpemVfZGRjX3BpbihzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0ZSAqaTkxNSwKIAogCXAgPSBn
ZXRfcG9ydF9ieV9kZGNfcGluKGk5MTUsIGluZm8tPmFsdGVybmF0ZV9kZGNfcGluKTsKIAlpZiAo
cCAhPSBQT1JUX05PTkUpIHsKKwkJc3RydWN0IGNoaWxkX2RldmljZV9jb25maWcgKmNoaWxkOwor
CiAJCWRybV9kYmdfa21zKCZpOTE1LT5kcm0sCiAJCQkgICAgInBvcnQgJWMgdHJ5aW5nIHRvIHVz
ZSB0aGUgc2FtZSBEREMgcGluICgweCV4KSBhcyBwb3J0ICVjLCAiCiAJCQkgICAgImRpc2FibGlu
ZyBwb3J0ICVjIERWSS9IRE1JIHN1cHBvcnRcbiIsCkBAIC0xNTQ4LDkgKzE1NTAsMTEgQEAgc3Rh
dGljIHZvaWQgc2FuaXRpemVfZGRjX3BpbihzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0ZSAqaTkxNSwK
IAkJICogd2UgbXVzdCBwaWNrIHBvcnQgRSA6KAogCQkgKi8KIAkJaW5mbyA9ICZpOTE1LT52YnQu
ZGRpX3BvcnRfaW5mb1twXTsKKwkJY2hpbGQgPSAmaW5mby0+ZGV2ZGF0YS0+Y2hpbGQ7CisKKwkJ
Y2hpbGQtPmRldmljZV90eXBlICY9IH5ERVZJQ0VfVFlQRV9UTURTX0RWSV9TSUdOQUxJTkc7CisJ
CWNoaWxkLT5kZXZpY2VfdHlwZSB8PSBERVZJQ0VfVFlQRV9OT1RfSERNSV9PVVRQVVQ7CiAKLQkJ
aW5mby0+c3VwcG9ydHNfZHZpID0gZmFsc2U7Ci0JCWluZm8tPnN1cHBvcnRzX2hkbWkgPSBmYWxz
ZTsKIAkJaW5mby0+YWx0ZXJuYXRlX2RkY19waW4gPSAwOwogCX0KIH0KQEAgLTE3ODMsMjAgKzE3
ODcsMjAgQEAgc3RhdGljIHZvaWQgc2FuaXRpemVfZGV2aWNlX3R5cGUoc3RydWN0IGludGVsX2Jp
b3NfZW5jb2Rlcl9kYXRhICpkZXZkYXRhLAogCWRldmRhdGEtPmNoaWxkLmRldmljZV90eXBlIHw9
IERFVklDRV9UWVBFX05PVF9IRE1JX09VVFBVVDsKIH0KIAotc3RhdGljIGJvb2wKK2Jvb2wKIGlu
dGVsX2Jpb3NfZW5jb2Rlcl9zdXBwb3J0c19kdmkoY29uc3Qgc3RydWN0IGludGVsX2Jpb3NfZW5j
b2Rlcl9kYXRhICpkZXZkYXRhKQogewogCXJldHVybiBkZXZkYXRhLT5jaGlsZC5kZXZpY2VfdHlw
ZSAmIERFVklDRV9UWVBFX1RNRFNfRFZJX1NJR05BTElORzsKIH0KIAotc3RhdGljIGJvb2wKK2Jv
b2wKIGludGVsX2Jpb3NfZW5jb2Rlcl9zdXBwb3J0c19oZG1pKGNvbnN0IHN0cnVjdCBpbnRlbF9i
aW9zX2VuY29kZXJfZGF0YSAqZGV2ZGF0YSkKIHsKIAlyZXR1cm4gaW50ZWxfYmlvc19lbmNvZGVy
X3N1cHBvcnRzX2R2aShkZXZkYXRhKSAmJgogCQkoZGV2ZGF0YS0+Y2hpbGQuZGV2aWNlX3R5cGUg
JiBERVZJQ0VfVFlQRV9OT1RfSERNSV9PVVRQVVQpID09IDA7CiB9CiAKLXN0YXRpYyBib29sCiti
b29sCiBpbnRlbF9iaW9zX2VuY29kZXJfc3VwcG9ydHNfZHAoY29uc3Qgc3RydWN0IGludGVsX2Jp
b3NfZW5jb2Rlcl9kYXRhICpkZXZkYXRhKQogewogCXJldHVybiBkZXZkYXRhLT5jaGlsZC5kZXZp
Y2VfdHlwZSAmIERFVklDRV9UWVBFX0RJU1BMQVlQT1JUX09VVFBVVDsKQEAgLTE4MzgsOCArMTg0
Miw2IEBAIHN0YXRpYyB2b2lkIHBhcnNlX2RkaV9wb3J0KHN0cnVjdCBkcm1faTkxNV9wcml2YXRl
ICppOTE1LAogCWlzX2hkbWkgPSBpbnRlbF9iaW9zX2VuY29kZXJfc3VwcG9ydHNfaGRtaShkZXZk
YXRhKTsKIAlpc19lZHAgPSBpbnRlbF9iaW9zX2VuY29kZXJfc3VwcG9ydHNfZWRwKGRldmRhdGEp
OwogCi0JaW5mby0+c3VwcG9ydHNfZHZpID0gaXNfZHZpOwotCWluZm8tPnN1cHBvcnRzX2hkbWkg
PSBpc19oZG1pOwogCWluZm8tPnN1cHBvcnRzX2RwID0gaXNfZHA7CiAJaW5mby0+c3VwcG9ydHNf
ZWRwID0gaXNfZWRwOwogCkBAIC0yOTAxLDIxICsyOTAzLDYgQEAgaW50IGludGVsX2Jpb3NfYWx0
ZXJuYXRlX2RkY19waW4oc3RydWN0IGludGVsX2VuY29kZXIgKmVuY29kZXIpCiAJcmV0dXJuIGk5
MTUtPnZidC5kZGlfcG9ydF9pbmZvW2VuY29kZXItPnBvcnRdLmFsdGVybmF0ZV9kZGNfcGluOwog
fQogCi1ib29sIGludGVsX2Jpb3NfcG9ydF9zdXBwb3J0c19kdmkoc3RydWN0IGRybV9pOTE1X3By
aXZhdGUgKmk5MTUsIGVudW0gcG9ydCBwb3J0KQotewotCXJldHVybiBpOTE1LT52YnQuZGRpX3Bv
cnRfaW5mb1twb3J0XS5zdXBwb3J0c19kdmk7Ci19Ci0KLWJvb2wgaW50ZWxfYmlvc19wb3J0X3N1
cHBvcnRzX2hkbWkoc3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmk5MTUsIGVudW0gcG9ydCBwb3J0
KQotewotCXJldHVybiBpOTE1LT52YnQuZGRpX3BvcnRfaW5mb1twb3J0XS5zdXBwb3J0c19oZG1p
OwotfQotCi1ib29sIGludGVsX2Jpb3NfcG9ydF9zdXBwb3J0c19kcChzdHJ1Y3QgZHJtX2k5MTVf
cHJpdmF0ZSAqaTkxNSwgZW51bSBwb3J0IHBvcnQpCi17Ci0JcmV0dXJuIGk5MTUtPnZidC5kZGlf
cG9ydF9pbmZvW3BvcnRdLnN1cHBvcnRzX2RwOwotfQotCiBib29sIGludGVsX2Jpb3NfcG9ydF9z
dXBwb3J0c190eXBlY191c2Ioc3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmk5MTUsCiAJCQkJCWVu
dW0gcG9ydCBwb3J0KQogewpAQCAtMjkyNiwzICsyOTEzLDkgQEAgYm9vbCBpbnRlbF9iaW9zX3Bv
cnRfc3VwcG9ydHNfdGJ0KHN0cnVjdCBkcm1faTkxNV9wcml2YXRlICppOTE1LCBlbnVtIHBvcnQg
cG9ydCkKIHsKIAlyZXR1cm4gaTkxNS0+dmJ0LmRkaV9wb3J0X2luZm9bcG9ydF0uc3VwcG9ydHNf
dGJ0OwogfQorCitjb25zdCBzdHJ1Y3QgaW50ZWxfYmlvc19lbmNvZGVyX2RhdGEgKgoraW50ZWxf
Ymlvc19lbmNvZGVyX2RhdGFfbG9va3VwKHN0cnVjdCBkcm1faTkxNV9wcml2YXRlICppOTE1LCBl
bnVtIHBvcnQgcG9ydCkKK3sKKwlyZXR1cm4gaTkxNS0+dmJ0LmRkaV9wb3J0X2luZm9bcG9ydF0u
ZGV2ZGF0YTsKK30KZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkvaW50
ZWxfYmlvcy5oIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvZGlzcGxheS9pbnRlbF9iaW9zLmgKaW5k
ZXggNjU5MWNmNzc1OGYyLi4xOGI1YzI5NzZiZDQgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2Ry
bS9pOTE1L2Rpc3BsYXkvaW50ZWxfYmlvcy5oCisrKyBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2Rp
c3BsYXkvaW50ZWxfYmlvcy5oCkBAIC0yNTQsMTAgKzI1NCwxNCBAQCBpbnQgaW50ZWxfYmlvc19k
cF9ib29zdF9sZXZlbChzdHJ1Y3QgaW50ZWxfZW5jb2RlciAqZW5jb2Rlcik7CiBpbnQgaW50ZWxf
Ymlvc19oZG1pX2Jvb3N0X2xldmVsKHN0cnVjdCBpbnRlbF9lbmNvZGVyICplbmNvZGVyKTsKIGlu
dCBpbnRlbF9iaW9zX2RwX21heF9saW5rX3JhdGUoc3RydWN0IGludGVsX2VuY29kZXIgKmVuY29k
ZXIpOwogaW50IGludGVsX2Jpb3NfYWx0ZXJuYXRlX2RkY19waW4oc3RydWN0IGludGVsX2VuY29k
ZXIgKmVuY29kZXIpOwotYm9vbCBpbnRlbF9iaW9zX3BvcnRfc3VwcG9ydHNfZHZpKHN0cnVjdCBk
cm1faTkxNV9wcml2YXRlICppOTE1LCBlbnVtIHBvcnQgcG9ydCk7Ci1ib29sIGludGVsX2Jpb3Nf
cG9ydF9zdXBwb3J0c19oZG1pKHN0cnVjdCBkcm1faTkxNV9wcml2YXRlICppOTE1LCBlbnVtIHBv
cnQgcG9ydCk7Ci1ib29sIGludGVsX2Jpb3NfcG9ydF9zdXBwb3J0c19kcChzdHJ1Y3QgZHJtX2k5
MTVfcHJpdmF0ZSAqaTkxNSwgZW51bSBwb3J0IHBvcnQpOwogYm9vbCBpbnRlbF9iaW9zX3BvcnRf
c3VwcG9ydHNfdHlwZWNfdXNiKHN0cnVjdCBkcm1faTkxNV9wcml2YXRlICppOTE1LCBlbnVtIHBv
cnQgcG9ydCk7CiBib29sIGludGVsX2Jpb3NfcG9ydF9zdXBwb3J0c190YnQoc3RydWN0IGRybV9p
OTE1X3ByaXZhdGUgKmk5MTUsIGVudW0gcG9ydCBwb3J0KTsKIAorY29uc3Qgc3RydWN0IGludGVs
X2Jpb3NfZW5jb2Rlcl9kYXRhICoKK2ludGVsX2Jpb3NfZW5jb2Rlcl9kYXRhX2xvb2t1cChzdHJ1
Y3QgZHJtX2k5MTVfcHJpdmF0ZSAqaTkxNSwgZW51bSBwb3J0IHBvcnQpOworCitib29sIGludGVs
X2Jpb3NfZW5jb2Rlcl9zdXBwb3J0c19kdmkoY29uc3Qgc3RydWN0IGludGVsX2Jpb3NfZW5jb2Rl
cl9kYXRhICpkZXZkYXRhKTsKK2Jvb2wgaW50ZWxfYmlvc19lbmNvZGVyX3N1cHBvcnRzX2hkbWko
Y29uc3Qgc3RydWN0IGludGVsX2Jpb3NfZW5jb2Rlcl9kYXRhICpkZXZkYXRhKTsKK2Jvb2wgaW50
ZWxfYmlvc19lbmNvZGVyX3N1cHBvcnRzX2RwKGNvbnN0IHN0cnVjdCBpbnRlbF9iaW9zX2VuY29k
ZXJfZGF0YSAqZGV2ZGF0YSk7CisKICNlbmRpZiAvKiBfSU5URUxfQklPU19IXyAqLwpkaWZmIC0t
Z2l0IGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvZGlzcGxheS9pbnRlbF9kZGkuYyBiL2RyaXZlcnMv
Z3B1L2RybS9pOTE1L2Rpc3BsYXkvaW50ZWxfZGRpLmMKaW5kZXggZWVhZTc4MDk3YTIwLi4xYTJm
NzcyNWY4ZWMgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkvaW50ZWxf
ZGRpLmMKKysrIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvZGlzcGxheS9pbnRlbF9kZGkuYwpAQCAt
Mzk3Myw2ICszOTczLDcgQEAgdm9pZCBpbnRlbF9kZGlfaW5pdChzdHJ1Y3QgZHJtX2k5MTVfcHJp
dmF0ZSAqZGV2X3ByaXYsIGVudW0gcG9ydCBwb3J0KQogewogCXN0cnVjdCBpbnRlbF9kaWdpdGFs
X3BvcnQgKmRpZ19wb3J0OwogCXN0cnVjdCBpbnRlbF9lbmNvZGVyICplbmNvZGVyOworCWNvbnN0
IHN0cnVjdCBpbnRlbF9iaW9zX2VuY29kZXJfZGF0YSAqZGV2ZGF0YTsKIAlib29sIGluaXRfaGRt
aSwgaW5pdF9kcDsKIAllbnVtIHBoeSBwaHkgPSBpbnRlbF9wb3J0X3RvX3BoeShkZXZfcHJpdiwg
cG9ydCk7CiAKQEAgLTM5ODgsOSArMzk4OSwxNyBAQCB2b2lkIGludGVsX2RkaV9pbml0KHN0cnVj
dCBkcm1faTkxNV9wcml2YXRlICpkZXZfcHJpdiwgZW51bSBwb3J0IHBvcnQpCiAJCXJldHVybjsK
IAl9CiAKLQlpbml0X2hkbWkgPSBpbnRlbF9iaW9zX3BvcnRfc3VwcG9ydHNfZHZpKGRldl9wcml2
LCBwb3J0KSB8fAotCQlpbnRlbF9iaW9zX3BvcnRfc3VwcG9ydHNfaGRtaShkZXZfcHJpdiwgcG9y
dCk7Ci0JaW5pdF9kcCA9IGludGVsX2Jpb3NfcG9ydF9zdXBwb3J0c19kcChkZXZfcHJpdiwgcG9y
dCk7CisJZGV2ZGF0YSA9IGludGVsX2Jpb3NfZW5jb2Rlcl9kYXRhX2xvb2t1cChkZXZfcHJpdiwg
cG9ydCk7CisJaWYgKCFkZXZkYXRhKSB7CisJCWRybV9kYmdfa21zKCZkZXZfcHJpdi0+ZHJtLAor
CQkJICAgICJWQlQgc2F5cyBwb3J0ICVjIGlzIG5vdCBwcmVzZW50XG4iLAorCQkJICAgIHBvcnRf
bmFtZShwb3J0KSk7CisJCXJldHVybjsKKwl9CisKKwlpbml0X2hkbWkgPSBpbnRlbF9iaW9zX2Vu
Y29kZXJfc3VwcG9ydHNfZHZpKGRldmRhdGEpIHx8CisJCWludGVsX2Jpb3NfZW5jb2Rlcl9zdXBw
b3J0c19oZG1pKGRldmRhdGEpOworCWluaXRfZHAgPSBpbnRlbF9iaW9zX2VuY29kZXJfc3VwcG9y
dHNfZHAoZGV2ZGF0YSk7CiAKIAlpZiAoaW50ZWxfYmlvc19pc19sc3Bjb25fcHJlc2VudChkZXZf
cHJpdiwgcG9ydCkpIHsKIAkJLyoKZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2k5
MTVfZHJ2LmggYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9pOTE1X2Rydi5oCmluZGV4IGUyYzViYTYx
YjM3MC4uNTc3MTJhNjE3ODM5IDEwMDY0NAotLS0gYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9pOTE1
X2Rydi5oCisrKyBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2k5MTVfZHJ2LmgKQEAgLTU4NCw3ICs1
ODQsNyBAQCBpOTE1X2ZlbmNlX3RpbWVvdXQoY29uc3Qgc3RydWN0IGRybV9pOTE1X3ByaXZhdGUg
Kmk5MTUpCiAKIHN0cnVjdCBkZGlfdmJ0X3BvcnRfaW5mbyB7CiAJLyogTm9uLU5VTEwgaWYgcG9y
dCBwcmVzZW50LiAqLwotCWNvbnN0IHN0cnVjdCBpbnRlbF9iaW9zX2VuY29kZXJfZGF0YSAqZGV2
ZGF0YTsKKwlzdHJ1Y3QgaW50ZWxfYmlvc19lbmNvZGVyX2RhdGEgKmRldmRhdGE7CiAKIAlpbnQg
bWF4X3RtZHNfY2xvY2s7CiAKQEAgLTU5Miw4ICs1OTIsNiBAQCBzdHJ1Y3QgZGRpX3ZidF9wb3J0
X2luZm8gewogCXU4IGhkbWlfbGV2ZWxfc2hpZnQ7CiAJdTggaGRtaV9sZXZlbF9zaGlmdF9zZXQ6
MTsKIAotCXU4IHN1cHBvcnRzX2R2aToxOwotCXU4IHN1cHBvcnRzX2hkbWk6MTsKIAl1OCBzdXBw
b3J0c19kcDoxOwogCXU4IHN1cHBvcnRzX2VkcDoxOwogCXU4IHN1cHBvcnRzX3R5cGVjX3VzYjox
OwotLSAKMi4yMC4xCgpfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fXwpJbnRlbC1nZnggbWFpbGluZyBsaXN0CkludGVsLWdmeEBsaXN0cy5mcmVlZGVza3RvcC5v
cmcKaHR0cHM6Ly9saXN0cy5mcmVlZGVza3RvcC5vcmcvbWFpbG1hbi9saXN0aW5mby9pbnRlbC1n
ZngK

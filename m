Return-Path: <intel-gfx-bounces@lists.freedesktop.org>
X-Original-To: lists+intel-gfx@lfdr.de
Delivered-To: lists+intel-gfx@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [131.252.210.177])
	by mail.lfdr.de (Postfix) with ESMTPS id DE52EAB4EF
	for <lists+intel-gfx@lfdr.de>; Fri,  6 Sep 2019 11:33:21 +0200 (CEST)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 4ADFF6E21A;
	Fri,  6 Sep 2019 09:33:20 +0000 (UTC)
X-Original-To: intel-gfx@lists.freedesktop.org
Delivered-To: intel-gfx@lists.freedesktop.org
Received: from mga18.intel.com (mga18.intel.com [134.134.136.126])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 4E2AF6E20D
 for <intel-gfx@lists.freedesktop.org>; Fri,  6 Sep 2019 09:33:18 +0000 (UTC)
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from orsmga003.jf.intel.com ([10.7.209.27])
 by orsmga106.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384;
 06 Sep 2019 02:33:18 -0700
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.64,472,1559545200"; d="scan'208";a="185737749"
Received: from chlopez-mobl1.amr.corp.intel.com (HELO
 delly.ger.corp.intel.com) ([10.252.36.202])
 by orsmga003.jf.intel.com with ESMTP; 06 Sep 2019 02:33:16 -0700
From: Lionel Landwerlin <lionel.g.landwerlin@intel.com>
To: intel-gfx@lists.freedesktop.org
Date: Fri,  6 Sep 2019 12:32:49 +0300
Message-Id: <20190906093256.26198-7-lionel.g.landwerlin@intel.com>
X-Mailer: git-send-email 2.23.0
In-Reply-To: <20190906093256.26198-1-lionel.g.landwerlin@intel.com>
References: <20190906093256.26198-1-lionel.g.landwerlin@intel.com>
MIME-Version: 1.0
Subject: [Intel-gfx] [PATCH v15 06/13] drm/i915/perf: move perf types to
 their own header
X-BeenThere: intel-gfx@lists.freedesktop.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: Intel graphics driver community testing & development
 <intel-gfx.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/intel-gfx>
List-Post: <mailto:intel-gfx@lists.freedesktop.org>
List-Help: <mailto:intel-gfx-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: intel-gfx-bounces@lists.freedesktop.org
Sender: "Intel-gfx" <intel-gfx-bounces@lists.freedesktop.org>

Rm9sbG93aW5nIGEgcGF0dGVybiB1c2VkIHRocm91Z2hvdXQgdGhlIGRyaXZlci4KClNpZ25lZC1v
ZmYtYnk6IExpb25lbCBMYW5kd2VybGluIDxsaW9uZWwuZy5sYW5kd2VybGluQGludGVsLmNvbT4K
LS0tCiBkcml2ZXJzL2dwdS9kcm0vaTkxNS9pOTE1X2Rydi5oICAgICAgICB8IDMwMCArLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLQogZHJpdmVycy9ncHUvZHJtL2k5MTUvaTkxNV9wZXJmLmggICAgICAg
fCAgIDIgKwogZHJpdmVycy9ncHUvZHJtL2k5MTUvaTkxNV9wZXJmX3R5cGVzLmggfCAzMTggKysr
KysrKysrKysrKysrKysrKysrKysrKwogMyBmaWxlcyBjaGFuZ2VkLCAzMjEgaW5zZXJ0aW9ucygr
KSwgMjk5IGRlbGV0aW9ucygtKQogY3JlYXRlIG1vZGUgMTAwNjQ0IGRyaXZlcnMvZ3B1L2RybS9p
OTE1L2k5MTVfcGVyZl90eXBlcy5oCgpkaWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL2k5MTUv
aTkxNV9kcnYuaCBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2k5MTVfZHJ2LmgKaW5kZXggMjc0YTEx
OTNkNGYwLi5mNDE0NWFlNmFiNmUgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2k5
MTVfZHJ2LmgKKysrIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvaTkxNV9kcnYuaApAQCAtOTIsNiAr
OTIsNyBAQAogI2luY2x1ZGUgImk5MTVfZ2VtX2ZlbmNlX3JlZy5oIgogI2luY2x1ZGUgImk5MTVf
Z2VtX2d0dC5oIgogI2luY2x1ZGUgImk5MTVfZ3B1X2Vycm9yLmgiCisjaW5jbHVkZSAiaTkxNV9w
ZXJmX3R5cGVzLmgiCiAjaW5jbHVkZSAiaTkxNV9yZXF1ZXN0LmgiCiAjaW5jbHVkZSAiaTkxNV9z
Y2hlZHVsZXIuaCIKICNpbmNsdWRlICJndC9pbnRlbF90aW1lbGluZS5oIgpAQCAtOTc5LDMwNSAr
OTgwLDYgQEAgc3RydWN0IGludGVsX3dtX2NvbmZpZyB7CiAJYm9vbCBzcHJpdGVzX3NjYWxlZDsK
IH07CiAKLXN0cnVjdCBpOTE1X29hX2Zvcm1hdCB7Ci0JdTMyIGZvcm1hdDsKLQlpbnQgc2l6ZTsK
LX07Ci0KLXN0cnVjdCBpOTE1X29hX3JlZyB7Ci0JaTkxNV9yZWdfdCBhZGRyOwotCXUzMiB2YWx1
ZTsKLX07Ci0KLXN0cnVjdCBpOTE1X29hX2NvbmZpZyB7Ci0JY2hhciB1dWlkW1VVSURfU1RSSU5H
X0xFTiArIDFdOwotCWludCBpZDsKLQotCWNvbnN0IHN0cnVjdCBpOTE1X29hX3JlZyAqbXV4X3Jl
Z3M7Ci0JdTMyIG11eF9yZWdzX2xlbjsKLQljb25zdCBzdHJ1Y3QgaTkxNV9vYV9yZWcgKmJfY291
bnRlcl9yZWdzOwotCXUzMiBiX2NvdW50ZXJfcmVnc19sZW47Ci0JY29uc3Qgc3RydWN0IGk5MTVf
b2FfcmVnICpmbGV4X3JlZ3M7Ci0JdTMyIGZsZXhfcmVnc19sZW47Ci0KLQlzdHJ1Y3QgYXR0cmli
dXRlX2dyb3VwIHN5c2ZzX21ldHJpYzsKLQlzdHJ1Y3QgYXR0cmlidXRlICphdHRyc1syXTsKLQlz
dHJ1Y3QgZGV2aWNlX2F0dHJpYnV0ZSBzeXNmc19tZXRyaWNfaWQ7Ci0KLQlhdG9taWNfdCByZWZf
Y291bnQ7Ci19OwotCi1zdHJ1Y3QgaTkxNV9wZXJmX3N0cmVhbTsKLQotLyoqCi0gKiBzdHJ1Y3Qg
aTkxNV9wZXJmX3N0cmVhbV9vcHMgLSB0aGUgT1BzIHRvIHN1cHBvcnQgYSBzcGVjaWZpYyBzdHJl
YW0gdHlwZQotICovCi1zdHJ1Y3QgaTkxNV9wZXJmX3N0cmVhbV9vcHMgewotCS8qKgotCSAqIEBl
bmFibGU6IEVuYWJsZXMgdGhlIGNvbGxlY3Rpb24gb2YgSFcgc2FtcGxlcywgZWl0aGVyIGluIHJl
c3BvbnNlIHRvCi0JICogYEk5MTVfUEVSRl9JT0NUTF9FTkFCTEVgIG9yIGltcGxpY2l0bHkgY2Fs
bGVkIHdoZW4gc3RyZWFtIGlzIG9wZW5lZAotCSAqIHdpdGhvdXQgYEk5MTVfUEVSRl9GTEFHX0RJ
U0FCTEVEYC4KLQkgKi8KLQl2b2lkICgqZW5hYmxlKShzdHJ1Y3QgaTkxNV9wZXJmX3N0cmVhbSAq
c3RyZWFtKTsKLQotCS8qKgotCSAqIEBkaXNhYmxlOiBEaXNhYmxlcyB0aGUgY29sbGVjdGlvbiBv
ZiBIVyBzYW1wbGVzLCBlaXRoZXIgaW4gcmVzcG9uc2UKLQkgKiB0byBgSTkxNV9QRVJGX0lPQ1RM
X0RJU0FCTEVgIG9yIGltcGxpY2l0bHkgY2FsbGVkIGJlZm9yZSBkZXN0cm95aW5nCi0JICogdGhl
IHN0cmVhbS4KLQkgKi8KLQl2b2lkICgqZGlzYWJsZSkoc3RydWN0IGk5MTVfcGVyZl9zdHJlYW0g
KnN0cmVhbSk7Ci0KLQkvKioKLQkgKiBAcG9sbF93YWl0OiBDYWxsIHBvbGxfd2FpdCwgcGFzc2lu
ZyBhIHdhaXQgcXVldWUgdGhhdCB3aWxsIGJlIHdva2VuCi0JICogb25jZSB0aGVyZSBpcyBzb21l
dGhpbmcgcmVhZHkgdG8gcmVhZCgpIGZvciB0aGUgc3RyZWFtCi0JICovCi0Jdm9pZCAoKnBvbGxf
d2FpdCkoc3RydWN0IGk5MTVfcGVyZl9zdHJlYW0gKnN0cmVhbSwKLQkJCSAgc3RydWN0IGZpbGUg
KmZpbGUsCi0JCQkgIHBvbGxfdGFibGUgKndhaXQpOwotCi0JLyoqCi0JICogQHdhaXRfdW5sb2Nr
ZWQ6IEZvciBoYW5kbGluZyBhIGJsb2NraW5nIHJlYWQsIHdhaXQgdW50aWwgdGhlcmUgaXMKLQkg
KiBzb21ldGhpbmcgdG8gcmVhZHkgdG8gcmVhZCgpIGZvciB0aGUgc3RyZWFtLiBFLmcuIHdhaXQg
b24gdGhlIHNhbWUKLQkgKiB3YWl0IHF1ZXVlIHRoYXQgd291bGQgYmUgcGFzc2VkIHRvIHBvbGxf
d2FpdCgpLgotCSAqLwotCWludCAoKndhaXRfdW5sb2NrZWQpKHN0cnVjdCBpOTE1X3BlcmZfc3Ry
ZWFtICpzdHJlYW0pOwotCi0JLyoqCi0JICogQHJlYWQ6IENvcHkgYnVmZmVyZWQgbWV0cmljcyBh
cyByZWNvcmRzIHRvIHVzZXJzcGFjZQotCSAqICoqYnVmKio6IHRoZSB1c2Vyc3BhY2UsIGRlc3Rp
bmF0aW9uIGJ1ZmZlcgotCSAqICoqY291bnQqKjogdGhlIG51bWJlciBvZiBieXRlcyB0byBjb3B5
LCByZXF1ZXN0ZWQgYnkgdXNlcnNwYWNlCi0JICogKipvZmZzZXQqKjogemVybyBhdCB0aGUgc3Rh
cnQgb2YgdGhlIHJlYWQsIHVwZGF0ZWQgYXMgdGhlIHJlYWQKLQkgKiBwcm9jZWVkcywgaXQgcmVw
cmVzZW50cyBob3cgbWFueSBieXRlcyBoYXZlIGJlZW4gY29waWVkIHNvIGZhciBhbmQKLQkgKiB0
aGUgYnVmZmVyIG9mZnNldCBmb3IgY29weWluZyB0aGUgbmV4dCByZWNvcmQuCi0JICoKLQkgKiBD
b3B5IGFzIG1hbnkgYnVmZmVyZWQgaTkxNSBwZXJmIHNhbXBsZXMgYW5kIHJlY29yZHMgZm9yIHRo
aXMgc3RyZWFtCi0JICogdG8gdXNlcnNwYWNlIGFzIHdpbGwgZml0IGluIHRoZSBnaXZlbiBidWZm
ZXIuCi0JICoKLQkgKiBPbmx5IHdyaXRlIGNvbXBsZXRlIHJlY29yZHM7IHJldHVybmluZyAtJUVO
T1NQQyBpZiB0aGVyZSBpc24ndCByb29tCi0JICogZm9yIGEgY29tcGxldGUgcmVjb3JkLgotCSAq
Ci0JICogUmV0dXJuIGFueSBlcnJvciBjb25kaXRpb24gdGhhdCByZXN1bHRzIGluIGEgc2hvcnQg
cmVhZCBzdWNoIGFzCi0JICogLSVFTk9TUEMgb3IgLSVFRkFVTFQsIGV2ZW4gdGhvdWdoIHRoZXNl
IG1heSBiZSBzcXVhc2hlZCBiZWZvcmUKLQkgKiByZXR1cm5pbmcgdG8gdXNlcnNwYWNlLgotCSAq
LwotCWludCAoKnJlYWQpKHN0cnVjdCBpOTE1X3BlcmZfc3RyZWFtICpzdHJlYW0sCi0JCSAgICBj
aGFyIF9fdXNlciAqYnVmLAotCQkgICAgc2l6ZV90IGNvdW50LAotCQkgICAgc2l6ZV90ICpvZmZz
ZXQpOwotCi0JLyoqCi0JICogQGRlc3Ryb3k6IENsZWFudXAgYW55IHN0cmVhbSBzcGVjaWZpYyBy
ZXNvdXJjZXMuCi0JICoKLQkgKiBUaGUgc3RyZWFtIHdpbGwgYWx3YXlzIGJlIGRpc2FibGVkIGJl
Zm9yZSB0aGlzIGlzIGNhbGxlZC4KLQkgKi8KLQl2b2lkICgqZGVzdHJveSkoc3RydWN0IGk5MTVf
cGVyZl9zdHJlYW0gKnN0cmVhbSk7Ci19OwotCi0vKioKLSAqIHN0cnVjdCBpOTE1X3BlcmZfc3Ry
ZWFtIC0gc3RhdGUgZm9yIGEgc2luZ2xlIG9wZW4gc3RyZWFtIEZECi0gKi8KLXN0cnVjdCBpOTE1
X3BlcmZfc3RyZWFtIHsKLQkvKioKLQkgKiBAZGV2X3ByaXY6IGk5MTUgZHJtIGRldmljZQotCSAq
LwotCXN0cnVjdCBkcm1faTkxNV9wcml2YXRlICpkZXZfcHJpdjsKLQotCS8qKgotCSAqIEB3YWtl
cmVmOiBBcyB3ZSBrZWVwIHRoZSBkZXZpY2UgYXdha2Ugd2hpbGUgdGhlIHBlcmYgc3RyZWFtIGlz
Ci0JICogYWN0aXZlLCB3ZSB0cmFjayBvdXIgcnVudGltZSBwbSByZWZlcmVuY2UgZm9yIGxhdGVy
IHJlbGVhc2UuCi0JICovCi0JaW50ZWxfd2FrZXJlZl90IHdha2VyZWY7Ci0KLQkvKioKLQkgKiBA
ZW5naW5lOiBFbmdpbmUgYXNzb2NpYXRlZCB3aXRoIHRoaXMgcGVyZm9ybWFuY2Ugc3RyZWFtLgot
CSAqLwotCXN0cnVjdCBpbnRlbF9lbmdpbmVfY3MgKmVuZ2luZTsKLQotCS8qKgotCSAqIEBzYW1w
bGVfZmxhZ3M6IEZsYWdzIHJlcHJlc2VudGluZyB0aGUgYERSTV9JOTE1X1BFUkZfUFJPUF9TQU1Q
TEVfKmAKLQkgKiBwcm9wZXJ0aWVzIGdpdmVuIHdoZW4gb3BlbmluZyBhIHN0cmVhbSwgcmVwcmVz
ZW50aW5nIHRoZSBjb250ZW50cwotCSAqIG9mIGEgc2luZ2xlIHNhbXBsZSBhcyByZWFkKCkgYnkg
dXNlcnNwYWNlLgotCSAqLwotCXUzMiBzYW1wbGVfZmxhZ3M7Ci0KLQkvKioKLQkgKiBAc2FtcGxl
X3NpemU6IENvbnNpZGVyaW5nIHRoZSBjb25maWd1cmVkIGNvbnRlbnRzIG9mIGEgc2FtcGxlCi0J
ICogY29tYmluZWQgd2l0aCB0aGUgcmVxdWlyZWQgaGVhZGVyIHNpemUsIHRoaXMgaXMgdGhlIHRv
dGFsIHNpemUKLQkgKiBvZiBhIHNpbmdsZSBzYW1wbGUgcmVjb3JkLgotCSAqLwotCWludCBzYW1w
bGVfc2l6ZTsKLQotCS8qKgotCSAqIEBjdHg6ICVOVUxMIGlmIG1lYXN1cmluZyBzeXN0ZW0td2lk
ZSBhY3Jvc3MgYWxsIGNvbnRleHRzIG9yIGEKLQkgKiBzcGVjaWZpYyBjb250ZXh0IHRoYXQgaXMg
YmVpbmcgbW9uaXRvcmVkLgotCSAqLwotCXN0cnVjdCBpOTE1X2dlbV9jb250ZXh0ICpjdHg7Ci0K
LQkvKioKLQkgKiBAZW5hYmxlZDogV2hldGhlciB0aGUgc3RyZWFtIGlzIGN1cnJlbnRseSBlbmFi
bGVkLCBjb25zaWRlcmluZwotCSAqIHdoZXRoZXIgdGhlIHN0cmVhbSB3YXMgb3BlbmVkIGluIGEg
ZGlzYWJsZWQgc3RhdGUgYW5kIGJhc2VkCi0JICogb24gYEk5MTVfUEVSRl9JT0NUTF9FTkFCTEVg
IGFuZCBgSTkxNV9QRVJGX0lPQ1RMX0RJU0FCTEVgIGNhbGxzLgotCSAqLwotCWJvb2wgZW5hYmxl
ZDsKLQotCS8qKgotCSAqIEBvcHM6IFRoZSBjYWxsYmFja3MgcHJvdmlkaW5nIHRoZSBpbXBsZW1l
bnRhdGlvbiBvZiB0aGlzIHNwZWNpZmljCi0JICogdHlwZSBvZiBjb25maWd1cmVkIHN0cmVhbS4K
LQkgKi8KLQljb25zdCBzdHJ1Y3QgaTkxNV9wZXJmX3N0cmVhbV9vcHMgKm9wczsKLQotCS8qKgot
CSAqIEBvYV9jb25maWc6IFRoZSBPQSBjb25maWd1cmF0aW9uIHVzZWQgYnkgdGhlIHN0cmVhbS4K
LQkgKi8KLQlzdHJ1Y3QgaTkxNV9vYV9jb25maWcgKm9hX2NvbmZpZzsKLQotCS8qKgotCSAqIFRo
ZSBPQSBjb250ZXh0IHNwZWNpZmljIGluZm9ybWF0aW9uLgotCSAqLwotCXN0cnVjdCBpbnRlbF9j
b250ZXh0ICpwaW5uZWRfY3R4OwotCXUzMiBzcGVjaWZpY19jdHhfaWQ7Ci0JdTMyIHNwZWNpZmlj
X2N0eF9pZF9tYXNrOwotCi0Jc3RydWN0IGhydGltZXIgcG9sbF9jaGVja190aW1lcjsKLQl3YWl0
X3F1ZXVlX2hlYWRfdCBwb2xsX3dxOwotCWJvb2wgcG9sbGluOwotCi0JYm9vbCBwZXJpb2RpYzsK
LQlpbnQgcGVyaW9kX2V4cG9uZW50OwotCi0JLyoqCi0JICogU3RhdGUgb2YgdGhlIE9BIGJ1ZmZl
ci4KLQkgKi8KLQlzdHJ1Y3QgewotCQlzdHJ1Y3QgaTkxNV92bWEgKnZtYTsKLQkJdTggKnZhZGRy
OwotCQl1MzIgbGFzdF9jdHhfaWQ7Ci0JCWludCBmb3JtYXQ7Ci0JCWludCBmb3JtYXRfc2l6ZTsK
LQkJaW50IHNpemVfZXhwb25lbnQ7Ci0KLQkJLyoqCi0JCSAqIExvY2tzIHJlYWRzIGFuZCB3cml0
ZXMgdG8gYWxsIGhlYWQvdGFpbCBzdGF0ZQotCQkgKgotCQkgKiBDb25zaWRlcjogdGhlIGhlYWQg
YW5kIHRhaWwgcG9pbnRlciBzdGF0ZSBuZWVkcyB0byBiZSByZWFkCi0JCSAqIGNvbnNpc3RlbnRs
eSBmcm9tIGEgaHJ0aW1lciBjYWxsYmFjayAoYXRvbWljIGNvbnRleHQpIGFuZAotCQkgKiByZWFk
KCkgZm9wICh1c2VyIGNvbnRleHQpIHdpdGggdGFpbCBwb2ludGVyIHVwZGF0ZXMgaGFwcGVuaW5n
Ci0JCSAqIGluIGF0b21pYyBjb250ZXh0IGFuZCBoZWFkIHVwZGF0ZXMgaW4gdXNlciBjb250ZXh0
IGFuZCB0aGUKLQkJICogKHVubGlrZWx5KSBwb3NzaWJpbGl0eSBvZiByZWFkKCkgZXJyb3JzIG5l
ZWRpbmcgdG8gcmVzZXQgYWxsCi0JCSAqIGhlYWQvdGFpbCBzdGF0ZS4KLQkJICoKLQkJICogTm90
ZTogQ29udGVudGlvbi9wZXJmb3JtYW5jZSBhcmVuJ3QgY3VycmVudGx5IGEgc2lnbmlmaWNhbnQK
LQkJICogY29uY2VybiBoZXJlIGNvbnNpZGVyaW5nIHRoZSByZWxhdGl2ZWx5IGxvdyBmcmVxdWVu
Y3kgb2YKLQkJICogaHJ0aW1lciBjYWxsYmFja3MgKDVtcyBwZXJpb2QpIGFuZCB0aGF0IHJlYWRz
IHR5cGljYWxseSBvbmx5Ci0JCSAqIGhhcHBlbiBpbiByZXNwb25zZSB0byBhIGhydGltZXIgZXZl
bnQgYW5kIGxpa2VseSBjb21wbGV0ZQotCQkgKiBiZWZvcmUgdGhlIG5leHQgY2FsbGJhY2suCi0J
CSAqCi0JCSAqIE5vdGU6IFRoaXMgbG9jayBpcyBub3QgaGVsZCAqd2hpbGUqIHJlYWRpbmcgYW5k
IGNvcHlpbmcgZGF0YQotCQkgKiB0byB1c2Vyc3BhY2Ugc28gdGhlIHZhbHVlIG9mIGhlYWQgb2Jz
ZXJ2ZWQgaW4gaHRyaW1lcgotCQkgKiBjYWxsYmFja3Mgd29uJ3QgcmVwcmVzZW50IGFueSBwYXJ0
aWFsIGNvbnN1bXB0aW9uIG9mIGRhdGEuCi0JCSAqLwotCQlzcGlubG9ja190IHB0cl9sb2NrOwot
Ci0JCS8qKgotCQkgKiBPbmUgJ2FnaW5nJyB0YWlsIHBvaW50ZXIgYW5kIG9uZSAnYWdlZCcgdGFp
bCBwb2ludGVyIHJlYWR5IHRvCi0JCSAqIHVzZWQgZm9yIHJlYWRpbmcuCi0JCSAqCi0JCSAqIElu
aXRpYWwgdmFsdWVzIG9mIDB4ZmZmZmZmZmYgYXJlIGludmFsaWQgYW5kIGltcGx5IHRoYXQgYW4K
LQkJICogdXBkYXRlIGlzIHJlcXVpcmVkIChhbmQgc2hvdWxkIGJlIGlnbm9yZWQgYnkgYW4gYXR0
ZW1wdGVkCi0JCSAqIHJlYWQpCi0JCSAqLwotCQlzdHJ1Y3QgewotCQkJdTMyIG9mZnNldDsKLQkJ
fSB0YWlsc1syXTsKLQotCQkvKioKLQkJICogSW5kZXggZm9yIHRoZSBhZ2VkIHRhaWwgcmVhZHkg
dG8gcmVhZCgpIGRhdGEgdXAgdG8uCi0JCSAqLwotCQl1bnNpZ25lZCBpbnQgYWdlZF90YWlsX2lk
eDsKLQotCQkvKioKLQkJICogQSBtb25vdG9uaWMgdGltZXN0YW1wIGZvciB3aGVuIHRoZSBjdXJy
ZW50IGFnaW5nIHRhaWwgcG9pbnRlcgotCQkgKiB3YXMgcmVhZDsgdXNlZCB0byBkZXRlcm1pbmUg
d2hlbiBpdCBpcyBvbGQgZW5vdWdoIHRvIHRydXN0LgotCQkgKi8KLQkJdTY0IGFnaW5nX3RpbWVz
dGFtcDsKLQotCQkvKioKLQkJICogQWx0aG91Z2ggd2UgY2FuIGFsd2F5cyByZWFkIGJhY2sgdGhl
IGhlYWQgcG9pbnRlciByZWdpc3RlciwKLQkJICogd2UgcHJlZmVyIHRvIGF2b2lkIHRydXN0aW5n
IHRoZSBIVyBzdGF0ZSwganVzdCB0byBhdm9pZCBhbnkKLQkJICogcmlzayB0aGF0IHNvbWUgaGFy
ZHdhcmUgY29uZGl0aW9uIGNvdWxkICogc29tZWhvdyBidW1wIHRoZQotCQkgKiBoZWFkIHBvaW50
ZXIgdW5wcmVkaWN0YWJseSBhbmQgY2F1c2UgdXMgdG8gZm9yd2FyZCB0aGUgd3JvbmcKLQkJICog
T0EgYnVmZmVyIGRhdGEgdG8gdXNlcnNwYWNlLgotCQkgKi8KLQkJdTMyIGhlYWQ7Ci0JfSBvYV9i
dWZmZXI7Ci19OwotCi0vKioKLSAqIHN0cnVjdCBpOTE1X29hX29wcyAtIEdlbiBzcGVjaWZpYyBp
bXBsZW1lbnRhdGlvbiBvZiBhbiBPQSB1bml0IHN0cmVhbQotICovCi1zdHJ1Y3QgaTkxNV9vYV9v
cHMgewotCS8qKgotCSAqIEBpc192YWxpZF9iX2NvdW50ZXJfcmVnOiBWYWxpZGF0ZXMgcmVnaXN0
ZXIncyBhZGRyZXNzIGZvcgotCSAqIHByb2dyYW1taW5nIGJvb2xlYW4gY291bnRlcnMgZm9yIGEg
cGFydGljdWxhciBwbGF0Zm9ybS4KLQkgKi8KLQlib29sICgqaXNfdmFsaWRfYl9jb3VudGVyX3Jl
Zykoc3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmRldl9wcml2LAotCQkJCSAgICAgICB1MzIgYWRk
cik7Ci0KLQkvKioKLQkgKiBAaXNfdmFsaWRfbXV4X3JlZzogVmFsaWRhdGVzIHJlZ2lzdGVyJ3Mg
YWRkcmVzcyBmb3IgcHJvZ3JhbW1pbmcgbXV4Ci0JICogZm9yIGEgcGFydGljdWxhciBwbGF0Zm9y
bS4KLQkgKi8KLQlib29sICgqaXNfdmFsaWRfbXV4X3JlZykoc3RydWN0IGRybV9pOTE1X3ByaXZh
dGUgKmRldl9wcml2LCB1MzIgYWRkcik7Ci0KLQkvKioKLQkgKiBAaXNfdmFsaWRfZmxleF9yZWc6
IFZhbGlkYXRlcyByZWdpc3RlcidzIGFkZHJlc3MgZm9yIHByb2dyYW1taW5nCi0JICogZmxleCBF
VSBmaWx0ZXJpbmcgZm9yIGEgcGFydGljdWxhciBwbGF0Zm9ybS4KLQkgKi8KLQlib29sICgqaXNf
dmFsaWRfZmxleF9yZWcpKHN0cnVjdCBkcm1faTkxNV9wcml2YXRlICpkZXZfcHJpdiwgdTMyIGFk
ZHIpOwotCi0JLyoqCi0JICogQGVuYWJsZV9tZXRyaWNfc2V0OiBTZWxlY3RzIGFuZCBhcHBsaWVz
IGFueSBNVVggY29uZmlndXJhdGlvbiB0byBzZXQKLQkgKiB1cCB0aGUgQm9vbGVhbiBhbmQgQ3Vz
dG9tIChCL0MpIGNvdW50ZXJzIHRoYXQgYXJlIHBhcnQgb2YgdGhlCi0JICogY291bnRlciByZXBv
cnRzIGJlaW5nIHNhbXBsZWQuIE1heSBhcHBseSBzeXN0ZW0gY29uc3RyYWludHMgc3VjaCBhcwot
CSAqIGRpc2FibGluZyBFVSBjbG9jayBnYXRpbmcgYXMgcmVxdWlyZWQuCi0JICovCi0JaW50ICgq
ZW5hYmxlX21ldHJpY19zZXQpKHN0cnVjdCBpOTE1X3BlcmZfc3RyZWFtICpzdHJlYW0pOwotCi0J
LyoqCi0JICogQGRpc2FibGVfbWV0cmljX3NldDogUmVtb3ZlIHN5c3RlbSBjb25zdHJhaW50cyBh
c3NvY2lhdGVkIHdpdGggdXNpbmcKLQkgKiB0aGUgT0EgdW5pdC4KLQkgKi8KLQl2b2lkICgqZGlz
YWJsZV9tZXRyaWNfc2V0KShzdHJ1Y3QgaTkxNV9wZXJmX3N0cmVhbSAqc3RyZWFtKTsKLQotCS8q
KgotCSAqIEBvYV9lbmFibGU6IEVuYWJsZSBwZXJpb2RpYyBzYW1wbGluZwotCSAqLwotCXZvaWQg
KCpvYV9lbmFibGUpKHN0cnVjdCBpOTE1X3BlcmZfc3RyZWFtICpzdHJlYW0pOwotCi0JLyoqCi0J
ICogQG9hX2Rpc2FibGU6IERpc2FibGUgcGVyaW9kaWMgc2FtcGxpbmcKLQkgKi8KLQl2b2lkICgq
b2FfZGlzYWJsZSkoc3RydWN0IGk5MTVfcGVyZl9zdHJlYW0gKnN0cmVhbSk7Ci0KLQkvKioKLQkg
KiBAcmVhZDogQ29weSBkYXRhIGZyb20gdGhlIGNpcmN1bGFyIE9BIGJ1ZmZlciBpbnRvIGEgZ2l2
ZW4gdXNlcnNwYWNlCi0JICogYnVmZmVyLgotCSAqLwotCWludCAoKnJlYWQpKHN0cnVjdCBpOTE1
X3BlcmZfc3RyZWFtICpzdHJlYW0sCi0JCSAgICBjaGFyIF9fdXNlciAqYnVmLAotCQkgICAgc2l6
ZV90IGNvdW50LAotCQkgICAgc2l6ZV90ICpvZmZzZXQpOwotCi0JLyoqCi0JICogQG9hX2h3X3Rh
aWxfcmVhZDogcmVhZCB0aGUgT0EgdGFpbCBwb2ludGVyIHJlZ2lzdGVyCi0JICoKLQkgKiBJbiBw
YXJ0aWN1bGFyIHRoaXMgZW5hYmxlcyB1cyB0byBzaGFyZSBhbGwgdGhlIGZpZGRseSBjb2RlIGZv
cgotCSAqIGhhbmRsaW5nIHRoZSBPQSB1bml0IHRhaWwgcG9pbnRlciByYWNlIHRoYXQgYWZmZWN0
cyBtdWx0aXBsZQotCSAqIGdlbmVyYXRpb25zLgotCSAqLwotCXUzMiAoKm9hX2h3X3RhaWxfcmVh
ZCkoc3RydWN0IGk5MTVfcGVyZl9zdHJlYW0gKnN0cmVhbSk7Ci19OwotCiBzdHJ1Y3QgaW50ZWxf
Y2RjbGtfc3RhdGUgewogCXVuc2lnbmVkIGludCBjZGNsaywgdmNvLCByZWYsIGJ5cGFzczsKIAl1
OCB2b2x0YWdlX2xldmVsOwpkaWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvaTkxNV9w
ZXJmLmggYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9pOTE1X3BlcmYuaAppbmRleCA5NTU0OWRlNjUy
MTIuLjI3MDE5MzUyNmI1NiAxMDA2NDQKLS0tIGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvaTkxNV9w
ZXJmLmgKKysrIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvaTkxNV9wZXJmLmgKQEAgLTgsNiArOCw4
IEBACiAKICNpbmNsdWRlIDxsaW51eC90eXBlcy5oPgogCisjaW5jbHVkZSAiaTkxNV9wZXJmX3R5
cGVzLmgiCisKIHN0cnVjdCBkcm1fZGV2aWNlOwogc3RydWN0IGRybV9maWxlOwogc3RydWN0IGRy
bV9pOTE1X3ByaXZhdGU7CmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9pOTE1X3Bl
cmZfdHlwZXMuaCBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2k5MTVfcGVyZl90eXBlcy5oCm5ldyBm
aWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAwMDAwMC4uMmE5MzFiYTQ4ZWQ4Ci0tLSAvZGV2
L251bGwKKysrIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvaTkxNV9wZXJmX3R5cGVzLmgKQEAgLTAs
MCArMSwzMTggQEAKKy8qCisgKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUCisgKgorICog
Q29weXJpZ2h0IMKpIDIwMTkgSW50ZWwgQ29ycG9yYXRpb24KKyAqLworCisjaWZuZGVmIF9JOTE1
X1BFUkZfVFlQRVNfSF8KKyNkZWZpbmUgX0k5MTVfUEVSRl9UWVBFU19IXworCisjaW5jbHVkZSA8
bGludXgvYXRvbWljLmg+CisjaW5jbHVkZSA8bGludXgvZGV2aWNlLmg+CisjaW5jbHVkZSA8bGlu
dXgvaHJ0aW1lci5oPgorI2luY2x1ZGUgPGxpbnV4L3N5c2ZzLmg+CisjaW5jbHVkZSA8bGludXgv
d2FpdC5oPgorCitzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0ZTsKK3N0cnVjdCBmaWxlOworCitzdHJ1
Y3QgaTkxNV9vYV9mb3JtYXQgeworCXUzMiBmb3JtYXQ7CisJaW50IHNpemU7Cit9OworCitzdHJ1
Y3QgaTkxNV9vYV9yZWcgeworCWk5MTVfcmVnX3QgYWRkcjsKKwl1MzIgdmFsdWU7Cit9OworCitz
dHJ1Y3QgaTkxNV9vYV9jb25maWcgeworCWNoYXIgdXVpZFtVVUlEX1NUUklOR19MRU4gKyAxXTsK
KwlpbnQgaWQ7CisKKwljb25zdCBzdHJ1Y3QgaTkxNV9vYV9yZWcgKm11eF9yZWdzOworCXUzMiBt
dXhfcmVnc19sZW47CisJY29uc3Qgc3RydWN0IGk5MTVfb2FfcmVnICpiX2NvdW50ZXJfcmVnczsK
Kwl1MzIgYl9jb3VudGVyX3JlZ3NfbGVuOworCWNvbnN0IHN0cnVjdCBpOTE1X29hX3JlZyAqZmxl
eF9yZWdzOworCXUzMiBmbGV4X3JlZ3NfbGVuOworCisJc3RydWN0IGF0dHJpYnV0ZV9ncm91cCBz
eXNmc19tZXRyaWM7CisJc3RydWN0IGF0dHJpYnV0ZSAqYXR0cnNbMl07CisJc3RydWN0IGRldmlj
ZV9hdHRyaWJ1dGUgc3lzZnNfbWV0cmljX2lkOworCisJYXRvbWljX3QgcmVmX2NvdW50OworfTsK
Kworc3RydWN0IGk5MTVfcGVyZl9zdHJlYW07CisKKy8qKgorICogc3RydWN0IGk5MTVfcGVyZl9z
dHJlYW1fb3BzIC0gdGhlIE9QcyB0byBzdXBwb3J0IGEgc3BlY2lmaWMgc3RyZWFtIHR5cGUKKyAq
Lworc3RydWN0IGk5MTVfcGVyZl9zdHJlYW1fb3BzIHsKKwkvKioKKwkgKiBAZW5hYmxlOiBFbmFi
bGVzIHRoZSBjb2xsZWN0aW9uIG9mIEhXIHNhbXBsZXMsIGVpdGhlciBpbiByZXNwb25zZSB0bwor
CSAqIGBJOTE1X1BFUkZfSU9DVExfRU5BQkxFYCBvciBpbXBsaWNpdGx5IGNhbGxlZCB3aGVuIHN0
cmVhbSBpcyBvcGVuZWQKKwkgKiB3aXRob3V0IGBJOTE1X1BFUkZfRkxBR19ESVNBQkxFRGAuCisJ
ICovCisJdm9pZCAoKmVuYWJsZSkoc3RydWN0IGk5MTVfcGVyZl9zdHJlYW0gKnN0cmVhbSk7CisK
KwkvKioKKwkgKiBAZGlzYWJsZTogRGlzYWJsZXMgdGhlIGNvbGxlY3Rpb24gb2YgSFcgc2FtcGxl
cywgZWl0aGVyIGluIHJlc3BvbnNlCisJICogdG8gYEk5MTVfUEVSRl9JT0NUTF9ESVNBQkxFYCBv
ciBpbXBsaWNpdGx5IGNhbGxlZCBiZWZvcmUgZGVzdHJveWluZworCSAqIHRoZSBzdHJlYW0uCisJ
ICovCisJdm9pZCAoKmRpc2FibGUpKHN0cnVjdCBpOTE1X3BlcmZfc3RyZWFtICpzdHJlYW0pOwor
CisJLyoqCisJICogQHBvbGxfd2FpdDogQ2FsbCBwb2xsX3dhaXQsIHBhc3NpbmcgYSB3YWl0IHF1
ZXVlIHRoYXQgd2lsbCBiZSB3b2tlbgorCSAqIG9uY2UgdGhlcmUgaXMgc29tZXRoaW5nIHJlYWR5
IHRvIHJlYWQoKSBmb3IgdGhlIHN0cmVhbQorCSAqLworCXZvaWQgKCpwb2xsX3dhaXQpKHN0cnVj
dCBpOTE1X3BlcmZfc3RyZWFtICpzdHJlYW0sCisJCQkgIHN0cnVjdCBmaWxlICpmaWxlLAorCQkJ
ICBwb2xsX3RhYmxlICp3YWl0KTsKKworCS8qKgorCSAqIEB3YWl0X3VubG9ja2VkOiBGb3IgaGFu
ZGxpbmcgYSBibG9ja2luZyByZWFkLCB3YWl0IHVudGlsIHRoZXJlIGlzCisJICogc29tZXRoaW5n
IHRvIHJlYWR5IHRvIHJlYWQoKSBmb3IgdGhlIHN0cmVhbS4gRS5nLiB3YWl0IG9uIHRoZSBzYW1l
CisJICogd2FpdCBxdWV1ZSB0aGF0IHdvdWxkIGJlIHBhc3NlZCB0byBwb2xsX3dhaXQoKS4KKwkg
Ki8KKwlpbnQgKCp3YWl0X3VubG9ja2VkKShzdHJ1Y3QgaTkxNV9wZXJmX3N0cmVhbSAqc3RyZWFt
KTsKKworCS8qKgorCSAqIEByZWFkOiBDb3B5IGJ1ZmZlcmVkIG1ldHJpY3MgYXMgcmVjb3JkcyB0
byB1c2Vyc3BhY2UKKwkgKiAqKmJ1ZioqOiB0aGUgdXNlcnNwYWNlLCBkZXN0aW5hdGlvbiBidWZm
ZXIKKwkgKiAqKmNvdW50Kio6IHRoZSBudW1iZXIgb2YgYnl0ZXMgdG8gY29weSwgcmVxdWVzdGVk
IGJ5IHVzZXJzcGFjZQorCSAqICoqb2Zmc2V0Kio6IHplcm8gYXQgdGhlIHN0YXJ0IG9mIHRoZSBy
ZWFkLCB1cGRhdGVkIGFzIHRoZSByZWFkCisJICogcHJvY2VlZHMsIGl0IHJlcHJlc2VudHMgaG93
IG1hbnkgYnl0ZXMgaGF2ZSBiZWVuIGNvcGllZCBzbyBmYXIgYW5kCisJICogdGhlIGJ1ZmZlciBv
ZmZzZXQgZm9yIGNvcHlpbmcgdGhlIG5leHQgcmVjb3JkLgorCSAqCisJICogQ29weSBhcyBtYW55
IGJ1ZmZlcmVkIGk5MTUgcGVyZiBzYW1wbGVzIGFuZCByZWNvcmRzIGZvciB0aGlzIHN0cmVhbQor
CSAqIHRvIHVzZXJzcGFjZSBhcyB3aWxsIGZpdCBpbiB0aGUgZ2l2ZW4gYnVmZmVyLgorCSAqCisJ
ICogT25seSB3cml0ZSBjb21wbGV0ZSByZWNvcmRzOyByZXR1cm5pbmcgLSVFTk9TUEMgaWYgdGhl
cmUgaXNuJ3Qgcm9vbQorCSAqIGZvciBhIGNvbXBsZXRlIHJlY29yZC4KKwkgKgorCSAqIFJldHVy
biBhbnkgZXJyb3IgY29uZGl0aW9uIHRoYXQgcmVzdWx0cyBpbiBhIHNob3J0IHJlYWQgc3VjaCBh
cworCSAqIC0lRU5PU1BDIG9yIC0lRUZBVUxULCBldmVuIHRob3VnaCB0aGVzZSBtYXkgYmUgc3F1
YXNoZWQgYmVmb3JlCisJICogcmV0dXJuaW5nIHRvIHVzZXJzcGFjZS4KKwkgKi8KKwlpbnQgKCpy
ZWFkKShzdHJ1Y3QgaTkxNV9wZXJmX3N0cmVhbSAqc3RyZWFtLAorCQkgICAgY2hhciBfX3VzZXIg
KmJ1ZiwKKwkJICAgIHNpemVfdCBjb3VudCwKKwkJICAgIHNpemVfdCAqb2Zmc2V0KTsKKworCS8q
KgorCSAqIEBkZXN0cm95OiBDbGVhbnVwIGFueSBzdHJlYW0gc3BlY2lmaWMgcmVzb3VyY2VzLgor
CSAqCisJICogVGhlIHN0cmVhbSB3aWxsIGFsd2F5cyBiZSBkaXNhYmxlZCBiZWZvcmUgdGhpcyBp
cyBjYWxsZWQuCisJICovCisJdm9pZCAoKmRlc3Ryb3kpKHN0cnVjdCBpOTE1X3BlcmZfc3RyZWFt
ICpzdHJlYW0pOworfTsKKworLyoqCisgKiBzdHJ1Y3QgaTkxNV9wZXJmX3N0cmVhbSAtIHN0YXRl
IGZvciBhIHNpbmdsZSBvcGVuIHN0cmVhbSBGRAorICovCitzdHJ1Y3QgaTkxNV9wZXJmX3N0cmVh
bSB7CisJLyoqCisJICogQGRldl9wcml2OiBpOTE1IGRybSBkZXZpY2UKKwkgKi8KKwlzdHJ1Y3Qg
ZHJtX2k5MTVfcHJpdmF0ZSAqZGV2X3ByaXY7CisKKwkvKioKKwkgKiBAd2FrZXJlZjogQXMgd2Ug
a2VlcCB0aGUgZGV2aWNlIGF3YWtlIHdoaWxlIHRoZSBwZXJmIHN0cmVhbSBpcworCSAqIGFjdGl2
ZSwgd2UgdHJhY2sgb3VyIHJ1bnRpbWUgcG0gcmVmZXJlbmNlIGZvciBsYXRlciByZWxlYXNlLgor
CSAqLworCWludGVsX3dha2VyZWZfdCB3YWtlcmVmOworCisJLyoqCisJICogQGVuZ2luZTogRW5n
aW5lIGFzc29jaWF0ZWQgd2l0aCB0aGlzIHBlcmZvcm1hbmNlIHN0cmVhbS4KKwkgKi8KKwlzdHJ1
Y3QgaW50ZWxfZW5naW5lX2NzICplbmdpbmU7CisKKwkvKioKKwkgKiBAc2FtcGxlX2ZsYWdzOiBG
bGFncyByZXByZXNlbnRpbmcgdGhlIGBEUk1fSTkxNV9QRVJGX1BST1BfU0FNUExFXypgCisJICog
cHJvcGVydGllcyBnaXZlbiB3aGVuIG9wZW5pbmcgYSBzdHJlYW0sIHJlcHJlc2VudGluZyB0aGUg
Y29udGVudHMKKwkgKiBvZiBhIHNpbmdsZSBzYW1wbGUgYXMgcmVhZCgpIGJ5IHVzZXJzcGFjZS4K
KwkgKi8KKwl1MzIgc2FtcGxlX2ZsYWdzOworCisJLyoqCisJICogQHNhbXBsZV9zaXplOiBDb25z
aWRlcmluZyB0aGUgY29uZmlndXJlZCBjb250ZW50cyBvZiBhIHNhbXBsZQorCSAqIGNvbWJpbmVk
IHdpdGggdGhlIHJlcXVpcmVkIGhlYWRlciBzaXplLCB0aGlzIGlzIHRoZSB0b3RhbCBzaXplCisJ
ICogb2YgYSBzaW5nbGUgc2FtcGxlIHJlY29yZC4KKwkgKi8KKwlpbnQgc2FtcGxlX3NpemU7CisK
KwkvKioKKwkgKiBAY3R4OiAlTlVMTCBpZiBtZWFzdXJpbmcgc3lzdGVtLXdpZGUgYWNyb3NzIGFs
bCBjb250ZXh0cyBvciBhCisJICogc3BlY2lmaWMgY29udGV4dCB0aGF0IGlzIGJlaW5nIG1vbml0
b3JlZC4KKwkgKi8KKwlzdHJ1Y3QgaTkxNV9nZW1fY29udGV4dCAqY3R4OworCisJLyoqCisJICog
QGVuYWJsZWQ6IFdoZXRoZXIgdGhlIHN0cmVhbSBpcyBjdXJyZW50bHkgZW5hYmxlZCwgY29uc2lk
ZXJpbmcKKwkgKiB3aGV0aGVyIHRoZSBzdHJlYW0gd2FzIG9wZW5lZCBpbiBhIGRpc2FibGVkIHN0
YXRlIGFuZCBiYXNlZAorCSAqIG9uIGBJOTE1X1BFUkZfSU9DVExfRU5BQkxFYCBhbmQgYEk5MTVf
UEVSRl9JT0NUTF9ESVNBQkxFYCBjYWxscy4KKwkgKi8KKwlib29sIGVuYWJsZWQ7CisKKwkvKioK
KwkgKiBAb3BzOiBUaGUgY2FsbGJhY2tzIHByb3ZpZGluZyB0aGUgaW1wbGVtZW50YXRpb24gb2Yg
dGhpcyBzcGVjaWZpYworCSAqIHR5cGUgb2YgY29uZmlndXJlZCBzdHJlYW0uCisJICovCisJY29u
c3Qgc3RydWN0IGk5MTVfcGVyZl9zdHJlYW1fb3BzICpvcHM7CisKKwkvKioKKwkgKiBAb2FfY29u
ZmlnOiBUaGUgT0EgY29uZmlndXJhdGlvbiB1c2VkIGJ5IHRoZSBzdHJlYW0uCisJICovCisJc3Ry
dWN0IGk5MTVfb2FfY29uZmlnICpvYV9jb25maWc7CisKKwkvKioKKwkgKiBUaGUgT0EgY29udGV4
dCBzcGVjaWZpYyBpbmZvcm1hdGlvbi4KKwkgKi8KKwlzdHJ1Y3QgaW50ZWxfY29udGV4dCAqcGlu
bmVkX2N0eDsKKwl1MzIgc3BlY2lmaWNfY3R4X2lkOworCXUzMiBzcGVjaWZpY19jdHhfaWRfbWFz
azsKKworCXN0cnVjdCBocnRpbWVyIHBvbGxfY2hlY2tfdGltZXI7CisJd2FpdF9xdWV1ZV9oZWFk
X3QgcG9sbF93cTsKKwlib29sIHBvbGxpbjsKKworCWJvb2wgcGVyaW9kaWM7CisJaW50IHBlcmlv
ZF9leHBvbmVudDsKKworCS8qKgorCSAqIFN0YXRlIG9mIHRoZSBPQSBidWZmZXIuCisJICovCisJ
c3RydWN0IHsKKwkJc3RydWN0IGk5MTVfdm1hICp2bWE7CisJCXU4ICp2YWRkcjsKKwkJdTMyIGxh
c3RfY3R4X2lkOworCQlpbnQgZm9ybWF0OworCQlpbnQgZm9ybWF0X3NpemU7CisJCWludCBzaXpl
X2V4cG9uZW50OworCisJCS8qKgorCQkgKiBMb2NrcyByZWFkcyBhbmQgd3JpdGVzIHRvIGFsbCBo
ZWFkL3RhaWwgc3RhdGUKKwkJICoKKwkJICogQ29uc2lkZXI6IHRoZSBoZWFkIGFuZCB0YWlsIHBv
aW50ZXIgc3RhdGUgbmVlZHMgdG8gYmUgcmVhZAorCQkgKiBjb25zaXN0ZW50bHkgZnJvbSBhIGhy
dGltZXIgY2FsbGJhY2sgKGF0b21pYyBjb250ZXh0KSBhbmQKKwkJICogcmVhZCgpIGZvcCAodXNl
ciBjb250ZXh0KSB3aXRoIHRhaWwgcG9pbnRlciB1cGRhdGVzIGhhcHBlbmluZworCQkgKiBpbiBh
dG9taWMgY29udGV4dCBhbmQgaGVhZCB1cGRhdGVzIGluIHVzZXIgY29udGV4dCBhbmQgdGhlCisJ
CSAqICh1bmxpa2VseSkgcG9zc2liaWxpdHkgb2YgcmVhZCgpIGVycm9ycyBuZWVkaW5nIHRvIHJl
c2V0IGFsbAorCQkgKiBoZWFkL3RhaWwgc3RhdGUuCisJCSAqCisJCSAqIE5vdGU6IENvbnRlbnRp
b24vcGVyZm9ybWFuY2UgYXJlbid0IGN1cnJlbnRseSBhIHNpZ25pZmljYW50CisJCSAqIGNvbmNl
cm4gaGVyZSBjb25zaWRlcmluZyB0aGUgcmVsYXRpdmVseSBsb3cgZnJlcXVlbmN5IG9mCisJCSAq
IGhydGltZXIgY2FsbGJhY2tzICg1bXMgcGVyaW9kKSBhbmQgdGhhdCByZWFkcyB0eXBpY2FsbHkg
b25seQorCQkgKiBoYXBwZW4gaW4gcmVzcG9uc2UgdG8gYSBocnRpbWVyIGV2ZW50IGFuZCBsaWtl
bHkgY29tcGxldGUKKwkJICogYmVmb3JlIHRoZSBuZXh0IGNhbGxiYWNrLgorCQkgKgorCQkgKiBO
b3RlOiBUaGlzIGxvY2sgaXMgbm90IGhlbGQgKndoaWxlKiByZWFkaW5nIGFuZCBjb3B5aW5nIGRh
dGEKKwkJICogdG8gdXNlcnNwYWNlIHNvIHRoZSB2YWx1ZSBvZiBoZWFkIG9ic2VydmVkIGluIGh0
cmltZXIKKwkJICogY2FsbGJhY2tzIHdvbid0IHJlcHJlc2VudCBhbnkgcGFydGlhbCBjb25zdW1w
dGlvbiBvZiBkYXRhLgorCQkgKi8KKwkJc3BpbmxvY2tfdCBwdHJfbG9jazsKKworCQkvKioKKwkJ
ICogT25lICdhZ2luZycgdGFpbCBwb2ludGVyIGFuZCBvbmUgJ2FnZWQnIHRhaWwgcG9pbnRlciBy
ZWFkeSB0bworCQkgKiB1c2VkIGZvciByZWFkaW5nLgorCQkgKgorCQkgKiBJbml0aWFsIHZhbHVl
cyBvZiAweGZmZmZmZmZmIGFyZSBpbnZhbGlkIGFuZCBpbXBseSB0aGF0IGFuCisJCSAqIHVwZGF0
ZSBpcyByZXF1aXJlZCAoYW5kIHNob3VsZCBiZSBpZ25vcmVkIGJ5IGFuIGF0dGVtcHRlZAorCQkg
KiByZWFkKQorCQkgKi8KKwkJc3RydWN0IHsKKwkJCXUzMiBvZmZzZXQ7CisJCX0gdGFpbHNbMl07
CisKKwkJLyoqCisJCSAqIEluZGV4IGZvciB0aGUgYWdlZCB0YWlsIHJlYWR5IHRvIHJlYWQoKSBk
YXRhIHVwIHRvLgorCQkgKi8KKwkJdW5zaWduZWQgaW50IGFnZWRfdGFpbF9pZHg7CisKKwkJLyoq
CisJCSAqIEEgbW9ub3RvbmljIHRpbWVzdGFtcCBmb3Igd2hlbiB0aGUgY3VycmVudCBhZ2luZyB0
YWlsIHBvaW50ZXIKKwkJICogd2FzIHJlYWQ7IHVzZWQgdG8gZGV0ZXJtaW5lIHdoZW4gaXQgaXMg
b2xkIGVub3VnaCB0byB0cnVzdC4KKwkJICovCisJCXU2NCBhZ2luZ190aW1lc3RhbXA7CisKKwkJ
LyoqCisJCSAqIEFsdGhvdWdoIHdlIGNhbiBhbHdheXMgcmVhZCBiYWNrIHRoZSBoZWFkIHBvaW50
ZXIgcmVnaXN0ZXIsCisJCSAqIHdlIHByZWZlciB0byBhdm9pZCB0cnVzdGluZyB0aGUgSFcgc3Rh
dGUsIGp1c3QgdG8gYXZvaWQgYW55CisJCSAqIHJpc2sgdGhhdCBzb21lIGhhcmR3YXJlIGNvbmRp
dGlvbiBjb3VsZCAqIHNvbWVob3cgYnVtcCB0aGUKKwkJICogaGVhZCBwb2ludGVyIHVucHJlZGlj
dGFibHkgYW5kIGNhdXNlIHVzIHRvIGZvcndhcmQgdGhlIHdyb25nCisJCSAqIE9BIGJ1ZmZlciBk
YXRhIHRvIHVzZXJzcGFjZS4KKwkJICovCisJCXUzMiBoZWFkOworCX0gb2FfYnVmZmVyOworfTsK
KworLyoqCisgKiBzdHJ1Y3QgaTkxNV9vYV9vcHMgLSBHZW4gc3BlY2lmaWMgaW1wbGVtZW50YXRp
b24gb2YgYW4gT0EgdW5pdCBzdHJlYW0KKyAqLworc3RydWN0IGk5MTVfb2Ffb3BzIHsKKwkvKioK
KwkgKiBAaXNfdmFsaWRfYl9jb3VudGVyX3JlZzogVmFsaWRhdGVzIHJlZ2lzdGVyJ3MgYWRkcmVz
cyBmb3IKKwkgKiBwcm9ncmFtbWluZyBib29sZWFuIGNvdW50ZXJzIGZvciBhIHBhcnRpY3VsYXIg
cGxhdGZvcm0uCisJICovCisJYm9vbCAoKmlzX3ZhbGlkX2JfY291bnRlcl9yZWcpKHN0cnVjdCBk
cm1faTkxNV9wcml2YXRlICpkZXZfcHJpdiwKKwkJCQkgICAgICAgdTMyIGFkZHIpOworCisJLyoq
CisJICogQGlzX3ZhbGlkX211eF9yZWc6IFZhbGlkYXRlcyByZWdpc3RlcidzIGFkZHJlc3MgZm9y
IHByb2dyYW1taW5nIG11eAorCSAqIGZvciBhIHBhcnRpY3VsYXIgcGxhdGZvcm0uCisJICovCisJ
Ym9vbCAoKmlzX3ZhbGlkX211eF9yZWcpKHN0cnVjdCBkcm1faTkxNV9wcml2YXRlICpkZXZfcHJp
diwgdTMyIGFkZHIpOworCisJLyoqCisJICogQGlzX3ZhbGlkX2ZsZXhfcmVnOiBWYWxpZGF0ZXMg
cmVnaXN0ZXIncyBhZGRyZXNzIGZvciBwcm9ncmFtbWluZworCSAqIGZsZXggRVUgZmlsdGVyaW5n
IGZvciBhIHBhcnRpY3VsYXIgcGxhdGZvcm0uCisJICovCisJYm9vbCAoKmlzX3ZhbGlkX2ZsZXhf
cmVnKShzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0ZSAqZGV2X3ByaXYsIHUzMiBhZGRyKTsKKworCS8q
KgorCSAqIEBlbmFibGVfbWV0cmljX3NldDogU2VsZWN0cyBhbmQgYXBwbGllcyBhbnkgTVVYIGNv
bmZpZ3VyYXRpb24gdG8gc2V0CisJICogdXAgdGhlIEJvb2xlYW4gYW5kIEN1c3RvbSAoQi9DKSBj
b3VudGVycyB0aGF0IGFyZSBwYXJ0IG9mIHRoZQorCSAqIGNvdW50ZXIgcmVwb3J0cyBiZWluZyBz
YW1wbGVkLiBNYXkgYXBwbHkgc3lzdGVtIGNvbnN0cmFpbnRzIHN1Y2ggYXMKKwkgKiBkaXNhYmxp
bmcgRVUgY2xvY2sgZ2F0aW5nIGFzIHJlcXVpcmVkLgorCSAqLworCWludCAoKmVuYWJsZV9tZXRy
aWNfc2V0KShzdHJ1Y3QgaTkxNV9wZXJmX3N0cmVhbSAqc3RyZWFtKTsKKworCS8qKgorCSAqIEBk
aXNhYmxlX21ldHJpY19zZXQ6IFJlbW92ZSBzeXN0ZW0gY29uc3RyYWludHMgYXNzb2NpYXRlZCB3
aXRoIHVzaW5nCisJICogdGhlIE9BIHVuaXQuCisJICovCisJdm9pZCAoKmRpc2FibGVfbWV0cmlj
X3NldCkoc3RydWN0IGk5MTVfcGVyZl9zdHJlYW0gKnN0cmVhbSk7CisKKwkvKioKKwkgKiBAb2Ff
ZW5hYmxlOiBFbmFibGUgcGVyaW9kaWMgc2FtcGxpbmcKKwkgKi8KKwl2b2lkICgqb2FfZW5hYmxl
KShzdHJ1Y3QgaTkxNV9wZXJmX3N0cmVhbSAqc3RyZWFtKTsKKworCS8qKgorCSAqIEBvYV9kaXNh
YmxlOiBEaXNhYmxlIHBlcmlvZGljIHNhbXBsaW5nCisJICovCisJdm9pZCAoKm9hX2Rpc2FibGUp
KHN0cnVjdCBpOTE1X3BlcmZfc3RyZWFtICpzdHJlYW0pOworCisJLyoqCisJICogQHJlYWQ6IENv
cHkgZGF0YSBmcm9tIHRoZSBjaXJjdWxhciBPQSBidWZmZXIgaW50byBhIGdpdmVuIHVzZXJzcGFj
ZQorCSAqIGJ1ZmZlci4KKwkgKi8KKwlpbnQgKCpyZWFkKShzdHJ1Y3QgaTkxNV9wZXJmX3N0cmVh
bSAqc3RyZWFtLAorCQkgICAgY2hhciBfX3VzZXIgKmJ1ZiwKKwkJICAgIHNpemVfdCBjb3VudCwK
KwkJICAgIHNpemVfdCAqb2Zmc2V0KTsKKworCS8qKgorCSAqIEBvYV9od190YWlsX3JlYWQ6IHJl
YWQgdGhlIE9BIHRhaWwgcG9pbnRlciByZWdpc3RlcgorCSAqCisJICogSW4gcGFydGljdWxhciB0
aGlzIGVuYWJsZXMgdXMgdG8gc2hhcmUgYWxsIHRoZSBmaWRkbHkgY29kZSBmb3IKKwkgKiBoYW5k
bGluZyB0aGUgT0EgdW5pdCB0YWlsIHBvaW50ZXIgcmFjZSB0aGF0IGFmZmVjdHMgbXVsdGlwbGUK
KwkgKiBnZW5lcmF0aW9ucy4KKwkgKi8KKwl1MzIgKCpvYV9od190YWlsX3JlYWQpKHN0cnVjdCBp
OTE1X3BlcmZfc3RyZWFtICpzdHJlYW0pOworfTsKKworI2VuZGlmIC8qIF9JOTE1X1BFUkZfVFlQ
RVNfSF8gKi8KLS0gCjIuMjMuMAoKX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX18KSW50ZWwtZ2Z4IG1haWxpbmcgbGlzdApJbnRlbC1nZnhAbGlzdHMuZnJlZWRl
c2t0b3Aub3JnCmh0dHBzOi8vbGlzdHMuZnJlZWRlc2t0b3Aub3JnL21haWxtYW4vbGlzdGluZm8v
aW50ZWwtZ2Z4

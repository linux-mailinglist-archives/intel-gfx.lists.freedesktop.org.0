Return-Path: <intel-gfx-bounces@lists.freedesktop.org>
X-Original-To: lists+intel-gfx@lfdr.de
Delivered-To: lists+intel-gfx@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [IPv6:2610:10:20:722:a800:ff:fe36:1795])
	by mail.lfdr.de (Postfix) with ESMTPS id 06733176C9
	for <lists+intel-gfx@lfdr.de>; Wed,  8 May 2019 13:25:56 +0200 (CEST)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 5E46389356;
	Wed,  8 May 2019 11:25:54 +0000 (UTC)
X-Original-To: intel-gfx@lists.freedesktop.org
Delivered-To: intel-gfx@lists.freedesktop.org
Received: from fireflyinternet.com (mail.fireflyinternet.com [109.228.58.192])
 by gabe.freedesktop.org (Postfix) with ESMTPS id E18CD896DD
 for <intel-gfx@lists.freedesktop.org>; Wed,  8 May 2019 11:25:52 +0000 (UTC)
X-Default-Received-SPF: pass (skip=forwardok (res=PASS))
 x-ip-name=78.156.65.138; 
Received: from haswell.alporthouse.com (unverified [78.156.65.138]) 
 by fireflyinternet.com (Firefly Internet (M1)) with ESMTP id 16489161-1500050 
 for multiple; Wed, 08 May 2019 12:25:48 +0100
From: Chris Wilson <chris@chris-wilson.co.uk>
To: intel-gfx@lists.freedesktop.org
Date: Wed,  8 May 2019 12:25:46 +0100
Message-Id: <20190508112546.22617-1-chris@chris-wilson.co.uk>
X-Mailer: git-send-email 2.20.1
In-Reply-To: <20190508080704.24223-8-chris@chris-wilson.co.uk>
References: <20190508080704.24223-8-chris@chris-wilson.co.uk>
MIME-Version: 1.0
Subject: [Intel-gfx] [PATCH] dma-fence: Refactor signaling for manual
 invocation
X-BeenThere: intel-gfx@lists.freedesktop.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: Intel graphics driver community testing & development
 <intel-gfx.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/intel-gfx>
List-Post: <mailto:intel-gfx@lists.freedesktop.org>
List-Help: <mailto:intel-gfx-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: intel-gfx-bounces@lists.freedesktop.org
Sender: "Intel-gfx" <intel-gfx-bounces@lists.freedesktop.org>

TW92ZSB0aGUgZHVwbGljYXRlZCBjb2RlIHdpdGhpbiBkbWEtZmVuY2UuYyBpbnRvIHRoZSBoZWFk
ZXIgZm9yIHdpZGVyCnJldXNlLgoKU2lnbmVkLW9mZi1ieTogQ2hyaXMgV2lsc29uIDxjaHJpc0Bj
aHJpcy13aWxzb24uY28udWs+Ci0tLQogZHJpdmVycy9kbWEtYnVmL01ha2VmaWxlICAgICAgICAg
ICAgICAgICAgICB8ICAxMCArLQogZHJpdmVycy9kbWEtYnVmL2RtYS1mZW5jZS10cmFjZS5jICAg
ICAgICAgICB8ICAyOCArKysKIGRyaXZlcnMvZG1hLWJ1Zi9kbWEtZmVuY2UuYyAgICAgICAgICAg
ICAgICAgfCAgMzIgKy0tCiBkcml2ZXJzL2dwdS9kcm0vaTkxNS9ndC9pbnRlbF9icmVhZGNydW1i
cy5jIHwgIDMwIC0tLQogaW5jbHVkZS9saW51eC9kbWEtZmVuY2UtdHlwZXMuaCAgICAgICAgICAg
ICB8IDI0OCArKysrKysrKysrKysrKysrKysrCiBpbmNsdWRlL2xpbnV4L2RtYS1mZW5jZS5oICAg
ICAgICAgICAgICAgICAgIHwgMjUxICsrKy0tLS0tLS0tLS0tLS0tLS0tCiA2IGZpbGVzIGNoYW5n
ZWQsIDMyMSBpbnNlcnRpb25zKCspLCAyNzggZGVsZXRpb25zKC0pCiBjcmVhdGUgbW9kZSAxMDA2
NDQgZHJpdmVycy9kbWEtYnVmL2RtYS1mZW5jZS10cmFjZS5jCiBjcmVhdGUgbW9kZSAxMDA2NDQg
aW5jbHVkZS9saW51eC9kbWEtZmVuY2UtdHlwZXMuaAoKZGlmZiAtLWdpdCBhL2RyaXZlcnMvZG1h
LWJ1Zi9NYWtlZmlsZSBiL2RyaXZlcnMvZG1hLWJ1Zi9NYWtlZmlsZQppbmRleCAxZjAwNmUwODNl
YjkuLjU2ZTU3OTg3OGYyNiAxMDA2NDQKLS0tIGEvZHJpdmVycy9kbWEtYnVmL01ha2VmaWxlCisr
KyBiL2RyaXZlcnMvZG1hLWJ1Zi9NYWtlZmlsZQpAQCAtMSw1ICsxLDExIEBACi1vYmoteSA6PSBk
bWEtYnVmLm8gZG1hLWZlbmNlLm8gZG1hLWZlbmNlLWFycmF5Lm8gZG1hLWZlbmNlLWNoYWluLm8g
XAotCSByZXNlcnZhdGlvbi5vIHNlcW5vLWZlbmNlLm8KK29iai15IDo9IFwKKwlkbWEtYnVmLm8g
XAorCWRtYS1mZW5jZS5vIFwKKwlkbWEtZmVuY2UtYXJyYXkubyBcCisJZG1hLWZlbmNlLWNoYWlu
Lm8gXAorCWRtYS1mZW5jZS10cmFjZS5vIFwKKwlyZXNlcnZhdGlvbi5vIFwKKwlzZXFuby1mZW5j
ZS5vCiBvYmotJChDT05GSUdfU1lOQ19GSUxFKQkJKz0gc3luY19maWxlLm8KIG9iai0kKENPTkZJ
R19TV19TWU5DKQkJKz0gc3dfc3luYy5vIHN5bmNfZGVidWcubwogb2JqLSQoQ09ORklHX1VETUFC
VUYpCQkrPSB1ZG1hYnVmLm8KZGlmZiAtLWdpdCBhL2RyaXZlcnMvZG1hLWJ1Zi9kbWEtZmVuY2Ut
dHJhY2UuYyBiL2RyaXZlcnMvZG1hLWJ1Zi9kbWEtZmVuY2UtdHJhY2UuYwpuZXcgZmlsZSBtb2Rl
IDEwMDY0NAppbmRleCAwMDAwMDAwMDAwMDAuLmViNmYyODJiZTRjMAotLS0gL2Rldi9udWxsCisr
KyBiL2RyaXZlcnMvZG1hLWJ1Zi9kbWEtZmVuY2UtdHJhY2UuYwpAQCAtMCwwICsxLDI4IEBACisv
KgorICogRmVuY2UgbWVjaGFuaXNtIGZvciBkbWEtYnVmIGFuZCB0byBhbGxvdyBmb3IgYXN5bmNo
cm9ub3VzIGRtYSBhY2Nlc3MKKyAqCisgKiBDb3B5cmlnaHQgKEMpIDIwMTIgQ2Fub25pY2FsIEx0
ZAorICogQ29weXJpZ2h0IChDKSAyMDEyIFRleGFzIEluc3RydW1lbnRzCisgKgorICogQXV0aG9y
czoKKyAqIFJvYiBDbGFyayA8cm9iZGNsYXJrQGdtYWlsLmNvbT4KKyAqIE1hYXJ0ZW4gTGFua2hv
cnN0IDxtYWFydGVuLmxhbmtob3JzdEBjYW5vbmljYWwuY29tPgorICoKKyAqIFRoaXMgcHJvZ3Jh
bSBpcyBmcmVlIHNvZnR3YXJlOyB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5
IGl0CisgKiB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNl
IHZlcnNpb24gMiBhcyBwdWJsaXNoZWQgYnkKKyAqIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRp
b24uCisgKgorICogVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQg
aXQgd2lsbCBiZSB1c2VmdWwsIGJ1dCBXSVRIT1VUCisgKiBBTlkgV0FSUkFOVFk7IHdpdGhvdXQg
ZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZiBNRVJDSEFOVEFCSUxJVFkgb3IKKyAqIEZJVE5F
U1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMg
TGljZW5zZSBmb3IKKyAqIG1vcmUgZGV0YWlscy4KKyAqLworCisjaW5jbHVkZSA8bGludXgvZG1h
LWZlbmNlLXR5cGVzLmg+CisKKyNkZWZpbmUgQ1JFQVRFX1RSQUNFX1BPSU5UUworI2luY2x1ZGUg
PHRyYWNlL2V2ZW50cy9kbWFfZmVuY2UuaD4KKworRVhQT1JUX1RSQUNFUE9JTlRfU1lNQk9MKGRt
YV9mZW5jZV9lbWl0KTsKK0VYUE9SVF9UUkFDRVBPSU5UX1NZTUJPTChkbWFfZmVuY2VfZW5hYmxl
X3NpZ25hbCk7CitFWFBPUlRfVFJBQ0VQT0lOVF9TWU1CT0woZG1hX2ZlbmNlX3NpZ25hbGVkKTsK
ZGlmZiAtLWdpdCBhL2RyaXZlcnMvZG1hLWJ1Zi9kbWEtZmVuY2UuYyBiL2RyaXZlcnMvZG1hLWJ1
Zi9kbWEtZmVuY2UuYwppbmRleCA5YmYwNjA0MjYxOWEuLjgxOTZhMTc5ZmRjMiAxMDA2NDQKLS0t
IGEvZHJpdmVycy9kbWEtYnVmL2RtYS1mZW5jZS5jCisrKyBiL2RyaXZlcnMvZG1hLWJ1Zi9kbWEt
ZmVuY2UuYwpAQCAtMjQsMTMgKzI0LDYgQEAKICNpbmNsdWRlIDxsaW51eC9kbWEtZmVuY2UuaD4K
ICNpbmNsdWRlIDxsaW51eC9zY2hlZC9zaWduYWwuaD4KIAotI2RlZmluZSBDUkVBVEVfVFJBQ0Vf
UE9JTlRTCi0jaW5jbHVkZSA8dHJhY2UvZXZlbnRzL2RtYV9mZW5jZS5oPgotCi1FWFBPUlRfVFJB
Q0VQT0lOVF9TWU1CT0woZG1hX2ZlbmNlX2VtaXQpOwotRVhQT1JUX1RSQUNFUE9JTlRfU1lNQk9M
KGRtYV9mZW5jZV9lbmFibGVfc2lnbmFsKTsKLUVYUE9SVF9UUkFDRVBPSU5UX1NZTUJPTChkbWFf
ZmVuY2Vfc2lnbmFsZWQpOwotCiBzdGF0aWMgREVGSU5FX1NQSU5MT0NLKGRtYV9mZW5jZV9zdHVi
X2xvY2spOwogc3RhdGljIHN0cnVjdCBkbWFfZmVuY2UgZG1hX2ZlbmNlX3N0dWI7CiAKQEAgLTEz
Niw3ICsxMjksNiBAQCBFWFBPUlRfU1lNQk9MKGRtYV9mZW5jZV9jb250ZXh0X2FsbG9jKTsKICAq
LwogaW50IGRtYV9mZW5jZV9zaWduYWxfbG9ja2VkKHN0cnVjdCBkbWFfZmVuY2UgKmZlbmNlKQog
ewotCXN0cnVjdCBkbWFfZmVuY2VfY2IgKmN1ciwgKnRtcDsKIAlpbnQgcmV0ID0gMDsKIAogCWxv
Y2tkZXBfYXNzZXJ0X2hlbGQoZmVuY2UtPmxvY2spOwpAQCAtMTQ0LDcgKzEzNiw3IEBAIGludCBk
bWFfZmVuY2Vfc2lnbmFsX2xvY2tlZChzdHJ1Y3QgZG1hX2ZlbmNlICpmZW5jZSkKIAlpZiAoV0FS
Tl9PTighZmVuY2UpKQogCQlyZXR1cm4gLUVJTlZBTDsKIAotCWlmICh0ZXN0X2FuZF9zZXRfYml0
KERNQV9GRU5DRV9GTEFHX1NJR05BTEVEX0JJVCwgJmZlbmNlLT5mbGFncykpIHsKKwlpZiAoIV9f
ZG1hX2ZlbmNlX3NpZ25hbChmZW5jZSkpIHsKIAkJcmV0ID0gLUVJTlZBTDsKIAogCQkvKgpAQCAt
MTUyLDE1ICsxNDQsMTAgQEAgaW50IGRtYV9mZW5jZV9zaWduYWxfbG9ja2VkKHN0cnVjdCBkbWFf
ZmVuY2UgKmZlbmNlKQogCQkgKiBzdGlsbCBydW4gdGhyb3VnaCBhbGwgY2FsbGJhY2tzCiAJCSAq
LwogCX0gZWxzZSB7Ci0JCWZlbmNlLT50aW1lc3RhbXAgPSBrdGltZV9nZXQoKTsKLQkJc2V0X2Jp
dChETUFfRkVOQ0VfRkxBR19USU1FU1RBTVBfQklULCAmZmVuY2UtPmZsYWdzKTsKLQkJdHJhY2Vf
ZG1hX2ZlbmNlX3NpZ25hbGVkKGZlbmNlKTsKKwkJX19kbWFfZmVuY2Vfc2lnbmFsX190aW1lc3Rh
bXAoZmVuY2UsIGt0aW1lX2dldCgpKTsKIAl9CiAKLQlsaXN0X2Zvcl9lYWNoX2VudHJ5X3NhZmUo
Y3VyLCB0bXAsICZmZW5jZS0+Y2JfbGlzdCwgbm9kZSkgewotCQlsaXN0X2RlbF9pbml0KCZjdXIt
Pm5vZGUpOwotCQljdXItPmZ1bmMoZmVuY2UsIGN1cik7Ci0JfQorCV9fZG1hX2ZlbmNlX3NpZ25h
bF9fbm90aWZ5KGZlbmNlKTsKIAlyZXR1cm4gcmV0OwogfQogRVhQT1JUX1NZTUJPTChkbWFfZmVu
Y2Vfc2lnbmFsX2xvY2tlZCk7CkBAIC0xODUsMjEgKzE3MiwxNCBAQCBpbnQgZG1hX2ZlbmNlX3Np
Z25hbChzdHJ1Y3QgZG1hX2ZlbmNlICpmZW5jZSkKIAlpZiAoIWZlbmNlKQogCQlyZXR1cm4gLUVJ
TlZBTDsKIAotCWlmICh0ZXN0X2FuZF9zZXRfYml0KERNQV9GRU5DRV9GTEFHX1NJR05BTEVEX0JJ
VCwgJmZlbmNlLT5mbGFncykpCisJaWYgKCFfX2RtYV9mZW5jZV9zaWduYWwoZmVuY2UpKQogCQly
ZXR1cm4gLUVJTlZBTDsKIAotCWZlbmNlLT50aW1lc3RhbXAgPSBrdGltZV9nZXQoKTsKLQlzZXRf
Yml0KERNQV9GRU5DRV9GTEFHX1RJTUVTVEFNUF9CSVQsICZmZW5jZS0+ZmxhZ3MpOwotCXRyYWNl
X2RtYV9mZW5jZV9zaWduYWxlZChmZW5jZSk7CisJX19kbWFfZmVuY2Vfc2lnbmFsX190aW1lc3Rh
bXAoZmVuY2UsIGt0aW1lX2dldCgpKTsKIAogCWlmICh0ZXN0X2JpdChETUFfRkVOQ0VfRkxBR19F
TkFCTEVfU0lHTkFMX0JJVCwgJmZlbmNlLT5mbGFncykpIHsKLQkJc3RydWN0IGRtYV9mZW5jZV9j
YiAqY3VyLCAqdG1wOwotCiAJCXNwaW5fbG9ja19pcnFzYXZlKGZlbmNlLT5sb2NrLCBmbGFncyk7
Ci0JCWxpc3RfZm9yX2VhY2hfZW50cnlfc2FmZShjdXIsIHRtcCwgJmZlbmNlLT5jYl9saXN0LCBu
b2RlKSB7Ci0JCQlsaXN0X2RlbF9pbml0KCZjdXItPm5vZGUpOwotCQkJY3VyLT5mdW5jKGZlbmNl
LCBjdXIpOwotCQl9CisJCV9fZG1hX2ZlbmNlX3NpZ25hbF9fbm90aWZ5KGZlbmNlKTsKIAkJc3Bp
bl91bmxvY2tfaXJxcmVzdG9yZShmZW5jZS0+bG9jaywgZmxhZ3MpOwogCX0KIAlyZXR1cm4gMDsK
ZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2d0L2ludGVsX2JyZWFkY3J1bWJzLmMg
Yi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9ndC9pbnRlbF9icmVhZGNydW1icy5jCmluZGV4IGMwOTJi
ZGY1ZjBiZi4uZDFmODU3MjEwMGMzIDEwMDY0NAotLS0gYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9n
dC9pbnRlbF9icmVhZGNydW1icy5jCisrKyBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2d0L2ludGVs
X2JyZWFkY3J1bWJzLmMKQEAgLTIzLDcgKzIzLDYgQEAKICAqLwogCiAjaW5jbHVkZSA8bGludXgv
a3RocmVhZC5oPgotI2luY2x1ZGUgPHRyYWNlL2V2ZW50cy9kbWFfZmVuY2UuaD4KICNpbmNsdWRl
IDx1YXBpL2xpbnV4L3NjaGVkL3R5cGVzLmg+CiAKICNpbmNsdWRlICJpOTE1X2Rydi5oIgpAQCAt
OTcsMzUgKzk2LDYgQEAgY2hlY2tfc2lnbmFsX29yZGVyKHN0cnVjdCBpbnRlbF9jb250ZXh0ICpj
ZSwgc3RydWN0IGk5MTVfcmVxdWVzdCAqcnEpCiAJcmV0dXJuIHRydWU7CiB9CiAKLXN0YXRpYyBi
b29sCi1fX2RtYV9mZW5jZV9zaWduYWwoc3RydWN0IGRtYV9mZW5jZSAqZmVuY2UpCi17Ci0JcmV0
dXJuICF0ZXN0X2FuZF9zZXRfYml0KERNQV9GRU5DRV9GTEFHX1NJR05BTEVEX0JJVCwgJmZlbmNl
LT5mbGFncyk7Ci19Ci0KLXN0YXRpYyB2b2lkCi1fX2RtYV9mZW5jZV9zaWduYWxfX3RpbWVzdGFt
cChzdHJ1Y3QgZG1hX2ZlbmNlICpmZW5jZSwga3RpbWVfdCB0aW1lc3RhbXApCi17Ci0JZmVuY2Ut
PnRpbWVzdGFtcCA9IHRpbWVzdGFtcDsKLQlzZXRfYml0KERNQV9GRU5DRV9GTEFHX1RJTUVTVEFN
UF9CSVQsICZmZW5jZS0+ZmxhZ3MpOwotCXRyYWNlX2RtYV9mZW5jZV9zaWduYWxlZChmZW5jZSk7
Ci19Ci0KLXN0YXRpYyB2b2lkCi1fX2RtYV9mZW5jZV9zaWduYWxfX25vdGlmeShzdHJ1Y3QgZG1h
X2ZlbmNlICpmZW5jZSkKLXsKLQlzdHJ1Y3QgZG1hX2ZlbmNlX2NiICpjdXIsICp0bXA7Ci0KLQls
b2NrZGVwX2Fzc2VydF9oZWxkKGZlbmNlLT5sb2NrKTsKLQlsb2NrZGVwX2Fzc2VydF9pcnFzX2Rp
c2FibGVkKCk7Ci0KLQlsaXN0X2Zvcl9lYWNoX2VudHJ5X3NhZmUoY3VyLCB0bXAsICZmZW5jZS0+
Y2JfbGlzdCwgbm9kZSkgewotCQlJTklUX0xJU1RfSEVBRCgmY3VyLT5ub2RlKTsKLQkJY3VyLT5m
dW5jKGZlbmNlLCBjdXIpOwotCX0KLQlJTklUX0xJU1RfSEVBRCgmZmVuY2UtPmNiX2xpc3QpOwot
fQotCiB2b2lkIGludGVsX2VuZ2luZV9icmVhZGNydW1ic19pcnEoc3RydWN0IGludGVsX2VuZ2lu
ZV9jcyAqZW5naW5lKQogewogCXN0cnVjdCBpbnRlbF9icmVhZGNydW1icyAqYiA9ICZlbmdpbmUt
PmJyZWFkY3J1bWJzOwpkaWZmIC0tZ2l0IGEvaW5jbHVkZS9saW51eC9kbWEtZmVuY2UtdHlwZXMu
aCBiL2luY2x1ZGUvbGludXgvZG1hLWZlbmNlLXR5cGVzLmgKbmV3IGZpbGUgbW9kZSAxMDA2NDQK
aW5kZXggMDAwMDAwMDAwMDAwLi4xOGU3NTExYzBlZWQKLS0tIC9kZXYvbnVsbAorKysgYi9pbmNs
dWRlL2xpbnV4L2RtYS1mZW5jZS10eXBlcy5oCkBAIC0wLDAgKzEsMjQ4IEBACisvKgorICogRmVu
Y2UgbWVjaGFuaXNtIGZvciBkbWEtYnVmIHRvIGFsbG93IGZvciBhc3luY2hyb25vdXMgZG1hIGFj
Y2VzcworICoKKyAqIENvcHlyaWdodCAoQykgMjAxMiBDYW5vbmljYWwgTHRkCisgKiBDb3B5cmln
aHQgKEMpIDIwMTIgVGV4YXMgSW5zdHJ1bWVudHMKKyAqCisgKiBBdXRob3JzOgorICogUm9iIENs
YXJrIDxyb2JkY2xhcmtAZ21haWwuY29tPgorICogTWFhcnRlbiBMYW5raG9yc3QgPG1hYXJ0ZW4u
bGFua2hvcnN0QGNhbm9uaWNhbC5jb20+CisgKgorICogVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29m
dHdhcmU7IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkgaXQKKyAqIHVuZGVy
IHRoZSB0ZXJtcyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgdmVyc2lvbiAyIGFz
IHB1Ymxpc2hlZCBieQorICogdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbi4KKyAqCisgKiBU
aGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVz
ZWZ1bCwgYnV0IFdJVEhPVVQKKyAqIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBs
aWVkIHdhcnJhbnR5IG9mIE1FUkNIQU5UQUJJTElUWSBvcgorICogRklUTkVTUyBGT1IgQSBQQVJU
SUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvcgor
ICogbW9yZSBkZXRhaWxzLgorICovCisKKyNpZm5kZWYgX19MSU5VWF9ETUFfRkVOQ0VfVFlQRVNf
SAorI2RlZmluZSBfX0xJTlVYX0RNQV9GRU5DRV9UWVBFU19ICisKKyNpbmNsdWRlIDxsaW51eC9r
cmVmLmg+CisjaW5jbHVkZSA8bGludXgva3RpbWUuaD4KKworc3RydWN0IGRtYV9mZW5jZTsKK3N0
cnVjdCBkbWFfZmVuY2Vfb3BzOworc3RydWN0IGRtYV9mZW5jZV9jYjsKKworLyoqCisgKiBzdHJ1
Y3QgZG1hX2ZlbmNlIC0gc29mdHdhcmUgc3luY2hyb25pemF0aW9uIHByaW1pdGl2ZQorICogQHJl
ZmNvdW50OiByZWZjb3VudCBmb3IgdGhpcyBmZW5jZQorICogQG9wczogZG1hX2ZlbmNlX29wcyBh
c3NvY2lhdGVkIHdpdGggdGhpcyBmZW5jZQorICogQHJjdTogdXNlZCBmb3IgcmVsZWFzaW5nIGZl
bmNlIHdpdGgga2ZyZWVfcmN1CisgKiBAY2JfbGlzdDogbGlzdCBvZiBhbGwgY2FsbGJhY2tzIHRv
IGNhbGwKKyAqIEBsb2NrOiBzcGluX2xvY2tfaXJxc2F2ZSB1c2VkIGZvciBsb2NraW5nCisgKiBA
Y29udGV4dDogZXhlY3V0aW9uIGNvbnRleHQgdGhpcyBmZW5jZSBiZWxvbmdzIHRvLCByZXR1cm5l
ZCBieQorICogICAgICAgICAgIGRtYV9mZW5jZV9jb250ZXh0X2FsbG9jKCkKKyAqIEBzZXFubzog
dGhlIHNlcXVlbmNlIG51bWJlciBvZiB0aGlzIGZlbmNlIGluc2lkZSB0aGUgZXhlY3V0aW9uIGNv
bnRleHQsCisgKiBjYW4gYmUgY29tcGFyZWQgdG8gZGVjaWRlIHdoaWNoIGZlbmNlIHdvdWxkIGJl
IHNpZ25hbGVkIGxhdGVyLgorICogQGZsYWdzOiBBIG1hc2sgb2YgRE1BX0ZFTkNFX0ZMQUdfKiBk
ZWZpbmVkIGJlbG93CisgKiBAdGltZXN0YW1wOiBUaW1lc3RhbXAgd2hlbiB0aGUgZmVuY2Ugd2Fz
IHNpZ25hbGVkLgorICogQGVycm9yOiBPcHRpb25hbCwgb25seSB2YWxpZCBpZiA8IDAsIG11c3Qg
YmUgc2V0IGJlZm9yZSBjYWxsaW5nCisgKiBkbWFfZmVuY2Vfc2lnbmFsLCBpbmRpY2F0ZXMgdGhh
dCB0aGUgZmVuY2UgaGFzIGNvbXBsZXRlZCB3aXRoIGFuIGVycm9yLgorICoKKyAqIHRoZSBmbGFn
cyBtZW1iZXIgbXVzdCBiZSBtYW5pcHVsYXRlZCBhbmQgcmVhZCB1c2luZyB0aGUgYXBwcm9wcmlh
dGUKKyAqIGF0b21pYyBvcHMgKGJpdF8qKSwgc28gdGFraW5nIHRoZSBzcGlubG9jayB3aWxsIG5v
dCBiZSBuZWVkZWQgbW9zdAorICogb2YgdGhlIHRpbWUuCisgKgorICogRE1BX0ZFTkNFX0ZMQUdf
U0lHTkFMRURfQklUIC0gZmVuY2UgaXMgYWxyZWFkeSBzaWduYWxlZAorICogRE1BX0ZFTkNFX0ZM
QUdfVElNRVNUQU1QX0JJVCAtIHRpbWVzdGFtcCByZWNvcmRlZCBmb3IgZmVuY2Ugc2lnbmFsaW5n
CisgKiBETUFfRkVOQ0VfRkxBR19FTkFCTEVfU0lHTkFMX0JJVCAtIGVuYWJsZV9zaWduYWxpbmcg
bWlnaHQgaGF2ZSBiZWVuIGNhbGxlZAorICogRE1BX0ZFTkNFX0ZMQUdfVVNFUl9CSVRTIC0gc3Rh
cnQgb2YgdGhlIHVudXNlZCBiaXRzLCBjYW4gYmUgdXNlZCBieSB0aGUKKyAqIGltcGxlbWVudGVy
IG9mIHRoZSBmZW5jZSBmb3IgaXRzIG93biBwdXJwb3Nlcy4gQ2FuIGJlIHVzZWQgaW4gZGlmZmVy
ZW50CisgKiB3YXlzIGJ5IGRpZmZlcmVudCBmZW5jZSBpbXBsZW1lbnRlcnMsIHNvIGRvIG5vdCBy
ZWx5IG9uIHRoaXMuCisgKgorICogU2luY2UgYXRvbWljIGJpdG9wcyBhcmUgdXNlZCwgdGhpcyBp
cyBub3QgZ3VhcmFudGVlZCB0byBiZSB0aGUgY2FzZS4KKyAqIFBhcnRpY3VsYXJseSwgaWYgdGhl
IGJpdCB3YXMgc2V0LCBidXQgZG1hX2ZlbmNlX3NpZ25hbCB3YXMgY2FsbGVkIHJpZ2h0CisgKiBi
ZWZvcmUgdGhpcyBiaXQgd2FzIHNldCwgaXQgd291bGQgaGF2ZSBiZWVuIGFibGUgdG8gc2V0IHRo
ZQorICogRE1BX0ZFTkNFX0ZMQUdfU0lHTkFMRURfQklULCBiZWZvcmUgZW5hYmxlX3NpZ25hbGlu
ZyB3YXMgY2FsbGVkLgorICogQWRkaW5nIGEgY2hlY2sgZm9yIERNQV9GRU5DRV9GTEFHX1NJR05B
TEVEX0JJVCBhZnRlciBzZXR0aW5nCisgKiBETUFfRkVOQ0VfRkxBR19FTkFCTEVfU0lHTkFMX0JJ
VCBjbG9zZXMgdGhpcyByYWNlLCBhbmQgbWFrZXMgc3VyZSB0aGF0CisgKiBhZnRlciBkbWFfZmVu
Y2Vfc2lnbmFsIHdhcyBjYWxsZWQsIGFueSBlbmFibGVfc2lnbmFsaW5nIGNhbGwgd2lsbCBoYXZl
IGVpdGhlcgorICogYmVlbiBjb21wbGV0ZWQsIG9yIG5ldmVyIGNhbGxlZCBhdCBhbGwuCisgKi8K
K3N0cnVjdCBkbWFfZmVuY2UgeworCXN0cnVjdCBrcmVmIHJlZmNvdW50OworCWNvbnN0IHN0cnVj
dCBkbWFfZmVuY2Vfb3BzICpvcHM7CisJc3RydWN0IHJjdV9oZWFkIHJjdTsKKwlzdHJ1Y3QgbGlz
dF9oZWFkIGNiX2xpc3Q7CisJc3BpbmxvY2tfdCAqbG9jazsKKwl1NjQgY29udGV4dDsKKwl1NjQg
c2Vxbm87CisJdW5zaWduZWQgbG9uZyBmbGFnczsKKwlrdGltZV90IHRpbWVzdGFtcDsKKwlpbnQg
ZXJyb3I7Cit9OworCitlbnVtIGRtYV9mZW5jZV9mbGFnX2JpdHMgeworCURNQV9GRU5DRV9GTEFH
X1NJR05BTEVEX0JJVCwKKwlETUFfRkVOQ0VfRkxBR19USU1FU1RBTVBfQklULAorCURNQV9GRU5D
RV9GTEFHX0VOQUJMRV9TSUdOQUxfQklULAorCURNQV9GRU5DRV9GTEFHX1VTRVJfQklUUywgLyog
bXVzdCBhbHdheXMgYmUgbGFzdCBtZW1iZXIgKi8KK307CisKK3R5cGVkZWYgdm9pZCAoKmRtYV9m
ZW5jZV9mdW5jX3QpKHN0cnVjdCBkbWFfZmVuY2UgKmZlbmNlLAorCQkJCSBzdHJ1Y3QgZG1hX2Zl
bmNlX2NiICpjYik7CisKKy8qKgorICogc3RydWN0IGRtYV9mZW5jZV9jYiAtIGNhbGxiYWNrIGZv
ciBkbWFfZmVuY2VfYWRkX2NhbGxiYWNrKCkKKyAqIEBub2RlOiB1c2VkIGJ5IGRtYV9mZW5jZV9h
ZGRfY2FsbGJhY2soKSB0byBhcHBlbmQgdGhpcyBzdHJ1Y3QgdG8gZmVuY2U6OmNiX2xpc3QKKyAq
IEBmdW5jOiBkbWFfZmVuY2VfZnVuY190IHRvIGNhbGwKKyAqCisgKiBUaGlzIHN0cnVjdCB3aWxs
IGJlIGluaXRpYWxpemVkIGJ5IGRtYV9mZW5jZV9hZGRfY2FsbGJhY2soKSwgYWRkaXRpb25hbAor
ICogZGF0YSBjYW4gYmUgcGFzc2VkIGFsb25nIGJ5IGVtYmVkZGluZyBkbWFfZmVuY2VfY2IgaW4g
YW5vdGhlciBzdHJ1Y3QuCisgKi8KK3N0cnVjdCBkbWFfZmVuY2VfY2IgeworCXN0cnVjdCBsaXN0
X2hlYWQgbm9kZTsKKwlkbWFfZmVuY2VfZnVuY190IGZ1bmM7Cit9OworCisvKioKKyAqIHN0cnVj
dCBkbWFfZmVuY2Vfb3BzIC0gb3BlcmF0aW9ucyBpbXBsZW1lbnRlZCBmb3IgZmVuY2UKKyAqCisg
Ki8KK3N0cnVjdCBkbWFfZmVuY2Vfb3BzIHsKKwkvKioKKwkgKiBAdXNlXzY0Yml0X3NlcW5vOgor
CSAqCisJICogVHJ1ZSBpZiB0aGlzIGRtYV9mZW5jZSBpbXBsZW1lbnRhdGlvbiB1c2VzIDY0Yml0
IHNlcW5vLCBmYWxzZQorCSAqIG90aGVyd2lzZS4KKwkgKi8KKwlib29sIHVzZV82NGJpdF9zZXFu
bzsKKworCS8qKgorCSAqIEBnZXRfZHJpdmVyX25hbWU6CisJICoKKwkgKiBSZXR1cm5zIHRoZSBk
cml2ZXIgbmFtZS4gVGhpcyBpcyBhIGNhbGxiYWNrIHRvIGFsbG93IGRyaXZlcnMgdG8KKwkgKiBj
b21wdXRlIHRoZSBuYW1lIGF0IHJ1bnRpbWUsIHdpdGhvdXQgaGF2aW5nIGl0IHRvIHN0b3JlIHBl
cm1hbmVudGx5CisJICogZm9yIGVhY2ggZmVuY2UsIG9yIGJ1aWxkIGEgY2FjaGUgb2Ygc29tZSBz
b3J0LgorCSAqCisJICogVGhpcyBjYWxsYmFjayBpcyBtYW5kYXRvcnkuCisJICovCisJY29uc3Qg
Y2hhciAqICgqZ2V0X2RyaXZlcl9uYW1lKShzdHJ1Y3QgZG1hX2ZlbmNlICpmZW5jZSk7CisKKwkv
KioKKwkgKiBAZ2V0X3RpbWVsaW5lX25hbWU6CisJICoKKwkgKiBSZXR1cm4gdGhlIG5hbWUgb2Yg
dGhlIGNvbnRleHQgdGhpcyBmZW5jZSBiZWxvbmdzIHRvLiBUaGlzIGlzIGEKKwkgKiBjYWxsYmFj
ayB0byBhbGxvdyBkcml2ZXJzIHRvIGNvbXB1dGUgdGhlIG5hbWUgYXQgcnVudGltZSwgd2l0aG91
dAorCSAqIGhhdmluZyBpdCB0byBzdG9yZSBwZXJtYW5lbnRseSBmb3IgZWFjaCBmZW5jZSwgb3Ig
YnVpbGQgYSBjYWNoZSBvZgorCSAqIHNvbWUgc29ydC4KKwkgKgorCSAqIFRoaXMgY2FsbGJhY2sg
aXMgbWFuZGF0b3J5LgorCSAqLworCWNvbnN0IGNoYXIgKiAoKmdldF90aW1lbGluZV9uYW1lKShz
dHJ1Y3QgZG1hX2ZlbmNlICpmZW5jZSk7CisKKwkvKioKKwkgKiBAZW5hYmxlX3NpZ25hbGluZzoK
KwkgKgorCSAqIEVuYWJsZSBzb2Z0d2FyZSBzaWduYWxpbmcgb2YgZmVuY2UuCisJICoKKwkgKiBG
b3IgZmVuY2UgaW1wbGVtZW50YXRpb25zIHRoYXQgaGF2ZSB0aGUgY2FwYWJpbGl0eSBmb3IgaHct
Pmh3CisJICogc2lnbmFsaW5nLCB0aGV5IGNhbiBpbXBsZW1lbnQgdGhpcyBvcCB0byBlbmFibGUg
dGhlIG5lY2Vzc2FyeQorCSAqIGludGVycnVwdHMsIG9yIGluc2VydCBjb21tYW5kcyBpbnRvIGNt
ZHN0cmVhbSwgZXRjLCB0byBhdm9pZCB0aGVzZQorCSAqIGNvc3RseSBvcGVyYXRpb25zIGZvciB0
aGUgY29tbW9uIGNhc2Ugd2hlcmUgb25seSBody0+aHcKKwkgKiBzeW5jaHJvbml6YXRpb24gaXMg
cmVxdWlyZWQuICBUaGlzIGlzIGNhbGxlZCBpbiB0aGUgZmlyc3QKKwkgKiBkbWFfZmVuY2Vfd2Fp
dCgpIG9yIGRtYV9mZW5jZV9hZGRfY2FsbGJhY2soKSBwYXRoIHRvIGxldCB0aGUgZmVuY2UKKwkg
KiBpbXBsZW1lbnRhdGlvbiBrbm93IHRoYXQgdGhlcmUgaXMgYW5vdGhlciBkcml2ZXIgd2FpdGlu
ZyBvbiB0aGUKKwkgKiBzaWduYWwgKGllLiBody0+c3cgY2FzZSkuCisJICoKKwkgKiBUaGlzIGZ1
bmN0aW9uIGNhbiBiZSBjYWxsZWQgZnJvbSBhdG9taWMgY29udGV4dCwgYnV0IG5vdAorCSAqIGZy
b20gaXJxIGNvbnRleHQsIHNvIG5vcm1hbCBzcGlubG9ja3MgY2FuIGJlIHVzZWQuCisJICoKKwkg
KiBBIHJldHVybiB2YWx1ZSBvZiBmYWxzZSBpbmRpY2F0ZXMgdGhlIGZlbmNlIGFscmVhZHkgcGFz
c2VkLAorCSAqIG9yIHNvbWUgZmFpbHVyZSBvY2N1cnJlZCB0aGF0IG1hZGUgaXQgaW1wb3NzaWJs
ZSB0byBlbmFibGUKKwkgKiBzaWduYWxpbmcuIFRydWUgaW5kaWNhdGVzIHN1Y2Nlc3NmdWwgZW5h
YmxpbmcuCisJICoKKwkgKiAmZG1hX2ZlbmNlLmVycm9yIG1heSBiZSBzZXQgaW4gZW5hYmxlX3Np
Z25hbGluZywgYnV0IG9ubHkgd2hlbiBmYWxzZQorCSAqIGlzIHJldHVybmVkLgorCSAqCisJICog
U2luY2UgbWFueSBpbXBsZW1lbnRhdGlvbnMgY2FuIGNhbGwgZG1hX2ZlbmNlX3NpZ25hbCgpIGV2
ZW4gd2hlbiBiZWZvcmUKKwkgKiBAZW5hYmxlX3NpZ25hbGluZyBoYXMgYmVlbiBjYWxsZWQgdGhl
cmUncyBhIHJhY2Ugd2luZG93LCB3aGVyZSB0aGUKKwkgKiBkbWFfZmVuY2Vfc2lnbmFsKCkgbWln
aHQgcmVzdWx0IGluIHRoZSBmaW5hbCBmZW5jZSByZWZlcmVuY2UgYmVpbmcKKwkgKiByZWxlYXNl
ZCBhbmQgaXRzIG1lbW9yeSBmcmVlZC4gVG8gYXZvaWQgdGhpcywgaW1wbGVtZW50YXRpb25zIG9m
IHRoaXMKKwkgKiBjYWxsYmFjayBzaG91bGQgZ3JhYiB0aGVpciBvd24gcmVmZXJlbmNlIHVzaW5n
IGRtYV9mZW5jZV9nZXQoKSwgdG8gYmUKKwkgKiByZWxlYXNlZCB3aGVuIHRoZSBmZW5jZSBpcyBz
aWduYWxsZWQgKHRocm91Z2ggZS5nLiB0aGUgaW50ZXJydXB0CisJICogaGFuZGxlcikuCisJICoK
KwkgKiBUaGlzIGNhbGxiYWNrIGlzIG9wdGlvbmFsLiBJZiB0aGlzIGNhbGxiYWNrIGlzIG5vdCBw
cmVzZW50LCB0aGVuIHRoZQorCSAqIGRyaXZlciBtdXN0IGFsd2F5cyBoYXZlIHNpZ25hbGluZyBl
bmFibGVkLgorCSAqLworCWJvb2wgKCplbmFibGVfc2lnbmFsaW5nKShzdHJ1Y3QgZG1hX2ZlbmNl
ICpmZW5jZSk7CisKKwkvKioKKwkgKiBAc2lnbmFsZWQ6CisJICoKKwkgKiBQZWVrIHdoZXRoZXIg
dGhlIGZlbmNlIGlzIHNpZ25hbGVkLCBhcyBhIGZhc3RwYXRoIG9wdGltaXphdGlvbiBmb3IKKwkg
KiBlLmcuIGRtYV9mZW5jZV93YWl0KCkgb3IgZG1hX2ZlbmNlX2FkZF9jYWxsYmFjaygpLiBOb3Rl
IHRoYXQgdGhpcworCSAqIGNhbGxiYWNrIGRvZXMgbm90IG5lZWQgdG8gbWFrZSBhbnkgZ3VhcmFu
dGVlcyBiZXlvbmQgdGhhdCBhIGZlbmNlCisJICogb25jZSBpbmRpY2F0ZXMgYXMgc2lnbmFsbGVk
IG11c3QgYWx3YXlzIHJldHVybiB0cnVlIGZyb20gdGhpcworCSAqIGNhbGxiYWNrLiBUaGlzIGNh
bGxiYWNrIG1heSByZXR1cm4gZmFsc2UgZXZlbiBpZiB0aGUgZmVuY2UgaGFzCisJICogY29tcGxl
dGVkIGFscmVhZHksIGluIHRoaXMgY2FzZSBpbmZvcm1hdGlvbiBoYXNuJ3QgcHJvcG9nYXRlZCB0
aHJvdWcKKwkgKiB0aGUgc3lzdGVtIHlldC4gU2VlIGFsc28gZG1hX2ZlbmNlX2lzX3NpZ25hbGVk
KCkuCisJICoKKwkgKiBNYXkgc2V0ICZkbWFfZmVuY2UuZXJyb3IgaWYgcmV0dXJuaW5nIHRydWUu
CisJICoKKwkgKiBUaGlzIGNhbGxiYWNrIGlzIG9wdGlvbmFsLgorCSAqLworCWJvb2wgKCpzaWdu
YWxlZCkoc3RydWN0IGRtYV9mZW5jZSAqZmVuY2UpOworCisJLyoqCisJICogQHdhaXQ6CisJICoK
KwkgKiBDdXN0b20gd2FpdCBpbXBsZW1lbnRhdGlvbiwgZGVmYXVsdHMgdG8gZG1hX2ZlbmNlX2Rl
ZmF1bHRfd2FpdCgpIGlmCisJICogbm90IHNldC4KKwkgKgorCSAqIFRoZSBkbWFfZmVuY2VfZGVm
YXVsdF93YWl0IGltcGxlbWVudGF0aW9uIHNob3VsZCB3b3JrIGZvciBhbnkgZmVuY2UsIGFzIGxv
bmcKKwkgKiBhcyBAZW5hYmxlX3NpZ25hbGluZyB3b3JrcyBjb3JyZWN0bHkuIFRoaXMgaG9vayBh
bGxvd3MgZHJpdmVycyB0bworCSAqIGhhdmUgYW4gb3B0aW1pemVkIHZlcnNpb24gZm9yIHRoZSBj
YXNlIHdoZXJlIGEgcHJvY2VzcyBjb250ZXh0IGlzCisJICogYWxyZWFkeSBhdmFpbGFibGUsIGUu
Zy4gaWYgQGVuYWJsZV9zaWduYWxpbmcgZm9yIHRoZSBnZW5lcmFsIGNhc2UKKwkgKiBuZWVkcyB0
byBzZXQgdXAgYSB3b3JrZXIgdGhyZWFkLgorCSAqCisJICogTXVzdCByZXR1cm4gLUVSRVNUQVJU
U1lTIGlmIHRoZSB3YWl0IGlzIGludHIgPSB0cnVlIGFuZCB0aGUgd2FpdCB3YXMKKwkgKiBpbnRl
cnJ1cHRlZCwgYW5kIHJlbWFpbmluZyBqaWZmaWVzIGlmIGZlbmNlIGhhcyBzaWduYWxlZCwgb3Ig
MCBpZiB3YWl0CisJICogdGltZWQgb3V0LiBDYW4gYWxzbyByZXR1cm4gb3RoZXIgZXJyb3IgdmFs
dWVzIG9uIGN1c3RvbSBpbXBsZW1lbnRhdGlvbnMsCisJICogd2hpY2ggc2hvdWxkIGJlIHRyZWF0
ZWQgYXMgaWYgdGhlIGZlbmNlIGlzIHNpZ25hbGVkLiBGb3IgZXhhbXBsZSBhIGhhcmR3YXJlCisJ
ICogbG9ja3VwIGNvdWxkIGJlIHJlcG9ydGVkIGxpa2UgdGhhdC4KKwkgKgorCSAqIFRoaXMgY2Fs
bGJhY2sgaXMgb3B0aW9uYWwuCisJICovCisJc2lnbmVkIGxvbmcgKCp3YWl0KShzdHJ1Y3QgZG1h
X2ZlbmNlICpmZW5jZSwKKwkJCSAgICBib29sIGludHIsIHNpZ25lZCBsb25nIHRpbWVvdXQpOwor
CisJLyoqCisJICogQHJlbGVhc2U6CisJICoKKwkgKiBDYWxsZWQgb24gZGVzdHJ1Y3Rpb24gb2Yg
ZmVuY2UgdG8gcmVsZWFzZSBhZGRpdGlvbmFsIHJlc291cmNlcy4KKwkgKiBDYW4gYmUgY2FsbGVk
IGZyb20gaXJxIGNvbnRleHQuICBUaGlzIGNhbGxiYWNrIGlzIG9wdGlvbmFsLiBJZiBpdCBpcwor
CSAqIE5VTEwsIHRoZW4gZG1hX2ZlbmNlX2ZyZWUoKSBpcyBpbnN0ZWFkIGNhbGxlZCBhcyB0aGUg
ZGVmYXVsdAorCSAqIGltcGxlbWVudGF0aW9uLgorCSAqLworCXZvaWQgKCpyZWxlYXNlKShzdHJ1
Y3QgZG1hX2ZlbmNlICpmZW5jZSk7CisKKwkvKioKKwkgKiBAZmVuY2VfdmFsdWVfc3RyOgorCSAq
CisJICogQ2FsbGJhY2sgdG8gZmlsbCBpbiBmcmVlLWZvcm0gZGVidWcgaW5mbyBzcGVjaWZpYyB0
byB0aGlzIGZlbmNlLCBsaWtlCisJICogdGhlIHNlcXVlbmNlIG51bWJlci4KKwkgKgorCSAqIFRo
aXMgY2FsbGJhY2sgaXMgb3B0aW9uYWwuCisJICovCisJdm9pZCAoKmZlbmNlX3ZhbHVlX3N0ciko
c3RydWN0IGRtYV9mZW5jZSAqZmVuY2UsIGNoYXIgKnN0ciwgaW50IHNpemUpOworCisJLyoqCisJ
ICogQHRpbWVsaW5lX3ZhbHVlX3N0cjoKKwkgKgorCSAqIEZpbGxzIGluIHRoZSBjdXJyZW50IHZh
bHVlIG9mIHRoZSB0aW1lbGluZSBhcyBhIHN0cmluZywgbGlrZSB0aGUKKwkgKiBzZXF1ZW5jZSBu
dW1iZXIuIE5vdGUgdGhhdCB0aGUgc3BlY2lmaWMgZmVuY2UgcGFzc2VkIHRvIHRoaXMgZnVuY3Rp
b24KKwkgKiBzaG91bGQgbm90IG1hdHRlciwgZHJpdmVycyBzaG91bGQgb25seSB1c2UgaXQgdG8g
bG9vayB1cCB0aGUKKwkgKiBjb3JyZXNwb25kaW5nIHRpbWVsaW5lIHN0cnVjdHVyZXMuCisJICov
CisJdm9pZCAoKnRpbWVsaW5lX3ZhbHVlX3N0cikoc3RydWN0IGRtYV9mZW5jZSAqZmVuY2UsCisJ
CQkJICAgY2hhciAqc3RyLCBpbnQgc2l6ZSk7Cit9OworCisjZW5kaWYgLyogX19MSU5VWF9ETUFf
RkVOQ0VfVFlQRVNfSCAqLwpkaWZmIC0tZ2l0IGEvaW5jbHVkZS9saW51eC9kbWEtZmVuY2UuaCBi
L2luY2x1ZGUvbGludXgvZG1hLWZlbmNlLmgKaW5kZXggOTc0NzE3ZDZhYzBjLi4xNDJlYjY3ZTY5
NWYgMTAwNjQ0Ci0tLSBhL2luY2x1ZGUvbGludXgvZG1hLWZlbmNlLmgKKysrIGIvaW5jbHVkZS9s
aW51eC9kbWEtZmVuY2UuaApAQCAtMjEsNiArMjEsNyBAQAogI2lmbmRlZiBfX0xJTlVYX0RNQV9G
RU5DRV9ICiAjZGVmaW5lIF9fTElOVVhfRE1BX0ZFTkNFX0gKIAorI2luY2x1ZGUgPGxpbnV4L2Rt
YS1mZW5jZS10eXBlcy5oPgogI2luY2x1ZGUgPGxpbnV4L2Vyci5oPgogI2luY2x1ZGUgPGxpbnV4
L3dhaXQuaD4KICNpbmNsdWRlIDxsaW51eC9saXN0Lmg+CkBAIC0zMCwyMjYgKzMxLDcgQEAKICNp
bmNsdWRlIDxsaW51eC9wcmludGsuaD4KICNpbmNsdWRlIDxsaW51eC9yY3VwZGF0ZS5oPgogCi1z
dHJ1Y3QgZG1hX2ZlbmNlOwotc3RydWN0IGRtYV9mZW5jZV9vcHM7Ci1zdHJ1Y3QgZG1hX2ZlbmNl
X2NiOwotCi0vKioKLSAqIHN0cnVjdCBkbWFfZmVuY2UgLSBzb2Z0d2FyZSBzeW5jaHJvbml6YXRp
b24gcHJpbWl0aXZlCi0gKiBAcmVmY291bnQ6IHJlZmNvdW50IGZvciB0aGlzIGZlbmNlCi0gKiBA
b3BzOiBkbWFfZmVuY2Vfb3BzIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGZlbmNlCi0gKiBAcmN1OiB1
c2VkIGZvciByZWxlYXNpbmcgZmVuY2Ugd2l0aCBrZnJlZV9yY3UKLSAqIEBjYl9saXN0OiBsaXN0
IG9mIGFsbCBjYWxsYmFja3MgdG8gY2FsbAotICogQGxvY2s6IHNwaW5fbG9ja19pcnFzYXZlIHVz
ZWQgZm9yIGxvY2tpbmcKLSAqIEBjb250ZXh0OiBleGVjdXRpb24gY29udGV4dCB0aGlzIGZlbmNl
IGJlbG9uZ3MgdG8sIHJldHVybmVkIGJ5Ci0gKiAgICAgICAgICAgZG1hX2ZlbmNlX2NvbnRleHRf
YWxsb2MoKQotICogQHNlcW5vOiB0aGUgc2VxdWVuY2UgbnVtYmVyIG9mIHRoaXMgZmVuY2UgaW5z
aWRlIHRoZSBleGVjdXRpb24gY29udGV4dCwKLSAqIGNhbiBiZSBjb21wYXJlZCB0byBkZWNpZGUg
d2hpY2ggZmVuY2Ugd291bGQgYmUgc2lnbmFsZWQgbGF0ZXIuCi0gKiBAZmxhZ3M6IEEgbWFzayBv
ZiBETUFfRkVOQ0VfRkxBR18qIGRlZmluZWQgYmVsb3cKLSAqIEB0aW1lc3RhbXA6IFRpbWVzdGFt
cCB3aGVuIHRoZSBmZW5jZSB3YXMgc2lnbmFsZWQuCi0gKiBAZXJyb3I6IE9wdGlvbmFsLCBvbmx5
IHZhbGlkIGlmIDwgMCwgbXVzdCBiZSBzZXQgYmVmb3JlIGNhbGxpbmcKLSAqIGRtYV9mZW5jZV9z
aWduYWwsIGluZGljYXRlcyB0aGF0IHRoZSBmZW5jZSBoYXMgY29tcGxldGVkIHdpdGggYW4gZXJy
b3IuCi0gKgotICogdGhlIGZsYWdzIG1lbWJlciBtdXN0IGJlIG1hbmlwdWxhdGVkIGFuZCByZWFk
IHVzaW5nIHRoZSBhcHByb3ByaWF0ZQotICogYXRvbWljIG9wcyAoYml0XyopLCBzbyB0YWtpbmcg
dGhlIHNwaW5sb2NrIHdpbGwgbm90IGJlIG5lZWRlZCBtb3N0Ci0gKiBvZiB0aGUgdGltZS4KLSAq
Ci0gKiBETUFfRkVOQ0VfRkxBR19TSUdOQUxFRF9CSVQgLSBmZW5jZSBpcyBhbHJlYWR5IHNpZ25h
bGVkCi0gKiBETUFfRkVOQ0VfRkxBR19USU1FU1RBTVBfQklUIC0gdGltZXN0YW1wIHJlY29yZGVk
IGZvciBmZW5jZSBzaWduYWxpbmcKLSAqIERNQV9GRU5DRV9GTEFHX0VOQUJMRV9TSUdOQUxfQklU
IC0gZW5hYmxlX3NpZ25hbGluZyBtaWdodCBoYXZlIGJlZW4gY2FsbGVkCi0gKiBETUFfRkVOQ0Vf
RkxBR19VU0VSX0JJVFMgLSBzdGFydCBvZiB0aGUgdW51c2VkIGJpdHMsIGNhbiBiZSB1c2VkIGJ5
IHRoZQotICogaW1wbGVtZW50ZXIgb2YgdGhlIGZlbmNlIGZvciBpdHMgb3duIHB1cnBvc2VzLiBD
YW4gYmUgdXNlZCBpbiBkaWZmZXJlbnQKLSAqIHdheXMgYnkgZGlmZmVyZW50IGZlbmNlIGltcGxl
bWVudGVycywgc28gZG8gbm90IHJlbHkgb24gdGhpcy4KLSAqCi0gKiBTaW5jZSBhdG9taWMgYml0
b3BzIGFyZSB1c2VkLCB0aGlzIGlzIG5vdCBndWFyYW50ZWVkIHRvIGJlIHRoZSBjYXNlLgotICog
UGFydGljdWxhcmx5LCBpZiB0aGUgYml0IHdhcyBzZXQsIGJ1dCBkbWFfZmVuY2Vfc2lnbmFsIHdh
cyBjYWxsZWQgcmlnaHQKLSAqIGJlZm9yZSB0aGlzIGJpdCB3YXMgc2V0LCBpdCB3b3VsZCBoYXZl
IGJlZW4gYWJsZSB0byBzZXQgdGhlCi0gKiBETUFfRkVOQ0VfRkxBR19TSUdOQUxFRF9CSVQsIGJl
Zm9yZSBlbmFibGVfc2lnbmFsaW5nIHdhcyBjYWxsZWQuCi0gKiBBZGRpbmcgYSBjaGVjayBmb3Ig
RE1BX0ZFTkNFX0ZMQUdfU0lHTkFMRURfQklUIGFmdGVyIHNldHRpbmcKLSAqIERNQV9GRU5DRV9G
TEFHX0VOQUJMRV9TSUdOQUxfQklUIGNsb3NlcyB0aGlzIHJhY2UsIGFuZCBtYWtlcyBzdXJlIHRo
YXQKLSAqIGFmdGVyIGRtYV9mZW5jZV9zaWduYWwgd2FzIGNhbGxlZCwgYW55IGVuYWJsZV9zaWdu
YWxpbmcgY2FsbCB3aWxsIGhhdmUgZWl0aGVyCi0gKiBiZWVuIGNvbXBsZXRlZCwgb3IgbmV2ZXIg
Y2FsbGVkIGF0IGFsbC4KLSAqLwotc3RydWN0IGRtYV9mZW5jZSB7Ci0Jc3RydWN0IGtyZWYgcmVm
Y291bnQ7Ci0JY29uc3Qgc3RydWN0IGRtYV9mZW5jZV9vcHMgKm9wczsKLQlzdHJ1Y3QgcmN1X2hl
YWQgcmN1OwotCXN0cnVjdCBsaXN0X2hlYWQgY2JfbGlzdDsKLQlzcGlubG9ja190ICpsb2NrOwot
CXU2NCBjb250ZXh0OwotCXU2NCBzZXFubzsKLQl1bnNpZ25lZCBsb25nIGZsYWdzOwotCWt0aW1l
X3QgdGltZXN0YW1wOwotCWludCBlcnJvcjsKLX07Ci0KLWVudW0gZG1hX2ZlbmNlX2ZsYWdfYml0
cyB7Ci0JRE1BX0ZFTkNFX0ZMQUdfU0lHTkFMRURfQklULAotCURNQV9GRU5DRV9GTEFHX1RJTUVT
VEFNUF9CSVQsCi0JRE1BX0ZFTkNFX0ZMQUdfRU5BQkxFX1NJR05BTF9CSVQsCi0JRE1BX0ZFTkNF
X0ZMQUdfVVNFUl9CSVRTLCAvKiBtdXN0IGFsd2F5cyBiZSBsYXN0IG1lbWJlciAqLwotfTsKLQot
dHlwZWRlZiB2b2lkICgqZG1hX2ZlbmNlX2Z1bmNfdCkoc3RydWN0IGRtYV9mZW5jZSAqZmVuY2Us
Ci0JCQkJIHN0cnVjdCBkbWFfZmVuY2VfY2IgKmNiKTsKLQotLyoqCi0gKiBzdHJ1Y3QgZG1hX2Zl
bmNlX2NiIC0gY2FsbGJhY2sgZm9yIGRtYV9mZW5jZV9hZGRfY2FsbGJhY2soKQotICogQG5vZGU6
IHVzZWQgYnkgZG1hX2ZlbmNlX2FkZF9jYWxsYmFjaygpIHRvIGFwcGVuZCB0aGlzIHN0cnVjdCB0
byBmZW5jZTo6Y2JfbGlzdAotICogQGZ1bmM6IGRtYV9mZW5jZV9mdW5jX3QgdG8gY2FsbAotICoK
LSAqIFRoaXMgc3RydWN0IHdpbGwgYmUgaW5pdGlhbGl6ZWQgYnkgZG1hX2ZlbmNlX2FkZF9jYWxs
YmFjaygpLCBhZGRpdGlvbmFsCi0gKiBkYXRhIGNhbiBiZSBwYXNzZWQgYWxvbmcgYnkgZW1iZWRk
aW5nIGRtYV9mZW5jZV9jYiBpbiBhbm90aGVyIHN0cnVjdC4KLSAqLwotc3RydWN0IGRtYV9mZW5j
ZV9jYiB7Ci0Jc3RydWN0IGxpc3RfaGVhZCBub2RlOwotCWRtYV9mZW5jZV9mdW5jX3QgZnVuYzsK
LX07Ci0KLS8qKgotICogc3RydWN0IGRtYV9mZW5jZV9vcHMgLSBvcGVyYXRpb25zIGltcGxlbWVu
dGVkIGZvciBmZW5jZQotICoKLSAqLwotc3RydWN0IGRtYV9mZW5jZV9vcHMgewotCS8qKgotCSAq
IEB1c2VfNjRiaXRfc2Vxbm86Ci0JICoKLQkgKiBUcnVlIGlmIHRoaXMgZG1hX2ZlbmNlIGltcGxl
bWVudGF0aW9uIHVzZXMgNjRiaXQgc2Vxbm8sIGZhbHNlCi0JICogb3RoZXJ3aXNlLgotCSAqLwot
CWJvb2wgdXNlXzY0Yml0X3NlcW5vOwotCi0JLyoqCi0JICogQGdldF9kcml2ZXJfbmFtZToKLQkg
KgotCSAqIFJldHVybnMgdGhlIGRyaXZlciBuYW1lLiBUaGlzIGlzIGEgY2FsbGJhY2sgdG8gYWxs
b3cgZHJpdmVycyB0bwotCSAqIGNvbXB1dGUgdGhlIG5hbWUgYXQgcnVudGltZSwgd2l0aG91dCBo
YXZpbmcgaXQgdG8gc3RvcmUgcGVybWFuZW50bHkKLQkgKiBmb3IgZWFjaCBmZW5jZSwgb3IgYnVp
bGQgYSBjYWNoZSBvZiBzb21lIHNvcnQuCi0JICoKLQkgKiBUaGlzIGNhbGxiYWNrIGlzIG1hbmRh
dG9yeS4KLQkgKi8KLQljb25zdCBjaGFyICogKCpnZXRfZHJpdmVyX25hbWUpKHN0cnVjdCBkbWFf
ZmVuY2UgKmZlbmNlKTsKLQotCS8qKgotCSAqIEBnZXRfdGltZWxpbmVfbmFtZToKLQkgKgotCSAq
IFJldHVybiB0aGUgbmFtZSBvZiB0aGUgY29udGV4dCB0aGlzIGZlbmNlIGJlbG9uZ3MgdG8uIFRo
aXMgaXMgYQotCSAqIGNhbGxiYWNrIHRvIGFsbG93IGRyaXZlcnMgdG8gY29tcHV0ZSB0aGUgbmFt
ZSBhdCBydW50aW1lLCB3aXRob3V0Ci0JICogaGF2aW5nIGl0IHRvIHN0b3JlIHBlcm1hbmVudGx5
IGZvciBlYWNoIGZlbmNlLCBvciBidWlsZCBhIGNhY2hlIG9mCi0JICogc29tZSBzb3J0LgotCSAq
Ci0JICogVGhpcyBjYWxsYmFjayBpcyBtYW5kYXRvcnkuCi0JICovCi0JY29uc3QgY2hhciAqICgq
Z2V0X3RpbWVsaW5lX25hbWUpKHN0cnVjdCBkbWFfZmVuY2UgKmZlbmNlKTsKLQotCS8qKgotCSAq
IEBlbmFibGVfc2lnbmFsaW5nOgotCSAqCi0JICogRW5hYmxlIHNvZnR3YXJlIHNpZ25hbGluZyBv
ZiBmZW5jZS4KLQkgKgotCSAqIEZvciBmZW5jZSBpbXBsZW1lbnRhdGlvbnMgdGhhdCBoYXZlIHRo
ZSBjYXBhYmlsaXR5IGZvciBody0+aHcKLQkgKiBzaWduYWxpbmcsIHRoZXkgY2FuIGltcGxlbWVu
dCB0aGlzIG9wIHRvIGVuYWJsZSB0aGUgbmVjZXNzYXJ5Ci0JICogaW50ZXJydXB0cywgb3IgaW5z
ZXJ0IGNvbW1hbmRzIGludG8gY21kc3RyZWFtLCBldGMsIHRvIGF2b2lkIHRoZXNlCi0JICogY29z
dGx5IG9wZXJhdGlvbnMgZm9yIHRoZSBjb21tb24gY2FzZSB3aGVyZSBvbmx5IGh3LT5odwotCSAq
IHN5bmNocm9uaXphdGlvbiBpcyByZXF1aXJlZC4gIFRoaXMgaXMgY2FsbGVkIGluIHRoZSBmaXJz
dAotCSAqIGRtYV9mZW5jZV93YWl0KCkgb3IgZG1hX2ZlbmNlX2FkZF9jYWxsYmFjaygpIHBhdGgg
dG8gbGV0IHRoZSBmZW5jZQotCSAqIGltcGxlbWVudGF0aW9uIGtub3cgdGhhdCB0aGVyZSBpcyBh
bm90aGVyIGRyaXZlciB3YWl0aW5nIG9uIHRoZQotCSAqIHNpZ25hbCAoaWUuIGh3LT5zdyBjYXNl
KS4KLQkgKgotCSAqIFRoaXMgZnVuY3Rpb24gY2FuIGJlIGNhbGxlZCBmcm9tIGF0b21pYyBjb250
ZXh0LCBidXQgbm90Ci0JICogZnJvbSBpcnEgY29udGV4dCwgc28gbm9ybWFsIHNwaW5sb2NrcyBj
YW4gYmUgdXNlZC4KLQkgKgotCSAqIEEgcmV0dXJuIHZhbHVlIG9mIGZhbHNlIGluZGljYXRlcyB0
aGUgZmVuY2UgYWxyZWFkeSBwYXNzZWQsCi0JICogb3Igc29tZSBmYWlsdXJlIG9jY3VycmVkIHRo
YXQgbWFkZSBpdCBpbXBvc3NpYmxlIHRvIGVuYWJsZQotCSAqIHNpZ25hbGluZy4gVHJ1ZSBpbmRp
Y2F0ZXMgc3VjY2Vzc2Z1bCBlbmFibGluZy4KLQkgKgotCSAqICZkbWFfZmVuY2UuZXJyb3IgbWF5
IGJlIHNldCBpbiBlbmFibGVfc2lnbmFsaW5nLCBidXQgb25seSB3aGVuIGZhbHNlCi0JICogaXMg
cmV0dXJuZWQuCi0JICoKLQkgKiBTaW5jZSBtYW55IGltcGxlbWVudGF0aW9ucyBjYW4gY2FsbCBk
bWFfZmVuY2Vfc2lnbmFsKCkgZXZlbiB3aGVuIGJlZm9yZQotCSAqIEBlbmFibGVfc2lnbmFsaW5n
IGhhcyBiZWVuIGNhbGxlZCB0aGVyZSdzIGEgcmFjZSB3aW5kb3csIHdoZXJlIHRoZQotCSAqIGRt
YV9mZW5jZV9zaWduYWwoKSBtaWdodCByZXN1bHQgaW4gdGhlIGZpbmFsIGZlbmNlIHJlZmVyZW5j
ZSBiZWluZwotCSAqIHJlbGVhc2VkIGFuZCBpdHMgbWVtb3J5IGZyZWVkLiBUbyBhdm9pZCB0aGlz
LCBpbXBsZW1lbnRhdGlvbnMgb2YgdGhpcwotCSAqIGNhbGxiYWNrIHNob3VsZCBncmFiIHRoZWly
IG93biByZWZlcmVuY2UgdXNpbmcgZG1hX2ZlbmNlX2dldCgpLCB0byBiZQotCSAqIHJlbGVhc2Vk
IHdoZW4gdGhlIGZlbmNlIGlzIHNpZ25hbGxlZCAodGhyb3VnaCBlLmcuIHRoZSBpbnRlcnJ1cHQK
LQkgKiBoYW5kbGVyKS4KLQkgKgotCSAqIFRoaXMgY2FsbGJhY2sgaXMgb3B0aW9uYWwuIElmIHRo
aXMgY2FsbGJhY2sgaXMgbm90IHByZXNlbnQsIHRoZW4gdGhlCi0JICogZHJpdmVyIG11c3QgYWx3
YXlzIGhhdmUgc2lnbmFsaW5nIGVuYWJsZWQuCi0JICovCi0JYm9vbCAoKmVuYWJsZV9zaWduYWxp
bmcpKHN0cnVjdCBkbWFfZmVuY2UgKmZlbmNlKTsKLQotCS8qKgotCSAqIEBzaWduYWxlZDoKLQkg
KgotCSAqIFBlZWsgd2hldGhlciB0aGUgZmVuY2UgaXMgc2lnbmFsZWQsIGFzIGEgZmFzdHBhdGgg
b3B0aW1pemF0aW9uIGZvcgotCSAqIGUuZy4gZG1hX2ZlbmNlX3dhaXQoKSBvciBkbWFfZmVuY2Vf
YWRkX2NhbGxiYWNrKCkuIE5vdGUgdGhhdCB0aGlzCi0JICogY2FsbGJhY2sgZG9lcyBub3QgbmVl
ZCB0byBtYWtlIGFueSBndWFyYW50ZWVzIGJleW9uZCB0aGF0IGEgZmVuY2UKLQkgKiBvbmNlIGlu
ZGljYXRlcyBhcyBzaWduYWxsZWQgbXVzdCBhbHdheXMgcmV0dXJuIHRydWUgZnJvbSB0aGlzCi0J
ICogY2FsbGJhY2suIFRoaXMgY2FsbGJhY2sgbWF5IHJldHVybiBmYWxzZSBldmVuIGlmIHRoZSBm
ZW5jZSBoYXMKLQkgKiBjb21wbGV0ZWQgYWxyZWFkeSwgaW4gdGhpcyBjYXNlIGluZm9ybWF0aW9u
IGhhc24ndCBwcm9wb2dhdGVkIHRocm91ZwotCSAqIHRoZSBzeXN0ZW0geWV0LiBTZWUgYWxzbyBk
bWFfZmVuY2VfaXNfc2lnbmFsZWQoKS4KLQkgKgotCSAqIE1heSBzZXQgJmRtYV9mZW5jZS5lcnJv
ciBpZiByZXR1cm5pbmcgdHJ1ZS4KLQkgKgotCSAqIFRoaXMgY2FsbGJhY2sgaXMgb3B0aW9uYWwu
Ci0JICovCi0JYm9vbCAoKnNpZ25hbGVkKShzdHJ1Y3QgZG1hX2ZlbmNlICpmZW5jZSk7Ci0KLQkv
KioKLQkgKiBAd2FpdDoKLQkgKgotCSAqIEN1c3RvbSB3YWl0IGltcGxlbWVudGF0aW9uLCBkZWZh
dWx0cyB0byBkbWFfZmVuY2VfZGVmYXVsdF93YWl0KCkgaWYKLQkgKiBub3Qgc2V0LgotCSAqCi0J
ICogVGhlIGRtYV9mZW5jZV9kZWZhdWx0X3dhaXQgaW1wbGVtZW50YXRpb24gc2hvdWxkIHdvcmsg
Zm9yIGFueSBmZW5jZSwgYXMgbG9uZwotCSAqIGFzIEBlbmFibGVfc2lnbmFsaW5nIHdvcmtzIGNv
cnJlY3RseS4gVGhpcyBob29rIGFsbG93cyBkcml2ZXJzIHRvCi0JICogaGF2ZSBhbiBvcHRpbWl6
ZWQgdmVyc2lvbiBmb3IgdGhlIGNhc2Ugd2hlcmUgYSBwcm9jZXNzIGNvbnRleHQgaXMKLQkgKiBh
bHJlYWR5IGF2YWlsYWJsZSwgZS5nLiBpZiBAZW5hYmxlX3NpZ25hbGluZyBmb3IgdGhlIGdlbmVy
YWwgY2FzZQotCSAqIG5lZWRzIHRvIHNldCB1cCBhIHdvcmtlciB0aHJlYWQuCi0JICoKLQkgKiBN
dXN0IHJldHVybiAtRVJFU1RBUlRTWVMgaWYgdGhlIHdhaXQgaXMgaW50ciA9IHRydWUgYW5kIHRo
ZSB3YWl0IHdhcwotCSAqIGludGVycnVwdGVkLCBhbmQgcmVtYWluaW5nIGppZmZpZXMgaWYgZmVu
Y2UgaGFzIHNpZ25hbGVkLCBvciAwIGlmIHdhaXQKLQkgKiB0aW1lZCBvdXQuIENhbiBhbHNvIHJl
dHVybiBvdGhlciBlcnJvciB2YWx1ZXMgb24gY3VzdG9tIGltcGxlbWVudGF0aW9ucywKLQkgKiB3
aGljaCBzaG91bGQgYmUgdHJlYXRlZCBhcyBpZiB0aGUgZmVuY2UgaXMgc2lnbmFsZWQuIEZvciBl
eGFtcGxlIGEgaGFyZHdhcmUKLQkgKiBsb2NrdXAgY291bGQgYmUgcmVwb3J0ZWQgbGlrZSB0aGF0
LgotCSAqCi0JICogVGhpcyBjYWxsYmFjayBpcyBvcHRpb25hbC4KLQkgKi8KLQlzaWduZWQgbG9u
ZyAoKndhaXQpKHN0cnVjdCBkbWFfZmVuY2UgKmZlbmNlLAotCQkJICAgIGJvb2wgaW50ciwgc2ln
bmVkIGxvbmcgdGltZW91dCk7Ci0KLQkvKioKLQkgKiBAcmVsZWFzZToKLQkgKgotCSAqIENhbGxl
ZCBvbiBkZXN0cnVjdGlvbiBvZiBmZW5jZSB0byByZWxlYXNlIGFkZGl0aW9uYWwgcmVzb3VyY2Vz
LgotCSAqIENhbiBiZSBjYWxsZWQgZnJvbSBpcnEgY29udGV4dC4gIFRoaXMgY2FsbGJhY2sgaXMg
b3B0aW9uYWwuIElmIGl0IGlzCi0JICogTlVMTCwgdGhlbiBkbWFfZmVuY2VfZnJlZSgpIGlzIGlu
c3RlYWQgY2FsbGVkIGFzIHRoZSBkZWZhdWx0Ci0JICogaW1wbGVtZW50YXRpb24uCi0JICovCi0J
dm9pZCAoKnJlbGVhc2UpKHN0cnVjdCBkbWFfZmVuY2UgKmZlbmNlKTsKLQotCS8qKgotCSAqIEBm
ZW5jZV92YWx1ZV9zdHI6Ci0JICoKLQkgKiBDYWxsYmFjayB0byBmaWxsIGluIGZyZWUtZm9ybSBk
ZWJ1ZyBpbmZvIHNwZWNpZmljIHRvIHRoaXMgZmVuY2UsIGxpa2UKLQkgKiB0aGUgc2VxdWVuY2Ug
bnVtYmVyLgotCSAqCi0JICogVGhpcyBjYWxsYmFjayBpcyBvcHRpb25hbC4KLQkgKi8KLQl2b2lk
ICgqZmVuY2VfdmFsdWVfc3RyKShzdHJ1Y3QgZG1hX2ZlbmNlICpmZW5jZSwgY2hhciAqc3RyLCBp
bnQgc2l6ZSk7Ci0KLQkvKioKLQkgKiBAdGltZWxpbmVfdmFsdWVfc3RyOgotCSAqCi0JICogRmls
bHMgaW4gdGhlIGN1cnJlbnQgdmFsdWUgb2YgdGhlIHRpbWVsaW5lIGFzIGEgc3RyaW5nLCBsaWtl
IHRoZQotCSAqIHNlcXVlbmNlIG51bWJlci4gTm90ZSB0aGF0IHRoZSBzcGVjaWZpYyBmZW5jZSBw
YXNzZWQgdG8gdGhpcyBmdW5jdGlvbgotCSAqIHNob3VsZCBub3QgbWF0dGVyLCBkcml2ZXJzIHNo
b3VsZCBvbmx5IHVzZSBpdCB0byBsb29rIHVwIHRoZQotCSAqIGNvcnJlc3BvbmRpbmcgdGltZWxp
bmUgc3RydWN0dXJlcy4KLQkgKi8KLQl2b2lkICgqdGltZWxpbmVfdmFsdWVfc3RyKShzdHJ1Y3Qg
ZG1hX2ZlbmNlICpmZW5jZSwKLQkJCQkgICBjaGFyICpzdHIsIGludCBzaXplKTsKLX07CisjaW5j
bHVkZSA8dHJhY2UvZXZlbnRzL2RtYV9mZW5jZS5oPgogCiB2b2lkIGRtYV9mZW5jZV9pbml0KHN0
cnVjdCBkbWFfZmVuY2UgKmZlbmNlLCBjb25zdCBzdHJ1Y3QgZG1hX2ZlbmNlX29wcyAqb3BzLAog
CQkgICAgc3BpbmxvY2tfdCAqbG9jaywgdTY0IGNvbnRleHQsIHU2NCBzZXFubyk7CkBAIC01NjEs
NiArMzQzLDM1IEBAIHN0YXRpYyBpbmxpbmUgc2lnbmVkIGxvbmcgZG1hX2ZlbmNlX3dhaXQoc3Ry
dWN0IGRtYV9mZW5jZSAqZmVuY2UsIGJvb2wgaW50cikKIHN0cnVjdCBkbWFfZmVuY2UgKmRtYV9m
ZW5jZV9nZXRfc3R1Yih2b2lkKTsKIHU2NCBkbWFfZmVuY2VfY29udGV4dF9hbGxvYyh1bnNpZ25l
ZCBudW0pOwogCitzdGF0aWMgaW5saW5lIGJvb2wKK19fZG1hX2ZlbmNlX3NpZ25hbChzdHJ1Y3Qg
ZG1hX2ZlbmNlICpmZW5jZSkKK3sKKwlyZXR1cm4gIXRlc3RfYW5kX3NldF9iaXQoRE1BX0ZFTkNF
X0ZMQUdfU0lHTkFMRURfQklULCAmZmVuY2UtPmZsYWdzKTsKK30KKworc3RhdGljIGlubGluZSB2
b2lkCitfX2RtYV9mZW5jZV9zaWduYWxfX3RpbWVzdGFtcChzdHJ1Y3QgZG1hX2ZlbmNlICpmZW5j
ZSwga3RpbWVfdCB0aW1lc3RhbXApCit7CisJZmVuY2UtPnRpbWVzdGFtcCA9IHRpbWVzdGFtcDsK
KwlzZXRfYml0KERNQV9GRU5DRV9GTEFHX1RJTUVTVEFNUF9CSVQsICZmZW5jZS0+ZmxhZ3MpOwor
CXRyYWNlX2RtYV9mZW5jZV9zaWduYWxlZChmZW5jZSk7Cit9CisKK3N0YXRpYyBpbmxpbmUgdm9p
ZAorX19kbWFfZmVuY2Vfc2lnbmFsX19ub3RpZnkoc3RydWN0IGRtYV9mZW5jZSAqZmVuY2UpCit7
CisJc3RydWN0IGRtYV9mZW5jZV9jYiAqY3VyLCAqdG1wOworCisJbG9ja2RlcF9hc3NlcnRfaGVs
ZChmZW5jZS0+bG9jayk7CisJbG9ja2RlcF9hc3NlcnRfaXJxc19kaXNhYmxlZCgpOworCisJbGlz
dF9mb3JfZWFjaF9lbnRyeV9zYWZlKGN1ciwgdG1wLCAmZmVuY2UtPmNiX2xpc3QsIG5vZGUpIHsK
KwkJSU5JVF9MSVNUX0hFQUQoJmN1ci0+bm9kZSk7CisJCWN1ci0+ZnVuYyhmZW5jZSwgY3VyKTsK
Kwl9CisJSU5JVF9MSVNUX0hFQUQoJmZlbmNlLT5jYl9saXN0KTsKK30KKwogI2RlZmluZSBETUFf
RkVOQ0VfVFJBQ0UoZiwgZm10LCBhcmdzLi4uKSBcCiAJZG8gewkJCQkJCQkJXAogCQlzdHJ1Y3Qg
ZG1hX2ZlbmNlICpfX2ZmID0gKGYpOwkJCQlcCi0tIAoyLjIwLjEKCl9fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCkludGVsLWdmeCBtYWlsaW5nIGxpc3QKSW50
ZWwtZ2Z4QGxpc3RzLmZyZWVkZXNrdG9wLm9yZwpodHRwczovL2xpc3RzLmZyZWVkZXNrdG9wLm9y
Zy9tYWlsbWFuL2xpc3RpbmZvL2ludGVsLWdmeA==

Return-Path: <intel-gfx-bounces@lists.freedesktop.org>
X-Original-To: lists+intel-gfx@lfdr.de
Delivered-To: lists+intel-gfx@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [IPv6:2610:10:20:722:a800:ff:fe36:1795])
	by mail.lfdr.de (Postfix) with ESMTPS id 42862815C3
	for <lists+intel-gfx@lfdr.de>; Mon,  5 Aug 2019 11:44:36 +0200 (CEST)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 93AA189231;
	Mon,  5 Aug 2019 09:44:34 +0000 (UTC)
X-Original-To: intel-gfx@lists.freedesktop.org
Delivered-To: intel-gfx@lists.freedesktop.org
Received: from fireflyinternet.com (mail.fireflyinternet.com [109.228.58.192])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 7A68789231
 for <intel-gfx@lists.freedesktop.org>; Mon,  5 Aug 2019 09:44:33 +0000 (UTC)
X-Default-Received-SPF: pass (skip=forwardok (res=PASS))
 x-ip-name=78.156.65.138; 
Received: from haswell.alporthouse.com (unverified [78.156.65.138]) 
 by fireflyinternet.com (Firefly Internet (M1)) with ESMTP id 17885288-1500050 
 for multiple; Mon, 05 Aug 2019 10:43:35 +0100
From: Chris Wilson <chris@chris-wilson.co.uk>
To: intel-gfx@lists.freedesktop.org
Date: Mon,  5 Aug 2019 10:43:32 +0100
Message-Id: <20190805094333.17600-1-chris@chris-wilson.co.uk>
X-Mailer: git-send-email 2.23.0.rc1
MIME-Version: 1.0
Subject: [Intel-gfx] [PATCH 1/2] drm/i915: Defer final intel_wakeref_put to
 process context
X-BeenThere: intel-gfx@lists.freedesktop.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: Intel graphics driver community testing & development
 <intel-gfx.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/intel-gfx>
List-Post: <mailto:intel-gfx@lists.freedesktop.org>
List-Help: <mailto:intel-gfx-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: intel-gfx-bounces@lists.freedesktop.org
Sender: "Intel-gfx" <intel-gfx-bounces@lists.freedesktop.org>

QXMgd2UgbmVlZCB0byBhY3F1aXJlIGEgbXV0ZXggdG8gc2VyaWFsaXNlIHRoZSBmaW5hbAppbnRl
bF93YWtlcmVmX3B1dCwgd2UgbmVlZCB0byBlbnN1cmUgdGhhdCB3ZSBhcmUgaW4gcHJvY2VzcyBj
b250ZXh0IGF0CnRoYXQgdGltZS4gSG93ZXZlciwgd2Ugd2FudCB0byBhbGxvdyBvcGVyYXRpb24g
b24gdGhlIGludGVsX3dha2VyZWYgZnJvbQppbnNpZGUgdGltZXIgYW5kIG90aGVyIGhhcmRpcnEg
Y29udGV4dCwgd2hpY2ggbWVhbnMgdGhhdCBuZWVkIHRvIGRlZmVyCnRoYXQgZmluYWwgcHV0IHRv
IGEgd29ya3F1ZXVlLgoKQnVnemlsbGE6IGh0dHBzOi8vYnVncy5mcmVlZGVza3RvcC5vcmcvc2hv
d19idWcuY2dpP2lkPTExMTI5NQpGaXhlczogMTgzOTg5MDRjYTllICgiZHJtL2k5MTU6IE9ubHkg
cmVjb3ZlciBhY3RpdmUgZW5naW5lcyIpCkZpeGVzOiA1MWZiZDhkZTg3ZGMgKCJkcm0vaTkxNS9w
bXU6IEF0b21pY2FsbHkgYWNxdWlyZSB0aGUgZ3RfcG0gd2FrZXJlZiIpClNpZ25lZC1vZmYtYnk6
IENocmlzIFdpbHNvbiA8Y2hyaXNAY2hyaXMtd2lsc29uLmNvLnVrPgpDYzogVHZydGtvIFVyc3Vs
aW4gPHR2cnRrby51cnN1bGluQGludGVsLmNvbT4KQ2M6IE1pa2EgS3VvcHBhbGEgPG1pa2Eua3Vv
cHBhbGFAbGludXguaW50ZWwuY29tPgotLS0KIGRyaXZlcnMvZ3B1L2RybS9pOTE1L2d0L2ludGVs
X2VuZ2luZV9wbS5jIHwgMTcgKysrLS0tLQogZHJpdmVycy9ncHUvZHJtL2k5MTUvZ3QvaW50ZWxf
ZW5naW5lX3BtLmggfCAxOCArKysrLS0tCiBkcml2ZXJzL2dwdS9kcm0vaTkxNS9ndC9pbnRlbF9n
dF9wbS5jICAgICB8IDI0ICsrKystLS0tLS0KIGRyaXZlcnMvZ3B1L2RybS9pOTE1L2d0L2ludGVs
X2d0X3BtLmggICAgIHwgMTEgKysrKy0KIGRyaXZlcnMvZ3B1L2RybS9pOTE1L2ludGVsX3dha2Vy
ZWYuYyAgICAgIHwgNTcgKysrKysrKysrKysrKysrLS0tLS0tLS0KIGRyaXZlcnMvZ3B1L2RybS9p
OTE1L2ludGVsX3dha2VyZWYuaCAgICAgIHwgNDQgKysrKysrKysrLS0tLS0tLS0KIDYgZmlsZXMg
Y2hhbmdlZCwgOTYgaW5zZXJ0aW9ucygrKSwgNzUgZGVsZXRpb25zKC0pCgpkaWZmIC0tZ2l0IGEv
ZHJpdmVycy9ncHUvZHJtL2k5MTUvZ3QvaW50ZWxfZW5naW5lX3BtLmMgYi9kcml2ZXJzL2dwdS9k
cm0vaTkxNS9ndC9pbnRlbF9lbmdpbmVfcG0uYwppbmRleCAwMzM2MjA0OTg4ZDYuLmU1NjI4M2Ew
NWIwNyAxMDA2NDQKLS0tIGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvZ3QvaW50ZWxfZW5naW5lX3Bt
LmMKKysrIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvZ3QvaW50ZWxfZW5naW5lX3BtLmMKQEAgLTM3
LDExICszNyw2IEBAIHN0YXRpYyBpbnQgX19lbmdpbmVfdW5wYXJrKHN0cnVjdCBpbnRlbF93YWtl
cmVmICp3ZikKIAlyZXR1cm4gMDsKIH0KIAotdm9pZCBpbnRlbF9lbmdpbmVfcG1fZ2V0KHN0cnVj
dCBpbnRlbF9lbmdpbmVfY3MgKmVuZ2luZSkKLXsKLQlpbnRlbF93YWtlcmVmX2dldCgmZW5naW5l
LT5pOTE1LT5ydW50aW1lX3BtLCAmZW5naW5lLT53YWtlcmVmLCBfX2VuZ2luZV91bnBhcmspOwot
fQotCiB2b2lkIGludGVsX2VuZ2luZV9wYXJrKHN0cnVjdCBpbnRlbF9lbmdpbmVfY3MgKmVuZ2lu
ZSkKIHsKIAkvKgpAQCAtMTM2LDEyICsxMzEsMTQgQEAgc3RhdGljIGludCBfX2VuZ2luZV9wYXJr
KHN0cnVjdCBpbnRlbF93YWtlcmVmICp3ZikKIAlyZXR1cm4gMDsKIH0KIAotdm9pZCBpbnRlbF9l
bmdpbmVfcG1fcHV0KHN0cnVjdCBpbnRlbF9lbmdpbmVfY3MgKmVuZ2luZSkKLXsKLQlpbnRlbF93
YWtlcmVmX3B1dCgmZW5naW5lLT5pOTE1LT5ydW50aW1lX3BtLCAmZW5naW5lLT53YWtlcmVmLCBf
X2VuZ2luZV9wYXJrKTsKLX0KK3N0YXRpYyBjb25zdCBzdHJ1Y3QgaW50ZWxfd2FrZXJlZl9vcHMg
d2Zfb3BzID0geworCS5nZXQgPSBfX2VuZ2luZV91bnBhcmssCisJLnB1dCA9IF9fZW5naW5lX3Bh
cmssCit9OwogCiB2b2lkIGludGVsX2VuZ2luZV9pbml0X19wbShzdHJ1Y3QgaW50ZWxfZW5naW5l
X2NzICplbmdpbmUpCiB7Ci0JaW50ZWxfd2FrZXJlZl9pbml0KCZlbmdpbmUtPndha2VyZWYpOwor
CXN0cnVjdCBpbnRlbF9ydW50aW1lX3BtICpycG0gPSAmZW5naW5lLT5pOTE1LT5ydW50aW1lX3Bt
OworCisJaW50ZWxfd2FrZXJlZl9pbml0KCZlbmdpbmUtPndha2VyZWYsIHJwbSwgJndmX29wcyk7
CiB9CmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9ndC9pbnRlbF9lbmdpbmVfcG0u
aCBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2d0L2ludGVsX2VuZ2luZV9wbS5oCmluZGV4IDAxNWFj
NzJkN2FkMC4uZDNkNDgyMTZmNGE2IDEwMDY0NAotLS0gYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9n
dC9pbnRlbF9lbmdpbmVfcG0uaAorKysgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9ndC9pbnRlbF9l
bmdpbmVfcG0uaApAQCAtMTAsMjMgKzEwLDI3IEBACiAjaW5jbHVkZSAiaW50ZWxfZW5naW5lX3R5
cGVzLmgiCiAjaW5jbHVkZSAiaW50ZWxfd2FrZXJlZi5oIgogCi1zdHJ1Y3QgZHJtX2k5MTVfcHJp
dmF0ZTsKLQotdm9pZCBpbnRlbF9lbmdpbmVfcG1fZ2V0KHN0cnVjdCBpbnRlbF9lbmdpbmVfY3Mg
KmVuZ2luZSk7Ci12b2lkIGludGVsX2VuZ2luZV9wbV9wdXQoc3RydWN0IGludGVsX2VuZ2luZV9j
cyAqZW5naW5lKTsKLQogc3RhdGljIGlubGluZSBib29sCiBpbnRlbF9lbmdpbmVfcG1faXNfYXdh
a2UoY29uc3Qgc3RydWN0IGludGVsX2VuZ2luZV9jcyAqZW5naW5lKQogewogCXJldHVybiBpbnRl
bF93YWtlcmVmX2lzX2FjdGl2ZSgmZW5naW5lLT53YWtlcmVmKTsKIH0KIAotc3RhdGljIGlubGlu
ZSBib29sCi1pbnRlbF9lbmdpbmVfcG1fZ2V0X2lmX2F3YWtlKHN0cnVjdCBpbnRlbF9lbmdpbmVf
Y3MgKmVuZ2luZSkKK3N0YXRpYyBpbmxpbmUgdm9pZCBpbnRlbF9lbmdpbmVfcG1fZ2V0KHN0cnVj
dCBpbnRlbF9lbmdpbmVfY3MgKmVuZ2luZSkKK3sKKwlpbnRlbF93YWtlcmVmX2dldCgmZW5naW5l
LT53YWtlcmVmKTsKK30KKworc3RhdGljIGlubGluZSBib29sIGludGVsX2VuZ2luZV9wbV9nZXRf
aWZfYXdha2Uoc3RydWN0IGludGVsX2VuZ2luZV9jcyAqZW5naW5lKQogewogCXJldHVybiBpbnRl
bF93YWtlcmVmX2dldF9pZl9hY3RpdmUoJmVuZ2luZS0+d2FrZXJlZik7CiB9CiAKK3N0YXRpYyBp
bmxpbmUgdm9pZCBpbnRlbF9lbmdpbmVfcG1fcHV0KHN0cnVjdCBpbnRlbF9lbmdpbmVfY3MgKmVu
Z2luZSkKK3sKKwlpbnRlbF93YWtlcmVmX3B1dCgmZW5naW5lLT53YWtlcmVmKTsKK30KKwogdm9p
ZCBpbnRlbF9lbmdpbmVfcGFyayhzdHJ1Y3QgaW50ZWxfZW5naW5lX2NzICplbmdpbmUpOwogCiB2
b2lkIGludGVsX2VuZ2luZV9pbml0X19wbShzdHJ1Y3QgaW50ZWxfZW5naW5lX2NzICplbmdpbmUp
OwpkaWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvZ3QvaW50ZWxfZ3RfcG0uYyBiL2Ry
aXZlcnMvZ3B1L2RybS9pOTE1L2d0L2ludGVsX2d0X3BtLmMKaW5kZXggNmM4OTcwMjcxYTdmLi5l
NzRhNmVhODQxYTEgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2d0L2ludGVsX2d0
X3BtLmMKKysrIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvZ3QvaW50ZWxfZ3RfcG0uYwpAQCAtMTcs
NyArMTcsNyBAQCBzdGF0aWMgdm9pZCBwbV9ub3RpZnkoc3RydWN0IGRybV9pOTE1X3ByaXZhdGUg
Kmk5MTUsIGludCBzdGF0ZSkKIAlibG9ja2luZ19ub3RpZmllcl9jYWxsX2NoYWluKCZpOTE1LT5n
dC5wbV9ub3RpZmljYXRpb25zLCBzdGF0ZSwgaTkxNSk7CiB9CiAKLXN0YXRpYyBpbnQgaW50ZWxf
Z3RfdW5wYXJrKHN0cnVjdCBpbnRlbF93YWtlcmVmICp3ZikKK3N0YXRpYyBpbnQgX19ndF91bnBh
cmsoc3RydWN0IGludGVsX3dha2VyZWYgKndmKQogewogCXN0cnVjdCBpbnRlbF9ndCAqZ3QgPSBj
b250YWluZXJfb2Yod2YsIHR5cGVvZigqZ3QpLCB3YWtlcmVmKTsKIAlzdHJ1Y3QgZHJtX2k5MTVf
cHJpdmF0ZSAqaTkxNSA9IGd0LT5pOTE1OwpAQCAtNTMsMTQgKzUzLDcgQEAgc3RhdGljIGludCBp
bnRlbF9ndF91bnBhcmsoc3RydWN0IGludGVsX3dha2VyZWYgKndmKQogCXJldHVybiAwOwogfQog
Ci12b2lkIGludGVsX2d0X3BtX2dldChzdHJ1Y3QgaW50ZWxfZ3QgKmd0KQotewotCXN0cnVjdCBp
bnRlbF9ydW50aW1lX3BtICpycG0gPSAmZ3QtPmk5MTUtPnJ1bnRpbWVfcG07Ci0KLQlpbnRlbF93
YWtlcmVmX2dldChycG0sICZndC0+d2FrZXJlZiwgaW50ZWxfZ3RfdW5wYXJrKTsKLX0KLQotc3Rh
dGljIGludCBpbnRlbF9ndF9wYXJrKHN0cnVjdCBpbnRlbF93YWtlcmVmICp3ZikKK3N0YXRpYyBp
bnQgX19ndF9wYXJrKHN0cnVjdCBpbnRlbF93YWtlcmVmICp3ZikKIHsKIAlzdHJ1Y3QgZHJtX2k5
MTVfcHJpdmF0ZSAqaTkxNSA9CiAJCWNvbnRhaW5lcl9vZih3ZiwgdHlwZW9mKCppOTE1KSwgZ3Qu
d2FrZXJlZik7CkBAIC04MCwxNiArNzMsMTUgQEAgc3RhdGljIGludCBpbnRlbF9ndF9wYXJrKHN0
cnVjdCBpbnRlbF93YWtlcmVmICp3ZikKIAlyZXR1cm4gMDsKIH0KIAotdm9pZCBpbnRlbF9ndF9w
bV9wdXQoc3RydWN0IGludGVsX2d0ICpndCkKLXsKLQlzdHJ1Y3QgaW50ZWxfcnVudGltZV9wbSAq
cnBtID0gJmd0LT5pOTE1LT5ydW50aW1lX3BtOwotCi0JaW50ZWxfd2FrZXJlZl9wdXQocnBtLCAm
Z3QtPndha2VyZWYsIGludGVsX2d0X3BhcmspOwotfQorc3RhdGljIGNvbnN0IHN0cnVjdCBpbnRl
bF93YWtlcmVmX29wcyB3Zl9vcHMgPSB7CisJLmdldCA9IF9fZ3RfdW5wYXJrLAorCS5wdXQgPSBf
X2d0X3BhcmssCit9OwogCiB2b2lkIGludGVsX2d0X3BtX2luaXRfZWFybHkoc3RydWN0IGludGVs
X2d0ICpndCkKIHsKLQlpbnRlbF93YWtlcmVmX2luaXQoJmd0LT53YWtlcmVmKTsKKwlpbnRlbF93
YWtlcmVmX2luaXQoJmd0LT53YWtlcmVmLCAmZ3QtPmk5MTUtPnJ1bnRpbWVfcG0sICZ3Zl9vcHMp
OworCiAJQkxPQ0tJTkdfSU5JVF9OT1RJRklFUl9IRUFEKCZndC0+cG1fbm90aWZpY2F0aW9ucyk7
CiB9CiAKZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2d0L2ludGVsX2d0X3BtLmgg
Yi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9ndC9pbnRlbF9ndF9wbS5oCmluZGV4IGU4YTE4ZDRiMjdj
OS4uNWUwY2QzMDQ0ZWI2IDEwMDY0NAotLS0gYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9ndC9pbnRl
bF9ndF9wbS5oCisrKyBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2d0L2ludGVsX2d0X3BtLmgKQEAg
LTE3LDE0ICsxNywyMSBAQCBlbnVtIHsKIAlJTlRFTF9HVF9QQVJLLAogfTsKIAotdm9pZCBpbnRl
bF9ndF9wbV9nZXQoc3RydWN0IGludGVsX2d0ICpndCk7Ci12b2lkIGludGVsX2d0X3BtX3B1dChz
dHJ1Y3QgaW50ZWxfZ3QgKmd0KTsKK3N0YXRpYyBpbmxpbmUgdm9pZCBpbnRlbF9ndF9wbV9nZXQo
c3RydWN0IGludGVsX2d0ICpndCkKK3sKKwlpbnRlbF93YWtlcmVmX2dldCgmZ3QtPndha2VyZWYp
OworfQogCiBzdGF0aWMgaW5saW5lIGJvb2wgaW50ZWxfZ3RfcG1fZ2V0X2lmX2F3YWtlKHN0cnVj
dCBpbnRlbF9ndCAqZ3QpCiB7CiAJcmV0dXJuIGludGVsX3dha2VyZWZfZ2V0X2lmX2FjdGl2ZSgm
Z3QtPndha2VyZWYpOwogfQogCitzdGF0aWMgaW5saW5lIHZvaWQgaW50ZWxfZ3RfcG1fcHV0KHN0
cnVjdCBpbnRlbF9ndCAqZ3QpCit7CisJaW50ZWxfd2FrZXJlZl9wdXQoJmd0LT53YWtlcmVmKTsK
K30KKwogdm9pZCBpbnRlbF9ndF9wbV9pbml0X2Vhcmx5KHN0cnVjdCBpbnRlbF9ndCAqZ3QpOwog
CiB2b2lkIGludGVsX2d0X3Nhbml0aXplKHN0cnVjdCBpbnRlbF9ndCAqZ3QsIGJvb2wgZm9yY2Up
OwpkaWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvaW50ZWxfd2FrZXJlZi5jIGIvZHJp
dmVycy9ncHUvZHJtL2k5MTUvaW50ZWxfd2FrZXJlZi5jCmluZGV4IDA2YmQ4YjIxNWNjMi4uMWVj
OTczZjY3MDQyIDEwMDY0NAotLS0gYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9pbnRlbF93YWtlcmVm
LmMKKysrIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvaW50ZWxfd2FrZXJlZi5jCkBAIC03LDIyICs3
LDIwIEBACiAjaW5jbHVkZSAiaW50ZWxfcnVudGltZV9wbS5oIgogI2luY2x1ZGUgImludGVsX3dh
a2VyZWYuaCIKIAotc3RhdGljIHZvaWQgcnBtX2dldChzdHJ1Y3QgaW50ZWxfcnVudGltZV9wbSAq
cnBtLCBzdHJ1Y3QgaW50ZWxfd2FrZXJlZiAqd2YpCitzdGF0aWMgdm9pZCBycG1fZ2V0KHN0cnVj
dCBpbnRlbF93YWtlcmVmICp3ZikKIHsKLQl3Zi0+d2FrZXJlZiA9IGludGVsX3J1bnRpbWVfcG1f
Z2V0KHJwbSk7CisJd2YtPndha2VyZWYgPSBpbnRlbF9ydW50aW1lX3BtX2dldCh3Zi0+cnBtKTsK
IH0KIAotc3RhdGljIHZvaWQgcnBtX3B1dChzdHJ1Y3QgaW50ZWxfcnVudGltZV9wbSAqcnBtLCBz
dHJ1Y3QgaW50ZWxfd2FrZXJlZiAqd2YpCitzdGF0aWMgdm9pZCBycG1fcHV0KHN0cnVjdCBpbnRl
bF93YWtlcmVmICp3ZikKIHsKIAlpbnRlbF93YWtlcmVmX3Qgd2FrZXJlZiA9IGZldGNoX2FuZF96
ZXJvKCZ3Zi0+d2FrZXJlZik7CiAKLQlpbnRlbF9ydW50aW1lX3BtX3B1dChycG0sIHdha2VyZWYp
OworCWludGVsX3J1bnRpbWVfcG1fcHV0KHdmLT5ycG0sIHdha2VyZWYpOwogCUlOVEVMX1dBS0VS
RUZfQlVHX09OKCF3YWtlcmVmKTsKIH0KIAotaW50IF9faW50ZWxfd2FrZXJlZl9nZXRfZmlyc3Qo
c3RydWN0IGludGVsX3J1bnRpbWVfcG0gKnJwbSwKLQkJCSAgICAgIHN0cnVjdCBpbnRlbF93YWtl
cmVmICp3ZiwKLQkJCSAgICAgIGludCAoKmZuKShzdHJ1Y3QgaW50ZWxfd2FrZXJlZiAqd2YpKQor
aW50IF9faW50ZWxfd2FrZXJlZl9nZXRfZmlyc3Qoc3RydWN0IGludGVsX3dha2VyZWYgKndmKQog
ewogCS8qCiAJICogVHJlYXQgZ2V0L3B1dCBhcyBkaWZmZXJlbnQgc3ViY2xhc3NlcywgYXMgd2Ug
bWF5IG5lZWQgdG8gcnVuCkBAIC0zNCwxMSArMzIsMTEgQEAgaW50IF9faW50ZWxfd2FrZXJlZl9n
ZXRfZmlyc3Qoc3RydWN0IGludGVsX3J1bnRpbWVfcG0gKnJwbSwKIAlpZiAoIWF0b21pY19yZWFk
KCZ3Zi0+Y291bnQpKSB7CiAJCWludCBlcnI7CiAKLQkJcnBtX2dldChycG0sIHdmKTsKKwkJcnBt
X2dldCh3Zik7CiAKLQkJZXJyID0gZm4od2YpOworCQllcnIgPSB3Zi0+b3BzLT5nZXQod2YpOwog
CQlpZiAodW5saWtlbHkoZXJyKSkgewotCQkJcnBtX3B1dChycG0sIHdmKTsKKwkJCXJwbV9wdXQo
d2YpOwogCQkJbXV0ZXhfdW5sb2NrKCZ3Zi0+bXV0ZXgpOwogCQkJcmV0dXJuIGVycjsKIAkJfQpA
QCAtNTIsMjcgKzUwLDQ2IEBAIGludCBfX2ludGVsX3dha2VyZWZfZ2V0X2ZpcnN0KHN0cnVjdCBp
bnRlbF9ydW50aW1lX3BtICpycG0sCiAJcmV0dXJuIDA7CiB9CiAKLWludCBfX2ludGVsX3dha2Vy
ZWZfcHV0X2xhc3Qoc3RydWN0IGludGVsX3J1bnRpbWVfcG0gKnJwbSwKLQkJCSAgICAgc3RydWN0
IGludGVsX3dha2VyZWYgKndmLAotCQkJICAgICBpbnQgKCpmbikoc3RydWN0IGludGVsX3dha2Vy
ZWYgKndmKSkKK3ZvaWQgX19pbnRlbF93YWtlcmVmX3B1dF9sYXN0KHN0cnVjdCBpbnRlbF93YWtl
cmVmICp3ZikKIHsKLQlpbnQgZXJyOworCWlmIChpbl9pbnRlcnJ1cHQoKSkgeworCQlJTlRFTF9X
QUtFUkVGX0JVR19PTih3b3JrX3BlbmRpbmcoJndmLT53b3JrKSk7CisJCXNjaGVkdWxlX3dvcmso
JndmLT53b3JrKTsKKwkJcmV0dXJuOworCX0KIAotCWVyciA9IGZuKHdmKTsKLQlpZiAobGlrZWx5
KCFlcnIpKQotCQlycG1fcHV0KHJwbSwgd2YpOworCWlmICghYXRvbWljX2RlY19hbmRfbXV0ZXhf
bG9jaygmd2YtPmNvdW50LCAmd2YtPm11dGV4KSkKKwkJcmV0dXJuOworCisJaWYgKGxpa2VseSgh
d2YtPm9wcy0+cHV0KHdmKSkpCisJCXJwbV9wdXQod2YpOwogCWVsc2UKLQkJYXRvbWljX2luYygm
d2YtPmNvdW50KTsKKwkJLyogb3BzLT5wdXQoKSBtdXN0IHNjaGVkdWxlIGl0cyBvd24gcmVsZWFz
ZSBvbiBkZWZlcnJhbCAqLworCQlhdG9taWNfc2V0X3JlbGVhc2UoJndmLT5jb3VudCwgMSk7CisK
IAltdXRleF91bmxvY2soJndmLT5tdXRleCk7Cit9CisKK3N0YXRpYyB2b2lkIF9faW50ZWxfd2Fr
ZXJlZl9wdXRfd29yayhzdHJ1Y3Qgd29ya19zdHJ1Y3QgKndyaykKK3sKKwlzdHJ1Y3QgaW50ZWxf
d2FrZXJlZiAqd2YgPSBjb250YWluZXJfb2Yod3JrLCB0eXBlb2YoKndmKSwgd29yayk7CiAKLQly
ZXR1cm4gZXJyOworCWludGVsX3dha2VyZWZfcHV0KHdmKTsKIH0KIAotdm9pZCBfX2ludGVsX3dh
a2VyZWZfaW5pdChzdHJ1Y3QgaW50ZWxfd2FrZXJlZiAqd2YsIHN0cnVjdCBsb2NrX2NsYXNzX2tl
eSAqa2V5KQordm9pZCBfX2ludGVsX3dha2VyZWZfaW5pdChzdHJ1Y3QgaW50ZWxfd2FrZXJlZiAq
d2YsCisJCQkgIHN0cnVjdCBpbnRlbF9ydW50aW1lX3BtICpycG0sCisJCQkgIGNvbnN0IHN0cnVj
dCBpbnRlbF93YWtlcmVmX29wcyAqb3BzLAorCQkJICBzdHJ1Y3QgbG9ja19jbGFzc19rZXkgKmtl
eSkKIHsKKwl3Zi0+cnBtID0gcnBtOworCXdmLT5vcHMgPSBvcHM7CisKIAlfX211dGV4X2luaXQo
JndmLT5tdXRleCwgIndha2VyZWYiLCBrZXkpOwogCWF0b21pY19zZXQoJndmLT5jb3VudCwgMCk7
CiAJd2YtPndha2VyZWYgPSAwOworCisJSU5JVF9XT1JLKCZ3Zi0+d29yaywgX19pbnRlbF93YWtl
cmVmX3B1dF93b3JrKTsKIH0KIAogc3RhdGljIHZvaWQgd2FrZXJlZl9hdXRvX3RpbWVvdXQoc3Ry
dWN0IHRpbWVyX2xpc3QgKnQpCmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9pbnRl
bF93YWtlcmVmLmggYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9pbnRlbF93YWtlcmVmLmgKaW5kZXgg
MWQ2ZjU5ODZlNGU1Li43MDUyYWQ3NmJiOGUgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS9p
OTE1L2ludGVsX3dha2VyZWYuaAorKysgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9pbnRlbF93YWtl
cmVmLmgKQEAgLTEyLDYgKzEyLDcgQEAKICNpbmNsdWRlIDxsaW51eC9yZWZjb3VudC5oPgogI2lu
Y2x1ZGUgPGxpbnV4L3N0YWNrZGVwb3QuaD4KICNpbmNsdWRlIDxsaW51eC90aW1lci5oPgorI2lu
Y2x1ZGUgPGxpbnV4L3dvcmtxdWV1ZS5oPgogCiAjaWYgSVNfRU5BQkxFRChDT05GSUdfRFJNX0k5
MTVfREVCVUcpCiAjZGVmaW5lIElOVEVMX1dBS0VSRUZfQlVHX09OKGV4cHIpIEJVR19PTihleHBy
KQpAQCAtMjAsMjkgKzIxLDM4IEBACiAjZW5kaWYKIAogc3RydWN0IGludGVsX3J1bnRpbWVfcG07
CitzdHJ1Y3QgaW50ZWxfd2FrZXJlZjsKIAogdHlwZWRlZiBkZXBvdF9zdGFja19oYW5kbGVfdCBp
bnRlbF93YWtlcmVmX3Q7CiAKK3N0cnVjdCBpbnRlbF93YWtlcmVmX29wcyB7CisJaW50ICgqZ2V0
KShzdHJ1Y3QgaW50ZWxfd2FrZXJlZiAqd2YpOworCWludCAoKnB1dCkoc3RydWN0IGludGVsX3dh
a2VyZWYgKndmKTsKK307CisKIHN0cnVjdCBpbnRlbF93YWtlcmVmIHsKKwlzdHJ1Y3QgaW50ZWxf
cnVudGltZV9wbSAqcnBtOworCiAJYXRvbWljX3QgY291bnQ7CiAJc3RydWN0IG11dGV4IG11dGV4
OwogCWludGVsX3dha2VyZWZfdCB3YWtlcmVmOworCXN0cnVjdCB3b3JrX3N0cnVjdCB3b3JrOwor
CisJY29uc3Qgc3RydWN0IGludGVsX3dha2VyZWZfb3BzICpvcHM7CiB9OwogCiB2b2lkIF9faW50
ZWxfd2FrZXJlZl9pbml0KHN0cnVjdCBpbnRlbF93YWtlcmVmICp3ZiwKKwkJCSAgc3RydWN0IGlu
dGVsX3J1bnRpbWVfcG0gKnJwbSwKKwkJCSAgY29uc3Qgc3RydWN0IGludGVsX3dha2VyZWZfb3Bz
ICpvcHMsCiAJCQkgIHN0cnVjdCBsb2NrX2NsYXNzX2tleSAqa2V5KTsKLSNkZWZpbmUgaW50ZWxf
d2FrZXJlZl9pbml0KHdmKSBkbyB7CQkJCQlcCisjZGVmaW5lIGludGVsX3dha2VyZWZfaW5pdCh3
ZiwgcnBtLCBvcHMpIGRvIHsJCQkJXAogCXN0YXRpYyBzdHJ1Y3QgbG9ja19jbGFzc19rZXkgX19r
ZXk7CQkJCVwKIAkJCQkJCQkJCVwKLQlfX2ludGVsX3dha2VyZWZfaW5pdCgod2YpLCAmX19rZXkp
OwkJCQlcCisJX19pbnRlbF93YWtlcmVmX2luaXQoKHdmKSwgKHJwbSksIChvcHMpLCAmX19rZXkp
OwkJXAogfSB3aGlsZSAoMCkKIAotaW50IF9faW50ZWxfd2FrZXJlZl9nZXRfZmlyc3Qoc3RydWN0
IGludGVsX3J1bnRpbWVfcG0gKnJwbSwKLQkJCSAgICAgIHN0cnVjdCBpbnRlbF93YWtlcmVmICp3
ZiwKLQkJCSAgICAgIGludCAoKmZuKShzdHJ1Y3QgaW50ZWxfd2FrZXJlZiAqd2YpKTsKLWludCBf
X2ludGVsX3dha2VyZWZfcHV0X2xhc3Qoc3RydWN0IGludGVsX3J1bnRpbWVfcG0gKnJwbSwKLQkJ
CSAgICAgc3RydWN0IGludGVsX3dha2VyZWYgKndmLAotCQkJICAgICBpbnQgKCpmbikoc3RydWN0
IGludGVsX3dha2VyZWYgKndmKSk7CitpbnQgX19pbnRlbF93YWtlcmVmX2dldF9maXJzdChzdHJ1
Y3QgaW50ZWxfd2FrZXJlZiAqd2YpOwordm9pZCBfX2ludGVsX3dha2VyZWZfcHV0X2xhc3Qoc3Ry
dWN0IGludGVsX3dha2VyZWYgKndmKTsKIAogLyoqCiAgKiBpbnRlbF93YWtlcmVmX2dldDogQWNx
dWlyZSB0aGUgd2FrZXJlZgpAQCAtNjEsMTIgKzcxLDEwIEBAIGludCBfX2ludGVsX3dha2VyZWZf
cHV0X2xhc3Qoc3RydWN0IGludGVsX3J1bnRpbWVfcG0gKnJwbSwKICAqIGNvZGUgb3RoZXJ3aXNl
LgogICovCiBzdGF0aWMgaW5saW5lIGludAotaW50ZWxfd2FrZXJlZl9nZXQoc3RydWN0IGludGVs
X3J1bnRpbWVfcG0gKnJwbSwKLQkJICBzdHJ1Y3QgaW50ZWxfd2FrZXJlZiAqd2YsCi0JCSAgaW50
ICgqZm4pKHN0cnVjdCBpbnRlbF93YWtlcmVmICp3ZikpCitpbnRlbF93YWtlcmVmX2dldChzdHJ1
Y3QgaW50ZWxfd2FrZXJlZiAqd2YpCiB7CiAJaWYgKHVubGlrZWx5KCFhdG9taWNfaW5jX25vdF96
ZXJvKCZ3Zi0+Y291bnQpKSkKLQkJcmV0dXJuIF9faW50ZWxfd2FrZXJlZl9nZXRfZmlyc3QocnBt
LCB3ZiwgZm4pOworCQlyZXR1cm4gX19pbnRlbF93YWtlcmVmX2dldF9maXJzdCh3Zik7CiAKIAly
ZXR1cm4gMDsKIH0KQEAgLTEwMiwxNiArMTEwLDEyIEBAIGludGVsX3dha2VyZWZfZ2V0X2lmX2Fj
dGl2ZShzdHJ1Y3QgaW50ZWxfd2FrZXJlZiAqd2YpCiAgKiBSZXR1cm5zOiAwIGlmIHRoZSB3YWtl
cmVmIHdhcyByZWxlYXNlZCBzdWNjZXNzZnVsbHksIG9yIGEgbmVnYXRpdmUgZXJyb3IKICAqIGNv
ZGUgb3RoZXJ3aXNlLgogICovCi1zdGF0aWMgaW5saW5lIGludAotaW50ZWxfd2FrZXJlZl9wdXQo
c3RydWN0IGludGVsX3J1bnRpbWVfcG0gKnJwbSwKLQkJICBzdHJ1Y3QgaW50ZWxfd2FrZXJlZiAq
d2YsCi0JCSAgaW50ICgqZm4pKHN0cnVjdCBpbnRlbF93YWtlcmVmICp3ZikpCitzdGF0aWMgaW5s
aW5lIHZvaWQKK2ludGVsX3dha2VyZWZfcHV0KHN0cnVjdCBpbnRlbF93YWtlcmVmICp3ZikKIHsK
IAlJTlRFTF9XQUtFUkVGX0JVR19PTihhdG9taWNfcmVhZCgmd2YtPmNvdW50KSA8PSAwKTsKLQlp
ZiAoYXRvbWljX2RlY19hbmRfbXV0ZXhfbG9jaygmd2YtPmNvdW50LCAmd2YtPm11dGV4KSkKLQkJ
cmV0dXJuIF9faW50ZWxfd2FrZXJlZl9wdXRfbGFzdChycG0sIHdmLCBmbik7Ci0KLQlyZXR1cm4g
MDsKKwlpZiAodW5saWtlbHkoIWF0b21pY19hZGRfdW5sZXNzKCZ3Zi0+Y291bnQsIC0xLCAxKSkp
CisJCV9faW50ZWxfd2FrZXJlZl9wdXRfbGFzdCh3Zik7CiB9CiAKIC8qKgotLSAKMi4yMy4wLnJj
MQoKX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KSW50ZWwt
Z2Z4IG1haWxpbmcgbGlzdApJbnRlbC1nZnhAbGlzdHMuZnJlZWRlc2t0b3Aub3JnCmh0dHBzOi8v
bGlzdHMuZnJlZWRlc2t0b3Aub3JnL21haWxtYW4vbGlzdGluZm8vaW50ZWwtZ2Z4

Return-Path: <intel-gfx-bounces@lists.freedesktop.org>
X-Original-To: lists+intel-gfx@lfdr.de
Delivered-To: lists+intel-gfx@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [IPv6:2610:10:20:722:a800:ff:fe36:1795])
	by mail.lfdr.de (Postfix) with ESMTPS id 5925CDD2CD
	for <lists+intel-gfx@lfdr.de>; Sat, 19 Oct 2019 00:15:17 +0200 (CEST)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 1D48089E11;
	Fri, 18 Oct 2019 22:15:11 +0000 (UTC)
X-Original-To: intel-gfx@lists.freedesktop.org
Delivered-To: intel-gfx@lists.freedesktop.org
Received: from fireflyinternet.com (mail.fireflyinternet.com [109.228.58.192])
 by gabe.freedesktop.org (Postfix) with ESMTPS id DD5A989DD2
 for <intel-gfx@lists.freedesktop.org>; Fri, 18 Oct 2019 22:15:06 +0000 (UTC)
X-Default-Received-SPF: pass (skip=forwardok (res=PASS))
 x-ip-name=78.156.65.138; 
Received: from haswell.alporthouse.com (unverified [78.156.65.138]) 
 by fireflyinternet.com (Firefly Internet (M1)) with ESMTP id 18887728-1500050 
 for multiple; Fri, 18 Oct 2019 23:14:52 +0100
From: Chris Wilson <chris@chris-wilson.co.uk>
To: intel-gfx@lists.freedesktop.org
Date: Fri, 18 Oct 2019 23:14:43 +0100
Message-Id: <20191018221450.26247-6-chris@chris-wilson.co.uk>
X-Mailer: git-send-email 2.23.0
In-Reply-To: <20191018221450.26247-1-chris@chris-wilson.co.uk>
References: <20191018221450.26247-1-chris@chris-wilson.co.uk>
MIME-Version: 1.0
Subject: [Intel-gfx] [PATCH 06/13] drm/i915/execlists: Force preemption
X-BeenThere: intel-gfx@lists.freedesktop.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: Intel graphics driver community testing & development
 <intel-gfx.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/intel-gfx>
List-Post: <mailto:intel-gfx@lists.freedesktop.org>
List-Help: <mailto:intel-gfx-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: intel-gfx-bounces@lists.freedesktop.org
Sender: "Intel-gfx" <intel-gfx-bounces@lists.freedesktop.org>

SWYgdGhlIHByZWVtcHRlZCBjb250ZXh0IHRha2VzIHRvbyBsb25nIHRvIHJlbGlucXVpc2ggY29u
dHJvbCwgZS5nLiBpdAppcyBzdHVjayBpbnNpZGUgYSBzaGFkZXIgd2l0aCBhcmJpdHJhdGlvbiBk
aXNhYmxlZCwgZXZpY3QgdGhhdCBjb250ZXh0CndpdGggYW4gZW5naW5lIHJlc2V0LiBUaGlzIGVu
c3VyZXMgdGhhdCBwcmVlbXB0aW9ucyBhcmUgcmVhc29uYWJseQpyZXNwb25zaXZlLCBwcm92aWRp
bmcgYSB0aWdodGVyIFFvUyBmb3IgdGhlIG1vcmUgaW1wb3J0YW50IGNvbnRleHQgYXQKdGhlIGNv
c3Qgb2YgZmxhZ2dpbmcgdW5yZXNwb25zaXZlIGNvbnRleHRzIG1vcmUgZnJlcXVlbnRseSAoaS5l
LiBpbnN0ZWFkCm9mIHVzaW5nIGFuIH4xMHMgaGFuZ2NoZWNrLCB3ZSBub3cgZXZpY3QgYXQgfjEw
MG1zKS4gIFRoZSBjaGFsbGVuZ2Ugb2YKbGllcyBpbiBwaWNraW5nIGEgdGltZW91dCB0aGF0IGNh
biBiZSByZWFzb25hYmx5IHNlcnZpY2VkIGJ5IEhXIGZvcgp0eXBpY2FsIHdvcmtsb2FkcywgYmFs
YW5jaW5nIHRoZSBleGlzdGluZyBjbGllbnRzIGFnYWluc3QgdGhlIG5lZWRzIGZvcgpyZXNwb25z
aXZlbmVzcy4KCk5vdGUgdGhhdCBjb3VwbGVkIHdpdGggdGltZXNsaWNpbmcsIHRoaXMgd2lsbCBs
ZWFkIHRvIHJhcGlkIEdQVSAiaGFuZyIKZGV0ZWN0aW9uIHdpdGggbXVsdGlwbGUgYWN0aXZlIGNv
bnRleHRzIHZ5aW5nIGZvciBHUFUgdGltZS4KClRoZSBwcmVlbXB0IHRpbWVvdXQgY2FuIGJlIGFk
anVzdGVkIHBlci1lbmdpbmUgdXNpbmcsCgoJL3N5cy9jbGFzcy9kcm0vY2FyZD8vZW5naW5lLyov
cHJlZW1wdF90aW1lb3V0X21zCgp2MjogQ291cGxlIGluIHN5c2ZzIGNvbnRyb2wgb2YgcHJlZW1w
dGlvbiB0aW1lb3V0CgpTaWduZWQtb2ZmLWJ5OiBDaHJpcyBXaWxzb24gPGNocmlzQGNocmlzLXdp
bHNvbi5jby51az4KQ2M6IE1pa2EgS3VvcHBhbGEgPG1pa2Eua3VvcHBhbGFAbGludXguaW50ZWwu
Y29tPgpDYzogVHZydGtvIFVyc3VsaW4gPHR2cnRrby51cnN1bGluQGludGVsLmNvbT4KUmV2aWV3
ZWQtYnk6IE1pa2EgS3VvcHBhbGEgPG1pa2Eua3VvcHBhbGFAbGludXguaW50ZWwuY29tPgotLS0K
IGRyaXZlcnMvZ3B1L2RybS9pOTE1L0tjb25maWcucHJvZmlsZSAgICAgICAgIHwgIDE1ICsrKwog
ZHJpdmVycy9ncHUvZHJtL2k5MTUvZ3QvaW50ZWxfZW5naW5lLmggICAgICAgfCAgIDkgKysKIGRy
aXZlcnMvZ3B1L2RybS9pOTE1L2d0L2ludGVsX2VuZ2luZV9jcy5jICAgIHwgICA1ICstCiBkcml2
ZXJzL2dwdS9kcm0vaTkxNS9ndC9pbnRlbF9lbmdpbmVfc3lzZnMuYyB8ICA0NyArKysrKysrKwog
ZHJpdmVycy9ncHUvZHJtL2k5MTUvZ3QvaW50ZWxfZW5naW5lX3R5cGVzLmggfCAgIDYgKwogZHJp
dmVycy9ncHUvZHJtL2k5MTUvZ3QvaW50ZWxfbHJjLmMgICAgICAgICAgfCAxMTAgKysrKysrKysr
KysrKysrKystLQogZHJpdmVycy9ncHUvZHJtL2k5MTUvZ3Qvc2VsZnRlc3RfbHJjLmMgICAgICAg
fCAxMDAgKysrKysrKysrKysrKysrKysKIGRyaXZlcnMvZ3B1L2RybS9pOTE1L2k5MTVfcGFyYW1z
LmggICAgICAgICAgIHwgICAyICstCiA4IGZpbGVzIGNoYW5nZWQsIDI4NCBpbnNlcnRpb25zKCsp
LCAxMCBkZWxldGlvbnMoLSkKCmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9LY29u
ZmlnLnByb2ZpbGUgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9LY29uZmlnLnByb2ZpbGUKaW5kZXgg
YjhkZjgwYmMwYjQ3Li4wMGJkMzdhYTg4ZDMgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS9p
OTE1L0tjb25maWcucHJvZmlsZQorKysgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9LY29uZmlnLnBy
b2ZpbGUKQEAgLTQzLDMgKzQzLDE4IEBAIGNvbmZpZyBEUk1fSTkxNV9USU1FU0xJQ0VfRFVSQVRJ
T04KIAkgIC9zeXMvY2xhc3MvZHJtL2NhcmQ/L2VuZ2luZS8qL3RpbWVzbGljZV9kdXJhdGlvbl9t
cwogCiAJICBNYXkgYmUgMCB0byBkaXNhYmxlIHRpbWVzbGljaW5nLgorCitjb25maWcgRFJNX0k5
MTVfUFJFRU1QVF9USU1FT1VUCisJaW50ICJQcmVlbXB0IHRpbWVvdXQgKG1zLCBqaWZmeSBncmFu
dWxhcml0eSkiCisJZGVmYXVsdCAxMDAgIyBtaWxsaXNlY29uZHMKKwloZWxwCisJICBIb3cgbG9u
ZyB0byB3YWl0IChpbiBtaWxsaXNlY29uZHMpIGZvciBhIHByZWVtcHRpb24gZXZlbnQgdG8gb2Nj
dXIKKwkgIHdoZW4gc3VibWl0dGluZyBhIG5ldyBjb250ZXh0IHZpYSBleGVjbGlzdHMuIElmIHRo
ZSBjdXJyZW50IGNvbnRleHQKKwkgIGRvZXMgbm90IGhpdCBhbiBhcmJpdHJhdGlvbiBwb2ludCBh
bmQgeWllbGQgdG8gSFcgYmVmb3JlIHRoZSB0aW1lcgorCSAgZXhwaXJlcywgdGhlIEhXIHdpbGwg
YmUgcmVzZXQgdG8gYWxsb3cgdGhlIG1vcmUgaW1wb3J0YW50IGNvbnRleHQKKwkgIHRvIGV4ZWN1
dGUuCisKKwkgIFRoaXMgaXMgYWRqdXN0YWJsZSB2aWEKKwkgIC9zeXMvY2xhc3MvZHJtL2NhcmQ/
L2VuZ2luZS8qL3ByZWVtcHRfdGltZW91dF9tcworCisJICBNYXkgYmUgMCB0byBkaXNhYmxlIHRo
ZSB0aW1lb3V0LgpkaWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvZ3QvaW50ZWxfZW5n
aW5lLmggYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9ndC9pbnRlbF9lbmdpbmUuaAppbmRleCAzOTM0
ODEzNzRmOTYuLmVmNGI4ZmRjMGEyNCAxMDA2NDQKLS0tIGEvZHJpdmVycy9ncHUvZHJtL2k5MTUv
Z3QvaW50ZWxfZW5naW5lLmgKKysrIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvZ3QvaW50ZWxfZW5n
aW5lLmgKQEAgLTUzNCw0ICs1MzQsMTMgQEAgaW50ZWxfZW5naW5lX2hhc190aW1lc2xpY2VzKGNv
bnN0IHN0cnVjdCBpbnRlbF9lbmdpbmVfY3MgKmVuZ2luZSkKIAlyZXR1cm4gaW50ZWxfZW5naW5l
X2hhc19zZW1hcGhvcmVzKGVuZ2luZSk7CiB9CiAKK3N0YXRpYyBpbmxpbmUgYm9vbAoraW50ZWxf
ZW5naW5lX2hhc19wcmVlbXB0X3Jlc2V0KGNvbnN0IHN0cnVjdCBpbnRlbF9lbmdpbmVfY3MgKmVu
Z2luZSkKK3sKKwlpZiAoIUNPTkZJR19EUk1fSTkxNV9QUkVFTVBUX1RJTUVPVVQpCisJCXJldHVy
biAwOworCisJcmV0dXJuIGludGVsX2VuZ2luZV9oYXNfcHJlZW1wdGlvbihlbmdpbmUpOworfQor
CiAjZW5kaWYgLyogX0lOVEVMX1JJTkdCVUZGRVJfSF8gKi8KZGlmZiAtLWdpdCBhL2RyaXZlcnMv
Z3B1L2RybS9pOTE1L2d0L2ludGVsX2VuZ2luZV9jcy5jIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUv
Z3QvaW50ZWxfZW5naW5lX2NzLmMKaW5kZXggYjkzZGJlZDY3ZmU3Li5hOWY2YTdiYWRkN2QgMTAw
NjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2d0L2ludGVsX2VuZ2luZV9jcy5jCisrKyBi
L2RyaXZlcnMvZ3B1L2RybS9pOTE1L2d0L2ludGVsX2VuZ2luZV9jcy5jCkBAIC0zMTAsNiArMzEw
LDggQEAgc3RhdGljIGludCBpbnRlbF9lbmdpbmVfc2V0dXAoc3RydWN0IGludGVsX2d0ICpndCwg
ZW51bSBpbnRlbF9lbmdpbmVfaWQgaWQpCiAKIAllbmdpbmUtPnByb3BzLnRpbWVzbGljZV9kdXJh
dGlvbl9tcyA9CiAJCUNPTkZJR19EUk1fSTkxNV9USU1FU0xJQ0VfRFVSQVRJT047CisJZW5naW5l
LT5wcm9wcy5wcmVlbXB0X3RpbWVvdXRfbXMgPQorCQlDT05GSUdfRFJNX0k5MTVfUFJFRU1QVF9U
SU1FT1VUOwogCiAJLyoKIAkgKiBUbyBiZSBvdmVycmlkZGVuIGJ5IHRoZSBiYWNrZW5kIG9uIHNl
dHVwLiBIb3dldmVyIHRvIGZhY2lsaXRhdGUKQEAgLTEzMjEsMTAgKzEzMjMsMTEgQEAgc3RhdGlj
IHZvaWQgaW50ZWxfZW5naW5lX3ByaW50X3JlZ2lzdGVycyhzdHJ1Y3QgaW50ZWxfZW5naW5lX2Nz
ICplbmdpbmUsCiAJCXVuc2lnbmVkIGludCBpZHg7CiAJCXU4IHJlYWQsIHdyaXRlOwogCi0JCWRy
bV9wcmludGYobSwgIlx0RXhlY2xpc3QgdGFza2xldCBxdWV1ZWQ/ICVzICglcyksIHRpbWVzbGlj
ZT8gJXNcbiIsCisJCWRybV9wcmludGYobSwgIlx0RXhlY2xpc3QgdGFza2xldCBxdWV1ZWQ/ICVz
ICglcyksIHByZWVtcHQ/ICVzLCB0aW1lc2xpY2U/ICVzXG4iLAogCQkJICAgeWVzbm8odGVzdF9i
aXQoVEFTS0xFVF9TVEFURV9TQ0hFRCwKIAkJCQkJICAmZW5naW5lLT5leGVjbGlzdHMudGFza2xl
dC5zdGF0ZSkpLAogCQkJICAgZW5hYmxlZGRpc2FibGVkKCFhdG9taWNfcmVhZCgmZW5naW5lLT5l
eGVjbGlzdHMudGFza2xldC5jb3VudCkpLAorCQkJICAgcmVwcl90aW1lcigmZW5naW5lLT5leGVj
bGlzdHMucHJlZW1wdCksCiAJCQkgICByZXByX3RpbWVyKCZlbmdpbmUtPmV4ZWNsaXN0cy50aW1l
cikpOwogCiAJCXJlYWQgPSBleGVjbGlzdHMtPmNzYl9oZWFkOwpkaWZmIC0tZ2l0IGEvZHJpdmVy
cy9ncHUvZHJtL2k5MTUvZ3QvaW50ZWxfZW5naW5lX3N5c2ZzLmMgYi9kcml2ZXJzL2dwdS9kcm0v
aTkxNS9ndC9pbnRlbF9lbmdpbmVfc3lzZnMuYwppbmRleCA3OGQxZGVmMjcxMWUuLmQ1NGY3OTAx
ODM4NyAxMDA2NDQKLS0tIGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvZ3QvaW50ZWxfZW5naW5lX3N5
c2ZzLmMKKysrIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvZ3QvaW50ZWxfZW5naW5lX3N5c2ZzLmMK
QEAgLTE3NSw2ICsxNzUsNDkgQEAgdGltZXNsaWNlX3N0b3JlKHN0cnVjdCBrb2JqZWN0ICprb2Jq
LCBzdHJ1Y3Qga29ial9hdHRyaWJ1dGUgKmF0dHIsCiBzdGF0aWMgc3RydWN0IGtvYmpfYXR0cmli
dXRlIHRpbWVzbGljZV9kdXJhdGlvbl9hdHRyID0KIF9fQVRUUih0aW1lc2xpY2VfZHVyYXRpb25f
bXMsIDA2NDQsIHRpbWVzbGljZV9zaG93LCB0aW1lc2xpY2Vfc3RvcmUpOwogCitzdGF0aWMgc3Np
emVfdAorcHJlZW1wdF90aW1lb3V0X3Nob3coc3RydWN0IGtvYmplY3QgKmtvYmosIHN0cnVjdCBr
b2JqX2F0dHJpYnV0ZSAqYXR0ciwKKwkJICAgICBjaGFyICpidWYpCit7CisJc3RydWN0IGludGVs
X2VuZ2luZV9jcyAqZW5naW5lID0ga29ial90b19lbmdpbmUoa29iaik7CisKKwlyZXR1cm4gc3By
aW50ZihidWYsICIlbHVcbiIsIGVuZ2luZS0+cHJvcHMucHJlZW1wdF90aW1lb3V0X21zKTsKK30K
Kworc3RhdGljIHNzaXplX3QKK3ByZWVtcHRfdGltZW91dF9zdG9yZShzdHJ1Y3Qga29iamVjdCAq
a29iaiwgc3RydWN0IGtvYmpfYXR0cmlidXRlICphdHRyLAorCQkgICAgICBjb25zdCBjaGFyICpi
dWYsIHNpemVfdCBjb3VudCkKK3sKKwlzdHJ1Y3QgaW50ZWxfZW5naW5lX2NzICplbmdpbmUgPSBr
b2JqX3RvX2VuZ2luZShrb2JqKTsKKwl1bnNpZ25lZCBsb25nIGxvbmcgdGltZW91dDsKKwlpbnQg
ZXJyOworCisJZXJyID0ga3N0cnRvdWxsKGJ1ZiwgMCwgJnRpbWVvdXQpOworCWlmIChlcnIpCisJ
CXJldHVybiBlcnI7CisKKwlpZiAodGltZW91dCA+IGppZmZpZXNfdG9fbXNlY3MoTUFYX1NDSEVE
VUxFX1RJTUVPVVQpKQorCQlyZXR1cm4gLUVJTlZBTDsKKworCVdSSVRFX09OQ0UoZW5naW5lLT5w
cm9wcy5wcmVlbXB0X3RpbWVvdXRfbXMsIHRpbWVvdXQpOworCisJaWYgKFJFQURfT05DRShlbmdp
bmUtPmV4ZWNsaXN0cy5wZW5kaW5nWzBdKSkgeworCQlzdHJ1Y3QgdGltZXJfbGlzdCAqdCA9ICZl
bmdpbmUtPmV4ZWNsaXN0cy5wcmVlbXB0OworCisJCWlmICghdGltZW91dCkgeworCQkJY2FuY2Vs
X3RpbWVyKHQpOworCQl9IGVsc2UgeworCQkJdGltZW91dCA9IG1zZWNzX3RvX2ppZmZpZXNfdGlt
ZW91dCh0aW1lb3V0KTsKKwkJCW1vZF90aW1lcih0LCBqaWZmaWVzICsgdGltZW91dCk7CisJCX0K
Kwl9CisKKwlyZXR1cm4gY291bnQ7Cit9CisKK3N0YXRpYyBzdHJ1Y3Qga29ial9hdHRyaWJ1dGUg
cHJlZW1wdF90aW1lb3V0X2F0dHIgPQorX19BVFRSKHByZWVtcHRfdGltZW91dF9tcywgMDY0NCwg
cHJlZW1wdF90aW1lb3V0X3Nob3csIHByZWVtcHRfdGltZW91dF9zdG9yZSk7CisKIHN0YXRpYyB2
b2lkIGtvYmpfZW5naW5lX3JlbGVhc2Uoc3RydWN0IGtvYmplY3QgKmtvYmopCiB7CiAJa2ZyZWUo
a29iaik7CkBAIC0yMzksNiArMjgyLDEwIEBAIHZvaWQgaW50ZWxfZW5naW5lc19hZGRfc3lzZnMo
c3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmk5MTUpCiAJCSAgICBzeXNmc19jcmVhdGVfZmlsZShr
b2JqLCAmdGltZXNsaWNlX2R1cmF0aW9uX2F0dHIuYXR0cikpCiAJCQlnb3RvIGVycl9lbmdpbmU7
CiAKKwkJaWYgKGludGVsX2VuZ2luZV9oYXNfcHJlZW1wdF9yZXNldChlbmdpbmUpICYmCisJCSAg
ICBzeXNmc19jcmVhdGVfZmlsZShrb2JqLCAmcHJlZW1wdF90aW1lb3V0X2F0dHIuYXR0cikpCisJ
CQlnb3RvIGVycl9lbmdpbmU7CisKIAkJaWYgKDApIHsKIGVycl9vYmplY3Q6CiAJCQlrb2JqZWN0
X3B1dChrb2JqKTsKZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2d0L2ludGVsX2Vu
Z2luZV90eXBlcy5oIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvZ3QvaW50ZWxfZW5naW5lX3R5cGVz
LmgKaW5kZXggODlhOTYxNmU4NTM5Li4wYzM1NzI4ZjY2ZTEgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMv
Z3B1L2RybS9pOTE1L2d0L2ludGVsX2VuZ2luZV90eXBlcy5oCisrKyBiL2RyaXZlcnMvZ3B1L2Ry
bS9pOTE1L2d0L2ludGVsX2VuZ2luZV90eXBlcy5oCkBAIC0xNzQsNiArMTc0LDExIEBAIHN0cnVj
dCBpbnRlbF9lbmdpbmVfZXhlY2xpc3RzIHsKIAkgKi8KIAlzdHJ1Y3QgdGltZXJfbGlzdCB0aW1l
cjsKIAorCS8qKgorCSAqIEBwcmVlbXB0OiByZXNldCB0aGUgY3VycmVudCBjb250ZXh0IGlmIGl0
IGZhaWxzIHRvIGdpdmUgd2F5CisJICovCisJc3RydWN0IHRpbWVyX2xpc3QgcHJlZW1wdDsKKwog
CS8qKgogCSAqIEBkZWZhdWx0X3ByaW9saXN0OiBwcmlvcml0eSBsaXN0IGZvciBJOTE1X1BSSU9S
SVRZX05PUk1BTAogCSAqLwpAQCAtNTQ1LDYgKzU1MCw3IEBAIHN0cnVjdCBpbnRlbF9lbmdpbmVf
Y3MgewogCiAJc3RydWN0IHsKIAkJdW5zaWduZWQgbG9uZyB0aW1lc2xpY2VfZHVyYXRpb25fbXM7
CisJCXVuc2lnbmVkIGxvbmcgcHJlZW1wdF90aW1lb3V0X21zOwogCX0gcHJvcHM7CiB9OwogCmRp
ZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9ndC9pbnRlbF9scmMuYyBiL2RyaXZlcnMv
Z3B1L2RybS9pOTE1L2d0L2ludGVsX2xyYy5jCmluZGV4IDNmZmNjN2JmMzA3ZS4uMzE2MTlmMmJi
MWI5IDEwMDY0NAotLS0gYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9ndC9pbnRlbF9scmMuYworKysg
Yi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9ndC9pbnRlbF9scmMuYwpAQCAtMTQxMyw2ICsxNDEzLDQz
IEBAIHN0YXRpYyB2b2lkIHJlY29yZF9wcmVlbXB0aW9uKHN0cnVjdCBpbnRlbF9lbmdpbmVfZXhl
Y2xpc3RzICpleGVjbGlzdHMpCiAJKHZvaWQpSTkxNV9TRUxGVEVTVF9PTkxZKGV4ZWNsaXN0cy0+
cHJlZW1wdF9oYW5nLmNvdW50KyspOwogfQogCitzdGF0aWMgdW5zaWduZWQgbG9uZyBhY3RpdmVf
cHJlZW1wdF90aW1lb3V0KHN0cnVjdCBpbnRlbF9lbmdpbmVfY3MgKmVuZ2luZSkKK3sKKwlzdHJ1
Y3QgaTkxNV9yZXF1ZXN0ICpycTsKKworCXJxID0gbGFzdF9hY3RpdmUoJmVuZ2luZS0+ZXhlY2xp
c3RzKTsKKwlpZiAoIXJxKQorCQlyZXR1cm4gMDsKKworCXJldHVybiBSRUFEX09OQ0UoZW5naW5l
LT5wcm9wcy5wcmVlbXB0X3RpbWVvdXRfbXMpOworfQorCitzdGF0aWMgdm9pZCBzZXRfcHJlZW1w
dF90aW1lb3V0KHN0cnVjdCBpbnRlbF9lbmdpbmVfY3MgKmVuZ2luZSkKK3sKKwlzdHJ1Y3QgdGlt
ZXJfbGlzdCAqdCA9ICZlbmdpbmUtPmV4ZWNsaXN0cy5wcmVlbXB0OworCXVuc2lnbmVkIGxvbmcg
dGltZW91dDsKKworCWlmICghaW50ZWxfZW5naW5lX2hhc19wcmVlbXB0X3Jlc2V0KGVuZ2luZSkp
CisJCXJldHVybjsKKworCXRpbWVvdXQgPSBhY3RpdmVfcHJlZW1wdF90aW1lb3V0KGVuZ2luZSk7
CisJaWYgKCF0aW1lb3V0KSB7CisJCWNhbmNlbF90aW1lcih0KTsKKwkJcmV0dXJuOworCX0KKwor
CXRpbWVvdXQgPSBtc2Vjc190b19qaWZmaWVzX3RpbWVvdXQodGltZW91dCk7CisJLyoKKwkgKiBQ
YXJhbm9pYSB0byBtYWtlIHN1cmUgdGhlIGNvbXBpbGVyIGNvbXB1dGVzIHRoZSB0aW1lb3V0IGJl
Zm9yZQorCSAqIGxvYWRpbmcgJ2ppZmZpZXMnIGFzIGppZmZpZXMgaXMgdm9sYXRpbGUgYW5kIG1h
eSBiZSB1cGRhdGVkIGluCisJICogdGhlIGJhY2tncm91bmQgYnkgYSB0aW1lciB0aWNrLiBBbGwg
dG8gcmVkdWNlIHRoZSBjb21wbGV4aXR5CisJICogb2YgdGhlIGFkZGl0aW9uIGFuZCByZWR1Y2Ug
dGhlIHJpc2sgb2YgbG9zaW5nIGEgamlmZmllLgorCSAqLworCWJhcnJpZXIoKTsKKworCW1vZF90
aW1lcih0LCBqaWZmaWVzICsgdGltZW91dCk7Cit9CisKIHN0YXRpYyB2b2lkIGV4ZWNsaXN0c19k
ZXF1ZXVlKHN0cnVjdCBpbnRlbF9lbmdpbmVfY3MgKmVuZ2luZSkKIHsKIAlzdHJ1Y3QgaW50ZWxf
ZW5naW5lX2V4ZWNsaXN0cyAqIGNvbnN0IGV4ZWNsaXN0cyA9ICZlbmdpbmUtPmV4ZWNsaXN0czsK
QEAgLTE3ODksNiArMTgyNiw4IEBAIHN0YXRpYyB2b2lkIGV4ZWNsaXN0c19kZXF1ZXVlKHN0cnVj
dCBpbnRlbF9lbmdpbmVfY3MgKmVuZ2luZSkKIAogCQltZW1zZXQocG9ydCArIDEsIDAsIChsYXN0
X3BvcnQgLSBwb3J0KSAqIHNpemVvZigqcG9ydCkpOwogCQlleGVjbGlzdHNfc3VibWl0X3BvcnRz
KGVuZ2luZSk7CisKKwkJc2V0X3ByZWVtcHRfdGltZW91dChlbmdpbmUpOwogCX0gZWxzZSB7CiBz
a2lwX3N1Ym1pdDoKIAkJcmluZ19zZXRfcGF1c2VkKGVuZ2luZSwgMCk7CkBAIC0yMDI2LDYgKzIw
NjUsNDMgQEAgc3RhdGljIHZvaWQgX19leGVjbGlzdHNfc3VibWlzc2lvbl90YXNrbGV0KHN0cnVj
dCBpbnRlbF9lbmdpbmVfY3MgKmNvbnN0IGVuZ2luZSkKIAl9CiB9CiAKK3N0YXRpYyBub2lubGlu
ZSB2b2lkIHByZWVtcHRfcmVzZXQoc3RydWN0IGludGVsX2VuZ2luZV9jcyAqZW5naW5lKQorewor
CWNvbnN0IHVuc2lnbmVkIGludCBiaXQgPSBJOTE1X1JFU0VUX0VOR0lORSArIGVuZ2luZS0+aWQ7
CisJdW5zaWduZWQgbG9uZyAqbG9jayA9ICZlbmdpbmUtPmd0LT5yZXNldC5mbGFnczsKKworCWlm
IChpOTE1X21vZHBhcmFtcy5yZXNldCA8IDMpCisJCXJldHVybjsKKworCWlmICh0ZXN0X2FuZF9z
ZXRfYml0KGJpdCwgbG9jaykpCisJCXJldHVybjsKKworCS8qIE1hcmsgdGhpcyB0YXNrbGV0IGFz
IGRpc2FibGVkIHRvIGF2b2lkIHdhaXRpbmcgZm9yIGl0IHRvIGNvbXBsZXRlICovCisJdGFza2xl
dF9kaXNhYmxlX25vc3luYygmZW5naW5lLT5leGVjbGlzdHMudGFza2xldCk7CisKKwlHRU1fVFJB
Q0UoIiVzOiBwcmVlbXB0IHRpbWVvdXQgJWx1KyV1bXNcbiIsCisJCSAgZW5naW5lLT5uYW1lLAor
CQkgIGVuZ2luZS0+cHJvcHMucHJlZW1wdF90aW1lb3V0X21zLAorCQkgIGppZmZpZXNfdG9fbXNl
Y3MoamlmZmllcyAtIGVuZ2luZS0+ZXhlY2xpc3RzLnByZWVtcHQuZXhwaXJlcykpOworCWludGVs
X2VuZ2luZV9yZXNldChlbmdpbmUsICJwcmVlbXB0aW9uIHRpbWUgb3V0Iik7CisKKwl0YXNrbGV0
X2VuYWJsZSgmZW5naW5lLT5leGVjbGlzdHMudGFza2xldCk7CisJY2xlYXJfYW5kX3dha2VfdXBf
Yml0KGJpdCwgbG9jayk7Cit9CisKK3N0YXRpYyBib29sIHByZWVtcHRfdGltZW91dChjb25zdCBz
dHJ1Y3QgaW50ZWxfZW5naW5lX2NzICpjb25zdCBlbmdpbmUpCit7CisJY29uc3Qgc3RydWN0IHRp
bWVyX2xpc3QgKnQgPSAmZW5naW5lLT5leGVjbGlzdHMucHJlZW1wdDsKKworCWlmICghQ09ORklH
X0RSTV9JOTE1X1BSRUVNUFRfVElNRU9VVCkKKwkJcmV0dXJuIGZhbHNlOworCisJaWYgKCF0aW1l
cl9leHBpcmVkKHQpKQorCQlyZXR1cm4gZmFsc2U7CisKKwlyZXR1cm4gUkVBRF9PTkNFKGVuZ2lu
ZS0+ZXhlY2xpc3RzLnBlbmRpbmdbMF0pOworfQorCiAvKgogICogQ2hlY2sgdGhlIHVucmVhZCBD
b250ZXh0IFN0YXR1cyBCdWZmZXJzIGFuZCBtYW5hZ2UgdGhlIHN1Ym1pc3Npb24gb2YgbmV3CiAg
KiBjb250ZXh0cyB0byB0aGUgRUxTUCBhY2NvcmRpbmdseS4KQEAgLTIwMzMsMjMgKzIxMDksMzkg
QEAgc3RhdGljIHZvaWQgX19leGVjbGlzdHNfc3VibWlzc2lvbl90YXNrbGV0KHN0cnVjdCBpbnRl
bF9lbmdpbmVfY3MgKmNvbnN0IGVuZ2luZSkKIHN0YXRpYyB2b2lkIGV4ZWNsaXN0c19zdWJtaXNz
aW9uX3Rhc2tsZXQodW5zaWduZWQgbG9uZyBkYXRhKQogewogCXN0cnVjdCBpbnRlbF9lbmdpbmVf
Y3MgKiBjb25zdCBlbmdpbmUgPSAoc3RydWN0IGludGVsX2VuZ2luZV9jcyAqKWRhdGE7Ci0JdW5z
aWduZWQgbG9uZyBmbGFnczsKKwlib29sIHRpbWVvdXQgPSBwcmVlbXB0X3RpbWVvdXQoZW5naW5l
KTsKIAogCXByb2Nlc3NfY3NiKGVuZ2luZSk7Ci0JaWYgKCFSRUFEX09OQ0UoZW5naW5lLT5leGVj
bGlzdHMucGVuZGluZ1swXSkpIHsKKwlpZiAoIVJFQURfT05DRShlbmdpbmUtPmV4ZWNsaXN0cy5w
ZW5kaW5nWzBdKSB8fCB0aW1lb3V0KSB7CisJCXVuc2lnbmVkIGxvbmcgZmxhZ3M7CisKIAkJc3Bp
bl9sb2NrX2lycXNhdmUoJmVuZ2luZS0+YWN0aXZlLmxvY2ssIGZsYWdzKTsKIAkJX19leGVjbGlz
dHNfc3VibWlzc2lvbl90YXNrbGV0KGVuZ2luZSk7CiAJCXNwaW5fdW5sb2NrX2lycXJlc3RvcmUo
JmVuZ2luZS0+YWN0aXZlLmxvY2ssIGZsYWdzKTsKKworCQkvKiBSZWNoZWNrIGFmdGVyIHNlcmlh
bGlzaW5nIHdpdGggZGlyZWN0LXN1Ym1pc3Npb24gKi8KKwkJaWYgKHRpbWVvdXQgJiYgcHJlZW1w
dF90aW1lb3V0KGVuZ2luZSkpCisJCQlwcmVlbXB0X3Jlc2V0KGVuZ2luZSk7CiAJfQogfQogCi1z
dGF0aWMgdm9pZCBleGVjbGlzdHNfc3VibWlzc2lvbl90aW1lcihzdHJ1Y3QgdGltZXJfbGlzdCAq
dGltZXIpCitzdGF0aWMgdm9pZCBfX2V4ZWNsaXN0c19raWNrKHN0cnVjdCBpbnRlbF9lbmdpbmVf
ZXhlY2xpc3RzICpleGVjbGlzdHMpCiB7Ci0Jc3RydWN0IGludGVsX2VuZ2luZV9jcyAqZW5naW5l
ID0KLQkJZnJvbV90aW1lcihlbmdpbmUsIHRpbWVyLCBleGVjbGlzdHMudGltZXIpOwotCiAJLyog
S2ljayB0aGUgdGFza2xldCBmb3Igc29tZSBpbnRlcnJ1cHQgY29hbGVzY2luZyBhbmQgcmVzZXQg
aGFuZGxpbmcgKi8KLQl0YXNrbGV0X2hpX3NjaGVkdWxlKCZlbmdpbmUtPmV4ZWNsaXN0cy50YXNr
bGV0KTsKKwl0YXNrbGV0X2hpX3NjaGVkdWxlKCZleGVjbGlzdHMtPnRhc2tsZXQpOworfQorCisj
ZGVmaW5lIGV4ZWNsaXN0c19raWNrKHQsIG1lbWJlcikgXAorCV9fZXhlY2xpc3RzX2tpY2soY29u
dGFpbmVyX29mKHQsIHN0cnVjdCBpbnRlbF9lbmdpbmVfZXhlY2xpc3RzLCBtZW1iZXIpKQorCitz
dGF0aWMgdm9pZCBleGVjbGlzdHNfdGltZXNsaWNlKHN0cnVjdCB0aW1lcl9saXN0ICp0aW1lcikK
K3sKKwlleGVjbGlzdHNfa2ljayh0aW1lciwgdGltZXIpOworfQorCitzdGF0aWMgdm9pZCBleGVj
bGlzdHNfcHJlZW1wdChzdHJ1Y3QgdGltZXJfbGlzdCAqdGltZXIpCit7CisJZXhlY2xpc3RzX2tp
Y2sodGltZXIsIHByZWVtcHQpOwogfQogCiBzdGF0aWMgdm9pZCBxdWV1ZV9yZXF1ZXN0KHN0cnVj
dCBpbnRlbF9lbmdpbmVfY3MgKmVuZ2luZSwKQEAgLTM0OTgsNiArMzU5MCw3IEBAIGdlbjEyX2Vt
aXRfZmluaV9icmVhZGNydW1iX3JjcyhzdHJ1Y3QgaTkxNV9yZXF1ZXN0ICpyZXF1ZXN0LCB1MzIg
KmNzKQogc3RhdGljIHZvaWQgZXhlY2xpc3RzX3Bhcmsoc3RydWN0IGludGVsX2VuZ2luZV9jcyAq
ZW5naW5lKQogewogCWNhbmNlbF90aW1lcigmZW5naW5lLT5leGVjbGlzdHMudGltZXIpOworCWNh
bmNlbF90aW1lcigmZW5naW5lLT5leGVjbGlzdHMucHJlZW1wdCk7CiB9CiAKIHZvaWQgaW50ZWxf
ZXhlY2xpc3RzX3NldF9kZWZhdWx0X3N1Ym1pc3Npb24oc3RydWN0IGludGVsX2VuZ2luZV9jcyAq
ZW5naW5lKQpAQCAtMzYxNSw3ICszNzA4LDggQEAgaW50IGludGVsX2V4ZWNsaXN0c19zdWJtaXNz
aW9uX3NldHVwKHN0cnVjdCBpbnRlbF9lbmdpbmVfY3MgKmVuZ2luZSkKIHsKIAl0YXNrbGV0X2lu
aXQoJmVuZ2luZS0+ZXhlY2xpc3RzLnRhc2tsZXQsCiAJCSAgICAgZXhlY2xpc3RzX3N1Ym1pc3Np
b25fdGFza2xldCwgKHVuc2lnbmVkIGxvbmcpZW5naW5lKTsKLQl0aW1lcl9zZXR1cCgmZW5naW5l
LT5leGVjbGlzdHMudGltZXIsIGV4ZWNsaXN0c19zdWJtaXNzaW9uX3RpbWVyLCAwKTsKKwl0aW1l
cl9zZXR1cCgmZW5naW5lLT5leGVjbGlzdHMudGltZXIsIGV4ZWNsaXN0c190aW1lc2xpY2UsIDAp
OworCXRpbWVyX3NldHVwKCZlbmdpbmUtPmV4ZWNsaXN0cy5wcmVlbXB0LCBleGVjbGlzdHNfcHJl
ZW1wdCwgMCk7CiAKIAlsb2dpY2FsX3JpbmdfZGVmYXVsdF92ZnVuY3MoZW5naW5lKTsKIAlsb2dp
Y2FsX3JpbmdfZGVmYXVsdF9pcnFzKGVuZ2luZSk7CmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9k
cm0vaTkxNS9ndC9zZWxmdGVzdF9scmMuYyBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2d0L3NlbGZ0
ZXN0X2xyYy5jCmluZGV4IDM0YmU4YWY2NGU1NC4uMzMyNTdiNWYwNTU1IDEwMDY0NAotLS0gYS9k
cml2ZXJzL2dwdS9kcm0vaTkxNS9ndC9zZWxmdGVzdF9scmMuYworKysgYi9kcml2ZXJzL2dwdS9k
cm0vaTkxNS9ndC9zZWxmdGVzdF9scmMuYwpAQCAtMTcwNiw2ICsxNzA2LDEwNSBAQCBzdGF0aWMg
aW50IGxpdmVfcHJlZW1wdF9oYW5nKHZvaWQgKmFyZykKIAlyZXR1cm4gZXJyOwogfQogCitzdGF0
aWMgaW50IGxpdmVfcHJlZW1wdF90aW1lb3V0KHZvaWQgKmFyZykKK3sKKwlzdHJ1Y3QgaW50ZWxf
Z3QgKmd0ID0gYXJnOworCXN0cnVjdCBpOTE1X2dlbV9jb250ZXh0ICpjdHhfaGksICpjdHhfbG87
CisJc3RydWN0IGlndF9zcGlubmVyIHNwaW5fbG87CisJc3RydWN0IGludGVsX2VuZ2luZV9jcyAq
ZW5naW5lOworCWVudW0gaW50ZWxfZW5naW5lX2lkIGlkOworCWludCBlcnIgPSAtRU5PTUVNOwor
CisJLyoKKwkgKiBDaGVjayB0aGF0IHdlIGZvcmNlIHByZWVtcHRpb24gdG8gb2NjdXIgYnkgY2Fu
Y2VsbGluZyB0aGUgcHJldmlvdXMKKwkgKiBjb250ZXh0IGlmIGl0IHJlZnVzZXMgdG8geWllbGQg
dGhlIEdQVS4KKwkgKi8KKwlpZiAoIUNPTkZJR19EUk1fSTkxNV9QUkVFTVBUX1RJTUVPVVQpCisJ
CXJldHVybiAwOworCisJaWYgKCFIQVNfTE9HSUNBTF9SSU5HX1BSRUVNUFRJT04oZ3QtPmk5MTUp
KQorCQlyZXR1cm4gMDsKKworCWlmICghaW50ZWxfaGFzX3Jlc2V0X2VuZ2luZShndCkpCisJCXJl
dHVybiAwOworCisJaWYgKGlndF9zcGlubmVyX2luaXQoJnNwaW5fbG8sIGd0KSkKKwkJcmV0dXJu
IC1FTk9NRU07CisKKwljdHhfaGkgPSBrZXJuZWxfY29udGV4dChndC0+aTkxNSk7CisJaWYgKCFj
dHhfaGkpCisJCWdvdG8gZXJyX3NwaW5fbG87CisJY3R4X2hpLT5zY2hlZC5wcmlvcml0eSA9CisJ
CUk5MTVfVVNFUl9QUklPUklUWShJOTE1X0NPTlRFWFRfTUFYX1VTRVJfUFJJT1JJVFkpOworCisJ
Y3R4X2xvID0ga2VybmVsX2NvbnRleHQoZ3QtPmk5MTUpOworCWlmICghY3R4X2xvKQorCQlnb3Rv
IGVycl9jdHhfaGk7CisJY3R4X2xvLT5zY2hlZC5wcmlvcml0eSA9CisJCUk5MTVfVVNFUl9QUklP
UklUWShJOTE1X0NPTlRFWFRfTUlOX1VTRVJfUFJJT1JJVFkpOworCisJZm9yX2VhY2hfZW5naW5l
KGVuZ2luZSwgZ3QsIGlkKSB7CisJCXVuc2lnbmVkIGxvbmcgc2F2ZWRfdGltZW91dDsKKwkJc3Ry
dWN0IGk5MTVfcmVxdWVzdCAqcnE7CisKKwkJaWYgKCFpbnRlbF9lbmdpbmVfaGFzX3ByZWVtcHRp
b24oZW5naW5lKSkKKwkJCWNvbnRpbnVlOworCisJCXJxID0gc3Bpbm5lcl9jcmVhdGVfcmVxdWVz
dCgmc3Bpbl9sbywgY3R4X2xvLCBlbmdpbmUsCisJCQkJCSAgICBNSV9OT09QKTsgLyogcHJlZW1w
dGlvbiBkaXNhYmxlZCAqLworCQlpZiAoSVNfRVJSKHJxKSkgeworCQkJZXJyID0gUFRSX0VSUihy
cSk7CisJCQlnb3RvIGVycl9jdHhfbG87CisJCX0KKworCQlpOTE1X3JlcXVlc3RfYWRkKHJxKTsK
KwkJaWYgKCFpZ3Rfd2FpdF9mb3Jfc3Bpbm5lcigmc3Bpbl9sbywgcnEpKSB7CisJCQlpbnRlbF9n
dF9zZXRfd2VkZ2VkKGd0KTsKKwkJCWVyciA9IC1FSU87CisJCQlnb3RvIGVycl9jdHhfbG87CisJ
CX0KKworCQlycSA9IGlndF9yZXF1ZXN0X2FsbG9jKGN0eF9oaSwgZW5naW5lKTsKKwkJaWYgKElT
X0VSUihycSkpIHsKKwkJCWlndF9zcGlubmVyX2VuZCgmc3Bpbl9sbyk7CisJCQllcnIgPSBQVFJf
RVJSKHJxKTsKKwkJCWdvdG8gZXJyX2N0eF9sbzsKKwkJfQorCisJCS8qIEZsdXNoIHRoZSBwcmV2
aW91cyBDUyBhY2sgYmVmb3JlIGNoYW5naW5nIHRpbWVvdXRzICovCisJCXdoaWxlIChSRUFEX09O
Q0UoZW5naW5lLT5leGVjbGlzdHMucGVuZGluZ1swXSkpCisJCQljcHVfcmVsYXgoKTsKKworCQlz
YXZlZF90aW1lb3V0ID0gZW5naW5lLT5wcm9wcy5wcmVlbXB0X3RpbWVvdXRfbXM7CisJCWVuZ2lu
ZS0+cHJvcHMucHJlZW1wdF90aW1lb3V0X21zID0gMTsgLyogaW4gbXMsIC0+IDEgamlmZmllICov
CisKKwkJaTkxNV9yZXF1ZXN0X2dldChycSk7CisJCWk5MTVfcmVxdWVzdF9hZGQocnEpOworCisJ
CWludGVsX2VuZ2luZV9mbHVzaF9zdWJtaXNzaW9uKGVuZ2luZSk7CisJCWVuZ2luZS0+cHJvcHMu
cHJlZW1wdF90aW1lb3V0X21zID0gc2F2ZWRfdGltZW91dDsKKworCQlpZiAoaTkxNV9yZXF1ZXN0
X3dhaXQocnEsIDAsIEhaIC8gMTApIDwgMCkgeworCQkJaW50ZWxfZ3Rfc2V0X3dlZGdlZChndCk7
CisJCQlpOTE1X3JlcXVlc3RfcHV0KHJxKTsKKwkJCWVyciA9IC1FVElNRTsKKwkJCWdvdG8gZXJy
X2N0eF9sbzsKKwkJfQorCisJCWlndF9zcGlubmVyX2VuZCgmc3Bpbl9sbyk7CisJCWk5MTVfcmVx
dWVzdF9wdXQocnEpOworCX0KKworCWVyciA9IDA7CitlcnJfY3R4X2xvOgorCWtlcm5lbF9jb250
ZXh0X2Nsb3NlKGN0eF9sbyk7CitlcnJfY3R4X2hpOgorCWtlcm5lbF9jb250ZXh0X2Nsb3NlKGN0
eF9oaSk7CitlcnJfc3Bpbl9sbzoKKwlpZ3Rfc3Bpbm5lcl9maW5pKCZzcGluX2xvKTsKKwlyZXR1
cm4gZXJyOworfQorCiBzdGF0aWMgaW50IHJhbmRvbV9yYW5nZShzdHJ1Y3Qgcm5kX3N0YXRlICpy
bmQsIGludCBtaW4sIGludCBtYXgpCiB7CiAJcmV0dXJuIGk5MTVfcHJhbmRvbV91MzJfbWF4X3N0
YXRlKG1heCAtIG1pbiwgcm5kKSArIG1pbjsKQEAgLTI2MDcsNiArMjcwNiw3IEBAIGludCBpbnRl
bF9leGVjbGlzdHNfbGl2ZV9zZWxmdGVzdHMoc3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmk5MTUp
CiAJCVNVQlRFU1QobGl2ZV9zdXBwcmVzc193YWl0X3ByZWVtcHQpLAogCQlTVUJURVNUKGxpdmVf
Y2hhaW5fcHJlZW1wdCksCiAJCVNVQlRFU1QobGl2ZV9wcmVlbXB0X2hhbmcpLAorCQlTVUJURVNU
KGxpdmVfcHJlZW1wdF90aW1lb3V0KSwKIAkJU1VCVEVTVChsaXZlX3ByZWVtcHRfc21va2UpLAog
CQlTVUJURVNUKGxpdmVfdmlydHVhbF9lbmdpbmUpLAogCQlTVUJURVNUKGxpdmVfdmlydHVhbF9t
YXNrKSwKZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2k5MTVfcGFyYW1zLmggYi9k
cml2ZXJzL2dwdS9kcm0vaTkxNS9pOTE1X3BhcmFtcy5oCmluZGV4IGQyOWFkZTNiN2RlNi4uNTYw
NTg5NzhiYjI3IDEwMDY0NAotLS0gYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9pOTE1X3BhcmFtcy5o
CisrKyBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2k5MTVfcGFyYW1zLmgKQEAgLTYxLDcgKzYxLDcg
QEAgc3RydWN0IGRybV9wcmludGVyOwogCXBhcmFtKGNoYXIgKiwgZG1jX2Zpcm13YXJlX3BhdGgs
IE5VTEwpIFwKIAlwYXJhbShpbnQsIG1taW9fZGVidWcsIC1JU19FTkFCTEVEKENPTkZJR19EUk1f
STkxNV9ERUJVR19NTUlPKSkgXAogCXBhcmFtKGludCwgZWRwX3Zzd2luZywgMCkgXAotCXBhcmFt
KGludCwgcmVzZXQsIDIpIFwKKwlwYXJhbShpbnQsIHJlc2V0LCAzKSBcCiAJcGFyYW0odW5zaWdu
ZWQgaW50LCBpbmplY3RfbG9hZF9mYWlsdXJlLCAwKSBcCiAJcGFyYW0oaW50LCBmYXN0Ym9vdCwg
LTEpIFwKIAlwYXJhbShpbnQsIGVuYWJsZV9kcGNkX2JhY2tsaWdodCwgMCkgXAotLSAKMi4yMy4w
CgpfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpJbnRlbC1n
ZnggbWFpbGluZyBsaXN0CkludGVsLWdmeEBsaXN0cy5mcmVlZGVza3RvcC5vcmcKaHR0cHM6Ly9s
aXN0cy5mcmVlZGVza3RvcC5vcmcvbWFpbG1hbi9saXN0aW5mby9pbnRlbC1nZng=

Return-Path: <intel-gfx-bounces@lists.freedesktop.org>
X-Original-To: lists+intel-gfx@lfdr.de
Delivered-To: lists+intel-gfx@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [131.252.210.177])
	by mail.lfdr.de (Postfix) with ESMTPS id BAB7216880D
	for <lists+intel-gfx@lfdr.de>; Fri, 21 Feb 2020 21:04:32 +0100 (CET)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 500916F504;
	Fri, 21 Feb 2020 20:04:30 +0000 (UTC)
X-Original-To: intel-gfx@lists.freedesktop.org
Delivered-To: intel-gfx@lists.freedesktop.org
Received: from mga11.intel.com (mga11.intel.com [192.55.52.93])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 2BF306F503
 for <intel-gfx@lists.freedesktop.org>; Fri, 21 Feb 2020 20:04:29 +0000 (UTC)
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from orsmga003.jf.intel.com ([10.7.209.27])
 by fmsmga102.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384;
 21 Feb 2020 12:04:28 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.70,469,1574150400"; d="scan'208";a="236674845"
Received: from irsmsx153.ger.corp.intel.com ([163.33.192.75])
 by orsmga003.jf.intel.com with ESMTP; 21 Feb 2020 12:04:27 -0800
Received: from irsmsx602.ger.corp.intel.com (163.33.146.8) by
 IRSMSX153.ger.corp.intel.com (163.33.192.75) with Microsoft SMTP Server (TLS)
 id 14.3.439.0; Fri, 21 Feb 2020 20:04:26 +0000
Received: from irsmsx605.ger.corp.intel.com (163.33.146.138) by
 irsmsx602.ger.corp.intel.com (163.33.146.8) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.1.1713.5; Fri, 21 Feb 2020 20:04:26 +0000
Received: from irsmsx605.ger.corp.intel.com ([163.33.146.138]) by
 IRSMSX605.ger.corp.intel.com ([163.33.146.138]) with mapi id 15.01.1713.004;
 Fri, 21 Feb 2020 20:04:26 +0000
From: "Mun, Gwan-gyeong" <gwan-gyeong.mun@intel.com>
To: "intel-gfx@lists.freedesktop.org" <intel-gfx@lists.freedesktop.org>,
 "Souza, Jose" <jose.souza@intel.com>
Thread-Topic: [PATCH v4] drm/i915/psr: Force PSR probe only after full
 initialization
Thread-Index: AQHV6EOOv9bDEjvH3kmMCb1eEfxJu6gmE7OA
Date: Fri, 21 Feb 2020 20:04:26 +0000
Message-ID: <ad25b866fb1512bd2a104aae99a0759e88412ae9.camel@intel.com>
References: <20200220231523.55197-1-jose.souza@intel.com>
In-Reply-To: <20200220231523.55197-1-jose.souza@intel.com>
Accept-Language: en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-originating-ip: [10.237.66.160]
Content-ID: <EA53CC678BD1E441A218F3B7EBA5D15D@intel.com>
MIME-Version: 1.0
Subject: Re: [Intel-gfx] [PATCH v4] drm/i915/psr: Force PSR probe only after
 full initialization
X-BeenThere: intel-gfx@lists.freedesktop.org
X-Mailman-Version: 2.1.29
Precedence: list
List-Id: Intel graphics driver community testing & development
 <intel-gfx.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/intel-gfx>
List-Post: <mailto:intel-gfx@lists.freedesktop.org>
List-Help: <mailto:intel-gfx-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=subscribe>
Cc: "Nikula, Jani" <jani.nikula@intel.com>,
 "zwisler@google.com" <zwisler@google.com>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: intel-gfx-bounces@lists.freedesktop.org
Sender: "Intel-gfx" <intel-gfx-bounces@lists.freedesktop.org>

T24gVGh1LCAyMDIwLTAyLTIwIGF0IDE1OjE1IC0wODAwLCBKb3PDqSBSb2JlcnRvIGRlIFNvdXph
IHdyb3RlOg0KPiBDb21taXQgNjBjNmExNGI0ODliICgiZHJtL2k5MTUvZGlzcGxheTogRm9yY2Ug
dGhlIHN0YXRlIGNvbXB1dGUgcGhhc2UNCj4gb25jZSB0byBlbmFibGUgUFNSIikgd2FzIGZvcmNp
bmcgdGhlIHN0YXRlIGNvbXB1dGUgdG9vIGVhcmxpZXINCj4gY2F1c2luZyBlcnJvcnMgYmVjYXVz
ZSBub3QgZXZlcnl0aGluZyB3YXMgaW5pdGlhbGl6ZWQsIHNvIGhlcmUNCj4gbW92aW5nIHRvIHRo
ZSBlbmQgb2YgaTkxNV9kcml2ZXJfbW9kZXNldF9wcm9iZSgpIHdoZW4gdGhlIGRpc3BsYXkgaXMN
Cj4gYWxsIGluaXRpYWxpemVkLg0KPiANCj4gQWxzbyBmaXhpbmcgdGhlIHBsYWNlIHdoZXJlIGl0
IGRpc2FybSB0aGUgZm9yY2UgcHJvYmUgYXMgZHVyaW5nIHRoZQ0KPiBhdG9taWMgY2hlY2sgcGhh
c2UgZXJyb3JzIGNvdWxkIGhhcHBlbiBsaWtlIHRoZSBvbmVzIGR1ZSBsb2NraW5nIGFuZA0KPiBp
dCB3b3VsZCBjYXVzZSBQU1IgdG8gbmV2ZXIgYmUgZW5hYmxlZCBpZiB0aGF0IGhhcHBlbnMuDQo+
IExlYXZpbmcgdGhlIGRpc2FybSB0byB0aGUgYXRvbWljIGNvbW1pdCBwaGFzZSwgaW50ZWxfcHNy
X2VuYWJsZSgpIG9yDQo+IGludGVsX3Bzcl91cGRhdGUoKSB3aWxsIGJlIGNhbGxlZCBldmVuIGlm
IHRoZSBjdXJyZW50IHN0YXRlIGRvIG5vdA0KPiBhbGxvdyBQU1IgdG8gYmUgZW5hYmxlZC4NCj4g
DQo+IHYyOiBDaGVjayBpZiBpbnRlbF9kcCBpcyBudWxsIGluIGludGVsX3Bzcl9mb3JjZV9tb2Rl
X2NoYW5nZWRfc2V0KCkNCj4gdjM6IENoZWNrIGludGVsX2RwIGJlZm9yZSBnZXQgZGV2X3ByaXYN
Cj4gdjQ6DQo+IC0gcmVuYW1lZCBpbnRlbF9wc3JfZm9yY2VfbW9kZV9jaGFuZ2VkX3NldCgpIHRv
DQo+IGludGVsX3Bzcl9zZXRfZm9yY2VfbW9kZV9jaGFuZ2VkKCkNCj4gLSByZW1vdmVkIHRoZSBz
ZXQgcGFyYW1ldGVyIGZyb20gaW50ZWxfcHNyX3NldF9mb3JjZV9tb2RlX2NoYW5nZWQoKQ0KPiAt
IG5vdCBjYWxsaW5nIGludGVsX3Bzcl9zZXRfZm9yY2VfbW9kZV9jaGFuZ2VkKCkgZnJvbQ0KPiBp
bnRlbF9wc3JfZW5hYmxlL3VwZGF0ZSgpLCBkaXJlY3RseSBzZXR0aW5nIGl0IGFmdGVyIHRoZSBz
YW1lIGNoZWNrcw0KPiB0aGF0IGludGVsX3Bzcl9zZXRfZm9yY2VfbW9kZV9jaGFuZ2VkKCkgZG9l
cw0KPiAtIG1vdmVkIGludGVsX3Bzcl9zZXRfZm9yY2VfbW9kZV9jaGFuZ2VkKCkgYXJtIGNhbGwg
dG8NCj4gaTkxNV9kcml2ZXJfbW9kZXNldF9wcm9iZSgpIGFzIGl0IGlzIGEgYmV0dGVyIGZvciBh
IFBTUiBjYWxsLCBhbGwgdGhlDQo+IGZ1bmN0aW9ucyBjYWxscyBoYXBwZW5pbmcgYmV0d2VlbiB0
aGUgb2xkIGFuZCB0aGUgbmV3IGZ1bmN0aW9uIGNhbGwNCj4gd2lsbCBjYXVzZSBpc3N1ZQ0KPiAN
Cj4gRml4ZXM6IDYwYzZhMTRiNDg5YiAoImRybS9pOTE1L2Rpc3BsYXk6IEZvcmNlIHRoZSBzdGF0
ZSBjb21wdXRlIHBoYXNlDQo+IG9uY2UgdG8gZW5hYmxlIFBTUiIpDQo+IENsb3NlczogaHR0cHM6
Ly9naXRsYWIuZnJlZWRlc2t0b3Aub3JnL2RybS9pbnRlbC9pc3N1ZXMvMTE1MQ0KPiBUZXN0ZWQt
Ynk6IFJvc3MgWndpc2xlciA8endpc2xlckBnb29nbGUuY29tPg0KPiBSZXBvcnRlZC1ieTogUm9z
cyBad2lzbGVyIDx6d2lzbGVyQGdvb2dsZS5jb20+DQo+IENjOiBHd2FuLWd5ZW9uZyBNdW4gPGd3
YW4tZ3llb25nLm11bkBpbnRlbC5jb20+DQo+IENjOiBKYW5pIE5pa3VsYSA8amFuaS5uaWt1bGFA
aW50ZWwuY29tPg0KPiBDYzogQW5zaHVtYW4gR3VwdGEgPGFuc2h1bWFuLmd1cHRhQGludGVsLmNv
bT4NCj4gU2lnbmVkLW9mZi1ieTogSm9zw6kgUm9iZXJ0byBkZSBTb3V6YSA8am9zZS5zb3V6YUBp
bnRlbC5jb20+DQo+IC0tLQ0KPiAgZHJpdmVycy9ncHUvZHJtL2k5MTUvZGlzcGxheS9pbnRlbF9w
c3IuYyB8IDI1ICsrKysrKysrKysrKysrKysrKysrDQo+IC0tLS0NCj4gIGRyaXZlcnMvZ3B1L2Ry
bS9pOTE1L2Rpc3BsYXkvaW50ZWxfcHNyLmggfCAgMSArDQo+ICBkcml2ZXJzL2dwdS9kcm0vaTkx
NS9pOTE1X2Rydi5jICAgICAgICAgIHwgIDMgKysrDQo+ICBkcml2ZXJzL2dwdS9kcm0vaTkxNS9p
OTE1X2Rydi5oICAgICAgICAgIHwgIDIgKy0NCj4gIDQgZmlsZXMgY2hhbmdlZCwgMjYgaW5zZXJ0
aW9ucygrKSwgNSBkZWxldGlvbnMoLSkNCj4gDQo+IGRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9k
cm0vaTkxNS9kaXNwbGF5L2ludGVsX3Bzci5jDQo+IGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvZGlz
cGxheS9pbnRlbF9wc3IuYw0KPiBpbmRleCBiNDk0MmI2NDQ1YWUuLjdlNzU0MjAxZjU0ZCAxMDA2
NDQNCj4gLS0tIGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvZGlzcGxheS9pbnRlbF9wc3IuYw0KPiAr
KysgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5L2ludGVsX3Bzci5jDQo+IEBAIC05MzYs
MTAgKzkzNiwxMiBAQCB2b2lkIGludGVsX3Bzcl9lbmFibGUoc3RydWN0IGludGVsX2RwDQo+ICpp
bnRlbF9kcCwNCj4gIHsNCj4gIAlzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0ZSAqZGV2X3ByaXYgPSBk
cF90b19pOTE1KGludGVsX2RwKTsNCj4gIA0KPiAtCWlmICghY3J0Y19zdGF0ZS0+aGFzX3BzcikN
CkVuYWJsaW5nIG9mIGNydGNfc3RhdGUtPmhhc19wc3IgaXMgaGFuZGxlZCBvbg0KaW50ZWxfcHNy
X2NvbXB1dGVfY29uZmlnKCkuDQpBbmQgdGhlIGludGVsX3Bzcl9jb21wdXRlX2NvbmZpZygpIGNo
ZWNrcyAiQ0FOX1BTUihkZXZfcHJpdikgYW5kDQppbnRlbF9kcCAhPSBkZXZfcHJpdi0+cHNyLmRw
Ii4NCnRoZXJlZm9yZSBpZiB3ZSBoYXZlIHRoaXMgbGluZSAiaWYgKCFjcnRjX3N0YXRlLT5oYXNf
cHNyKSIsIHdlIGRvbid0DQpuZWVkIHRvIGFkZCAiaWYgKCFDQU5fUFNSKGRldl9wcml2KSB8fCBk
ZXZfcHJpdi0+cHNyLmRwICE9IGludGVsX2RwKSINCg0KRXhjZXB0IHRoYXQsIGxvb2tzIGdvb2Qg
dG8gbWUuDQoNClJldmlld2VkLWJ5OiBHd2FuLWd5ZW9uZyBNdW4gPGd3YW4tZ3llb25nLm11bkBp
bnRlbC5jb20+DQoNCj4gKwlpZiAoIUNBTl9QU1IoZGV2X3ByaXYpIHx8IGRldl9wcml2LT5wc3Iu
ZHAgIT0gaW50ZWxfZHApDQo+ICAJCXJldHVybjsNCj4gIA0KPiAtCWlmIChkcm1fV0FSTl9PTigm
ZGV2X3ByaXYtPmRybSwgIUNBTl9QU1IoZGV2X3ByaXYpKSkNCj4gKwlkZXZfcHJpdi0+cHNyLmZv
cmNlX21vZGVfY2hhbmdlZCA9IGZhbHNlOw0KPiArDQo+ICsJaWYgKCFjcnRjX3N0YXRlLT5oYXNf
cHNyKQ0KPiAgCQlyZXR1cm47DQo+ICANCj4gIAlkcm1fV0FSTl9PTigmZGV2X3ByaXYtPmRybSwg
ZGV2X3ByaXYtPmRycnMuZHApOw0KPiBAQCAtMTA5OSw2ICsxMTAxLDggQEAgdm9pZCBpbnRlbF9w
c3JfdXBkYXRlKHN0cnVjdCBpbnRlbF9kcA0KPiAqaW50ZWxfZHAsDQo+ICAJaWYgKCFDQU5fUFNS
KGRldl9wcml2KSB8fCBSRUFEX09OQ0UocHNyLT5kcCkgIT0gaW50ZWxfZHApDQo+ICAJCXJldHVy
bjsNCj4gIA0KPiArCWRldl9wcml2LT5wc3IuZm9yY2VfbW9kZV9jaGFuZ2VkID0gZmFsc2U7DQo+
ICsNCj4gIAltdXRleF9sb2NrKCZkZXZfcHJpdi0+cHNyLmxvY2spOw0KPiAgDQo+ICAJZW5hYmxl
ID0gY3J0Y19zdGF0ZS0+aGFzX3BzciAmJiBwc3JfZ2xvYmFsX2VuYWJsZWQoZGV2X3ByaXYpOw0K
PiBAQCAtMTYyOSw3ICsxNjMzLDcgQEAgdm9pZCBpbnRlbF9wc3JfYXRvbWljX2NoZWNrKHN0cnVj
dA0KPiBkcm1fY29ubmVjdG9yICpjb25uZWN0b3IsDQo+ICAJc3RydWN0IGRybV9jcnRjX3N0YXRl
ICpjcnRjX3N0YXRlOw0KPiAgDQo+ICAJaWYgKCFDQU5fUFNSKGRldl9wcml2KSB8fCAhbmV3X3N0
YXRlLT5jcnRjIHx8DQo+IC0JICAgIGRldl9wcml2LT5wc3IuaW5pdGlhbGx5X3Byb2JlZCkNCj4g
KwkgICAgIWRldl9wcml2LT5wc3IuZm9yY2VfbW9kZV9jaGFuZ2VkKQ0KPiAgCQlyZXR1cm47DQo+
ICANCj4gIAlpbnRlbF9jb25uZWN0b3IgPSB0b19pbnRlbF9jb25uZWN0b3IoY29ubmVjdG9yKTsN
Cj4gQEAgLTE2NDAsNSArMTY0NCwxOCBAQCB2b2lkIGludGVsX3Bzcl9hdG9taWNfY2hlY2soc3Ry
dWN0DQo+IGRybV9jb25uZWN0b3IgKmNvbm5lY3RvciwNCj4gIAljcnRjX3N0YXRlID0gZHJtX2F0
b21pY19nZXRfbmV3X2NydGNfc3RhdGUobmV3X3N0YXRlLT5zdGF0ZSwNCj4gIAkJCQkJCSAgIG5l
d19zdGF0ZS0+Y3J0Yyk7DQo+ICAJY3J0Y19zdGF0ZS0+bW9kZV9jaGFuZ2VkID0gdHJ1ZTsNCj4g
LQlkZXZfcHJpdi0+cHNyLmluaXRpYWxseV9wcm9iZWQgPSB0cnVlOw0KPiArfQ0KPiArDQo+ICt2
b2lkIGludGVsX3Bzcl9zZXRfZm9yY2VfbW9kZV9jaGFuZ2VkKHN0cnVjdCBpbnRlbF9kcCAqaW50
ZWxfZHApDQo+ICt7DQo+ICsJc3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmRldl9wcml2Ow0KPiAr
DQo+ICsJaWYgKCFpbnRlbF9kcCkNCj4gKwkJcmV0dXJuOw0KPiArDQo+ICsJZGV2X3ByaXYgPSBk
cF90b19pOTE1KGludGVsX2RwKTsNCj4gKwlpZiAoIUNBTl9QU1IoZGV2X3ByaXYpIHx8IGludGVs
X2RwICE9IGRldl9wcml2LT5wc3IuZHApDQo+ICsJCXJldHVybjsNCj4gKw0KPiArCWRldl9wcml2
LT5wc3IuZm9yY2VfbW9kZV9jaGFuZ2VkID0gdHJ1ZTsNCj4gIH0NCj4gZGlmZiAtLWdpdCBhL2Ry
aXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkvaW50ZWxfcHNyLmgNCj4gYi9kcml2ZXJzL2dwdS9k
cm0vaTkxNS9kaXNwbGF5L2ludGVsX3Bzci5oDQo+IGluZGV4IGM1OGExZDQzODgwOC4uMjc0ZmM2
YmI2MjIxIDEwMDY0NA0KPiAtLS0gYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5L2ludGVs
X3Bzci5oDQo+ICsrKyBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkvaW50ZWxfcHNyLmgN
Cj4gQEAgLTQwLDUgKzQwLDYgQEAgYm9vbCBpbnRlbF9wc3JfZW5hYmxlZChzdHJ1Y3QgaW50ZWxf
ZHAgKmludGVsX2RwKTsNCj4gIHZvaWQgaW50ZWxfcHNyX2F0b21pY19jaGVjayhzdHJ1Y3QgZHJt
X2Nvbm5lY3RvciAqY29ubmVjdG9yLA0KPiAgCQkJICAgIHN0cnVjdCBkcm1fY29ubmVjdG9yX3N0
YXRlICpvbGRfc3RhdGUsDQo+ICAJCQkgICAgc3RydWN0IGRybV9jb25uZWN0b3Jfc3RhdGUgKm5l
d19zdGF0ZSk7DQo+ICt2b2lkIGludGVsX3Bzcl9zZXRfZm9yY2VfbW9kZV9jaGFuZ2VkKHN0cnVj
dCBpbnRlbF9kcCAqaW50ZWxfZHApOw0KPiAgDQo+ICAjZW5kaWYgLyogX19JTlRFTF9QU1JfSF9f
ICovDQo+IGRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9pOTE1X2Rydi5jDQo+IGIv
ZHJpdmVycy9ncHUvZHJtL2k5MTUvaTkxNV9kcnYuYw0KPiBpbmRleCA3NTlkMzMzNDQ4ZTEuLjA2
NjkzNDMyNzM0NSAxMDA2NDQNCj4gLS0tIGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvaTkxNV9kcnYu
Yw0KPiArKysgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9pOTE1X2Rydi5jDQo+IEBAIC01OCw2ICs1
OCw3IEBADQo+ICAjaW5jbHVkZSAiZGlzcGxheS9pbnRlbF9ob3RwbHVnLmgiDQo+ICAjaW5jbHVk
ZSAiZGlzcGxheS9pbnRlbF9vdmVybGF5LmgiDQo+ICAjaW5jbHVkZSAiZGlzcGxheS9pbnRlbF9w
aXBlX2NyYy5oIg0KPiArI2luY2x1ZGUgImRpc3BsYXkvaW50ZWxfcHNyLmgiDQo+ICAjaW5jbHVk
ZSAiZGlzcGxheS9pbnRlbF9zcHJpdGUuaCINCj4gICNpbmNsdWRlICJkaXNwbGF5L2ludGVsX3Zn
YS5oIg0KPiAgDQo+IEBAIC0yNjQsNiArMjY1LDggQEAgc3RhdGljIGludCBpOTE1X2RyaXZlcl9t
b2Rlc2V0X3Byb2JlKHN0cnVjdA0KPiBkcm1faTkxNV9wcml2YXRlICppOTE1KQ0KPiAgDQo+ICAJ
aW50ZWxfaW5pdF9pcGMoaTkxNSk7DQo+ICANCj4gKwlpbnRlbF9wc3Jfc2V0X2ZvcmNlX21vZGVf
Y2hhbmdlZChpOTE1LT5wc3IuZHApOw0KPiArDQo+ICAJcmV0dXJuIDA7DQo+ICANCj4gIGNsZWFu
dXBfZ2VtOg0KPiBkaWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvaTkxNV9kcnYuaA0K
PiBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2k5MTVfZHJ2LmgNCj4gaW5kZXggNDMwNWNjYzRjNjgz
Li4yYjc0MWIzNTJjZTAgMTAwNjQ0DQo+IC0tLSBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2k5MTVf
ZHJ2LmgNCj4gKysrIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvaTkxNV9kcnYuaA0KPiBAQCAtNTA1
LDcgKzUwNSw3IEBAIHN0cnVjdCBpOTE1X3BzciB7DQo+ICAJYm9vbCBkYzNjb19lbmFibGVkOw0K
PiAgCXUzMiBkYzNjb19leGl0X2RlbGF5Ow0KPiAgCXN0cnVjdCBkZWxheWVkX3dvcmsgZGMzY29f
d29yazsNCj4gLQlib29sIGluaXRpYWxseV9wcm9iZWQ7DQo+ICsJYm9vbCBmb3JjZV9tb2RlX2No
YW5nZWQ7DQo+ICB9Ow0KPiAgDQo+ICAjZGVmaW5lIFFVSVJLX0xWRFNfU1NDX0RJU0FCTEUgKDE8
PDEpDQpfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpJbnRl
bC1nZnggbWFpbGluZyBsaXN0CkludGVsLWdmeEBsaXN0cy5mcmVlZGVza3RvcC5vcmcKaHR0cHM6
Ly9saXN0cy5mcmVlZGVza3RvcC5vcmcvbWFpbG1hbi9saXN0aW5mby9pbnRlbC1nZngK

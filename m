Return-Path: <intel-gfx-bounces@lists.freedesktop.org>
X-Original-To: lists+intel-gfx@lfdr.de
Delivered-To: lists+intel-gfx@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [131.252.210.177])
	by mail.lfdr.de (Postfix) with ESMTPS id 2A36D17E473
	for <lists+intel-gfx@lfdr.de>; Mon,  9 Mar 2020 17:16:25 +0100 (CET)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 9408F899D4;
	Mon,  9 Mar 2020 16:16:22 +0000 (UTC)
X-Original-To: intel-gfx@lists.freedesktop.org
Delivered-To: intel-gfx@lists.freedesktop.org
Received: from mga02.intel.com (mga02.intel.com [134.134.136.20])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 06DBC899A3
 for <intel-gfx@lists.freedesktop.org>; Mon,  9 Mar 2020 16:16:20 +0000 (UTC)
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from fmsmga007.fm.intel.com ([10.253.24.52])
 by orsmga101.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384;
 09 Mar 2020 09:16:20 -0700
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.70,533,1574150400"; d="scan'208";a="234049315"
Received: from unknown (HELO slisovsk-Lenovo-ideapad-720S-13IKB.fi.intel.com)
 ([10.237.72.89])
 by fmsmga007.fm.intel.com with ESMTP; 09 Mar 2020 09:16:18 -0700
From: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
To: intel-gfx@lists.freedesktop.org
Date: Mon,  9 Mar 2020 18:12:03 +0200
Message-Id: <20200309161204.17792-8-stanislav.lisovskiy@intel.com>
X-Mailer: git-send-email 2.24.1.485.gad05a3d8e5
In-Reply-To: <20200309161204.17792-1-stanislav.lisovskiy@intel.com>
References: <20200309161204.17792-1-stanislav.lisovskiy@intel.com>
MIME-Version: 1.0
Subject: [Intel-gfx] [PATCH v19 7/8] drm/i915: Restrict qgv points which
 don't have enough bandwidth.
X-BeenThere: intel-gfx@lists.freedesktop.org
X-Mailman-Version: 2.1.29
Precedence: list
List-Id: Intel graphics driver community testing & development
 <intel-gfx.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/intel-gfx>
List-Post: <mailto:intel-gfx@lists.freedesktop.org>
List-Help: <mailto:intel-gfx-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: intel-gfx-bounces@lists.freedesktop.org
Sender: "Intel-gfx" <intel-gfx-bounces@lists.freedesktop.org>

QWNjb3JkaW5nIHRvIEJTcGVjIDUzOTk4LCB3ZSBzaG91bGQgdHJ5IHRvCnJlc3RyaWN0IHFndiBw
b2ludHMsIHdoaWNoIGNhbid0IHByb3ZpZGUKZW5vdWdoIGJhbmR3aWR0aCBmb3IgZGVzaXJlZCBk
aXNwbGF5IGNvbmZpZ3VyYXRpb24uCgpDdXJyZW50bHkgd2UgYXJlIGp1c3QgY29tcGFyaW5nIGFn
YWluc3QgYWxsIG9mCnRob3NlIGFuZCB0YWtlIG1pbmltdW0od29yc3QgY2FzZSkuCgp2MjogRml4
ZWQgd3JvbmcgUENvZGUgcmVwbHkgbWFzaywgcmVtb3ZlZCBoYXJkY29kZWQKICAgIHZhbHVlcy4K
CnYzOiBGb3JiaWQgc2ltdWx0YW5lb3VzIGxlZ2FjeSBTQUdWIFBDb2RlIHJlcXVlc3RzIGFuZAog
ICAgcmVzdHJpY3RpbmcgcWd2IHBvaW50cy4gUHV0IHRoZSBhY3R1YWwgcmVzdHJpY3Rpb24KICAg
IHRvIGNvbW1pdCBmdW5jdGlvbiwgYWRkZWQgc2VyaWFsaXphdGlvbih0aGFua3MgdG8gVmlsbGUp
CiAgICB0byBwcmV2ZW50IGNvbW1pdCBiZWluZyBhcHBsaWVkIG91dCBvZiBvcmRlciBpbiBjYXNl
IG9mCiAgICBub25ibG9ja2luZyBhbmQvb3Igbm9tb2Rlc2V0IGNvbW1pdHMuCgp2NDoKICAgIC0g
TWlub3IgY29kZSByZWZhY3RvcmluZywgZml4ZWQgZmV3IHR5cG9zKHRoYW5rcyB0byBKYW1lcyBB
dXNtdXMpCiAgICAtIENoYW5nZSB0aGUgbmFtaW5nIG9mIHFndiBwb2ludAogICAgICBtYXNraW5n
L3VubWFza2luZyBmdW5jdGlvbnMoSmFtZXMgQXVzbXVzKS4KICAgIC0gU2ltcGxpZnkgdGhlIG1h
c2tpbmcvdW5tYXNraW5nIG9wZXJhdGlvbiBpdHNlbGYsCiAgICAgIGFzIHdlIGRvbid0IG5lZWQg
dG8gbWFzayBvbmx5IHNpbmdsZSBwb2ludCBwZXIgcmVxdWVzdChKYW1lcyBBdXNtdXMpCiAgICAt
IFJlamVjdCBhbmQgc3RpY2sgdG8gaGlnaGVzdCBiYW5kd2lkdGggcG9pbnQgaWYgU0FHVgogICAg
ICBjYW4ndCBiZSBlbmFibGVkKEJTcGVjKQoKdjU6CiAgICAtIEFkZCBuZXcgbWFpbGJveCByZXBs
eSBjb2Rlcywgd2hpY2ggc2VlbXMgdG8gaGFwcGVuIGR1cmluZyBib290CiAgICAgIHRpbWUgZm9y
IFRHTCBhbmQgaW5kaWNhdGUgdGhhdCBRR1Ygc2V0dGluZyBpcyBub3QgeWV0IGF2YWlsYWJsZS4K
CnY2OgogICAgLSBJbmNyZWFzZSBudW1iZXIgb2Ygc3VwcG9ydGVkIFFHViBwb2ludHMgdG8gYmUg
aW4gc3luYyB3aXRoIEJTcGVjLgoKdjc6IC0gUmViYXNlZCBhbmQgcmVzb2x2ZWQgY29uZmxpY3Qg
dG8gZml4IGJ1aWxkIGZhaWx1cmUuCiAgICAtIEZpeCBOVU1fUUdWX1BPSU5UUyB0byA4IGFuZCBt
b3ZlZCB0aGF0IHRvIGhlYWRlciBmaWxlKEphbWVzIEF1c211cykKCnY4OiAtIERvbid0IHJlcG9y
dCBhbiBlcnJvciBpZiB3ZSBjYW4ndCByZXN0cmljdCBxZ3YgcG9pbnRzLCBhcyBTQUdWCiAgICAg
IGNhbiBiZSBkaXNhYmxlZCBieSBCSU9TLCB3aGljaCBpcyBjb21wbGV0ZWx5IGxlZ2FsLiBTbyBk
b24ndAogICAgICBtYWtlIENJIHBhbmljLiBJbnN0ZWFkIGlmIHdlIGRldGVjdCB0aGF0IHRoZXJl
IGlzIG9ubHkgMSBRR1YKICAgICAgcG9pbnQgYWNjZXNzaWJsZSBqdXN0IGFuYWx5emUgaWYgd2Ug
Y2FuIGZpdCB0aGUgcmVxdWlyZWQgYmFuZHdpZHRoCiAgICAgIHJlcXVpcmVtZW50cywgYnV0IG5v
IG5lZWQgaW4gcmVzdHJpY3RpbmcuCgp2OTogLSBGaXggd3JvbmcgUUdWIHRyYW5zaXRpb24gaWYg
d2UgaGF2ZSAwIHBsYW5lcyBhbmQgbm8gU0FHVgogICAgICBzaW11bHRhbmVvdXNseS4KCnYxMDog
LSBGaXggQ0RDTEsgY29ycnVwdGlvbiwgYmVjYXVzZSBvZiBnbG9iYWwgc3RhdGUgZ2V0dGluZyBz
ZXJpYWxpemVkCiAgICAgICB3aXRob3V0IG1vZGVzZXQsIHdoaWNoIGNhdXNlZCBjb3B5aW5nIG9m
IG5vbi1jYWxjdWxhdGVkIGNkY2xrCiAgICAgICB0byBiZSBjb3BpZWQgdG8gZGV2X3ByaXYodGhh
bmtzIHRvIFZpbGxlIGZvciB0aGUgaGludCkuCgp2MTE6IC0gUmVtb3ZlIHVubmVlZGVkIGhlYWRl
cnMgYW5kIHNwYWNlcyhNYXR0aGV3IFJvcGVyKQogICAgIC0gUmVtb3ZlIHVubmVlZGVkIGludGVs
X3Fndl9pbmZvIHFpIHN0cnVjdCBmcm9tIGJ3IGNoZWNrIGFuZCB6ZXJvCiAgICAgICBvdXQgdGhl
IG5lZWRlZCBvbmUoTWF0dGhldyBSb3BlcikKICAgICAtIENoYW5nZWQgUUdWIGVycm9yIG1lc3Nh
Z2UgdG8gaGF2ZSBtb3JlIGNsZWFyIG1lYW5pbmcoTWF0dGhldyBSb3BlcikKICAgICAtIFVzZSBz
dGF0ZS0+bW9kZXNldF9zZXQgaW5zdGVhZCBvZiBhbnlfbXMoTWF0dGhldyBSb3BlcikKICAgICAt
IE1vdmVkIE5VTV9TQUdWX1BPSU5UUyBmcm9tIGk5MTVfcmVnLmggdG8gaTkxNV9kcnYuaCB3aGVy
ZSBpdCdzIHVzZWQKICAgICAtIEtlZXAgdXNpbmcgY3J0Y19zdGF0ZS0+aHcuYWN0aXZlIGluc3Rl
YWQgb2YgLmVuYWJsZShNYXR0aGV3IFJvcGVyKQogICAgIC0gTW92ZWQgdW5yZWxhdGVkIGNoYW5n
ZXMgdG8gb3RoZXIgcGF0Y2godXNpbmcgbGF0ZW5jeSBhcyBwYXJhbWV0ZXIKICAgICAgIGZvciBw
bGFuZSB3bSBjYWxjdWxhdGlvbiwgbW92ZWQgdG8gU0FHViByZWZhY3RvcmluZyBwYXRjaCkKCnYx
MjogLSBGaXggcmViYXNlIGNvbmZsaWN0IHdpdGggb3duIHRlbXBvcmFyeSBTQUdWL1FHViBmaXgu
CiAgICAgLSBSZW1vdmUgdW5uZWNlc3NhcnkgbWFzayBiZWluZyB6ZXJvIGNoZWNrIHdoZW4gdW5t
YXNraW5nCiAgICAgICBxZ3YgcG9pbnRzIGFzIHRoaXMgaXMgY29tcGxldGVseSBsZWdhbChNYXR0
IFJvcGVyKQogICAgIC0gQ2hlY2sgaWYgd2UgYXJlIHNldHRpbmcgdGhlIHNhbWUgbWFzayBhcyBh
bHJlYWR5IGJlaW5nIHNldAogICAgICAgaW4gaGFyZHdhcmUgdG8gcHJldmVudCBlcnJvciBmcm9t
IFBDb2RlLgogICAgIC0gRml4IGVycm9yIG1lc3NhZ2Ugd2hlbiByZXN0cmljdGluZy91bnJlc3Ry
aWN0aW5nIHFndiBwb2ludHMKICAgICAgIHRvICJtYXNrL3VubWFzayIgd2hpY2ggc291bmRzIG1v
cmUgYWNjdXJhdGUoTWF0dCBSb3BlcikKICAgICAtIE1vdmUgc2FndiBzdGF0dXMgc2V0dGluZyB0
byBpY2xfZ2V0X2J3X2luZm8gZnJvbSBhdG9taWMgY2hlY2sKICAgICAgIGFzIHRoaXMgc2hvdWxk
IGJlIGNhbGN1bGF0ZWQgb25seSBvbmNlLihNYXR0IFJvcGVyKQogICAgIC0gRWRpdGVkIGNvbW1l
bnRzIGZvciB0aGUgY2FzZSB3aGVuIHdlIGNhbid0IGVuYWJsZSBTQUdWIGFuZAogICAgICAgdXNl
IG9ubHkgMSBRR1YgcG9pbnQgd2l0aCBoaWdoZXN0IGJhbmR3aWR0aCB0byBiZSBtb3JlCiAgICAg
ICB1bmRlcnN0YW5kYWJsZS4oTWF0dCBSb3BlcikKCnYxMzogLSBNb3ZlZCBtYXhfZGF0YV9yYXRl
IGluIGJ3IGNoZWNrIHRvIGNsb3NlciBzY29wZShWaWxsZSBTeXJqw6Rsw6QpCiAgICAgLSBDaGFu
Z2VkIGNvbW1lbnQgZm9yIHplcm8gbmV3X21hc2sgaW4gcWd2IHBvaW50cyBtYXNraW5nIGZ1bmN0
aW9uCiAgICAgICB0byBiZXR0ZXIgcmVmbGVjdCByZWFsaXR5KFZpbGxlIFN5cmrDpGzDpCkKICAg
ICAtIFNpbXBsaWZpZWQgYml0IG1hc2sgb3BlcmF0aW9uIGluIHFndiBwb2ludHMgbWFza2luZyBm
dW5jdGlvbgogICAgICAgKFZpbGxlIFN5cmrDpGzDpCkKICAgICAtIE1vdmVkIGludGVsX3Fndl9w
b2ludHNfbWFzayBjbG9zZXIgdG8gZ2VuMTEgU0FHViBkaXNhYmxpbmcsCiAgICAgICBob3dldmVy
IHRoaXMgc3RpbGwgY2FuJ3QgYmUgdW5kZXIgbW9kZXNldCBjb25kaXRpb24oVmlsbGUgU3lyasOk
bMOkKQogICAgIC0gUGFja2VkIHFndl9wb2ludHNfbWFzayBhcyB1OCBhbmQgbW92ZWQgY2xvc2Vy
IHRvIHBpcGVfc2Fndl9tYXNrCiAgICAgICAoVmlsbGUgU3lyasOkbMOkKQogICAgIC0gRXh0cmFj
dGVkIFBDb2RlIGNoYW5nZXMgdG8gc2VwYXJhdGUgcGF0Y2guKFZpbGxlIFN5cmrDpGzDpCkKICAg
ICAtIE5vdyB0cmVhdCBudW1fcGxhbmVzIDAgc2FtZSBhcyAxIHRvIGF2b2lkIGNvbmZ1c2lvbiBh
bmQKICAgICAgIHJldHVybmluZyBtYXhfYncgYXMgMCwgd2hpY2ggd291bGQgcHJldmVudCBjaG9v
c2luZyBRR1YKICAgICAgIHBvaW50IGhhdmluZyBtYXggYmFuZHdpZHRoIGluIGNhc2UgaWYgU0FH
ViBpcyBub3QgYWxsb3dlZCwKICAgICAgIGFzIHBlciBCU3BlYyhWaWxsZSBTeXJqw6Rsw6QpCiAg
ICAgLSBEbyB0aGUgYWN0dWFsIHFndl9wb2ludHNfbWFzayBzd2FwIGluIHRoZSBzYW1lIHBsYWNl
IGFzCiAgICAgICBhbGwgb3RoZXIgZ2xvYmFsIHN0YXRlIHBhcnRzIGxpa2UgY2RjbGsgYXJlIHN3
YXBwZWQuCiAgICAgICBJbiB0aGUgbmV4dCBwYXRjaCwgdGhpcyBhbGwgd2lsbCBiZSBtb3ZlZCB0
byBidyBzdGF0ZSBhcwogICAgICAgZ2xvYmFsIHN0YXRlLCBvbmNlIG5ldyBnbG9iYWwgc3RhdGUg
cGF0Y2ggc2VyaWVzIGZyb20gVmlsbGUKICAgICAgIGxhbmRzCgp2MTQ6IC0gTm93IHVzaW5nIGds
b2JhbCBzdGF0ZSB0byBzZXJpYWxpemUgYWNjZXNzIHRvIHFndiBwb2ludHMKICAgICAtIEFkZGVk
IGdsb2JhbCBzdGF0ZSBsb2NraW5nIGJhY2ssIG90aGVyd2lzZSB3ZSBzZWVtIHRvIHJlYWQKICAg
ICAgIGJ3IHN0YXRlIGluIGEgd3Jvbmcgd2F5LgoKdjE1OiAtIEFkZGVkIFRPRE8gY29tbWVudCBm
b3IgbmVhciBhdG9taWMgZ2xvYmFsIHN0YXRlIGxvY2tpbmcgaW4KICAgICAgIGJ3IGNvZGUuCgp2
MTY6IC0gRml4ZWQgaW50ZWxfYXRvbWljX2J3XyogZnVuY3Rpb25zIHRvIGJlIGludGVsX2J3Xyog
YXMgZGlzY3Vzc2VkCiAgICAgICB3aXRoIEphbmkgTmlrdWxhLgogICAgIC0gVGFrZSBid19zdGF0
ZV9jaGFuZ2VkIGZsYWcgaW50byB1c2UuCgp2MTc6IC0gTW92ZWQgcWd2IHBvaW50IHJlbGF0ZWQg
bWFuaXB1bGF0aW9ucyBuZXh0IHRvIFNBR1YgY29kZSwgYXMKICAgICAgIHRob3NlIGFyZSBzZW1h
bnRpY2FsbHkgcmVsYXRlZChWaWxsZSBTeXJqw6Rsw6QpCiAgICAgLSBSZW5hbWVkIHRob3NlIGlu
dG8gaW50ZWxfc2Fndl8ocHJlKXwocG9zdClfcGxhbmVfdXBkYXRlCiAgICAgICAoVmlsbGUgU3ly
asOkbMOkKQoKU2lnbmVkLW9mZi1ieTogU3RhbmlzbGF2IExpc292c2tpeSA8c3RhbmlzbGF2Lmxp
c292c2tpeUBpbnRlbC5jb20+CkNjOiBWaWxsZSBTeXJqw6Rsw6QgPHZpbGxlLnN5cmphbGFAaW50
ZWwuY29tPgpDYzogSmFtZXMgQXVzbXVzIDxqYW1lcy5hdXNtdXNAaW50ZWwuY29tPgotLS0KIGRy
aXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkvaW50ZWxfYncuYyAgICAgICB8IDE0NyArKysrKysr
KysrKysrLS0tLS0KIGRyaXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkvaW50ZWxfYncuaCAgICAg
ICB8ICAgOSArKwogZHJpdmVycy9ncHUvZHJtL2k5MTUvZGlzcGxheS9pbnRlbF9kaXNwbGF5LmMg
IHwgIDEwICsrCiAuLi4vZHJtL2k5MTUvZGlzcGxheS9pbnRlbF9kaXNwbGF5X3R5cGVzLmggICAg
fCAgIDMgKwogZHJpdmVycy9ncHUvZHJtL2k5MTUvaW50ZWxfcG0uYyAgICAgICAgICAgICAgIHwg
MTA5ICsrKysrKysrKysrKysKIGRyaXZlcnMvZ3B1L2RybS9pOTE1L2ludGVsX3BtLmggICAgICAg
ICAgICAgICB8ICAgMyArCiA2IGZpbGVzIGNoYW5nZWQsIDI0NCBpbnNlcnRpb25zKCspLCAzNyBk
ZWxldGlvbnMoLSkKCmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5L2lu
dGVsX2J3LmMgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5L2ludGVsX2J3LmMKaW5kZXgg
MjU2YzkzMjI2MzZjLi45NjE5ZThkZWJlYTYgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS9p
OTE1L2Rpc3BsYXkvaW50ZWxfYncuYworKysgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5
L2ludGVsX2J3LmMKQEAgLTgsNiArOCw5IEBACiAjaW5jbHVkZSAiaW50ZWxfYncuaCIKICNpbmNs
dWRlICJpbnRlbF9kaXNwbGF5X3R5cGVzLmgiCiAjaW5jbHVkZSAiaW50ZWxfc2lkZWJhbmQuaCIK
KyNpbmNsdWRlICJpbnRlbF9hdG9taWMuaCIKKyNpbmNsdWRlICJpbnRlbF9wbS5oIgorCiAKIC8q
IFBhcmFtZXRlcnMgZm9yIFFjbGsgR2V5c2VydmlsbGUgKFFHVikgKi8KIHN0cnVjdCBpbnRlbF9x
Z3ZfcG9pbnQgewpAQCAtMTEzLDYgKzExNiwyNiBAQCBzdGF0aWMgaW50IGljbF9wY29kZV9yZWFk
X3Fndl9wb2ludF9pbmZvKHN0cnVjdCBkcm1faTkxNV9wcml2YXRlICpkZXZfcHJpdiwKIAlyZXR1
cm4gMDsKIH0KIAoraW50IGljbF9wY29kZV9yZXN0cmljdF9xZ3ZfcG9pbnRzKHN0cnVjdCBkcm1f
aTkxNV9wcml2YXRlICpkZXZfcHJpdiwKKwkJCQkgIHUzMiBwb2ludHNfbWFzaykKK3sKKwlpbnQg
cmV0OworCisJLyogYnNwZWMgc2F5cyB0byBrZWVwIHJldHJ5aW5nIGZvciBhdCBsZWFzdCAxIG1z
ICovCisJcmV0ID0gc2tsX3Bjb2RlX3JlcXVlc3QoZGV2X3ByaXYsIElDTF9QQ09ERV9TQUdWX0RF
X01FTV9TU19DT05GSUcsCisJCQkJcG9pbnRzX21hc2ssCisJCQkJR0VOMTFfUENPREVfUE9JTlRT
X1JFU1RSSUNURURfTUFTSywKKwkJCQlHRU4xMV9QQ09ERV9QT0lOVFNfUkVTVFJJQ1RFRCwKKwkJ
CQkxKTsKKworCWlmIChyZXQgPCAwKSB7CisJCURSTV9FUlJPUigiRmFpbGVkIHRvIGRpc2FibGUg
cWd2IHBvaW50cyAoJWQpXG4iLCByZXQpOworCQlyZXR1cm4gcmV0OworCX0KKworCXJldHVybiAw
OworfQorCiBzdGF0aWMgaW50IGljbF9nZXRfcWd2X3BvaW50cyhzdHJ1Y3QgZHJtX2k5MTVfcHJp
dmF0ZSAqZGV2X3ByaXYsCiAJCQkgICAgICBzdHJ1Y3QgaW50ZWxfcWd2X2luZm8gKnFpKQogewpA
QCAtMjQwLDYgKzI2MywxNiBAQCBzdGF0aWMgaW50IGljbF9nZXRfYndfaW5mbyhzdHJ1Y3QgZHJt
X2k5MTVfcHJpdmF0ZSAqZGV2X3ByaXYsIGNvbnN0IHN0cnVjdCBpbnRlbAogCQkJYnJlYWs7CiAJ
fQogCisJLyoKKwkgKiBJbiBjYXNlIGlmIFNBR1YgaXMgZGlzYWJsZWQgaW4gQklPUywgd2UgYWx3
YXlzIGdldCAxCisJICogU0FHViBwb2ludCwgYnV0IHdlIGNhbid0IHNlbmQgUENvZGUgY29tbWFu
ZHMgdG8gcmVzdHJpY3QgaXQKKwkgKiBhcyBpdCB3aWxsIGZhaWwgYW5kIHBvaW50bGVzcyBhbnl3
YXkuCisJICovCisJaWYgKHFpLm51bV9wb2ludHMgPT0gMSkKKwkJZGV2X3ByaXYtPnNhZ3Zfc3Rh
dHVzID0gSTkxNV9TQUdWX05PVF9DT05UUk9MTEVEOworCWVsc2UKKwkJZGV2X3ByaXYtPnNhZ3Zf
c3RhdHVzID0gSTkxNV9TQUdWX0VOQUJMRUQ7CisKIAlyZXR1cm4gMDsKIH0KIApAQCAtMjU5LDcg
KzI5Miw3IEBAIHN0YXRpYyB1bnNpZ25lZCBpbnQgaWNsX21heF9idyhzdHJ1Y3QgZHJtX2k5MTVf
cHJpdmF0ZSAqZGV2X3ByaXYsCiAJCWlmIChxZ3ZfcG9pbnQgPj0gYmktPm51bV9xZ3ZfcG9pbnRz
KQogCQkJcmV0dXJuIFVJTlRfTUFYOwogCi0JCWlmIChudW1fcGxhbmVzID49IGJpLT5udW1fcGxh
bmVzKQorCQlpZiAobnVtX3BsYW5lcyA+PSBiaS0+bnVtX3BsYW5lcyB8fCAhbnVtX3BsYW5lcykK
IAkJCXJldHVybiBiaS0+ZGVyYXRlZGJ3W3Fndl9wb2ludF07CiAJfQogCkBAIC0yNzcsMzQgKzMx
MCw2IEBAIHZvaWQgaW50ZWxfYndfaW5pdF9odyhzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0ZSAqZGV2
X3ByaXYpCiAJCWljbF9nZXRfYndfaW5mbyhkZXZfcHJpdiwgJmljbF9zYV9pbmZvKTsKIH0KIAot
c3RhdGljIHVuc2lnbmVkIGludCBpbnRlbF9tYXhfZGF0YV9yYXRlKHN0cnVjdCBkcm1faTkxNV9w
cml2YXRlICpkZXZfcHJpdiwKLQkJCQkJaW50IG51bV9wbGFuZXMpCi17Ci0JaWYgKElOVEVMX0dF
TihkZXZfcHJpdikgPj0gMTEpIHsKLQkJLyoKLQkJICogQW55IGJ3IGdyb3VwIGhhcyBzYW1lIGFt
b3VudCBvZiBRR1YgcG9pbnRzCi0JCSAqLwotCQljb25zdCBzdHJ1Y3QgaW50ZWxfYndfaW5mbyAq
YmkgPQotCQkJJmRldl9wcml2LT5tYXhfYndbMF07Ci0JCXVuc2lnbmVkIGludCBtaW5fYncgPSBV
SU5UX01BWDsKLQkJaW50IGk7Ci0KLQkJLyoKLQkJICogRklYTUUgd2l0aCBTQUdWIGRpc2FibGVk
IG1heWJlIHdlIGNhbiBhc3N1bWUKLQkJICogcG9pbnQgMSB3aWxsIGFsd2F5cyBiZSB1c2VkPyBT
ZWVtcyB0byBtYXRjaAotCQkgKiB0aGUgYmVoYXZpb3VyIG9ic2VydmVkIGluIHRoZSB3aWxkLgot
CQkgKi8KLQkJZm9yIChpID0gMDsgaSA8IGJpLT5udW1fcWd2X3BvaW50czsgaSsrKSB7Ci0JCQl1
bnNpZ25lZCBpbnQgYncgPSBpY2xfbWF4X2J3KGRldl9wcml2LCBudW1fcGxhbmVzLCBpKTsKLQot
CQkJbWluX2J3ID0gbWluKGJ3LCBtaW5fYncpOwotCQl9Ci0JCXJldHVybiBtaW5fYnc7Ci0JfSBl
bHNlIHsKLQkJcmV0dXJuIFVJTlRfTUFYOwotCX0KLX0KLQogc3RhdGljIHVuc2lnbmVkIGludCBp
bnRlbF9id19jcnRjX251bV9hY3RpdmVfcGxhbmVzKGNvbnN0IHN0cnVjdCBpbnRlbF9jcnRjX3N0
YXRlICpjcnRjX3N0YXRlKQogewogCS8qCkBAIC00MTksMTAgKzQyNCwxNSBAQCBpbnQgaW50ZWxf
YndfYXRvbWljX2NoZWNrKHN0cnVjdCBpbnRlbF9hdG9taWNfc3RhdGUgKnN0YXRlKQogCXN0cnVj
dCBkcm1faTkxNV9wcml2YXRlICpkZXZfcHJpdiA9IHRvX2k5MTUoc3RhdGUtPmJhc2UuZGV2KTsK
IAlzdHJ1Y3QgaW50ZWxfY3J0Y19zdGF0ZSAqbmV3X2NydGNfc3RhdGUsICpvbGRfY3J0Y19zdGF0
ZTsKIAlzdHJ1Y3QgaW50ZWxfYndfc3RhdGUgKm5ld19id19zdGF0ZSA9IE5VTEw7Ci0JdW5zaWdu
ZWQgaW50IGRhdGFfcmF0ZSwgbWF4X2RhdGFfcmF0ZTsKKwlzdHJ1Y3QgaW50ZWxfYndfc3RhdGUg
Km9sZF9id19zdGF0ZSA9IE5VTEw7CisJdW5zaWduZWQgaW50IGRhdGFfcmF0ZTsKIAl1bnNpZ25l
ZCBpbnQgbnVtX2FjdGl2ZV9wbGFuZXM7CiAJc3RydWN0IGludGVsX2NydGMgKmNydGM7CiAJaW50
IGksIHJldDsKKwl1MzIgYWxsb3dlZF9wb2ludHMgPSAwOworCXVuc2lnbmVkIGludCBtYXhfYndf
cG9pbnQgPSAwLCBtYXhfYncgPSAwOworCXVuc2lnbmVkIGludCBudW1fcWd2X3BvaW50cyA9IGRl
dl9wcml2LT5tYXhfYndbMF0ubnVtX3Fndl9wb2ludHM7CisJdTMyIG1hc2sgPSAoMSA8PCBudW1f
cWd2X3BvaW50cykgLSAxOwogCiAJLyogRklYTUUgZWFybGllciBnZW5zIG5lZWQgc29tZSBjaGVj
a3MgdG9vICovCiAJaWYgKElOVEVMX0dFTihkZXZfcHJpdikgPCAxMSkKQEAgLTQ2NSwyMyArNDc1
LDg2IEBAIGludCBpbnRlbF9id19hdG9taWNfY2hlY2soc3RydWN0IGludGVsX2F0b21pY19zdGF0
ZSAqc3RhdGUpCiAJCXJldHVybiAwOwogCiAJcmV0ID0gaW50ZWxfYXRvbWljX2xvY2tfZ2xvYmFs
X3N0YXRlKCZuZXdfYndfc3RhdGUtPmJhc2UpOwotCWlmIChyZXQpCisJaWYgKHJldCkgeworCQlE
Uk1fREVCVUdfS01TKCJDb3VsZCBub3QgbG9jayBnbG9iYWwgc3RhdGVcbiIpOwogCQlyZXR1cm4g
cmV0OworCX0KIAogCWRhdGFfcmF0ZSA9IGludGVsX2J3X2RhdGFfcmF0ZShkZXZfcHJpdiwgbmV3
X2J3X3N0YXRlKTsKKwlkYXRhX3JhdGUgPSBESVZfUk9VTkRfVVAoZGF0YV9yYXRlLCAxMDAwKTsK
KwogCW51bV9hY3RpdmVfcGxhbmVzID0gaW50ZWxfYndfbnVtX2FjdGl2ZV9wbGFuZXMoZGV2X3By
aXYsIG5ld19id19zdGF0ZSk7CiAKLQltYXhfZGF0YV9yYXRlID0gaW50ZWxfbWF4X2RhdGFfcmF0
ZShkZXZfcHJpdiwgbnVtX2FjdGl2ZV9wbGFuZXMpOworCWZvciAoaSA9IDA7IGkgPCBudW1fcWd2
X3BvaW50czsgaSsrKSB7CisJCXVuc2lnbmVkIGludCBtYXhfZGF0YV9yYXRlOwogCi0JZGF0YV9y
YXRlID0gRElWX1JPVU5EX1VQKGRhdGFfcmF0ZSwgMTAwMCk7CisJCW1heF9kYXRhX3JhdGUgPSBp
Y2xfbWF4X2J3KGRldl9wcml2LCBudW1fYWN0aXZlX3BsYW5lcywgaSk7CisJCS8qCisJCSAqIFdl
IG5lZWQgdG8ga25vdyB3aGljaCBxZ3YgcG9pbnQgZ2l2ZXMgdXMKKwkJICogbWF4aW11bSBiYW5k
d2lkdGggaW4gb3JkZXIgdG8gZGlzYWJsZSBTQUdWCisJCSAqIGlmIHdlIGZpbmQgdGhhdCB3ZSBl
eGNlZWQgU0FHViBibG9jayB0aW1lCisJCSAqIHdpdGggd2F0ZXJtYXJrcy4gQnkgdGhhdCBtb21l
bnQgd2UgYWxyZWFkeQorCQkgKiBoYXZlIHRob3NlLCBhcyBpdCBpcyBjYWxjdWxhdGVkIGVhcmxp
ZXIgaW4KKwkJICogaW50ZWxfYXRvbWljX2NoZWNrLAorCQkgKi8KKwkJaWYgKG1heF9kYXRhX3Jh
dGUgPiBtYXhfYncpIHsKKwkJCW1heF9id19wb2ludCA9IGk7CisJCQltYXhfYncgPSBtYXhfZGF0
YV9yYXRlOworCQl9CisJCWlmIChtYXhfZGF0YV9yYXRlID49IGRhdGFfcmF0ZSkKKwkJCWFsbG93
ZWRfcG9pbnRzIHw9IEJJVChpKTsKKwkJRFJNX0RFQlVHX0tNUygiUUdWIHBvaW50ICVkOiBtYXgg
YncgJWQgcmVxdWlyZWQgJWRcbiIsCisJCQkgICAgICBpLCBtYXhfZGF0YV9yYXRlLCBkYXRhX3Jh
dGUpOworCX0KIAotCWlmIChkYXRhX3JhdGUgPiBtYXhfZGF0YV9yYXRlKSB7Ci0JCWRybV9kYmdf
a21zKCZkZXZfcHJpdi0+ZHJtLAotCQkJICAgICJCYW5kd2lkdGggJXUgTUIvcyBleGNlZWRzIG1h
eCBhdmFpbGFibGUgJWQgTUIvcyAoJWQgYWN0aXZlIHBsYW5lcylcbiIsCi0JCQkgICAgZGF0YV9y
YXRlLCBtYXhfZGF0YV9yYXRlLCBudW1fYWN0aXZlX3BsYW5lcyk7CisJLyoKKwkgKiBCU3BlYyBz
dGF0ZXMgdGhhdCB3ZSBhbHdheXMgc2hvdWxkIGhhdmUgYXQgbGVhc3Qgb25lIGFsbG93ZWQgcG9p
bnQKKwkgKiBsZWZ0LCBzbyBpZiB3ZSBjb3VsZG4ndCAtIHNpbXBseSByZWplY3QgdGhlIGNvbmZp
Z3VyYXRpb24gZm9yIG9idmlvdXMKKwkgKiByZWFzb25zLgorCSAqLworCWlmIChhbGxvd2VkX3Bv
aW50cyA9PSAwKSB7CisJCURSTV9ERUJVR19LTVMoIk5vIFFHViBwb2ludHMgcHJvdmlkZSBzdWZm
aWNpZW50IG1lbW9yeSIKKwkJCSAgICAgICIgYmFuZHdpZHRoIGZvciBkaXNwbGF5IGNvbmZpZ3Vy
YXRpb24uXG4iKTsKIAkJcmV0dXJuIC1FSU5WQUw7CiAJfQogCisJLyoKKwkgKiBMZWF2ZSBvbmx5
IHNpbmdsZSBwb2ludCB3aXRoIGhpZ2hlc3QgYmFuZHdpZHRoLCBpZgorCSAqIHdlIGNhbid0IGVu
YWJsZSBTQUdWIGR1ZSB0byB0aGUgaW5jcmVhc2VkIG1lbW9yeSBsYXRlbmN5IGl0IG1heQorCSAq
IGNhdXNlLgorCSAqLworCWlmICghaW50ZWxfY2FuX2VuYWJsZV9zYWd2KHN0YXRlKSkgeworCQlh
bGxvd2VkX3BvaW50cyA9IDEgPDwgbWF4X2J3X3BvaW50OworCQlEUk1fREVCVUdfS01TKCJObyBT
QUdWLCB1c2luZyBzaW5nbGUgUUdWIHBvaW50ICVkXG4iLAorCQkJICAgICAgbWF4X2J3X3BvaW50
KTsKKwl9CisJLyoKKwkgKiBXZSBzdG9yZSB0aGUgb25lcyB3aGljaCBuZWVkIHRvIGJlIG1hc2tl
ZCBhcyB0aGF0IGlzIHdoYXQgUENvZGUKKwkgKiBhY3R1YWxseSBhY2NlcHRzIGFzIGEgcGFyYW1l
dGVyLgorCSAqLworCW5ld19id19zdGF0ZS0+cWd2X3BvaW50c19tYXNrID0gKH5hbGxvd2VkX3Bv
aW50cykgJiBtYXNrOworCisJRFJNX0RFQlVHX0tNUygiTmV3IHN0YXRlICVwIHFndiBtYXNrICV4
XG4iLAorCQkgICAgICBzdGF0ZSwgbmV3X2J3X3N0YXRlLT5xZ3ZfcG9pbnRzX21hc2spOworCisJ
b2xkX2J3X3N0YXRlID0gaW50ZWxfYndfZ2V0X29sZF9zdGF0ZShzdGF0ZSk7CisJaWYgKElTX0VS
UihvbGRfYndfc3RhdGUpKSB7CisJCURSTV9ERUJVR19LTVMoIkNvdWxkIG5vdCBnZXQgb2xkIGJ3
IHN0YXRlIVxuIik7CisJCXJldHVybiBQVFJfRVJSKG9sZF9id19zdGF0ZSk7CisJfQorCisJLyoK
KwkgKiBJZiB0aGUgYWN0dWFsIG1hc2sgaGFkIGNoYW5nZWQgd2UgbmVlZCB0byBtYWtlIHN1cmUg
dGhhdAorCSAqIHRoZSBjb21taXRzIGFyZSBzZXJpYWxpemVkKGluIGNhc2UgdGhpcyBpcyBhIG5v
bW9kZXNldCwgbm9uYmxvY2tpbmcpCisJICovCisJaWYgKG5ld19id19zdGF0ZS0+cWd2X3BvaW50
c19tYXNrICE9IG9sZF9id19zdGF0ZS0+cWd2X3BvaW50c19tYXNrKSB7CisJCXJldCA9IGludGVs
X2F0b21pY19zZXJpYWxpemVfZ2xvYmFsX3N0YXRlKCZuZXdfYndfc3RhdGUtPmJhc2UpOworCQlp
ZiAocmV0KSB7CisJCQlEUk1fREVCVUdfS01TKCJDb3VsZCBub3Qgc2VyaWFsaXplIGdsb2JhbCBz
dGF0ZVxuIik7CisJCQlyZXR1cm4gcmV0OworCQl9CisJfQorCiAJcmV0dXJuIDA7CiB9CiAKZGlm
ZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkvaW50ZWxfYncuaCBiL2RyaXZl
cnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkvaW50ZWxfYncuaAppbmRleCA0MDgzYWRmNGI0MzIuLjFl
YTNiYWQzMmIyYiAxMDA2NDQKLS0tIGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvZGlzcGxheS9pbnRl
bF9idy5oCisrKyBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkvaW50ZWxfYncuaApAQCAt
MzYsNiArMzYsMTMgQEAgc3RydWN0IGludGVsX2J3X3N0YXRlIHsKIAkgKi8KIAlib29sIGNhbl9z
YWd2OwogCisJLyoKKwkgKiBDdXJyZW50IFFHViBwb2ludHMgbWFzaywgd2hpY2ggcmVzdHJpY3Rz
CisJICogc29tZSBwYXJ0aWN1bGFyIFNBR1Ygc3RhdGVzLCBub3QgdG8gY29uZnVzZQorCSAqIHdp
dGggcGlwZV9zYWd2X21hc2suCisJICovCisJdTggcWd2X3BvaW50c19tYXNrOworCiAJdW5zaWdu
ZWQgaW50IGRhdGFfcmF0ZVtJOTE1X01BWF9QSVBFU107CiAJdTggbnVtX2FjdGl2ZV9wbGFuZXNb
STkxNV9NQVhfUElQRVNdOwogfTsKQEAgLTU2LDUgKzYzLDcgQEAgaW50IGludGVsX2J3X2luaXQo
c3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmRldl9wcml2KTsKIGludCBpbnRlbF9id19hdG9taWNf
Y2hlY2soc3RydWN0IGludGVsX2F0b21pY19zdGF0ZSAqc3RhdGUpOwogdm9pZCBpbnRlbF9id19j
cnRjX3VwZGF0ZShzdHJ1Y3QgaW50ZWxfYndfc3RhdGUgKmJ3X3N0YXRlLAogCQkJICBjb25zdCBz
dHJ1Y3QgaW50ZWxfY3J0Y19zdGF0ZSAqY3J0Y19zdGF0ZSk7CitpbnQgaWNsX3Bjb2RlX3Jlc3Ry
aWN0X3Fndl9wb2ludHMoc3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmRldl9wcml2LAorCQkJCSAg
dTMyIHBvaW50c19tYXNrKTsKIAogI2VuZGlmIC8qIF9fSU5URUxfQldfSF9fICovCmRpZmYgLS1n
aXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5L2ludGVsX2Rpc3BsYXkuYyBiL2RyaXZl
cnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkvaW50ZWxfZGlzcGxheS5jCmluZGV4IDllMDA1OGE3OGVh
Ni4uYzg4ZWExMmM1ZjdhIDEwMDY0NAotLS0gYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5
L2ludGVsX2Rpc3BsYXkuYworKysgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5L2ludGVs
X2Rpc3BsYXkuYwpAQCAtMTU1NDEsNiArMTU1NDEsMTQgQEAgc3RhdGljIHZvaWQgaW50ZWxfYXRv
bWljX2NvbW1pdF90YWlsKHN0cnVjdCBpbnRlbF9hdG9taWNfc3RhdGUgKnN0YXRlKQogCWZvcl9l
YWNoX25ld19pbnRlbF9jcnRjX2luX3N0YXRlKHN0YXRlLCBjcnRjLCBuZXdfY3J0Y19zdGF0ZSwg
aSkKIAkJY3J0Yy0+Y29uZmlnID0gbmV3X2NydGNfc3RhdGU7CiAKKwkvKgorCSAqIE5vdyB3ZSBu
ZWVkIHRvIGNoZWNrIGlmIFNBR1YgbmVlZHMgdG8gYmUgZGlzYWJsZWQoaS5lIFFHViBwb2ludHMK
KwkgKiBtb2RpZmllZCBldmVuLCB3aGVuIG5vIG1vZGVzZXQgaXMgZG9uZShmb3IgZXhhbXBsZSBw
bGFuZSB1cGRhdGVzCisJICogY2FuIG5vdyB0cmlnZ2VyIHRoYXQpLgorCSAqLworCWlmICgoSU5U
RUxfR0VOKGRldl9wcml2KSA+PSAxMSkgJiYgc3RhdGUtPm1vZGVzZXQpCisJCWludGVsX3NhZ3Zf
cHJlX3BsYW5lX3VwZGF0ZShzdGF0ZSk7CisKIAlpZiAoc3RhdGUtPm1vZGVzZXQpIHsKIAkJZHJt
X2F0b21pY19oZWxwZXJfdXBkYXRlX2xlZ2FjeV9tb2Rlc2V0X3N0YXRlKGRldiwgJnN0YXRlLT5i
YXNlKTsKIApAQCAtMTU2NTYsNiArMTU2NjQsOCBAQCBzdGF0aWMgdm9pZCBpbnRlbF9hdG9taWNf
Y29tbWl0X3RhaWwoc3RydWN0IGludGVsX2F0b21pY19zdGF0ZSAqc3RhdGUpCiAJaWYgKElOVEVM
X0dFTihkZXZfcHJpdikgPCAxMSkgewogCQlpZiAoc3RhdGUtPm1vZGVzZXQgJiYgaW50ZWxfY2Fu
X2VuYWJsZV9zYWd2KHN0YXRlKSkKIAkJCWludGVsX2VuYWJsZV9zYWd2KGRldl9wcml2KTsKKwl9
IGVsc2UgaWYgKHN0YXRlLT5tb2Rlc2V0KSB7CisJCWludGVsX3NhZ3ZfcG9zdF9wbGFuZV91cGRh
dGUoc3RhdGUpOwogCX0KIAogCWRybV9hdG9taWNfaGVscGVyX2NvbW1pdF9od19kb25lKCZzdGF0
ZS0+YmFzZSk7CmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5L2ludGVs
X2Rpc3BsYXlfdHlwZXMuaCBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkvaW50ZWxfZGlz
cGxheV90eXBlcy5oCmluZGV4IGRhMDMwOGI4N2RhZC4uMjlmZmIwYThmNzc4IDEwMDY0NAotLS0g
YS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5L2ludGVsX2Rpc3BsYXlfdHlwZXMuaAorKysg
Yi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5L2ludGVsX2Rpc3BsYXlfdHlwZXMuaApAQCAt
Njc0LDYgKzY3NCw5IEBAIHN0cnVjdCBza2xfcGxhbmVfd20gewogCWJvb2wgaXNfcGxhbmFyOwog
fTsKIAorLyogQlNwZWMgcHJlY2lzZWx5IGRlZmluZXMgdGhpcyAqLworI2RlZmluZSBOVU1fU0FH
Vl9QT0lOVFMgOAorCiBzdHJ1Y3Qgc2tsX3BpcGVfd20gewogCXN0cnVjdCBza2xfcGxhbmVfd20g
cGxhbmVzW0k5MTVfTUFYX1BMQU5FU107CiAJYm9vbCBjYW5fc2FndjsKZGlmZiAtLWdpdCBhL2Ry
aXZlcnMvZ3B1L2RybS9pOTE1L2ludGVsX3BtLmMgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9pbnRl
bF9wbS5jCmluZGV4IGY1OThiNTVmNGFiYy4uNGVjNGRiYmEwMjJmIDEwMDY0NAotLS0gYS9kcml2
ZXJzL2dwdS9kcm0vaTkxNS9pbnRlbF9wbS5jCisrKyBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2lu
dGVsX3BtLmMKQEAgLTM3NTgsNiArMzc1OCwxMTUgQEAgaW50ZWxfZGlzYWJsZV9zYWd2KHN0cnVj
dCBkcm1faTkxNV9wcml2YXRlICpkZXZfcHJpdikKIAlyZXR1cm4gMDsKIH0KIAordm9pZCBpbnRl
bF9zYWd2X3ByZV9wbGFuZV91cGRhdGUoc3RydWN0IGludGVsX2F0b21pY19zdGF0ZSAqc3RhdGUp
Cit7CisJc3RydWN0IGRybV9kZXZpY2UgKmRldiA9IHN0YXRlLT5iYXNlLmRldjsKKwlzdHJ1Y3Qg
ZHJtX2k5MTVfcHJpdmF0ZSAqZGV2X3ByaXYgPSB0b19pOTE1KGRldik7CisJaW50IHJldDsKKwlz
dHJ1Y3QgaW50ZWxfYndfc3RhdGUgKm5ld19id19zdGF0ZSA9IE5VTEw7CisJc3RydWN0IGludGVs
X2J3X3N0YXRlICpvbGRfYndfc3RhdGUgPSBOVUxMOworCXUzMiBuZXdfbWFzayA9IDA7CisKKwkv
KgorCSAqIEp1c3QgcmV0dXJuIGlmIHdlIGNhbid0IGNvbnRyb2wgU0FHViBvciBkb24ndCBoYXZl
IGl0LgorCSAqIFRoaXMgaXMgZGlmZmVyZW50IGZyb20gc2l0dWF0aW9uIHdoZW4gd2UgaGF2ZSBT
QUdWIGJ1dCBqdXN0IGNhbid0CisJICogYWZmb3JkIGl0IGR1ZSB0byBEQnVmIGxpbWl0YXRpb24g
LSBpbiBjYXNlIGlmIFNBR1YgaXMgY29tcGxldGVseQorCSAqIGRpc2FibGVkIGluIGEgQklPUywg
d2UgYXJlIG5vdCBldmVuIGFsbG93ZWQgdG8gc2VuZCBhIFBDb2RlIHJlcXVlc3QsCisJICogYXMg
aXQgd2lsbCB0aHJvdyBhbiBlcnJvci4gU28gaGF2ZSB0byBjaGVjayBpdCBoZXJlLgorCSAqLwor
CWlmICghaW50ZWxfaGFzX3NhZ3YoZGV2X3ByaXYpKQorCQlyZXR1cm47CisKKwluZXdfYndfc3Rh
dGUgPSBpbnRlbF9id19nZXRfc3RhdGUoc3RhdGUpOworCWlmIChJU19FUlJfT1JfTlVMTChuZXdf
Yndfc3RhdGUpKSB7CisJCVdBUk4oMSwgIkNvdWxkIG5vdCBnZXQgbmV3IGJ3X3N0YXRlXG4iKTsK
KwkJcmV0dXJuOworCX0KKworCW9sZF9id19zdGF0ZSA9IGludGVsX2J3X2dldF9vbGRfc3RhdGUo
c3RhdGUpOworCWlmIChJU19FUlJfT1JfTlVMTChvbGRfYndfc3RhdGUpKSB7CisJCVdBUk4oMSwg
IkNvdWxkIG5vdCBnZXQgb2xkIGJ3X3N0YXRlXG4iKTsKKwkJcmV0dXJuOworCX0KKworCS8qCisJ
ICogTm90aGluZyB0byBtYXNrCisJICovCisJaWYgKG5ld19id19zdGF0ZS0+cWd2X3BvaW50c19t
YXNrID09IG9sZF9id19zdGF0ZS0+cWd2X3BvaW50c19tYXNrKQorCQlyZXR1cm47CisKKwluZXdf
bWFzayA9IG9sZF9id19zdGF0ZS0+cWd2X3BvaW50c19tYXNrIHwgbmV3X2J3X3N0YXRlLT5xZ3Zf
cG9pbnRzX21hc2s7CisKKwkvKgorCSAqIElmIG5ldyBtYXNrIGlzIHplcm8gLSBtZWFucyB0aGVy
ZSBpcyBub3RoaW5nIHRvIG1hc2ssCisJICogd2UgY2FuIG9ubHkgdW5tYXNrLCB3aGljaCBzaG91
bGQgYmUgZG9uZSBpbiB1bm1hc2suCisJICovCisJaWYgKCFuZXdfbWFzaykKKwkJcmV0dXJuOwor
CisJLyoKKwkgKiBSZXN0cmljdCByZXF1aXJlZCBxZ3YgcG9pbnRzIGJlZm9yZSB1cGRhdGluZyB0
aGUgY29uZmlndXJhdGlvbi4KKwkgKiBBY2NvcmRpbmcgdG8gQlNwZWMgd2UgY2FuJ3QgbWFzayBh
bmQgdW5tYXNrIHFndiBwb2ludHMgYXQgdGhlIHNhbWUKKwkgKiB0aW1lLiBBbHNvIG1hc2tpbmcg
c2hvdWxkIGJlIGRvbmUgYmVmb3JlIHVwZGF0aW5nIHRoZSBjb25maWd1cmF0aW9uCisJICogYW5k
IHVubWFza2luZyBhZnRlcndhcmRzLgorCSAqLworCXJldCA9IGljbF9wY29kZV9yZXN0cmljdF9x
Z3ZfcG9pbnRzKGRldl9wcml2LCBuZXdfbWFzayk7CisJaWYgKHJldCA8IDApCisJCURSTV9ERUJV
R19LTVMoIkNvdWxkIG5vdCBtYXNrIHJlcXVpcmVkIHFndiBwb2ludHMoJWQpXG4iLAorCQkJICAg
ICAgcmV0KTsKK30KKwordm9pZCBpbnRlbF9zYWd2X3Bvc3RfcGxhbmVfdXBkYXRlKHN0cnVjdCBp
bnRlbF9hdG9taWNfc3RhdGUgKnN0YXRlKQoreworCXN0cnVjdCBkcm1fZGV2aWNlICpkZXYgPSBz
dGF0ZS0+YmFzZS5kZXY7CisJc3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmRldl9wcml2ID0gdG9f
aTkxNShkZXYpOworCWludCByZXQ7CisJc3RydWN0IGludGVsX2J3X3N0YXRlICpuZXdfYndfc3Rh
dGUgPSBOVUxMOworCXN0cnVjdCBpbnRlbF9id19zdGF0ZSAqb2xkX2J3X3N0YXRlID0gTlVMTDsK
Kwl1MzIgbmV3X21hc2sgPSAwOworCisJLyoKKwkgKiBKdXN0IHJldHVybiBpZiB3ZSBjYW4ndCBj
b250cm9sIFNBR1Ygb3IgZG9uJ3QgaGF2ZSBpdC4KKwkgKiBUaGlzIGlzIGRpZmZlcmVudCBmcm9t
IHNpdHVhdGlvbiB3aGVuIHdlIGhhdmUgU0FHViBidXQganVzdCBjYW4ndAorCSAqIGFmZm9yZCBp
dCBkdWUgdG8gREJ1ZiBsaW1pdGF0aW9uIC0gaW4gY2FzZSBpZiBTQUdWIGlzIGNvbXBsZXRlbHkK
KwkgKiBkaXNhYmxlZCBpbiBhIEJJT1MsIHdlIGFyZSBub3QgZXZlbiBhbGxvd2VkIHRvIHNlbmQg
YSBQQ29kZSByZXF1ZXN0LAorCSAqIGFzIGl0IHdpbGwgdGhyb3cgYW4gZXJyb3IuIFNvIGhhdmUg
dG8gY2hlY2sgaXQgaGVyZS4KKwkgKi8KKwlpZiAoIWludGVsX2hhc19zYWd2KGRldl9wcml2KSkK
KwkJcmV0dXJuOworCisJbmV3X2J3X3N0YXRlID0gaW50ZWxfYndfZ2V0X3N0YXRlKHN0YXRlKTsK
KwlpZiAoSVNfRVJSX09SX05VTEwobmV3X2J3X3N0YXRlKSkgeworCQlXQVJOKDEsICJDb3VsZCBu
b3QgZ2V0IG5ldyBid19zdGF0ZVxuIik7CisJCXJldHVybjsKKwl9CisKKwlvbGRfYndfc3RhdGUg
PSBpbnRlbF9id19nZXRfb2xkX3N0YXRlKHN0YXRlKTsKKwlpZiAoSVNfRVJSX09SX05VTEwob2xk
X2J3X3N0YXRlKSkgeworCQlXQVJOKDEsICJDb3VsZCBub3QgZ2V0IG9sZCBid19zdGF0ZVxuIik7
CisJCXJldHVybjsKKwl9CisKKwkvKgorCSAqIE5vdGhpbmcgdG8gdW5tYXNrCisJICovCisJaWYg
KG5ld19id19zdGF0ZS0+cWd2X3BvaW50c19tYXNrID09IG9sZF9id19zdGF0ZS0+cWd2X3BvaW50
c19tYXNrKQorCQlyZXR1cm47CisKKwluZXdfbWFzayA9IG5ld19id19zdGF0ZS0+cWd2X3BvaW50
c19tYXNrOworCisJLyoKKwkgKiBBbGxvdyByZXF1aXJlZCBxZ3YgcG9pbnRzIGFmdGVyIHVwZGF0
aW5nIHRoZSBjb25maWd1cmF0aW9uLgorCSAqIEFjY29yZGluZyB0byBCU3BlYyB3ZSBjYW4ndCBt
YXNrIGFuZCB1bm1hc2sgcWd2IHBvaW50cyBhdCB0aGUgc2FtZQorCSAqIHRpbWUuIEFsc28gbWFz
a2luZyBzaG91bGQgYmUgZG9uZSBiZWZvcmUgdXBkYXRpbmcgdGhlIGNvbmZpZ3VyYXRpb24KKwkg
KiBhbmQgdW5tYXNraW5nIGFmdGVyd2FyZHMuCisJICovCisJcmV0ID0gaWNsX3Bjb2RlX3Jlc3Ry
aWN0X3Fndl9wb2ludHMoZGV2X3ByaXYsIG5ld19tYXNrKTsKKwlpZiAocmV0IDwgMCkKKwkJRFJN
X0RFQlVHX0tNUygiQ291bGQgbm90IHVubWFzayByZXF1aXJlZCBxZ3YgcG9pbnRzKCVkKVxuIiwK
KwkJCSAgICAgIHJldCk7Cit9CisKIHN0YXRpYyBib29sIHNrbF9jYW5fZW5hYmxlX3NhZ3Zfb25f
cGlwZShzdHJ1Y3QgaW50ZWxfY3J0Y19zdGF0ZSAqY3J0Y19zdGF0ZSkKIHsKIAlzdHJ1Y3QgZHJt
X2RldmljZSAqZGV2ID0gY3J0Y19zdGF0ZS0+dWFwaS5jcnRjLT5kZXY7CmRpZmYgLS1naXQgYS9k
cml2ZXJzL2dwdS9kcm0vaTkxNS9pbnRlbF9wbS5oIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvaW50
ZWxfcG0uaAppbmRleCA2NTc0M2E0Y2JjZjYuLjYxMDJiYjUyZDhjZCAxMDA2NDQKLS0tIGEvZHJp
dmVycy9ncHUvZHJtL2k5MTUvaW50ZWxfcG0uaAorKysgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9p
bnRlbF9wbS5oCkBAIC00MSw3ICs0MSwxMCBAQCB2b2lkIHNrbF9waXBlX3dtX2dldF9od19zdGF0
ZShzdHJ1Y3QgaW50ZWxfY3J0YyAqY3J0YywKIAkJCSAgICAgIHN0cnVjdCBza2xfcGlwZV93bSAq
b3V0KTsKIHZvaWQgZzR4X3dtX3Nhbml0aXplKHN0cnVjdCBkcm1faTkxNV9wcml2YXRlICpkZXZf
cHJpdik7CiB2b2lkIHZsdl93bV9zYW5pdGl6ZShzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0ZSAqZGV2
X3ByaXYpOworCiBib29sIGludGVsX2Nhbl9lbmFibGVfc2FndihzdHJ1Y3QgaW50ZWxfYXRvbWlj
X3N0YXRlICpzdGF0ZSk7Cit2b2lkIGludGVsX3NhZ3ZfcHJlX3BsYW5lX3VwZGF0ZShzdHJ1Y3Qg
aW50ZWxfYXRvbWljX3N0YXRlICpzdGF0ZSk7Cit2b2lkIGludGVsX3NhZ3ZfcG9zdF9wbGFuZV91
cGRhdGUoc3RydWN0IGludGVsX2F0b21pY19zdGF0ZSAqc3RhdGUpOwogYm9vbCBpbnRlbF9oYXNf
c2FndihzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0ZSAqZGV2X3ByaXYpOwogaW50IGludGVsX2VuYWJs
ZV9zYWd2KHN0cnVjdCBkcm1faTkxNV9wcml2YXRlICpkZXZfcHJpdik7CiBpbnQgaW50ZWxfZGlz
YWJsZV9zYWd2KHN0cnVjdCBkcm1faTkxNV9wcml2YXRlICpkZXZfcHJpdik7Ci0tIAoyLjI0LjEu
NDg1LmdhZDA1YTNkOGU1CgpfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fXwpJbnRlbC1nZnggbWFpbGluZyBsaXN0CkludGVsLWdmeEBsaXN0cy5mcmVlZGVza3Rv
cC5vcmcKaHR0cHM6Ly9saXN0cy5mcmVlZGVza3RvcC5vcmcvbWFpbG1hbi9saXN0aW5mby9pbnRl
bC1nZngK

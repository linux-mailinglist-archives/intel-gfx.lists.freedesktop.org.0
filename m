Return-Path: <intel-gfx-bounces@lists.freedesktop.org>
X-Original-To: lists+intel-gfx@lfdr.de
Delivered-To: lists+intel-gfx@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [131.252.210.177])
	by mail.lfdr.de (Postfix) with ESMTPS id BFE9F21B8B1
	for <lists+intel-gfx@lfdr.de>; Fri, 10 Jul 2020 16:31:01 +0200 (CEST)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id A7EA06EC59;
	Fri, 10 Jul 2020 14:30:58 +0000 (UTC)
X-Original-To: intel-gfx@lists.freedesktop.org
Delivered-To: intel-gfx@lists.freedesktop.org
Received: from mga04.intel.com (mga04.intel.com [192.55.52.120])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 72D596EC59
 for <intel-gfx@lists.freedesktop.org>; Fri, 10 Jul 2020 14:30:57 +0000 (UTC)
IronPort-SDR: 2CQZH+vJKTr3fp6xXnsL2V09yCSQoI/+LSQ+NezxFLcxARWtEO23yS6kk6DuqTO6HHo8C3OT/X
 zQIF7wcDRf5Q==
X-IronPort-AV: E=McAfee;i="6000,8403,9677"; a="145698549"
X-IronPort-AV: E=Sophos;i="5.75,336,1589266800"; d="scan'208";a="145698549"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from orsmga006.jf.intel.com ([10.7.209.51])
 by fmsmga104.fm.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384;
 10 Jul 2020 07:30:56 -0700
IronPort-SDR: l+oczZlRHesjhYT/RVjERlIPOBvvzdUWgMvrKgcP1xI2vV4rgPo3QXbhZ4EvUl2kA80nT/Ej9G
 2WvRalgm6d8Q==
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.75,336,1589266800"; d="scan'208";a="284520136"
Received: from linux.intel.com ([10.54.29.200])
 by orsmga006.jf.intel.com with ESMTP; 10 Jul 2020 07:30:56 -0700
Received: from [10.249.228.181] (abudanko-mobl.ccr.corp.intel.com
 [10.249.228.181])
 by linux.intel.com (Postfix) with ESMTP id 8039B5805F0;
 Fri, 10 Jul 2020 07:30:51 -0700 (PDT)
To: Ravi Bangoria <ravi.bangoria@linux.ibm.com>
References: <f96f8f8a-e65c-3f36-dc85-fc3f5191e8c5@linux.intel.com>
 <76718dc6-5483-5e2e-85b8-64e70306ee1f@linux.ibm.com>
From: Alexey Budankov <alexey.budankov@linux.intel.com>
Organization: Intel Corp.
Message-ID: <7776fa40-6c65-2aa6-1322-eb3a01201000@linux.intel.com>
Date: Fri, 10 Jul 2020 17:30:50 +0300
User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:68.0) Gecko/20100101
 Thunderbird/68.10.0
MIME-Version: 1.0
In-Reply-To: <76718dc6-5483-5e2e-85b8-64e70306ee1f@linux.ibm.com>
Content-Language: en-US
Subject: Re: [Intel-gfx] [PATCH v8 00/12] Introduce CAP_PERFMON to secure
 system performance monitoring and observability
X-BeenThere: intel-gfx@lists.freedesktop.org
X-Mailman-Version: 2.1.29
Precedence: list
List-Id: Intel graphics driver community testing & development
 <intel-gfx.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/intel-gfx>
List-Post: <mailto:intel-gfx@lists.freedesktop.org>
List-Help: <mailto:intel-gfx-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=subscribe>
Cc: linux-man@vger.kernel.org, Song Liu <songliubraving@fb.com>,
 Andi Kleen <ak@linux.intel.com>,
 "linux-doc@vger.kernel.org" <linux-doc@vger.kernel.org>,
 Peter Zijlstra <peterz@infradead.org>,
 linux-kernel <linux-kernel@vger.kernel.org>,
 "intel-gfx@lists.freedesktop.org" <intel-gfx@lists.freedesktop.org>,
 Igor Lubashev <ilubashe@akamai.com>, Alexei Starovoitov <ast@kernel.org>,
 Arnaldo Carvalho de Melo <acme@kernel.org>, James Morris <jmorris@namei.org>,
 "selinux@vger.kernel.org" <selinux@vger.kernel.org>,
 "linux-security-module@vger.kernel.org"
 <linux-security-module@vger.kernel.org>, Ingo Molnar <mingo@redhat.com>,
 Stephane Eranian <eranian@google.com>, Namhyung Kim <namhyung@kernel.org>,
 Thomas Gleixner <tglx@linutronix.de>, Jiri Olsa <jolsa@redhat.com>,
 Serge Hallyn <serge@hallyn.com>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: intel-gfx-bounces@lists.freedesktop.org
Sender: "Intel-gfx" <intel-gfx-bounces@lists.freedesktop.org>

CkhpIFJhdmksCgpPbiAxMC4wNy4yMDIwIDE2OjMxLCBSYXZpIEJhbmdvcmlhIHdyb3RlOgo+IEhp
IEFsZXhleSwKPiAKPj4gQ3VycmVudGx5IGFjY2VzcyB0byBwZXJmX2V2ZW50cywgaTkxNV9wZXJm
IGFuZCBvdGhlciBwZXJmb3JtYW5jZQo+PiBtb25pdG9yaW5nIGFuZCBvYnNlcnZhYmlsaXR5IHN1
YnN5c3RlbXMgb2YgdGhlIGtlcm5lbCBpcyBvcGVuIG9ubHkgZm9yCj4+IGEgcHJpdmlsZWdlZCBw
cm9jZXNzIFsxXSB3aXRoIENBUF9TWVNfQURNSU4gY2FwYWJpbGl0eSBlbmFibGVkIGluIHRoZQo+
PiBwcm9jZXNzIGVmZmVjdGl2ZSBzZXQgWzJdLgo+Pgo+PiBUaGlzIHBhdGNoIHNldCBpbnRyb2R1
Y2VzIENBUF9QRVJGTU9OIGNhcGFiaWxpdHkgZGVzaWduZWQgdG8gc2VjdXJlCj4+IHN5c3RlbSBw
ZXJmb3JtYW5jZSBtb25pdG9yaW5nIGFuZCBvYnNlcnZhYmlsaXR5IG9wZXJhdGlvbnMgc28gdGhh
dAo+PiBDQVBfUEVSRk1PTiB3b3VsZCBhc3Npc3QgQ0FQX1NZU19BRE1JTiBjYXBhYmlsaXR5IGlu
IGl0cyBnb3Zlcm5pbmcgcm9sZQo+PiBmb3IgcGVyZm9ybWFuY2UgbW9uaXRvcmluZyBhbmQgb2Jz
ZXJ2YWJpbGl0eSBzdWJzeXN0ZW1zIG9mIHRoZSBrZXJuZWwuCj4gCj4gSSdtIHNlZWluZyBhbiBp
c3N1ZSB3aXRoIENBUF9QRVJGTU9OIHdoZW4gSSB0cnkgdG8gcmVjb3JkIGRhdGEgZm9yIGEKPiBz
cGVjaWZpYyB0YXJnZXQuIEkgZG9uJ3Qga25vdyB3aGV0aGVyIHRoaXMgaXMgc29ydCBvZiBhIHJl
Z3Jlc3Npb24gb3IKPiBhbiBleHBlY3RlZCBiZWhhdmlvci4KClRoYW5rcyBmb3IgcmVwb3J0aW5n
IGFuZCByb290IGNhdXNpbmcgdGhpcyBjYXNlLiBUaGUgYmVoYXZpb3IgbG9va3MgbGlrZQpraW5k
IG9mIGV4cGVjdGVkIHNpbmNlIGN1cnJlbnRseSBDQVBfUEVSRk1PTiB0YWtlcyBvdmVyIHRoZSBy
ZWxhdGVkIHBhcnQKb2YgQ0FQX1NZU19BRE1JTiBjcmVkZW50aWFscyBvbmx5LiBBY3R1YWxseSBQ
ZXJmIHNlY3VyaXR5IGRvY3MgWzFdIHNheQp0aGF0IGFjY2VzcyBjb250cm9sIGlzIGFsc28gc3Vi
amVjdCB0byBDQVBfU1lTX1BUUkFDRSBjcmVkZW50aWFscy4KCkNBUF9QRVJGTU9OIGNvdWxkIGJl
IHVzZWQgdG8gZXh0ZW5kIGFuZCBzdWJzdGl0dXRlIHB0cmFjZV9tYXlfYWNjZXNzKCkKY2hlY2sg
aW4gcGVyZl9ldmVudHMgc3Vic3lzdGVtIHRvIHNpbXBsaWZ5IHVzZXIgZXhwZXJpZW5jZSBhdCBs
ZWFzdCBpbgp0aGlzIHNwZWNpZmljIGNhc2UuCgpBbGV4ZWkKClsxXSBodHRwczovL3d3dy5rZXJu
ZWwub3JnL2RvYy9odG1sL2xhdGVzdC9hZG1pbi1ndWlkZS9wZXJmLXNlY3VyaXR5Lmh0bWwKCj4g
Cj4gV2l0aG91dCBzZXR0aW5nIENBUF9QRVJGTU9OOgo+IAo+IMKgICQgZ2V0Y2FwIC4vcGVyZgo+
IMKgICQgLi9wZXJmIHN0YXQgLWEgbHMKPiDCoMKgwqAgRXJyb3I6Cj4gwqDCoMKgIEFjY2VzcyB0
byBwZXJmb3JtYW5jZSBtb25pdG9yaW5nIGFuZCBvYnNlcnZhYmlsaXR5IG9wZXJhdGlvbnMgaXMg
bGltaXRlZC4KPiDCoCAkIC4vcGVyZiBzdGF0IGxzCj4gwqDCoMKgIFBlcmZvcm1hbmNlIGNvdW50
ZXIgc3RhdHMgZm9yICdscyc6Cj4gwqDCoCDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDC
oCAyLjA2IG1zZWMgdGFzay1jbG9jazp1wqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqAgI8KgwqDC
oCAwLjQxOCBDUFVzIHV0aWxpemVkCj4gwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDC
oMKgwqAgMMKgwqDCoMKgwqAgY29udGV4dC1zd2l0Y2hlczp1wqDCoMKgwqDCoMKgwqAgI8KgwqDC
oCAwLjAwMCBLL3NlYwo+IMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgIDDC
oMKgwqDCoMKgIGNwdS1taWdyYXRpb25zOnXCoMKgwqDCoMKgwqDCoMKgwqAgI8KgwqDCoCAwLjAw
MCBLL3NlYwo+IAo+IFdpdGggQ0FQX1BFUkZNT046Cj4gCj4gwqAgJCBnZXRjYXAgLi9wZXJmCj4g
wqDCoMKgIC4vcGVyZiA9IGNhcF9wZXJmbW9uK2VwCj4gwqAgJCAuL3BlcmYgc3RhdCAtYSBscwo+
IMKgwqDCoCBQZXJmb3JtYW5jZSBjb3VudGVyIHN0YXRzIGZvciAnc3lzdGVtIHdpZGUnOgo+IMKg
wqAgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoCAxNDIuNDIgbXNlYyBjcHUtY2xvY2vCoMKg
wqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoCAjwqDCoCAyNS4wNjIgQ1BVcyB1dGlsaXplZAo+
IMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqAgMTgywqDCoMKgwqDCoCBjb250ZXh0
LXN3aXRjaGVzwqDCoMKgwqDCoMKgwqDCoMKgICPCoMKgwqAgMC4wMDEgTS9zZWMKPiDCoMKgwqDC
oMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqAgNDjCoMKgwqDCoMKgIGNwdS1taWdyYXRpb25z
wqDCoMKgwqDCoMKgwqDCoMKgwqDCoCAjwqDCoMKgIDAuMzM3IEsvc2VjCj4gwqAgJCAuL3BlcmYg
c3RhdCBscwo+IMKgwqDCoCBFcnJvcjoKPiDCoMKgwqAgQWNjZXNzIHRvIHBlcmZvcm1hbmNlIG1v
bml0b3JpbmcgYW5kIG9ic2VydmFiaWxpdHkgb3BlcmF0aW9ucyBpcyBsaW1pdGVkLgo+IAo+IEFt
IEkgbWlzc2luZyBzb21ldGhpbmcgc2lsbHk/Cj4gCj4gQW5hbHlzaXM6Cj4gLS0tLS0tLS0tCj4g
QSBiaXQgbW9yZSBhbmFseXNpcyBsZWFkIG1lIHRvIGJlbG93IGtlcm5lbCBjb2RlIGZzL2V4ZWMu
YzoKPiAKPiDCoCBiZWdpbl9uZXdfZXhlYygpCj4gwqAgewo+IMKgwqDCoMKgwqDCoMKgIC4uLgo+
IMKgwqDCoMKgwqDCoMKgIGlmIChicHJtLT5pbnRlcnBfZmxhZ3MgJiBCSU5QUk1fRkxBR1NfRU5G
T1JDRV9OT05EVU1QIHx8Cj4gwqDCoMKgwqDCoMKgwqDCoMKgwqDCoCAhKHVpZF9lcShjdXJyZW50
X2V1aWQoKSwgY3VycmVudF91aWQoKSkgJiYKPiDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoCBn
aWRfZXEoY3VycmVudF9lZ2lkKCksIGN1cnJlbnRfZ2lkKCkpKSkKPiDCoMKgwqDCoMKgwqDCoMKg
wqDCoMKgwqDCoMKgwqAgc2V0X2R1bXBhYmxlKGN1cnJlbnQtPm1tLCBzdWlkX2R1bXBhYmxlKTsK
PiDCoMKgwqDCoMKgwqDCoCBlbHNlCj4gwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgIHNl
dF9kdW1wYWJsZShjdXJyZW50LT5tbSwgU1VJRF9EVU1QX1VTRVIpOwo+IAo+IMKgwqDCoMKgwqDC
oMKgIC4uLgo+IMKgwqDCoMKgwqDCoMKgIGNvbW1pdF9jcmVkcyhicHJtLT5jcmVkKTsKPiDCoCB9
Cj4gCj4gV2hlbiBJIGV4ZWN1dGUgJy4vcGVyZiBzdGF0IGxzJywgaXQncyBnb2luZyBpbnRvIGVs
c2UgY29uZGl0aW9uIGFuZCB0aHVzIHNldHMKPiBkdW1wYWJsZSBmbGFnIGFzIFNVSURfRFVNUF9V
U0VSLiBUaGVuIGluIGNvbW1pdF9jcmVkcygpOgo+IAo+IMKgIGludCBjb21taXRfY3JlZHMoc3Ry
dWN0IGNyZWQgKm5ldykKPiDCoCB7Cj4gwqDCoMKgwqDCoMKgwqAgLi4uCj4gwqDCoMKgwqDCoMKg
wqAgLyogZHVtcGFiaWxpdHkgY2hhbmdlcyAqLwo+IMKgwqDCoMKgwqDCoMKgIGlmICguLi4KPiDC
oMKgwqDCoMKgwqDCoMKgwqDCoMKgICFjcmVkX2NhcF9pc3N1YnNldChvbGQsIG5ldykpIHsKPiDC
oMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqAgaWYgKHRhc2stPm1tKQo+IMKgwqDCoMKgwqDC
oMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqAgc2V0X2R1bXBhYmxlKHRhc2stPm1t
LCBzdWlkX2R1bXBhYmxlKTsKPiDCoCB9Cj4gCj4gIWNyZWRfY2FwX2lzc3Vic2V0KG9sZCwgbmV3
KSBmYWlscyBmb3IgcGVyZiB3aXRob3V0IGFueSBjYXBhYmlsaXR5IGFuZCB0aHVzCj4gaXQgZG9l
c24ndCBleGVjdXRlIHNldF9kdW1wYWJsZSgpLiBXaGVyZWFzIHRoYXQgY29uZGl0aW9uIHBhc3Nl
cyBmb3IgcGVyZgo+IHdpdGggQ0FQX1BFUkZNT04gYW5kIHRodXMgaXQgb3ZlcndyaXRlcyBvbGQg
dmFsdWUgKFNVSURfRFVNUF9VU0VSKSB3aXRoCj4gc3VpZF9kdW1wYWJsZSBpbiBtbV9mbGFncy4g
T24gYW4gVWJ1bnR1LCBzdWlkX2R1bXBhYmxlIGRlZmF1bHQgdmFsdWUgaXMKPiBTVUlEX0RVTVBf
Uk9PVC4gT24gRmVkb3JhLCBpdCdzIFNVSURfRFVNUF9ESVNBQkxFLiAoL3Byb2Mvc3lzL2ZzL3N1
aWRfZHVtcGFibGUpLgo+IAo+IE5vdyB3aGlsZSBvcGVuaW5nIGFuIGV2ZW50Ogo+IAo+IMKgIHBl
cmZfZXZlbnRfb3BlbigpCj4gwqDCoMKgIHB0cmFjZV9tYXlfYWNjZXNzKCkKPiDCoMKgwqDCoMKg
IF9fcHRyYWNlX21heV9hY2Nlc3MoKSB7Cj4gwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKg
IC4uLgo+IMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoCBpZiAobW0gJiYKPiDCoMKgwqDC
oMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoCAoKGdldF9kdW1wYWJsZShtbSkgIT0gU1VJ
RF9EVU1QX1VTRVIpICYmCj4gwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDC
oCAhcHRyYWNlX2hhc19jYXAoY3JlZCwgbW0tPnVzZXJfbnMsIG1vZGUpKSkKPiDCoMKgwqDCoMKg
wqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoCByZXR1cm4gLUVQRVJNOwo+IMKgwqDCoMKgwqAg
fQo+IAo+IFRoaXMgaWYgY29uZGl0aW9uIHBhc3NlcyBmb3IgcGVyZiB3aXRoIENBUF9QRVJGTU9O
IGFuZCB0aHVzIGl0IHJldHVybnMgLUVQRVJNLgo+IEJ1dCBpdCBmYWlscyBmb3IgcGVyZiB3aXRo
b3V0IENBUF9QRVJGTU9OIGFuZCB0aHVzIGl0IGdvZXMgYWhlYWQgYW5kIHJldHVybnMKPiBzdWNj
ZXNzLiBTbyBvcGVuaW5nIGFuIGV2ZW50IGZhaWxzIHdoZW4gcGVyZiBoYXMgQ0FQX1BSRUZNT04g
YW5kIHRyaWVzIHRvIG9wZW4KPiBwcm9jZXNzIHNwZWNpZmljIGV2ZW50IGFzIG5vcm1hbCB1c2Vy
Lgo+IAo+IFdvcmthcm91bmRzOgo+IC0tLS0tLS0tLS0tLQo+IEJhc2VkIG9uIGFib3ZlIGFuYWx5
c2lzLCBJIGZvdW5kIGNvdXBsZSBvZiB3b3JrYXJvdW5kcyAoZXhhbXBsZXMgYXJlIG9uCj4gVWJ1
bnR1IDE4LjA0LjQgcG93ZXJwYyk6Cj4gCj4gV29ya2Fyb3VuZDE6Cj4gU2V0dGluZyBTVUlEX0RV
TVBfVVNFUiBhcyBkZWZhdWx0IChpbiAvcHJvYy9zeXMvZnMvc3VpZF9kdW1wYWJsZSkgc29sdmVz
IHRoZQo+IGlzc3VlLgo+IAo+IMKgICMgZWNobyAxID4gL3Byb2Mvc3lzL2ZzL3N1aWRfZHVtcGFi
bGUKPiDCoCAkIGdldGNhcCAuL3BlcmYKPiDCoMKgwqAgLi9wZXJmID0gY2FwX3BlcmZtb24rZXAK
PiDCoCAkIC4vcGVyZiBzdGF0IGxzCj4gwqDCoMKgIFBlcmZvcm1hbmNlIGNvdW50ZXIgc3RhdHMg
Zm9yICdscyc6Cj4gwqDCoCDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoCAxLjQ3IG1z
ZWMgdGFzay1jbG9ja8KgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoCAjwqDCoMKgIDAuODA2
IENQVXMgdXRpbGl6ZWQKPiDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoCAw
wqDCoMKgwqDCoCBjb250ZXh0LXN3aXRjaGVzwqDCoMKgwqDCoMKgwqDCoMKgICPCoMKgwqAgMC4w
MDAgSy9zZWMKPiDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoCAwwqDCoMKg
wqDCoCBjcHUtbWlncmF0aW9uc8KgwqDCoMKgwqDCoMKgwqDCoMKgwqAgI8KgwqDCoCAwLjAwMCBL
L3NlYwo+IAo+IFdvcmthcm91bmQyOgo+IFVzaW5nIENBUF9TWVNfUFRSQUNFIGFsb25nIHdpdGgg
Q0FQX1BFUkZNT04gc29sdmVzIHRoZSBpc3N1ZS4KPiAKPiDCoCAkIGNhdCAvcHJvYy9zeXMvZnMv
c3VpZF9kdW1wYWJsZQo+IMKgwqDCoCAyCj4gwqAgIyBzZXRjYXAgImNhcF9wZXJmbW9uLGNhcF9z
eXNfcHRyYWNlPWVwIiAuL3BlcmYKPiDCoCAkIC4vcGVyZiBzdGF0IGxzCj4gwqDCoMKgIFBlcmZv
cm1hbmNlIGNvdW50ZXIgc3RhdHMgZm9yICdscyc6Cj4gwqDCoCDCoMKgwqDCoMKgwqDCoMKgwqDC
oMKgwqDCoMKgwqDCoCAxLjQxIG1zZWMgdGFzay1jbG9ja8KgwqDCoMKgwqDCoMKgwqDCoMKgwqDC
oMKgwqDCoCAjwqDCoMKgIDAuODI2IENQVXMgdXRpbGl6ZWQKPiDCoMKgwqDCoMKgwqDCoMKgwqDC
oMKgwqDCoMKgwqDCoMKgwqDCoCAwwqDCoMKgwqDCoCBjb250ZXh0LXN3aXRjaGVzwqDCoMKgwqDC
oMKgwqDCoMKgICPCoMKgwqAgMC4wMDAgSy9zZWMKPiDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDC
oMKgwqDCoMKgwqDCoCAwwqDCoMKgwqDCoCBjcHUtbWlncmF0aW9uc8KgwqDCoMKgwqDCoMKgwqDC
oMKgwqAgI8KgwqDCoCAwLjAwMCBLL3NlYwo+IAo+IFdvcmthcm91bmQzOgo+IEFkZGluZyBDQVBf
UEVSRk1PTiB0byBwYXJlbnQgb2YgcGVyZiAoL2Jpbi9iYXNoKSBhbHNvIHNvbHZlcyB0aGUgaXNz
dWUuCj4gCj4gwqAgJCBjYXQgL3Byb2Mvc3lzL2ZzL3N1aWRfZHVtcGFibGUKPiDCoMKgwqAgMgo+
IMKgICMgc2V0Y2FwICJjYXBfcGVyZm1vbj1lcCIgL2Jpbi9iYXNoCj4gwqAgIyBzZXRjYXAgImNh
cF9wZXJmbW9uPWVwIiAuL3BlcmYKPiDCoCAkIGJhc2gKPiDCoCAkIC4vcGVyZiBzdGF0IGxzCj4g
wqDCoMKgIFBlcmZvcm1hbmNlIGNvdW50ZXIgc3RhdHMgZm9yICdscyc6Cj4gwqDCoCDCoMKgwqDC
oMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoCAxLjQ3IG1zZWMgdGFzay1jbG9ja8KgwqDCoMKgwqDC
oMKgwqDCoMKgwqDCoMKgwqDCoCAjwqDCoMKgIDAuODA2IENQVXMgdXRpbGl6ZWQKPiDCoMKgwqDC
oMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoCAwwqDCoMKgwqDCoCBjb250ZXh0LXN3aXRj
aGVzwqDCoMKgwqDCoMKgwqDCoMKgICPCoMKgwqAgMC4wMDAgSy9zZWMKPiDCoMKgwqDCoMKgwqDC
oMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoCAwwqDCoMKgwqDCoCBjcHUtbWlncmF0aW9uc8KgwqDC
oMKgwqDCoMKgwqDCoMKgwqAgI8KgwqDCoCAwLjAwMCBLL3NlYwo+IAo+IC0gUmF2aQpfX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpJbnRlbC1nZnggbWFpbGlu
ZyBsaXN0CkludGVsLWdmeEBsaXN0cy5mcmVlZGVza3RvcC5vcmcKaHR0cHM6Ly9saXN0cy5mcmVl
ZGVza3RvcC5vcmcvbWFpbG1hbi9saXN0aW5mby9pbnRlbC1nZngK

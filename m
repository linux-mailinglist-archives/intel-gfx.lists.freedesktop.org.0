Return-Path: <intel-gfx-bounces@lists.freedesktop.org>
X-Original-To: lists+intel-gfx@lfdr.de
Delivered-To: lists+intel-gfx@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [IPv6:2610:10:20:722:a800:ff:fe36:1795])
	by mail.lfdr.de (Postfix) with ESMTPS id B6257177D85
	for <lists+intel-gfx@lfdr.de>; Tue,  3 Mar 2020 18:33:25 +0100 (CET)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 0BF1A6E928;
	Tue,  3 Mar 2020 17:33:24 +0000 (UTC)
X-Original-To: intel-gfx@lists.freedesktop.org
Delivered-To: intel-gfx@lists.freedesktop.org
Received: from mga05.intel.com (mga05.intel.com [192.55.52.43])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 96C9D6E928
 for <intel-gfx@lists.freedesktop.org>; Tue,  3 Mar 2020 17:33:22 +0000 (UTC)
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from fmsmga007.fm.intel.com ([10.253.24.52])
 by fmsmga105.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384;
 03 Mar 2020 09:33:22 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.70,511,1574150400"; d="scan'208";a="232330577"
Received: from stinkbox.fi.intel.com (HELO stinkbox) ([10.237.72.174])
 by fmsmga007.fm.intel.com with SMTP; 03 Mar 2020 09:33:20 -0800
Received: by stinkbox (sSMTP sendmail emulation);
 Tue, 03 Mar 2020 19:33:19 +0200
From: Ville Syrjala <ville.syrjala@linux.intel.com>
To: intel-gfx@lists.freedesktop.org
Date: Tue,  3 Mar 2020 19:33:06 +0200
Message-Id: <20200303173313.28117-3-ville.syrjala@linux.intel.com>
X-Mailer: git-send-email 2.24.1
In-Reply-To: <20200303173313.28117-1-ville.syrjala@linux.intel.com>
References: <20200303173313.28117-1-ville.syrjala@linux.intel.com>
MIME-Version: 1.0
Subject: [Intel-gfx] [PATCH v2 2/9] drm/i915: Clean up
 i9xx_load_luts_internal()
X-BeenThere: intel-gfx@lists.freedesktop.org
X-Mailman-Version: 2.1.29
Precedence: list
List-Id: Intel graphics driver community testing & development
 <intel-gfx.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/intel-gfx>
List-Post: <mailto:intel-gfx@lists.freedesktop.org>
List-Help: <mailto:intel-gfx-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: intel-gfx-bounces@lists.freedesktop.org
Sender: "Intel-gfx" <intel-gfx-bounces@lists.freedesktop.org>

RnJvbTogVmlsbGUgU3lyasOkbMOkIDx2aWxsZS5zeXJqYWxhQGxpbnV4LmludGVsLmNvbT4KClNw
bGl0IGk5eHhfbG9hZF9sdXRzX2ludGVybmFsKCkgaW50byBuZWF0IGdtY2ggdnMuIGlsaysgY2h1
bmtzLgpBdm9pZHMgYXQgbGVhc3Qgb25lIGJyYW5jaCBpbiB0aGUgaW5uZXIgbG9vcCwgYW5kIG1h
a2VzIGxpZmUKYSBiaXQgbGVzcyBjb25mdXNpbmcuCgpTaWduZWQtb2ZmLWJ5OiBWaWxsZSBTeXJq
w6Rsw6QgPHZpbGxlLnN5cmphbGFAbGludXguaW50ZWwuY29tPgotLS0KIGRyaXZlcnMvZ3B1L2Ry
bS9pOTE1L2Rpc3BsYXkvaW50ZWxfY29sb3IuYyB8IDEwNCArKysrKysrKysrKystLS0tLS0tLS0K
IDEgZmlsZSBjaGFuZ2VkLCA2MCBpbnNlcnRpb25zKCspLCA0NCBkZWxldGlvbnMoLSkKCmRpZmYg
LS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5L2ludGVsX2NvbG9yLmMgYi9kcml2
ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5L2ludGVsX2NvbG9yLmMKaW5kZXggNDQ0OTgwZmRlZGE2
Li5jZjhlZDRlMmFlMTMgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkv
aW50ZWxfY29sb3IuYworKysgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5L2ludGVsX2Nv
bG9yLmMKQEAgLTQxNyw0MyArNDE3LDYgQEAgc3RhdGljIHUzMiBpbGtfbHV0XzEwKGNvbnN0IHN0
cnVjdCBkcm1fY29sb3JfbHV0ICpjb2xvcikKIAkJZHJtX2NvbG9yX2x1dF9leHRyYWN0KGNvbG9y
LT5ibHVlLCAxMCk7CiB9CiAKLS8qIExvYWRzIHRoZSBsZWdhY3kgcGFsZXR0ZS9nYW1tYSB1bml0
IGZvciB0aGUgQ1JUQy4gKi8KLXN0YXRpYyB2b2lkIGk5eHhfbG9hZF9sdXRzX2ludGVybmFsKGNv
bnN0IHN0cnVjdCBpbnRlbF9jcnRjX3N0YXRlICpjcnRjX3N0YXRlLAotCQkJCSAgICBjb25zdCBz
dHJ1Y3QgZHJtX3Byb3BlcnR5X2Jsb2IgKmJsb2IpCi17Ci0Jc3RydWN0IGludGVsX2NydGMgKmNy
dGMgPSB0b19pbnRlbF9jcnRjKGNydGNfc3RhdGUtPnVhcGkuY3J0Yyk7Ci0Jc3RydWN0IGRybV9p
OTE1X3ByaXZhdGUgKmRldl9wcml2ID0gdG9faTkxNShjcnRjLT5iYXNlLmRldik7Ci0JZW51bSBw
aXBlIHBpcGUgPSBjcnRjLT5waXBlOwotCWludCBpOwotCi0JaWYgKEhBU19HTUNIKGRldl9wcml2
KSkgewotCQlpZiAoaW50ZWxfY3J0Y19oYXNfdHlwZShjcnRjX3N0YXRlLCBJTlRFTF9PVVRQVVRf
RFNJKSkKLQkJCWFzc2VydF9kc2lfcGxsX2VuYWJsZWQoZGV2X3ByaXYpOwotCQllbHNlCi0JCQlh
c3NlcnRfcGxsX2VuYWJsZWQoZGV2X3ByaXYsIHBpcGUpOwotCX0KLQotCWlmIChibG9iKSB7Ci0J
CWNvbnN0IHN0cnVjdCBkcm1fY29sb3JfbHV0ICpsdXQgPSBibG9iLT5kYXRhOwotCi0JCWZvciAo
aSA9IDA7IGkgPCAyNTY7IGkrKykgewotCQkJdTMyIHdvcmQgPSBpOXh4X2x1dF84KCZsdXRbaV0p
OwotCi0JCQlpZiAoSEFTX0dNQ0goZGV2X3ByaXYpKQotCQkJCWludGVsX2RlX3dyaXRlKGRldl9w
cml2LCBQQUxFVFRFKHBpcGUsIGkpLAotCQkJCQkgICAgICAgd29yZCk7Ci0JCQllbHNlCi0JCQkJ
aW50ZWxfZGVfd3JpdGUoZGV2X3ByaXYsIExHQ19QQUxFVFRFKHBpcGUsIGkpLAotCQkJCQkgICAg
ICAgd29yZCk7Ci0JCX0KLQl9Ci19Ci0KLXN0YXRpYyB2b2lkIGk5eHhfbG9hZF9sdXRzKGNvbnN0
IHN0cnVjdCBpbnRlbF9jcnRjX3N0YXRlICpjcnRjX3N0YXRlKQotewotCWk5eHhfbG9hZF9sdXRz
X2ludGVybmFsKGNydGNfc3RhdGUsIGNydGNfc3RhdGUtPmh3LmdhbW1hX2x1dCk7Ci19Ci0KIHN0
YXRpYyB2b2lkIGk5eHhfY29sb3JfY29tbWl0KGNvbnN0IHN0cnVjdCBpbnRlbF9jcnRjX3N0YXRl
ICpjcnRjX3N0YXRlKQogewogCXN0cnVjdCBpbnRlbF9jcnRjICpjcnRjID0gdG9faW50ZWxfY3J0
YyhjcnRjX3N0YXRlLT51YXBpLmNydGMpOwpAQCAtNTIwLDYgKzQ4MywzNSBAQCBzdGF0aWMgdm9p
ZCBza2xfY29sb3JfY29tbWl0KGNvbnN0IHN0cnVjdCBpbnRlbF9jcnRjX3N0YXRlICpjcnRjX3N0
YXRlKQogCQlpbGtfbG9hZF9jc2NfbWF0cml4KGNydGNfc3RhdGUpOwogfQogCitzdGF0aWMgdm9p
ZCBpOXh4X2xvYWRfbHV0Xzgoc3RydWN0IGludGVsX2NydGMgKmNydGMsCisJCQkgICAgY29uc3Qg
c3RydWN0IGRybV9wcm9wZXJ0eV9ibG9iICpibG9iKQoreworCXN0cnVjdCBkcm1faTkxNV9wcml2
YXRlICpkZXZfcHJpdiA9IHRvX2k5MTUoY3J0Yy0+YmFzZS5kZXYpOworCWNvbnN0IHN0cnVjdCBk
cm1fY29sb3JfbHV0ICpsdXQ7CisJZW51bSBwaXBlIHBpcGUgPSBjcnRjLT5waXBlOworCWludCBp
OworCisJaWYgKCFibG9iKQorCQlyZXR1cm47CisKKwlsdXQgPSBibG9iLT5kYXRhOworCisJZm9y
IChpID0gMDsgaSA8IDI1NjsgaSsrKQorCQlpbnRlbF9kZV93cml0ZShkZXZfcHJpdiwgUEFMRVRU
RShwaXBlLCBpKSwKKwkJCSAgICAgICBpOXh4X2x1dF84KCZsdXRbaV0pKTsKK30KKworc3RhdGlj
IHZvaWQgaTl4eF9sb2FkX2x1dHMoY29uc3Qgc3RydWN0IGludGVsX2NydGNfc3RhdGUgKmNydGNf
c3RhdGUpCit7CisJc3RydWN0IGludGVsX2NydGMgKmNydGMgPSB0b19pbnRlbF9jcnRjKGNydGNf
c3RhdGUtPnVhcGkuY3J0Yyk7CisJc3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmRldl9wcml2ID0g
dG9faTkxNShjcnRjLT5iYXNlLmRldik7CisJY29uc3Qgc3RydWN0IGRybV9wcm9wZXJ0eV9ibG9i
ICpnYW1tYV9sdXQgPSBjcnRjX3N0YXRlLT5ody5nYW1tYV9sdXQ7CisKKwlhc3NlcnRfcGxsX2Vu
YWJsZWQoZGV2X3ByaXYsIGNydGMtPnBpcGUpOworCisJaTl4eF9sb2FkX2x1dF84KGNydGMsIGdh
bW1hX2x1dCk7Cit9CisKIHN0YXRpYyB2b2lkIGk5NjVfbG9hZF9sdXRfMTBwNihzdHJ1Y3QgaW50
ZWxfY3J0YyAqY3J0YywKIAkJCSAgICAgICBjb25zdCBzdHJ1Y3QgZHJtX3Byb3BlcnR5X2Jsb2Ig
KmJsb2IpCiB7CkBAIC01NDMsMTQgKzUzNSwzOCBAQCBzdGF0aWMgdm9pZCBpOTY1X2xvYWRfbHV0
XzEwcDYoc3RydWN0IGludGVsX2NydGMgKmNydGMsCiBzdGF0aWMgdm9pZCBpOTY1X2xvYWRfbHV0
cyhjb25zdCBzdHJ1Y3QgaW50ZWxfY3J0Y19zdGF0ZSAqY3J0Y19zdGF0ZSkKIHsKIAlzdHJ1Y3Qg
aW50ZWxfY3J0YyAqY3J0YyA9IHRvX2ludGVsX2NydGMoY3J0Y19zdGF0ZS0+dWFwaS5jcnRjKTsK
KwlzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0ZSAqZGV2X3ByaXYgPSB0b19pOTE1KGNydGMtPmJhc2Uu
ZGV2KTsKIAljb25zdCBzdHJ1Y3QgZHJtX3Byb3BlcnR5X2Jsb2IgKmdhbW1hX2x1dCA9IGNydGNf
c3RhdGUtPmh3LmdhbW1hX2x1dDsKIAorCWlmIChpbnRlbF9jcnRjX2hhc190eXBlKGNydGNfc3Rh
dGUsIElOVEVMX09VVFBVVF9EU0kpKQorCQlhc3NlcnRfZHNpX3BsbF9lbmFibGVkKGRldl9wcml2
KTsKKwllbHNlCisJCWFzc2VydF9wbGxfZW5hYmxlZChkZXZfcHJpdiwgY3J0Yy0+cGlwZSk7CisK
IAlpZiAoY3J0Y19zdGF0ZS0+Z2FtbWFfbW9kZSA9PSBHQU1NQV9NT0RFX01PREVfOEJJVCkKLQkJ
aTl4eF9sb2FkX2x1dHMoY3J0Y19zdGF0ZSk7CisJCWk5eHhfbG9hZF9sdXRfOChjcnRjLCBnYW1t
YV9sdXQpOwogCWVsc2UKIAkJaTk2NV9sb2FkX2x1dF8xMHA2KGNydGMsIGdhbW1hX2x1dCk7CiB9
CiAKK3N0YXRpYyB2b2lkIGlsa19sb2FkX2x1dF84KHN0cnVjdCBpbnRlbF9jcnRjICpjcnRjLAor
CQkJICAgY29uc3Qgc3RydWN0IGRybV9wcm9wZXJ0eV9ibG9iICpibG9iKQoreworCXN0cnVjdCBk
cm1faTkxNV9wcml2YXRlICpkZXZfcHJpdiA9IHRvX2k5MTUoY3J0Yy0+YmFzZS5kZXYpOworCWNv
bnN0IHN0cnVjdCBkcm1fY29sb3JfbHV0ICpsdXQ7CisJZW51bSBwaXBlIHBpcGUgPSBjcnRjLT5w
aXBlOworCWludCBpOworCisJaWYgKCFibG9iKQorCQlyZXR1cm47CisKKwlsdXQgPSBibG9iLT5k
YXRhOworCisJZm9yIChpID0gMDsgaSA8IDI1NjsgaSsrKQorCQlpbnRlbF9kZV93cml0ZShkZXZf
cHJpdiwgTEdDX1BBTEVUVEUocGlwZSwgaSksCisJCQkgICAgICAgaTl4eF9sdXRfOCgmbHV0W2ld
KSk7Cit9CisKIHN0YXRpYyB2b2lkIGlsa19sb2FkX2x1dF8xMChzdHJ1Y3QgaW50ZWxfY3J0YyAq
Y3J0YywKIAkJCSAgICBjb25zdCBzdHJ1Y3QgZHJtX3Byb3BlcnR5X2Jsb2IgKmJsb2IpCiB7CkBA
IC01NjEsNyArNTc3LDcgQEAgc3RhdGljIHZvaWQgaWxrX2xvYWRfbHV0XzEwKHN0cnVjdCBpbnRl
bF9jcnRjICpjcnRjLAogCiAJZm9yIChpID0gMDsgaSA8IGx1dF9zaXplOyBpKyspCiAJCWludGVs
X2RlX3dyaXRlKGRldl9wcml2LCBQUkVDX1BBTEVUVEUocGlwZSwgaSksCi0JCSAgICAgICAgICAg
ICAgIGlsa19sdXRfMTAoJmx1dFtpXSkpOworCQkJICAgICAgIGlsa19sdXRfMTAoJmx1dFtpXSkp
OwogfQogCiBzdGF0aWMgdm9pZCBpbGtfbG9hZF9sdXRzKGNvbnN0IHN0cnVjdCBpbnRlbF9jcnRj
X3N0YXRlICpjcnRjX3N0YXRlKQpAQCAtNTcwLDcgKzU4Niw3IEBAIHN0YXRpYyB2b2lkIGlsa19s
b2FkX2x1dHMoY29uc3Qgc3RydWN0IGludGVsX2NydGNfc3RhdGUgKmNydGNfc3RhdGUpCiAJY29u
c3Qgc3RydWN0IGRybV9wcm9wZXJ0eV9ibG9iICpnYW1tYV9sdXQgPSBjcnRjX3N0YXRlLT5ody5n
YW1tYV9sdXQ7CiAKIAlpZiAoY3J0Y19zdGF0ZS0+Z2FtbWFfbW9kZSA9PSBHQU1NQV9NT0RFX01P
REVfOEJJVCkKLQkJaTl4eF9sb2FkX2x1dHMoY3J0Y19zdGF0ZSk7CisJCWlsa19sb2FkX2x1dF84
KGNydGMsIGdhbW1hX2x1dCk7CiAJZWxzZQogCQlpbGtfbG9hZF9sdXRfMTAoY3J0YywgZ2FtbWFf
bHV0KTsKIH0KQEAgLTY4MCw3ICs2OTYsNyBAQCBzdGF0aWMgdm9pZCBpdmJfbG9hZF9sdXRzKGNv
bnN0IHN0cnVjdCBpbnRlbF9jcnRjX3N0YXRlICpjcnRjX3N0YXRlKQogCWNvbnN0IHN0cnVjdCBk
cm1fcHJvcGVydHlfYmxvYiAqZGVnYW1tYV9sdXQgPSBjcnRjX3N0YXRlLT5ody5kZWdhbW1hX2x1
dDsKIAogCWlmIChjcnRjX3N0YXRlLT5nYW1tYV9tb2RlID09IEdBTU1BX01PREVfTU9ERV84QklU
KSB7Ci0JCWk5eHhfbG9hZF9sdXRzKGNydGNfc3RhdGUpOworCQlpbGtfbG9hZF9sdXRfOChjcnRj
LCBnYW1tYV9sdXQpOwogCX0gZWxzZSBpZiAoY3J0Y19zdGF0ZS0+Z2FtbWFfbW9kZSA9PSBHQU1N
QV9NT0RFX01PREVfU1BMSVQpIHsKIAkJaXZiX2xvYWRfbHV0XzEwKGNydGMsIGRlZ2FtbWFfbHV0
LCBQQUxfUFJFQ19TUExJVF9NT0RFIHwKIAkJCQlQQUxfUFJFQ19JTkRFWF9WQUxVRSgwKSk7CkBA
IC03MDMsNyArNzE5LDcgQEAgc3RhdGljIHZvaWQgYmR3X2xvYWRfbHV0cyhjb25zdCBzdHJ1Y3Qg
aW50ZWxfY3J0Y19zdGF0ZSAqY3J0Y19zdGF0ZSkKIAljb25zdCBzdHJ1Y3QgZHJtX3Byb3BlcnR5
X2Jsb2IgKmRlZ2FtbWFfbHV0ID0gY3J0Y19zdGF0ZS0+aHcuZGVnYW1tYV9sdXQ7CiAKIAlpZiAo
Y3J0Y19zdGF0ZS0+Z2FtbWFfbW9kZSA9PSBHQU1NQV9NT0RFX01PREVfOEJJVCkgewotCQlpOXh4
X2xvYWRfbHV0cyhjcnRjX3N0YXRlKTsKKwkJaWxrX2xvYWRfbHV0XzgoY3J0YywgZ2FtbWFfbHV0
KTsKIAl9IGVsc2UgaWYgKGNydGNfc3RhdGUtPmdhbW1hX21vZGUgPT0gR0FNTUFfTU9ERV9NT0RF
X1NQTElUKSB7CiAJCWJkd19sb2FkX2x1dF8xMChjcnRjLCBkZWdhbW1hX2x1dCwgUEFMX1BSRUNf
U1BMSVRfTU9ERSB8CiAJCQkJUEFMX1BSRUNfSU5ERVhfVkFMVUUoMCkpOwpAQCAtODA3LDcgKzgy
Myw3IEBAIHN0YXRpYyB2b2lkIGdsa19sb2FkX2x1dHMoY29uc3Qgc3RydWN0IGludGVsX2NydGNf
c3RhdGUgKmNydGNfc3RhdGUpCiAJCWdsa19sb2FkX2RlZ2FtbWFfbHV0X2xpbmVhcihjcnRjX3N0
YXRlKTsKIAogCWlmIChjcnRjX3N0YXRlLT5nYW1tYV9tb2RlID09IEdBTU1BX01PREVfTU9ERV84
QklUKSB7Ci0JCWk5eHhfbG9hZF9sdXRzKGNydGNfc3RhdGUpOworCQlpbGtfbG9hZF9sdXRfOChj
cnRjLCBnYW1tYV9sdXQpOwogCX0gZWxzZSB7CiAJCWJkd19sb2FkX2x1dF8xMChjcnRjLCBnYW1t
YV9sdXQsIFBBTF9QUkVDX0lOREVYX1ZBTFVFKDApKTsKIAkJaXZiX2xvYWRfbHV0X2V4dF9tYXgo
Y3J0Yyk7CkBAIC05NDMsNyArOTU5LDcgQEAgc3RhdGljIHZvaWQgaWNsX2xvYWRfbHV0cyhjb25z
dCBzdHJ1Y3QgaW50ZWxfY3J0Y19zdGF0ZSAqY3J0Y19zdGF0ZSkKIAogCXN3aXRjaCAoY3J0Y19z
dGF0ZS0+Z2FtbWFfbW9kZSAmIEdBTU1BX01PREVfTU9ERV9NQVNLKSB7CiAJY2FzZSBHQU1NQV9N
T0RFX01PREVfOEJJVDoKLQkJaTl4eF9sb2FkX2x1dHMoY3J0Y19zdGF0ZSk7CisJCWlsa19sb2Fk
X2x1dF84KGNydGMsIGdhbW1hX2x1dCk7CiAJCWJyZWFrOwogCWNhc2UgR0FNTUFfTU9ERV9NT0RF
XzEyQklUX01VTFRJX1NFR01FTlRFRDoKIAkJaWNsX3Byb2dyYW1fZ2FtbWFfc3VwZXJmaW5lX3Nl
Z21lbnQoY3J0Y19zdGF0ZSk7Ci0tIAoyLjI0LjEKCl9fX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fCkludGVsLWdmeCBtYWlsaW5nIGxpc3QKSW50ZWwtZ2Z4QGxp
c3RzLmZyZWVkZXNrdG9wLm9yZwpodHRwczovL2xpc3RzLmZyZWVkZXNrdG9wLm9yZy9tYWlsbWFu
L2xpc3RpbmZvL2ludGVsLWdmeAo=

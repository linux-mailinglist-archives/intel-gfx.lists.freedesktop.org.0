Return-Path: <intel-gfx-bounces@lists.freedesktop.org>
X-Original-To: lists+intel-gfx@lfdr.de
Delivered-To: lists+intel-gfx@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [IPv6:2610:10:20:722:a800:ff:fe36:1795])
	by mail.lfdr.de (Postfix) with ESMTPS id 9B72E19463D
	for <lists+intel-gfx@lfdr.de>; Thu, 26 Mar 2020 19:14:17 +0100 (CET)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 9530C6E909;
	Thu, 26 Mar 2020 18:14:14 +0000 (UTC)
X-Original-To: intel-gfx@lists.freedesktop.org
Delivered-To: intel-gfx@lists.freedesktop.org
Received: from mga02.intel.com (mga02.intel.com [134.134.136.20])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 0E84A6E904
 for <intel-gfx@lists.freedesktop.org>; Thu, 26 Mar 2020 18:14:13 +0000 (UTC)
IronPort-SDR: G4fAhayFYCgFDmoSagAZczM2DJ8QDU7MmRRcymWa4gjfYU6jnBzUlCdabpVq7rJA1JS5rjdzbP
 UcEZGhk/+caQ==
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from orsmga005.jf.intel.com ([10.7.209.41])
 by orsmga101.jf.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384;
 26 Mar 2020 11:14:12 -0700
IronPort-SDR: m8YlaY3ELQLRUDYXj3Kvx/7DKylcxq6g32alaQzA2SBgkc/2t35zouUOBQ9rkbor/MxSd7DSej
 UTXVZ6VshLHA==
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.72,309,1580803200"; d="scan'208";a="420808323"
Received: from unknown (HELO slisovsk-Lenovo-ideapad-720S-13IKB.fi.intel.com)
 ([10.237.72.89])
 by orsmga005.jf.intel.com with ESMTP; 26 Mar 2020 11:14:10 -0700
From: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
To: intel-gfx@lists.freedesktop.org
Date: Thu, 26 Mar 2020 20:10:04 +0200
Message-Id: <20200326181005.11775-10-stanislav.lisovskiy@intel.com>
X-Mailer: git-send-email 2.24.1.485.gad05a3d8e5
In-Reply-To: <20200326181005.11775-1-stanislav.lisovskiy@intel.com>
References: <20200326181005.11775-1-stanislav.lisovskiy@intel.com>
MIME-Version: 1.0
Subject: [Intel-gfx] [PATCH v20 09/10] drm/i915: Restrict qgv points which
 don't have enough bandwidth.
X-BeenThere: intel-gfx@lists.freedesktop.org
X-Mailman-Version: 2.1.29
Precedence: list
List-Id: Intel graphics driver community testing & development
 <intel-gfx.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/intel-gfx>
List-Post: <mailto:intel-gfx@lists.freedesktop.org>
List-Help: <mailto:intel-gfx-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=subscribe>
Cc: jani.nikula@intel.com
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: intel-gfx-bounces@lists.freedesktop.org
Sender: "Intel-gfx" <intel-gfx-bounces@lists.freedesktop.org>

QWNjb3JkaW5nIHRvIEJTcGVjIDUzOTk4LCB3ZSBzaG91bGQgdHJ5IHRvCnJlc3RyaWN0IHFndiBw
b2ludHMsIHdoaWNoIGNhbid0IHByb3ZpZGUKZW5vdWdoIGJhbmR3aWR0aCBmb3IgZGVzaXJlZCBk
aXNwbGF5IGNvbmZpZ3VyYXRpb24uCgpDdXJyZW50bHkgd2UgYXJlIGp1c3QgY29tcGFyaW5nIGFn
YWluc3QgYWxsIG9mCnRob3NlIGFuZCB0YWtlIG1pbmltdW0od29yc3QgY2FzZSkuCgp2MjogRml4
ZWQgd3JvbmcgUENvZGUgcmVwbHkgbWFzaywgcmVtb3ZlZCBoYXJkY29kZWQKICAgIHZhbHVlcy4K
CnYzOiBGb3JiaWQgc2ltdWx0YW5lb3VzIGxlZ2FjeSBTQUdWIFBDb2RlIHJlcXVlc3RzIGFuZAog
ICAgcmVzdHJpY3RpbmcgcWd2IHBvaW50cy4gUHV0IHRoZSBhY3R1YWwgcmVzdHJpY3Rpb24KICAg
IHRvIGNvbW1pdCBmdW5jdGlvbiwgYWRkZWQgc2VyaWFsaXphdGlvbih0aGFua3MgdG8gVmlsbGUp
CiAgICB0byBwcmV2ZW50IGNvbW1pdCBiZWluZyBhcHBsaWVkIG91dCBvZiBvcmRlciBpbiBjYXNl
IG9mCiAgICBub25ibG9ja2luZyBhbmQvb3Igbm9tb2Rlc2V0IGNvbW1pdHMuCgp2NDoKICAgIC0g
TWlub3IgY29kZSByZWZhY3RvcmluZywgZml4ZWQgZmV3IHR5cG9zKHRoYW5rcyB0byBKYW1lcyBB
dXNtdXMpCiAgICAtIENoYW5nZSB0aGUgbmFtaW5nIG9mIHFndiBwb2ludAogICAgICBtYXNraW5n
L3VubWFza2luZyBmdW5jdGlvbnMoSmFtZXMgQXVzbXVzKS4KICAgIC0gU2ltcGxpZnkgdGhlIG1h
c2tpbmcvdW5tYXNraW5nIG9wZXJhdGlvbiBpdHNlbGYsCiAgICAgIGFzIHdlIGRvbid0IG5lZWQg
dG8gbWFzayBvbmx5IHNpbmdsZSBwb2ludCBwZXIgcmVxdWVzdChKYW1lcyBBdXNtdXMpCiAgICAt
IFJlamVjdCBhbmQgc3RpY2sgdG8gaGlnaGVzdCBiYW5kd2lkdGggcG9pbnQgaWYgU0FHVgogICAg
ICBjYW4ndCBiZSBlbmFibGVkKEJTcGVjKQoKdjU6CiAgICAtIEFkZCBuZXcgbWFpbGJveCByZXBs
eSBjb2Rlcywgd2hpY2ggc2VlbXMgdG8gaGFwcGVuIGR1cmluZyBib290CiAgICAgIHRpbWUgZm9y
IFRHTCBhbmQgaW5kaWNhdGUgdGhhdCBRR1Ygc2V0dGluZyBpcyBub3QgeWV0IGF2YWlsYWJsZS4K
CnY2OgogICAgLSBJbmNyZWFzZSBudW1iZXIgb2Ygc3VwcG9ydGVkIFFHViBwb2ludHMgdG8gYmUg
aW4gc3luYyB3aXRoIEJTcGVjLgoKdjc6IC0gUmViYXNlZCBhbmQgcmVzb2x2ZWQgY29uZmxpY3Qg
dG8gZml4IGJ1aWxkIGZhaWx1cmUuCiAgICAtIEZpeCBOVU1fUUdWX1BPSU5UUyB0byA4IGFuZCBt
b3ZlZCB0aGF0IHRvIGhlYWRlciBmaWxlKEphbWVzIEF1c211cykKCnY4OiAtIERvbid0IHJlcG9y
dCBhbiBlcnJvciBpZiB3ZSBjYW4ndCByZXN0cmljdCBxZ3YgcG9pbnRzLCBhcyBTQUdWCiAgICAg
IGNhbiBiZSBkaXNhYmxlZCBieSBCSU9TLCB3aGljaCBpcyBjb21wbGV0ZWx5IGxlZ2FsLiBTbyBk
b24ndAogICAgICBtYWtlIENJIHBhbmljLiBJbnN0ZWFkIGlmIHdlIGRldGVjdCB0aGF0IHRoZXJl
IGlzIG9ubHkgMSBRR1YKICAgICAgcG9pbnQgYWNjZXNzaWJsZSBqdXN0IGFuYWx5emUgaWYgd2Ug
Y2FuIGZpdCB0aGUgcmVxdWlyZWQgYmFuZHdpZHRoCiAgICAgIHJlcXVpcmVtZW50cywgYnV0IG5v
IG5lZWQgaW4gcmVzdHJpY3RpbmcuCgp2OTogLSBGaXggd3JvbmcgUUdWIHRyYW5zaXRpb24gaWYg
d2UgaGF2ZSAwIHBsYW5lcyBhbmQgbm8gU0FHVgogICAgICBzaW11bHRhbmVvdXNseS4KCnYxMDog
LSBGaXggQ0RDTEsgY29ycnVwdGlvbiwgYmVjYXVzZSBvZiBnbG9iYWwgc3RhdGUgZ2V0dGluZyBz
ZXJpYWxpemVkCiAgICAgICB3aXRob3V0IG1vZGVzZXQsIHdoaWNoIGNhdXNlZCBjb3B5aW5nIG9m
IG5vbi1jYWxjdWxhdGVkIGNkY2xrCiAgICAgICB0byBiZSBjb3BpZWQgdG8gZGV2X3ByaXYodGhh
bmtzIHRvIFZpbGxlIGZvciB0aGUgaGludCkuCgp2MTE6IC0gUmVtb3ZlIHVubmVlZGVkIGhlYWRl
cnMgYW5kIHNwYWNlcyhNYXR0aGV3IFJvcGVyKQogICAgIC0gUmVtb3ZlIHVubmVlZGVkIGludGVs
X3Fndl9pbmZvIHFpIHN0cnVjdCBmcm9tIGJ3IGNoZWNrIGFuZCB6ZXJvCiAgICAgICBvdXQgdGhl
IG5lZWRlZCBvbmUoTWF0dGhldyBSb3BlcikKICAgICAtIENoYW5nZWQgUUdWIGVycm9yIG1lc3Nh
Z2UgdG8gaGF2ZSBtb3JlIGNsZWFyIG1lYW5pbmcoTWF0dGhldyBSb3BlcikKICAgICAtIFVzZSBz
dGF0ZS0+bW9kZXNldF9zZXQgaW5zdGVhZCBvZiBhbnlfbXMoTWF0dGhldyBSb3BlcikKICAgICAt
IE1vdmVkIE5VTV9TQUdWX1BPSU5UUyBmcm9tIGk5MTVfcmVnLmggdG8gaTkxNV9kcnYuaCB3aGVy
ZSBpdCdzIHVzZWQKICAgICAtIEtlZXAgdXNpbmcgY3J0Y19zdGF0ZS0+aHcuYWN0aXZlIGluc3Rl
YWQgb2YgLmVuYWJsZShNYXR0aGV3IFJvcGVyKQogICAgIC0gTW92ZWQgdW5yZWxhdGVkIGNoYW5n
ZXMgdG8gb3RoZXIgcGF0Y2godXNpbmcgbGF0ZW5jeSBhcyBwYXJhbWV0ZXIKICAgICAgIGZvciBw
bGFuZSB3bSBjYWxjdWxhdGlvbiwgbW92ZWQgdG8gU0FHViByZWZhY3RvcmluZyBwYXRjaCkKCnYx
MjogLSBGaXggcmViYXNlIGNvbmZsaWN0IHdpdGggb3duIHRlbXBvcmFyeSBTQUdWL1FHViBmaXgu
CiAgICAgLSBSZW1vdmUgdW5uZWNlc3NhcnkgbWFzayBiZWluZyB6ZXJvIGNoZWNrIHdoZW4gdW5t
YXNraW5nCiAgICAgICBxZ3YgcG9pbnRzIGFzIHRoaXMgaXMgY29tcGxldGVseSBsZWdhbChNYXR0
IFJvcGVyKQogICAgIC0gQ2hlY2sgaWYgd2UgYXJlIHNldHRpbmcgdGhlIHNhbWUgbWFzayBhcyBh
bHJlYWR5IGJlaW5nIHNldAogICAgICAgaW4gaGFyZHdhcmUgdG8gcHJldmVudCBlcnJvciBmcm9t
IFBDb2RlLgogICAgIC0gRml4IGVycm9yIG1lc3NhZ2Ugd2hlbiByZXN0cmljdGluZy91bnJlc3Ry
aWN0aW5nIHFndiBwb2ludHMKICAgICAgIHRvICJtYXNrL3VubWFzayIgd2hpY2ggc291bmRzIG1v
cmUgYWNjdXJhdGUoTWF0dCBSb3BlcikKICAgICAtIE1vdmUgc2FndiBzdGF0dXMgc2V0dGluZyB0
byBpY2xfZ2V0X2J3X2luZm8gZnJvbSBhdG9taWMgY2hlY2sKICAgICAgIGFzIHRoaXMgc2hvdWxk
IGJlIGNhbGN1bGF0ZWQgb25seSBvbmNlLihNYXR0IFJvcGVyKQogICAgIC0gRWRpdGVkIGNvbW1l
bnRzIGZvciB0aGUgY2FzZSB3aGVuIHdlIGNhbid0IGVuYWJsZSBTQUdWIGFuZAogICAgICAgdXNl
IG9ubHkgMSBRR1YgcG9pbnQgd2l0aCBoaWdoZXN0IGJhbmR3aWR0aCB0byBiZSBtb3JlCiAgICAg
ICB1bmRlcnN0YW5kYWJsZS4oTWF0dCBSb3BlcikKCnYxMzogLSBNb3ZlZCBtYXhfZGF0YV9yYXRl
IGluIGJ3IGNoZWNrIHRvIGNsb3NlciBzY29wZShWaWxsZSBTeXJqw6Rsw6QpCiAgICAgLSBDaGFu
Z2VkIGNvbW1lbnQgZm9yIHplcm8gbmV3X21hc2sgaW4gcWd2IHBvaW50cyBtYXNraW5nIGZ1bmN0
aW9uCiAgICAgICB0byBiZXR0ZXIgcmVmbGVjdCByZWFsaXR5KFZpbGxlIFN5cmrDpGzDpCkKICAg
ICAtIFNpbXBsaWZpZWQgYml0IG1hc2sgb3BlcmF0aW9uIGluIHFndiBwb2ludHMgbWFza2luZyBm
dW5jdGlvbgogICAgICAgKFZpbGxlIFN5cmrDpGzDpCkKICAgICAtIE1vdmVkIGludGVsX3Fndl9w
b2ludHNfbWFzayBjbG9zZXIgdG8gZ2VuMTEgU0FHViBkaXNhYmxpbmcsCiAgICAgICBob3dldmVy
IHRoaXMgc3RpbGwgY2FuJ3QgYmUgdW5kZXIgbW9kZXNldCBjb25kaXRpb24oVmlsbGUgU3lyasOk
bMOkKQogICAgIC0gUGFja2VkIHFndl9wb2ludHNfbWFzayBhcyB1OCBhbmQgbW92ZWQgY2xvc2Vy
IHRvIHBpcGVfc2Fndl9tYXNrCiAgICAgICAoVmlsbGUgU3lyasOkbMOkKQogICAgIC0gRXh0cmFj
dGVkIFBDb2RlIGNoYW5nZXMgdG8gc2VwYXJhdGUgcGF0Y2guKFZpbGxlIFN5cmrDpGzDpCkKICAg
ICAtIE5vdyB0cmVhdCBudW1fcGxhbmVzIDAgc2FtZSBhcyAxIHRvIGF2b2lkIGNvbmZ1c2lvbiBh
bmQKICAgICAgIHJldHVybmluZyBtYXhfYncgYXMgMCwgd2hpY2ggd291bGQgcHJldmVudCBjaG9v
c2luZyBRR1YKICAgICAgIHBvaW50IGhhdmluZyBtYXggYmFuZHdpZHRoIGluIGNhc2UgaWYgU0FH
ViBpcyBub3QgYWxsb3dlZCwKICAgICAgIGFzIHBlciBCU3BlYyhWaWxsZSBTeXJqw6Rsw6QpCiAg
ICAgLSBEbyB0aGUgYWN0dWFsIHFndl9wb2ludHNfbWFzayBzd2FwIGluIHRoZSBzYW1lIHBsYWNl
IGFzCiAgICAgICBhbGwgb3RoZXIgZ2xvYmFsIHN0YXRlIHBhcnRzIGxpa2UgY2RjbGsgYXJlIHN3
YXBwZWQuCiAgICAgICBJbiB0aGUgbmV4dCBwYXRjaCwgdGhpcyBhbGwgd2lsbCBiZSBtb3ZlZCB0
byBidyBzdGF0ZSBhcwogICAgICAgZ2xvYmFsIHN0YXRlLCBvbmNlIG5ldyBnbG9iYWwgc3RhdGUg
cGF0Y2ggc2VyaWVzIGZyb20gVmlsbGUKICAgICAgIGxhbmRzCgp2MTQ6IC0gTm93IHVzaW5nIGds
b2JhbCBzdGF0ZSB0byBzZXJpYWxpemUgYWNjZXNzIHRvIHFndiBwb2ludHMKICAgICAtIEFkZGVk
IGdsb2JhbCBzdGF0ZSBsb2NraW5nIGJhY2ssIG90aGVyd2lzZSB3ZSBzZWVtIHRvIHJlYWQKICAg
ICAgIGJ3IHN0YXRlIGluIGEgd3Jvbmcgd2F5LgoKdjE1OiAtIEFkZGVkIFRPRE8gY29tbWVudCBm
b3IgbmVhciBhdG9taWMgZ2xvYmFsIHN0YXRlIGxvY2tpbmcgaW4KICAgICAgIGJ3IGNvZGUuCgp2
MTY6IC0gRml4ZWQgaW50ZWxfYXRvbWljX2J3XyogZnVuY3Rpb25zIHRvIGJlIGludGVsX2J3Xyog
YXMgZGlzY3Vzc2VkCiAgICAgICB3aXRoIEphbmkgTmlrdWxhLgogICAgIC0gVGFrZSBid19zdGF0
ZV9jaGFuZ2VkIGZsYWcgaW50byB1c2UuCgp2MTc6IC0gTW92ZWQgcWd2IHBvaW50IHJlbGF0ZWQg
bWFuaXB1bGF0aW9ucyBuZXh0IHRvIFNBR1YgY29kZSwgYXMKICAgICAgIHRob3NlIGFyZSBzZW1h
bnRpY2FsbHkgcmVsYXRlZChWaWxsZSBTeXJqw6Rsw6QpCiAgICAgLSBSZW5hbWVkIHRob3NlIGlu
dG8gaW50ZWxfc2Fndl8ocHJlKXwocG9zdClfcGxhbmVfdXBkYXRlCiAgICAgICAoVmlsbGUgU3ly
asOkbMOkKQoKdjE4OiAtIE1vdmUgc2FndiByZWxhdGVkIGNhbGxzIGZyb20gY29tbWl0IHRhaWwg
aW50bwogICAgICAgaW50ZWxfc2Fndl8ocHJlKXwocG9zdClfcGxhbmVfdXBkYXRlKFZpbGxlIFN5
cmrDpGzDpCkKClNpZ25lZC1vZmYtYnk6IFN0YW5pc2xhdiBMaXNvdnNraXkgPHN0YW5pc2xhdi5s
aXNvdnNraXlAaW50ZWwuY29tPgpDYzogVmlsbGUgU3lyasOkbMOkIDx2aWxsZS5zeXJqYWxhQGlu
dGVsLmNvbT4KQ2M6IEphbWVzIEF1c211cyA8amFtZXMuYXVzbXVzQGludGVsLmNvbT4KLS0tCiBk
cml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5L2ludGVsX2J3LmMgICAgICAgfCAxNDcgKysrKysr
KysrKysrKy0tLS0tCiBkcml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5L2ludGVsX2J3LmggICAg
ICAgfCAgIDkgKysKIGRyaXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkvaW50ZWxfZGlzcGxheS5j
ICB8ICAyOSArLS0tCiAuLi4vZHJtL2k5MTUvZGlzcGxheS9pbnRlbF9kaXNwbGF5X3R5cGVzLmgg
ICAgfCAgIDMgKwogZHJpdmVycy9ncHUvZHJtL2k5MTUvaW50ZWxfcG0uYyAgICAgICAgICAgICAg
IHwgMTE5ICsrKysrKysrKysrKysrCiBkcml2ZXJzL2dwdS9kcm0vaTkxNS9pbnRlbF9wbS5oICAg
ICAgICAgICAgICAgfCAgIDIgKwogNiBmaWxlcyBjaGFuZ2VkLCAyNTEgaW5zZXJ0aW9ucygrKSwg
NTggZGVsZXRpb25zKC0pCgpkaWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvZGlzcGxh
eS9pbnRlbF9idy5jIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvZGlzcGxheS9pbnRlbF9idy5jCmlu
ZGV4IGQxNjc3MWRkMmIxMC4uZDVhOTNlOGY3MTM0IDEwMDY0NAotLS0gYS9kcml2ZXJzL2dwdS9k
cm0vaTkxNS9kaXNwbGF5L2ludGVsX2J3LmMKKysrIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvZGlz
cGxheS9pbnRlbF9idy5jCkBAIC04LDYgKzgsOSBAQAogI2luY2x1ZGUgImludGVsX2J3LmgiCiAj
aW5jbHVkZSAiaW50ZWxfZGlzcGxheV90eXBlcy5oIgogI2luY2x1ZGUgImludGVsX3NpZGViYW5k
LmgiCisjaW5jbHVkZSAiaW50ZWxfYXRvbWljLmgiCisjaW5jbHVkZSAiaW50ZWxfcG0uaCIKKwog
CiAvKiBQYXJhbWV0ZXJzIGZvciBRY2xrIEdleXNlcnZpbGxlIChRR1YpICovCiBzdHJ1Y3QgaW50
ZWxfcWd2X3BvaW50IHsKQEAgLTExMyw2ICsxMTYsMjYgQEAgc3RhdGljIGludCBpY2xfcGNvZGVf
cmVhZF9xZ3ZfcG9pbnRfaW5mbyhzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0ZSAqZGV2X3ByaXYsCiAJ
cmV0dXJuIDA7CiB9CiAKK2ludCBpY2xfcGNvZGVfcmVzdHJpY3RfcWd2X3BvaW50cyhzdHJ1Y3Qg
ZHJtX2k5MTVfcHJpdmF0ZSAqZGV2X3ByaXYsCisJCQkJICB1MzIgcG9pbnRzX21hc2spCit7CisJ
aW50IHJldDsKKworCS8qIGJzcGVjIHNheXMgdG8ga2VlcCByZXRyeWluZyBmb3IgYXQgbGVhc3Qg
MSBtcyAqLworCXJldCA9IHNrbF9wY29kZV9yZXF1ZXN0KGRldl9wcml2LCBJQ0xfUENPREVfU0FH
Vl9ERV9NRU1fU1NfQ09ORklHLAorCQkJCXBvaW50c19tYXNrLAorCQkJCUdFTjExX1BDT0RFX1BP
SU5UU19SRVNUUklDVEVEX01BU0ssCisJCQkJR0VOMTFfUENPREVfUE9JTlRTX1JFU1RSSUNURUQs
CisJCQkJMSk7CisKKwlpZiAocmV0IDwgMCkgeworCQlEUk1fRVJST1IoIkZhaWxlZCB0byBkaXNh
YmxlIHFndiBwb2ludHMgKCVkKVxuIiwgcmV0KTsKKwkJcmV0dXJuIHJldDsKKwl9CisKKwlyZXR1
cm4gMDsKK30KKwogc3RhdGljIGludCBpY2xfZ2V0X3Fndl9wb2ludHMoc3RydWN0IGRybV9pOTE1
X3ByaXZhdGUgKmRldl9wcml2LAogCQkJICAgICAgc3RydWN0IGludGVsX3Fndl9pbmZvICpxaSkK
IHsKQEAgLTI0MCw2ICsyNjMsMTYgQEAgc3RhdGljIGludCBpY2xfZ2V0X2J3X2luZm8oc3RydWN0
IGRybV9pOTE1X3ByaXZhdGUgKmRldl9wcml2LCBjb25zdCBzdHJ1Y3QgaW50ZWwKIAkJCWJyZWFr
OwogCX0KIAorCS8qCisJICogSW4gY2FzZSBpZiBTQUdWIGlzIGRpc2FibGVkIGluIEJJT1MsIHdl
IGFsd2F5cyBnZXQgMQorCSAqIFNBR1YgcG9pbnQsIGJ1dCB3ZSBjYW4ndCBzZW5kIFBDb2RlIGNv
bW1hbmRzIHRvIHJlc3RyaWN0IGl0CisJICogYXMgaXQgd2lsbCBmYWlsIGFuZCBwb2ludGxlc3Mg
YW55d2F5LgorCSAqLworCWlmIChxaS5udW1fcG9pbnRzID09IDEpCisJCWRldl9wcml2LT5zYWd2
X3N0YXR1cyA9IEk5MTVfU0FHVl9OT1RfQ09OVFJPTExFRDsKKwllbHNlCisJCWRldl9wcml2LT5z
YWd2X3N0YXR1cyA9IEk5MTVfU0FHVl9FTkFCTEVEOworCiAJcmV0dXJuIDA7CiB9CiAKQEAgLTI1
OSw3ICsyOTIsNyBAQCBzdGF0aWMgdW5zaWduZWQgaW50IGljbF9tYXhfYncoc3RydWN0IGRybV9p
OTE1X3ByaXZhdGUgKmRldl9wcml2LAogCQlpZiAocWd2X3BvaW50ID49IGJpLT5udW1fcWd2X3Bv
aW50cykKIAkJCXJldHVybiBVSU5UX01BWDsKIAotCQlpZiAobnVtX3BsYW5lcyA+PSBiaS0+bnVt
X3BsYW5lcykKKwkJaWYgKG51bV9wbGFuZXMgPj0gYmktPm51bV9wbGFuZXMgfHwgIW51bV9wbGFu
ZXMpCiAJCQlyZXR1cm4gYmktPmRlcmF0ZWRid1txZ3ZfcG9pbnRdOwogCX0KIApAQCAtMjc3LDM0
ICszMTAsNiBAQCB2b2lkIGludGVsX2J3X2luaXRfaHcoc3RydWN0IGRybV9pOTE1X3ByaXZhdGUg
KmRldl9wcml2KQogCQlpY2xfZ2V0X2J3X2luZm8oZGV2X3ByaXYsICZpY2xfc2FfaW5mbyk7CiB9
CiAKLXN0YXRpYyB1bnNpZ25lZCBpbnQgaW50ZWxfbWF4X2RhdGFfcmF0ZShzdHJ1Y3QgZHJtX2k5
MTVfcHJpdmF0ZSAqZGV2X3ByaXYsCi0JCQkJCWludCBudW1fcGxhbmVzKQotewotCWlmIChJTlRF
TF9HRU4oZGV2X3ByaXYpID49IDExKSB7Ci0JCS8qCi0JCSAqIEFueSBidyBncm91cCBoYXMgc2Ft
ZSBhbW91bnQgb2YgUUdWIHBvaW50cwotCQkgKi8KLQkJY29uc3Qgc3RydWN0IGludGVsX2J3X2lu
Zm8gKmJpID0KLQkJCSZkZXZfcHJpdi0+bWF4X2J3WzBdOwotCQl1bnNpZ25lZCBpbnQgbWluX2J3
ID0gVUlOVF9NQVg7Ci0JCWludCBpOwotCi0JCS8qCi0JCSAqIEZJWE1FIHdpdGggU0FHViBkaXNh
YmxlZCBtYXliZSB3ZSBjYW4gYXNzdW1lCi0JCSAqIHBvaW50IDEgd2lsbCBhbHdheXMgYmUgdXNl
ZD8gU2VlbXMgdG8gbWF0Y2gKLQkJICogdGhlIGJlaGF2aW91ciBvYnNlcnZlZCBpbiB0aGUgd2ls
ZC4KLQkJICovCi0JCWZvciAoaSA9IDA7IGkgPCBiaS0+bnVtX3Fndl9wb2ludHM7IGkrKykgewot
CQkJdW5zaWduZWQgaW50IGJ3ID0gaWNsX21heF9idyhkZXZfcHJpdiwgbnVtX3BsYW5lcywgaSk7
Ci0KLQkJCW1pbl9idyA9IG1pbihidywgbWluX2J3KTsKLQkJfQotCQlyZXR1cm4gbWluX2J3Owot
CX0gZWxzZSB7Ci0JCXJldHVybiBVSU5UX01BWDsKLQl9Ci19Ci0KIHN0YXRpYyB1bnNpZ25lZCBp
bnQgaW50ZWxfYndfY3J0Y19udW1fYWN0aXZlX3BsYW5lcyhjb25zdCBzdHJ1Y3QgaW50ZWxfY3J0
Y19zdGF0ZSAqY3J0Y19zdGF0ZSkKIHsKIAkvKgpAQCAtNDE5LDEwICs0MjQsMTUgQEAgaW50IGlu
dGVsX2J3X2F0b21pY19jaGVjayhzdHJ1Y3QgaW50ZWxfYXRvbWljX3N0YXRlICpzdGF0ZSkKIAlz
dHJ1Y3QgZHJtX2k5MTVfcHJpdmF0ZSAqZGV2X3ByaXYgPSB0b19pOTE1KHN0YXRlLT5iYXNlLmRl
dik7CiAJc3RydWN0IGludGVsX2NydGNfc3RhdGUgKm5ld19jcnRjX3N0YXRlLCAqb2xkX2NydGNf
c3RhdGU7CiAJc3RydWN0IGludGVsX2J3X3N0YXRlICpuZXdfYndfc3RhdGUgPSBOVUxMOwotCXVu
c2lnbmVkIGludCBkYXRhX3JhdGUsIG1heF9kYXRhX3JhdGU7CisJc3RydWN0IGludGVsX2J3X3N0
YXRlICpvbGRfYndfc3RhdGUgPSBOVUxMOworCXVuc2lnbmVkIGludCBkYXRhX3JhdGU7CiAJdW5z
aWduZWQgaW50IG51bV9hY3RpdmVfcGxhbmVzOwogCXN0cnVjdCBpbnRlbF9jcnRjICpjcnRjOwog
CWludCBpLCByZXQ7CisJdTMyIGFsbG93ZWRfcG9pbnRzID0gMDsKKwl1bnNpZ25lZCBpbnQgbWF4
X2J3X3BvaW50ID0gMCwgbWF4X2J3ID0gMDsKKwl1bnNpZ25lZCBpbnQgbnVtX3Fndl9wb2ludHMg
PSBkZXZfcHJpdi0+bWF4X2J3WzBdLm51bV9xZ3ZfcG9pbnRzOworCXUzMiBtYXNrID0gKDEgPDwg
bnVtX3Fndl9wb2ludHMpIC0gMTsKIAogCS8qIEZJWE1FIGVhcmxpZXIgZ2VucyBuZWVkIHNvbWUg
Y2hlY2tzIHRvbyAqLwogCWlmIChJTlRFTF9HRU4oZGV2X3ByaXYpIDwgMTEpCkBAIC00NjUsMjMg
KzQ3NSw4NiBAQCBpbnQgaW50ZWxfYndfYXRvbWljX2NoZWNrKHN0cnVjdCBpbnRlbF9hdG9taWNf
c3RhdGUgKnN0YXRlKQogCQlyZXR1cm4gMDsKIAogCXJldCA9IGludGVsX2F0b21pY19sb2NrX2ds
b2JhbF9zdGF0ZSgmbmV3X2J3X3N0YXRlLT5iYXNlKTsKLQlpZiAocmV0KQorCWlmIChyZXQpIHsK
KwkJRFJNX0RFQlVHX0tNUygiQ291bGQgbm90IGxvY2sgZ2xvYmFsIHN0YXRlXG4iKTsKIAkJcmV0
dXJuIHJldDsKKwl9CiAKIAlkYXRhX3JhdGUgPSBpbnRlbF9id19kYXRhX3JhdGUoZGV2X3ByaXYs
IG5ld19id19zdGF0ZSk7CisJZGF0YV9yYXRlID0gRElWX1JPVU5EX1VQKGRhdGFfcmF0ZSwgMTAw
MCk7CisKIAludW1fYWN0aXZlX3BsYW5lcyA9IGludGVsX2J3X251bV9hY3RpdmVfcGxhbmVzKGRl
dl9wcml2LCBuZXdfYndfc3RhdGUpOwogCi0JbWF4X2RhdGFfcmF0ZSA9IGludGVsX21heF9kYXRh
X3JhdGUoZGV2X3ByaXYsIG51bV9hY3RpdmVfcGxhbmVzKTsKKwlmb3IgKGkgPSAwOyBpIDwgbnVt
X3Fndl9wb2ludHM7IGkrKykgeworCQl1bnNpZ25lZCBpbnQgbWF4X2RhdGFfcmF0ZTsKIAotCWRh
dGFfcmF0ZSA9IERJVl9ST1VORF9VUChkYXRhX3JhdGUsIDEwMDApOworCQltYXhfZGF0YV9yYXRl
ID0gaWNsX21heF9idyhkZXZfcHJpdiwgbnVtX2FjdGl2ZV9wbGFuZXMsIGkpOworCQkvKgorCQkg
KiBXZSBuZWVkIHRvIGtub3cgd2hpY2ggcWd2IHBvaW50IGdpdmVzIHVzCisJCSAqIG1heGltdW0g
YmFuZHdpZHRoIGluIG9yZGVyIHRvIGRpc2FibGUgU0FHVgorCQkgKiBpZiB3ZSBmaW5kIHRoYXQg
d2UgZXhjZWVkIFNBR1YgYmxvY2sgdGltZQorCQkgKiB3aXRoIHdhdGVybWFya3MuIEJ5IHRoYXQg
bW9tZW50IHdlIGFscmVhZHkKKwkJICogaGF2ZSB0aG9zZSwgYXMgaXQgaXMgY2FsY3VsYXRlZCBl
YXJsaWVyIGluCisJCSAqIGludGVsX2F0b21pY19jaGVjaywKKwkJICovCisJCWlmIChtYXhfZGF0
YV9yYXRlID4gbWF4X2J3KSB7CisJCQltYXhfYndfcG9pbnQgPSBpOworCQkJbWF4X2J3ID0gbWF4
X2RhdGFfcmF0ZTsKKwkJfQorCQlpZiAobWF4X2RhdGFfcmF0ZSA+PSBkYXRhX3JhdGUpCisJCQlh
bGxvd2VkX3BvaW50cyB8PSBCSVQoaSk7CisJCURSTV9ERUJVR19LTVMoIlFHViBwb2ludCAlZDog
bWF4IGJ3ICVkIHJlcXVpcmVkICVkXG4iLAorCQkJICAgICAgaSwgbWF4X2RhdGFfcmF0ZSwgZGF0
YV9yYXRlKTsKKwl9CiAKLQlpZiAoZGF0YV9yYXRlID4gbWF4X2RhdGFfcmF0ZSkgewotCQlkcm1f
ZGJnX2ttcygmZGV2X3ByaXYtPmRybSwKLQkJCSAgICAiQmFuZHdpZHRoICV1IE1CL3MgZXhjZWVk
cyBtYXggYXZhaWxhYmxlICVkIE1CL3MgKCVkIGFjdGl2ZSBwbGFuZXMpXG4iLAotCQkJICAgIGRh
dGFfcmF0ZSwgbWF4X2RhdGFfcmF0ZSwgbnVtX2FjdGl2ZV9wbGFuZXMpOworCS8qCisJICogQlNw
ZWMgc3RhdGVzIHRoYXQgd2UgYWx3YXlzIHNob3VsZCBoYXZlIGF0IGxlYXN0IG9uZSBhbGxvd2Vk
IHBvaW50CisJICogbGVmdCwgc28gaWYgd2UgY291bGRuJ3QgLSBzaW1wbHkgcmVqZWN0IHRoZSBj
b25maWd1cmF0aW9uIGZvciBvYnZpb3VzCisJICogcmVhc29ucy4KKwkgKi8KKwlpZiAoYWxsb3dl
ZF9wb2ludHMgPT0gMCkgeworCQlEUk1fREVCVUdfS01TKCJObyBRR1YgcG9pbnRzIHByb3ZpZGUg
c3VmZmljaWVudCBtZW1vcnkiCisJCQkgICAgICAiIGJhbmR3aWR0aCBmb3IgZGlzcGxheSBjb25m
aWd1cmF0aW9uLlxuIik7CiAJCXJldHVybiAtRUlOVkFMOwogCX0KIAorCS8qCisJICogTGVhdmUg
b25seSBzaW5nbGUgcG9pbnQgd2l0aCBoaWdoZXN0IGJhbmR3aWR0aCwgaWYKKwkgKiB3ZSBjYW4n
dCBlbmFibGUgU0FHViBkdWUgdG8gdGhlIGluY3JlYXNlZCBtZW1vcnkgbGF0ZW5jeSBpdCBtYXkK
KwkgKiBjYXVzZS4KKwkgKi8KKwlpZiAoIWludGVsX2Nhbl9lbmFibGVfc2FndihuZXdfYndfc3Rh
dGUpKSB7CisJCWFsbG93ZWRfcG9pbnRzID0gMSA8PCBtYXhfYndfcG9pbnQ7CisJCURSTV9ERUJV
R19LTVMoIk5vIFNBR1YsIHVzaW5nIHNpbmdsZSBRR1YgcG9pbnQgJWRcbiIsCisJCQkgICAgICBt
YXhfYndfcG9pbnQpOworCX0KKwkvKgorCSAqIFdlIHN0b3JlIHRoZSBvbmVzIHdoaWNoIG5lZWQg
dG8gYmUgbWFza2VkIGFzIHRoYXQgaXMgd2hhdCBQQ29kZQorCSAqIGFjdHVhbGx5IGFjY2VwdHMg
YXMgYSBwYXJhbWV0ZXIuCisJICovCisJbmV3X2J3X3N0YXRlLT5xZ3ZfcG9pbnRzX21hc2sgPSAo
fmFsbG93ZWRfcG9pbnRzKSAmIG1hc2s7CisKKwlEUk1fREVCVUdfS01TKCJOZXcgc3RhdGUgJXAg
cWd2IG1hc2sgJXhcbiIsCisJCSAgICAgIHN0YXRlLCBuZXdfYndfc3RhdGUtPnFndl9wb2ludHNf
bWFzayk7CisKKwlvbGRfYndfc3RhdGUgPSBpbnRlbF9hdG9taWNfZ2V0X2J3X29sZF9zdGF0ZShz
dGF0ZSk7CisJaWYgKElTX0VSUihvbGRfYndfc3RhdGUpKSB7CisJCURSTV9ERUJVR19LTVMoIkNv
dWxkIG5vdCBnZXQgb2xkIGJ3IHN0YXRlIVxuIik7CisJCXJldHVybiBQVFJfRVJSKG9sZF9id19z
dGF0ZSk7CisJfQorCisJLyoKKwkgKiBJZiB0aGUgYWN0dWFsIG1hc2sgaGFkIGNoYW5nZWQgd2Ug
bmVlZCB0byBtYWtlIHN1cmUgdGhhdAorCSAqIHRoZSBjb21taXRzIGFyZSBzZXJpYWxpemVkKGlu
IGNhc2UgdGhpcyBpcyBhIG5vbW9kZXNldCwgbm9uYmxvY2tpbmcpCisJICovCisJaWYgKG5ld19i
d19zdGF0ZS0+cWd2X3BvaW50c19tYXNrICE9IG9sZF9id19zdGF0ZS0+cWd2X3BvaW50c19tYXNr
KSB7CisJCXJldCA9IGludGVsX2F0b21pY19zZXJpYWxpemVfZ2xvYmFsX3N0YXRlKCZuZXdfYndf
c3RhdGUtPmJhc2UpOworCQlpZiAocmV0KSB7CisJCQlEUk1fREVCVUdfS01TKCJDb3VsZCBub3Qg
c2VyaWFsaXplIGdsb2JhbCBzdGF0ZVxuIik7CisJCQlyZXR1cm4gcmV0OworCQl9CisJfQorCiAJ
cmV0dXJuIDA7CiB9CiAKZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkv
aW50ZWxfYncuaCBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkvaW50ZWxfYncuaAppbmRl
eCA2YWQzZWE3Y2VkZmUuLjVjYjA3MTdjMmRmOCAxMDA2NDQKLS0tIGEvZHJpdmVycy9ncHUvZHJt
L2k5MTUvZGlzcGxheS9pbnRlbF9idy5oCisrKyBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3Bs
YXkvaW50ZWxfYncuaApAQCAtMjQsNiArMjQsMTMgQEAgc3RydWN0IGludGVsX2J3X3N0YXRlIHsK
IAkgKi8KIAl1OCBwaXBlX3NhZ3ZfcmVqZWN0OwogCisJLyoKKwkgKiBDdXJyZW50IFFHViBwb2lu
dHMgbWFzaywgd2hpY2ggcmVzdHJpY3RzCisJICogc29tZSBwYXJ0aWN1bGFyIFNBR1Ygc3RhdGVz
LCBub3QgdG8gY29uZnVzZQorCSAqIHdpdGggcGlwZV9zYWd2X21hc2suCisJICovCisJdTggcWd2
X3BvaW50c19tYXNrOworCiAJdW5zaWduZWQgaW50IGRhdGFfcmF0ZVtJOTE1X01BWF9QSVBFU107
CiAJdTggbnVtX2FjdGl2ZV9wbGFuZXNbSTkxNV9NQVhfUElQRVNdOwogfTsKQEAgLTQ0LDUgKzUx
LDcgQEAgaW50IGludGVsX2J3X2luaXQoc3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmRldl9wcml2
KTsKIGludCBpbnRlbF9id19hdG9taWNfY2hlY2soc3RydWN0IGludGVsX2F0b21pY19zdGF0ZSAq
c3RhdGUpOwogdm9pZCBpbnRlbF9id19jcnRjX3VwZGF0ZShzdHJ1Y3QgaW50ZWxfYndfc3RhdGUg
KmJ3X3N0YXRlLAogCQkJICBjb25zdCBzdHJ1Y3QgaW50ZWxfY3J0Y19zdGF0ZSAqY3J0Y19zdGF0
ZSk7CitpbnQgaWNsX3Bjb2RlX3Jlc3RyaWN0X3Fndl9wb2ludHMoc3RydWN0IGRybV9pOTE1X3By
aXZhdGUgKmRldl9wcml2LAorCQkJCSAgdTMyIHBvaW50c19tYXNrKTsKIAogI2VuZGlmIC8qIF9f
SU5URUxfQldfSF9fICovCmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5
L2ludGVsX2Rpc3BsYXkuYyBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkvaW50ZWxfZGlz
cGxheS5jCmluZGV4IGUxZDI1OTkxM2ZlMy4uYWIzZDk0ZTNlOTdlIDEwMDY0NAotLS0gYS9kcml2
ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5L2ludGVsX2Rpc3BsYXkuYworKysgYi9kcml2ZXJzL2dw
dS9kcm0vaTkxNS9kaXNwbGF5L2ludGVsX2Rpc3BsYXkuYwpAQCAtMTU1MzksMjMgKzE1NTM5LDE3
IEBAIHN0YXRpYyB2b2lkIGludGVsX2F0b21pY19jb21taXRfdGFpbChzdHJ1Y3QgaW50ZWxfYXRv
bWljX3N0YXRlICpzdGF0ZSkKIAkJY3J0Yy0+Y29uZmlnID0gbmV3X2NydGNfc3RhdGU7CiAKIAlp
ZiAoc3RhdGUtPm1vZGVzZXQpIHsKLQkJc3RydWN0IGludGVsX2J3X3N0YXRlICpid19zdGF0ZTsK
LQotCQlid19zdGF0ZSA9IGludGVsX2F0b21pY19nZXRfYndfbmV3X3N0YXRlKHN0YXRlKTsKKwkJ
LyoKKwkJICogTm93IHdlIG5lZWQgdG8gY2hlY2sgaWYgU0FHViBuZWVkcyB0byBiZSBkaXNhYmxl
ZChpLmUgUUdWIHBvaW50cworCQkgKiBtb2RpZmllZCBldmVuLCB3aGVuIG5vIG1vZGVzZXQgaXMg
ZG9uZShmb3IgZXhhbXBsZSBwbGFuZSB1cGRhdGVzCisJCSAqIGNhbiBub3cgdHJpZ2dlciB0aGF0
KS4KKwkJICovCisJCWludGVsX3NhZ3ZfcHJlX3BsYW5lX3VwZGF0ZShzdGF0ZSk7CiAKIAkJZHJt
X2F0b21pY19oZWxwZXJfdXBkYXRlX2xlZ2FjeV9tb2Rlc2V0X3N0YXRlKGRldiwgJnN0YXRlLT5i
YXNlKTsKIAogCQlpbnRlbF9zZXRfY2RjbGtfcHJlX3BsYW5lX3VwZGF0ZShzdGF0ZSk7CiAKLQkJ
LyoKLQkJICogU0tMIHdvcmthcm91bmQ6IGJzcGVjIHJlY29tbWVuZHMgd2UgZGlzYWJsZSB0aGUg
U0FHViB3aGVuIHdlCi0JCSAqIGhhdmUgbW9yZSB0aGVuIG9uZSBwaXBlIGVuYWJsZWQKLQkJICov
Ci0JCWlmIChJTlRFTF9HRU4oZGV2X3ByaXYpIDwgMTEpIHsKLQkJCWlmICghaW50ZWxfY2FuX2Vu
YWJsZV9zYWd2KGJ3X3N0YXRlKSkKLQkJCQlpbnRlbF9kaXNhYmxlX3NhZ3YoZGV2X3ByaXYpOwot
CQl9Ci0KIAkJaW50ZWxfbW9kZXNldF92ZXJpZnlfZGlzYWJsZWQoZGV2X3ByaXYsIHN0YXRlKTsK
IAl9CiAKQEAgLTE1NjUxLDE3ICsxNTY0NSwxMCBAQCBzdGF0aWMgdm9pZCBpbnRlbF9hdG9taWNf
Y29tbWl0X3RhaWwoc3RydWN0IGludGVsX2F0b21pY19zdGF0ZSAqc3RhdGUpCiAJaW50ZWxfY2hl
Y2tfY3B1X2ZpZm9fdW5kZXJydW5zKGRldl9wcml2KTsKIAlpbnRlbF9jaGVja19wY2hfZmlmb191
bmRlcnJ1bnMoZGV2X3ByaXYpOwogCi0JaWYgKHN0YXRlLT5tb2Rlc2V0KQorCWlmIChzdGF0ZS0+
bW9kZXNldCkgewogCQlpbnRlbF92ZXJpZnlfcGxhbmVzKHN0YXRlKTsKIAotCWlmIChJTlRFTF9H
RU4oZGV2X3ByaXYpIDwgMTEpIHsKLQkJc3RydWN0IGludGVsX2J3X3N0YXRlICpid19zdGF0ZTsK
LQotCQlid19zdGF0ZSA9IGludGVsX2F0b21pY19nZXRfYndfbmV3X3N0YXRlKHN0YXRlKTsKLQot
CQlpZiAoc3RhdGUtPm1vZGVzZXQgJiYgaW50ZWxfY2FuX2VuYWJsZV9zYWd2KGJ3X3N0YXRlKSkg
ewotCQkJaW50ZWxfZW5hYmxlX3NhZ3YoZGV2X3ByaXYpOwotCQl9CisJCWludGVsX3NhZ3ZfcG9z
dF9wbGFuZV91cGRhdGUoc3RhdGUpOwogCX0KIAogCWRybV9hdG9taWNfaGVscGVyX2NvbW1pdF9o
d19kb25lKCZzdGF0ZS0+YmFzZSk7CmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9k
aXNwbGF5L2ludGVsX2Rpc3BsYXlfdHlwZXMuaCBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3Bs
YXkvaW50ZWxfZGlzcGxheV90eXBlcy5oCmluZGV4IDUxZmE1YTc0NmE1Zi4uODY1NTAzOGJhZmU3
IDEwMDY0NAotLS0gYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5L2ludGVsX2Rpc3BsYXlf
dHlwZXMuaAorKysgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5L2ludGVsX2Rpc3BsYXlf
dHlwZXMuaApAQCAtNjg5LDYgKzY4OSw5IEBAIGVudW0gY29sb3JfcGxhbmUgewogCUNPTE9SX1BM
QU5FX1VWCiB9OwogCisvKiBCU3BlYyBwcmVjaXNlbHkgZGVmaW5lcyB0aGlzICovCisjZGVmaW5l
IE5VTV9TQUdWX1BPSU5UUyA4CisKIHN0cnVjdCBza2xfcGlwZV93bSB7CiAJc3RydWN0IHNrbF9w
bGFuZV93bSBwbGFuZXNbSTkxNV9NQVhfUExBTkVTXTsKIAlib29sIGNhbl9zYWd2OwpkaWZmIC0t
Z2l0IGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvaW50ZWxfcG0uYyBiL2RyaXZlcnMvZ3B1L2RybS9p
OTE1L2ludGVsX3BtLmMKaW5kZXggNjNjNDY5MThkMWVkLi42ZTRkNjRiNjI2ZjggMTAwNjQ0Ci0t
LSBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2ludGVsX3BtLmMKKysrIGIvZHJpdmVycy9ncHUvZHJt
L2k5MTUvaW50ZWxfcG0uYwpAQCAtMzc1OCw2ICszNzU4LDEyNSBAQCBpbnRlbF9kaXNhYmxlX3Nh
Z3Yoc3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmRldl9wcml2KQogCXJldHVybiAwOwogfQogCit2
b2lkIGludGVsX3NhZ3ZfcHJlX3BsYW5lX3VwZGF0ZShzdHJ1Y3QgaW50ZWxfYXRvbWljX3N0YXRl
ICpzdGF0ZSkKK3sKKwlzdHJ1Y3QgZHJtX2RldmljZSAqZGV2ID0gc3RhdGUtPmJhc2UuZGV2Owor
CXN0cnVjdCBkcm1faTkxNV9wcml2YXRlICpkZXZfcHJpdiA9IHRvX2k5MTUoZGV2KTsKKwlpbnQg
cmV0OworCXN0cnVjdCBpbnRlbF9id19zdGF0ZSAqbmV3X2J3X3N0YXRlID0gTlVMTDsKKwlzdHJ1
Y3QgaW50ZWxfYndfc3RhdGUgKm9sZF9id19zdGF0ZSA9IE5VTEw7CisJdTMyIG5ld19tYXNrID0g
MDsKKworCS8qCisJICogSnVzdCByZXR1cm4gaWYgd2UgY2FuJ3QgY29udHJvbCBTQUdWIG9yIGRv
bid0IGhhdmUgaXQuCisJICogVGhpcyBpcyBkaWZmZXJlbnQgZnJvbSBzaXR1YXRpb24gd2hlbiB3
ZSBoYXZlIFNBR1YgYnV0IGp1c3QgY2FuJ3QKKwkgKiBhZmZvcmQgaXQgZHVlIHRvIERCdWYgbGlt
aXRhdGlvbiAtIGluIGNhc2UgaWYgU0FHViBpcyBjb21wbGV0ZWx5CisJICogZGlzYWJsZWQgaW4g
YSBCSU9TLCB3ZSBhcmUgbm90IGV2ZW4gYWxsb3dlZCB0byBzZW5kIGEgUENvZGUgcmVxdWVzdCwK
KwkgKiBhcyBpdCB3aWxsIHRocm93IGFuIGVycm9yLiBTbyBoYXZlIHRvIGNoZWNrIGl0IGhlcmUu
CisJICovCisJaWYgKCFpbnRlbF9oYXNfc2FndihkZXZfcHJpdikpCisJCXJldHVybjsKKworCW5l
d19id19zdGF0ZSA9IGludGVsX2F0b21pY19nZXRfYndfc3RhdGUoc3RhdGUpOworCWlmICghbmV3
X2J3X3N0YXRlKSB7CisJCVdBUk4oMSwgIkNvdWxkIG5vdCBnZXQgbmV3IGJ3X3N0YXRlXG4iKTsK
KwkJcmV0dXJuOworCX0KKworCWlmICgoSU5URUxfR0VOKGRldl9wcml2KSA8IDExKSAmJiAhaW50
ZWxfY2FuX2VuYWJsZV9zYWd2KG5ld19id19zdGF0ZSkpIHsKKwkJaW50ZWxfZGlzYWJsZV9zYWd2
KGRldl9wcml2KTsKKwkJcmV0dXJuOworCX0KKworCW9sZF9id19zdGF0ZSA9IGludGVsX2F0b21p
Y19nZXRfYndfb2xkX3N0YXRlKHN0YXRlKTsKKwlpZiAoIW9sZF9id19zdGF0ZSkgeworCQlXQVJO
KDEsICJDb3VsZCBub3QgZ2V0IG9sZCBid19zdGF0ZVxuIik7CisJCXJldHVybjsKKwl9CisKKwkv
KgorCSAqIE5vdGhpbmcgdG8gbWFzaworCSAqLworCWlmIChuZXdfYndfc3RhdGUtPnFndl9wb2lu
dHNfbWFzayA9PSBvbGRfYndfc3RhdGUtPnFndl9wb2ludHNfbWFzaykKKwkJcmV0dXJuOworCisJ
bmV3X21hc2sgPSBvbGRfYndfc3RhdGUtPnFndl9wb2ludHNfbWFzayB8IG5ld19id19zdGF0ZS0+
cWd2X3BvaW50c19tYXNrOworCisJLyoKKwkgKiBJZiBuZXcgbWFzayBpcyB6ZXJvIC0gbWVhbnMg
dGhlcmUgaXMgbm90aGluZyB0byBtYXNrLAorCSAqIHdlIGNhbiBvbmx5IHVubWFzaywgd2hpY2gg
c2hvdWxkIGJlIGRvbmUgaW4gdW5tYXNrLgorCSAqLworCWlmICghbmV3X21hc2spCisJCXJldHVy
bjsKKworCS8qCisJICogUmVzdHJpY3QgcmVxdWlyZWQgcWd2IHBvaW50cyBiZWZvcmUgdXBkYXRp
bmcgdGhlIGNvbmZpZ3VyYXRpb24uCisJICogQWNjb3JkaW5nIHRvIEJTcGVjIHdlIGNhbid0IG1h
c2sgYW5kIHVubWFzayBxZ3YgcG9pbnRzIGF0IHRoZSBzYW1lCisJICogdGltZS4gQWxzbyBtYXNr
aW5nIHNob3VsZCBiZSBkb25lIGJlZm9yZSB1cGRhdGluZyB0aGUgY29uZmlndXJhdGlvbgorCSAq
IGFuZCB1bm1hc2tpbmcgYWZ0ZXJ3YXJkcy4KKwkgKi8KKwlyZXQgPSBpY2xfcGNvZGVfcmVzdHJp
Y3RfcWd2X3BvaW50cyhkZXZfcHJpdiwgbmV3X21hc2spOworCWlmIChyZXQgPCAwKQorCQlEUk1f
REVCVUdfS01TKCJDb3VsZCBub3QgbWFzayByZXF1aXJlZCBxZ3YgcG9pbnRzKCVkKVxuIiwKKwkJ
CSAgICAgIHJldCk7Cit9CisKK3ZvaWQgaW50ZWxfc2Fndl9wb3N0X3BsYW5lX3VwZGF0ZShzdHJ1
Y3QgaW50ZWxfYXRvbWljX3N0YXRlICpzdGF0ZSkKK3sKKwlzdHJ1Y3QgZHJtX2RldmljZSAqZGV2
ID0gc3RhdGUtPmJhc2UuZGV2OworCXN0cnVjdCBkcm1faTkxNV9wcml2YXRlICpkZXZfcHJpdiA9
IHRvX2k5MTUoZGV2KTsKKwlpbnQgcmV0OworCXN0cnVjdCBpbnRlbF9id19zdGF0ZSAqbmV3X2J3
X3N0YXRlID0gTlVMTDsKKwlzdHJ1Y3QgaW50ZWxfYndfc3RhdGUgKm9sZF9id19zdGF0ZSA9IE5V
TEw7CisJdTMyIG5ld19tYXNrID0gMDsKKworCS8qCisJICogSnVzdCByZXR1cm4gaWYgd2UgY2Fu
J3QgY29udHJvbCBTQUdWIG9yIGRvbid0IGhhdmUgaXQuCisJICogVGhpcyBpcyBkaWZmZXJlbnQg
ZnJvbSBzaXR1YXRpb24gd2hlbiB3ZSBoYXZlIFNBR1YgYnV0IGp1c3QgY2FuJ3QKKwkgKiBhZmZv
cmQgaXQgZHVlIHRvIERCdWYgbGltaXRhdGlvbiAtIGluIGNhc2UgaWYgU0FHViBpcyBjb21wbGV0
ZWx5CisJICogZGlzYWJsZWQgaW4gYSBCSU9TLCB3ZSBhcmUgbm90IGV2ZW4gYWxsb3dlZCB0byBz
ZW5kIGEgUENvZGUgcmVxdWVzdCwKKwkgKiBhcyBpdCB3aWxsIHRocm93IGFuIGVycm9yLiBTbyBo
YXZlIHRvIGNoZWNrIGl0IGhlcmUuCisJICovCisJaWYgKCFpbnRlbF9oYXNfc2FndihkZXZfcHJp
dikpCisJCXJldHVybjsKKworCW5ld19id19zdGF0ZSA9IGludGVsX2F0b21pY19nZXRfYndfc3Rh
dGUoc3RhdGUpOworCWlmICghbmV3X2J3X3N0YXRlKSB7CisJCVdBUk4oMSwgIkNvdWxkIG5vdCBn
ZXQgbmV3IGJ3X3N0YXRlXG4iKTsKKwkJcmV0dXJuOworCX0KKworCWlmICgoSU5URUxfR0VOKGRl
dl9wcml2KSA8IDExKSAmJiBpbnRlbF9jYW5fZW5hYmxlX3NhZ3YobmV3X2J3X3N0YXRlKSkgewor
CQlpbnRlbF9lbmFibGVfc2FndihkZXZfcHJpdik7CisJCXJldHVybjsKKwl9CisKKwlvbGRfYndf
c3RhdGUgPSBpbnRlbF9hdG9taWNfZ2V0X2J3X29sZF9zdGF0ZShzdGF0ZSk7CisJaWYgKCFvbGRf
Yndfc3RhdGUpIHsKKwkJV0FSTigxLCAiQ291bGQgbm90IGdldCBvbGQgYndfc3RhdGVcbiIpOwor
CQlyZXR1cm47CisJfQorCisJLyoKKwkgKiBOb3RoaW5nIHRvIHVubWFzaworCSAqLworCWlmIChu
ZXdfYndfc3RhdGUtPnFndl9wb2ludHNfbWFzayA9PSBvbGRfYndfc3RhdGUtPnFndl9wb2ludHNf
bWFzaykKKwkJcmV0dXJuOworCisJbmV3X21hc2sgPSBuZXdfYndfc3RhdGUtPnFndl9wb2ludHNf
bWFzazsKKworCS8qCisJICogQWxsb3cgcmVxdWlyZWQgcWd2IHBvaW50cyBhZnRlciB1cGRhdGlu
ZyB0aGUgY29uZmlndXJhdGlvbi4KKwkgKiBBY2NvcmRpbmcgdG8gQlNwZWMgd2UgY2FuJ3QgbWFz
ayBhbmQgdW5tYXNrIHFndiBwb2ludHMgYXQgdGhlIHNhbWUKKwkgKiB0aW1lLiBBbHNvIG1hc2tp
bmcgc2hvdWxkIGJlIGRvbmUgYmVmb3JlIHVwZGF0aW5nIHRoZSBjb25maWd1cmF0aW9uCisJICog
YW5kIHVubWFza2luZyBhZnRlcndhcmRzLgorCSAqLworCXJldCA9IGljbF9wY29kZV9yZXN0cmlj
dF9xZ3ZfcG9pbnRzKGRldl9wcml2LCBuZXdfbWFzayk7CisJaWYgKHJldCA8IDApCisJCURSTV9E
RUJVR19LTVMoIkNvdWxkIG5vdCB1bm1hc2sgcmVxdWlyZWQgcWd2IHBvaW50cyglZClcbiIsCisJ
CQkgICAgICByZXQpOworfQorCiBzdGF0aWMgYm9vbCBpY2xfY2FuX2VuYWJsZV9zYWd2X29uX3Bp
cGUoc3RydWN0IGludGVsX2NydGNfc3RhdGUgKmNydGNfc3RhdGUpCiB7CiAJc3RydWN0IGRybV9k
ZXZpY2UgKmRldiA9IGNydGNfc3RhdGUtPnVhcGkuY3J0Yy0+ZGV2OwpkaWZmIC0tZ2l0IGEvZHJp
dmVycy9ncHUvZHJtL2k5MTUvaW50ZWxfcG0uaCBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2ludGVs
X3BtLmgKaW5kZXggNWZiMzJkYjRhYmM1Li43OTNhNGFkZDk4MzEgMTAwNjQ0Ci0tLSBhL2RyaXZl
cnMvZ3B1L2RybS9pOTE1L2ludGVsX3BtLmgKKysrIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvaW50
ZWxfcG0uaApAQCAtNDIsNiArNDIsOCBAQCB2b2lkIHNrbF9waXBlX3dtX2dldF9od19zdGF0ZShz
dHJ1Y3QgaW50ZWxfY3J0YyAqY3J0YywKIAkJCSAgICAgIHN0cnVjdCBza2xfcGlwZV93bSAqb3V0
KTsKIHZvaWQgZzR4X3dtX3Nhbml0aXplKHN0cnVjdCBkcm1faTkxNV9wcml2YXRlICpkZXZfcHJp
dik7CiB2b2lkIHZsdl93bV9zYW5pdGl6ZShzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0ZSAqZGV2X3By
aXYpOwordm9pZCBpbnRlbF9zYWd2X3ByZV9wbGFuZV91cGRhdGUoc3RydWN0IGludGVsX2F0b21p
Y19zdGF0ZSAqc3RhdGUpOwordm9pZCBpbnRlbF9zYWd2X3Bvc3RfcGxhbmVfdXBkYXRlKHN0cnVj
dCBpbnRlbF9hdG9taWNfc3RhdGUgKnN0YXRlKTsKIGJvb2wgaW50ZWxfaGFzX3NhZ3Yoc3RydWN0
IGRybV9pOTE1X3ByaXZhdGUgKmRldl9wcml2KTsKIGJvb2wgaW50ZWxfY2FuX2VuYWJsZV9zYWd2
KHN0cnVjdCBpbnRlbF9id19zdGF0ZSAqYndfc3RhdGUpOwogaW50IGludGVsX2VuYWJsZV9zYWd2
KHN0cnVjdCBkcm1faTkxNV9wcml2YXRlICpkZXZfcHJpdik7Ci0tIAoyLjI0LjEuNDg1LmdhZDA1
YTNkOGU1CgpfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpJ
bnRlbC1nZnggbWFpbGluZyBsaXN0CkludGVsLWdmeEBsaXN0cy5mcmVlZGVza3RvcC5vcmcKaHR0
cHM6Ly9saXN0cy5mcmVlZGVza3RvcC5vcmcvbWFpbG1hbi9saXN0aW5mby9pbnRlbC1nZngK

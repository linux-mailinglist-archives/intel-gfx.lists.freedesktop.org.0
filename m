Return-Path: <intel-gfx-bounces@lists.freedesktop.org>
X-Original-To: lists+intel-gfx@lfdr.de
Delivered-To: lists+intel-gfx@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [IPv6:2610:10:20:722:a800:ff:fe36:1795])
	by mail.lfdr.de (Postfix) with ESMTPS id D45AC28D378
	for <lists+intel-gfx@lfdr.de>; Tue, 13 Oct 2020 20:11:45 +0200 (CEST)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id E5A9B6E920;
	Tue, 13 Oct 2020 18:11:42 +0000 (UTC)
X-Original-To: intel-gfx@lists.freedesktop.org
Delivered-To: intel-gfx@lists.freedesktop.org
Received: from mga03.intel.com (mga03.intel.com [134.134.136.65])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 929616E920
 for <intel-gfx@lists.freedesktop.org>; Tue, 13 Oct 2020 18:11:41 +0000 (UTC)
IronPort-SDR: PsheFZOTzgaKpU7vfpZbPnDGAnRas6tRkzNk/z5At2rpkA4JMuI/YK11SZ6sPPNKE+q8zdHn13
 f3L9P7QOdhGQ==
X-IronPort-AV: E=McAfee;i="6000,8403,9773"; a="166022310"
X-IronPort-AV: E=Sophos;i="5.77,371,1596524400"; d="scan'208";a="166022310"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from orsmga006.jf.intel.com ([10.7.209.51])
 by orsmga103.jf.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384;
 13 Oct 2020 11:11:41 -0700
IronPort-SDR: d7VXpnkZMrlQkPdxY21e9O4Yfjn8PIlUKB3grZmX8LOHu02tnUEy0hKOVopI3d0GsQh7E3yhuj
 aH27urV+1sjQ==
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.77,371,1596524400"; d="scan'208";a="318393152"
Received: from stinkbox.fi.intel.com (HELO stinkbox) ([10.237.72.174])
 by orsmga006.jf.intel.com with SMTP; 13 Oct 2020 11:11:37 -0700
Received: by stinkbox (sSMTP sendmail emulation);
 Tue, 13 Oct 2020 21:11:37 +0300
From: Ville Syrjala <ville.syrjala@linux.intel.com>
To: intel-gfx@lists.freedesktop.org
Date: Tue, 13 Oct 2020 21:11:37 +0300
Message-Id: <20201013181137.30560-1-ville.syrjala@linux.intel.com>
X-Mailer: git-send-email 2.26.2
In-Reply-To: <20201007192241.10241-1-ville.syrjala@linux.intel.com>
References: <20201007192241.10241-1-ville.syrjala@linux.intel.com>
MIME-Version: 1.0
Subject: [Intel-gfx] [PATCH v3 1/3] drm/i915: Reorder hpd init vs. display
 resume
X-BeenThere: intel-gfx@lists.freedesktop.org
X-Mailman-Version: 2.1.29
Precedence: list
List-Id: Intel graphics driver community testing & development
 <intel-gfx.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/intel-gfx>
List-Post: <mailto:intel-gfx@lists.freedesktop.org>
List-Help: <mailto:intel-gfx-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: intel-gfx-bounces@lists.freedesktop.org
Sender: "Intel-gfx" <intel-gfx-bounces@lists.freedesktop.org>

RnJvbTogVmlsbGUgU3lyasOkbMOkIDx2aWxsZS5zeXJqYWxhQGxpbnV4LmludGVsLmNvbT4KCkN1
cnJlbnRseSB3ZSBjYWxsIC5ocGRfaXJxX3NldHVwKCkgZGlyZWN0bHkganVzdCBiZWZvcmUgZGlz
cGxheQpyZXN1bWUsIGFuZCBmb2xsb3cgaXQgd2l0aCBhbm90aGVyIGNhbGwgdmlhIGludGVsX2hw
ZF9pbml0KCkKanVzdCBhZnRlcndhcmRzLiBBc3N1bWluZyB0aGUgaHBkIHBpbnMgYXJlIG1hcmtl
ZCBhcyBlbmFibGVkCmR1cmluZyB0aGUgb3Blbi1jb2RlZCBjYWxsIHRoZXNlIHR3byB0aGluZ3Mg
ZG8gZXhhY3RseSB0aGUKc2FtZSB0aGluZyAoaWUuIGVuYWJsZSBIUEQgaW50ZXJydXB0cykuIFdo
aWNoIGV2ZW4gbWFrZXMgc2Vuc2UKc2luY2Ugd2UgZGVmaW5pdGVseSBuZWVkIHdvcmtpbmcgSFBE
IGludGVycnVwdHMgZm9yIE1TVCBzaWRlYmFuZApkdXJpbmcgdGhlIGRpc3BsYXkgcmVzdW1lLgoK
U28gbGV0J3MgbnVrZSB0aGUgb3Blbi1jb2RlZCBjYWxsIGFuZCBtb3ZlIHRoZSBpbnRlbF9ocGRf
aW5pdCgpCmNhbGwgZWFybGllci4gSG93ZXZlciB3ZSBuZWVkIHRvIGxlYXZlIHRoZSBwb2xsX2lu
aXRfd29yayBzdHVmZgpiZWhpbmQgYWZ0ZXIgdGhlIGRpc3BsYXkgcmVzdW1lIGFzIHRoYXQgd2ls
bCB0cmlnZ2VyIGRpc3BsYXkKZGV0ZWN0aW9uIHdoaWxlIHdlJ3JlIHJlc3VtaW5nLiBXZSBkb24n
dCB3YW50IHRoYXQgdHJhbXBsaW5nIG92ZXIKdGhlIGRpc3BsYXkgcmVzdW1lIHByb2Nlc3MuIFRv
IG1ha2UgdGhpcyBhIGJpdCBtb3JlIHN5bW1ldHJpYwp3ZSB0dXJuIHRoaXMgaW50byBhIGludGVs
X2hwZF9wb2xsX3tlbmFibGUsZGlzYWJsZX0oKSBwYWlyLgpTbyB3ZSBlbmQgdXAgd2l0aCB0aGUg
Zm9sbG93aW5nIHRyYW5zZm9ybWF0aW9uOgppbnRlbF9ocGRfcG9sbF9pbml0KCkgLT4gaW50ZWxf
aHBkX3BvbGxfZW5hYmxlKCkKbG9uZSBpbnRlbF9ocGRfaW5pdCgpIC0+IGludGVsX2hwZF9pbml0
KCkraW50ZWxfaHBkX3BvbGxfZGlzYWJsZSgpCi5ocGRfaXJxX3NldHVwKCkrcmVzdW1lK2ludGVs
X2hwZF9pbml0KCkgLT4gaW50ZWxfaHBkX2luaXQoKStyZXN1bWUraW50ZWxfaHBkX3BvbGxfZGlz
YWJsZSgpCgpJZiB3ZSByZWFsbHkgd291bGQgbGlrZSB0byBwcmV2ZW50IGFsbCAqbG9uZyogSFBE
IHByb2Nlc3NpbmcgZHVyaW5nCmRpc3BsYXkgcmVzdW1lIHdlJ2QgbmVlZCBzb21lIGtpbmQgb2Yg
c29mdHdhcmUgbWVjaGFuaXNtIHRvIHNpbXBseQppZ25vcmUgYWxsIGxvbmcgSFBEcy4gQ3VycmVu
dGx5IHdlIGFwcGVhciB0byBoYXZlIHRoYXQganVzdCBmb3IKZmJkZXYgdmlhIGlmYmRldi0+aHBk
X3N1c3BlbmRlZC4gU2luY2Ugd2UgYXJlbid0IGV4cGxvZGluZyBsZWZ0IGFuZApyaWdodCBhbGwg
dGhlIHRpbWUgSSBndWVzcyB0aGF0J3MgbW9zdGx5IHN1ZmZpY2llbnQuCgpGb3IgYSBiaXQgb2Yg
aGlzdG9yeSBvbiB0aGlzLCB3ZSBmaXJzdCBnb3QgYSBtZWNoYW5pc20gdG8gYmxvY2sKaG90cGx1
ZyBwcm9jZXNzaW5nIGR1cmluZyBzdXNwZW5kIGluIGNvbW1pdCAxNTIzOTA5OWQ3YTcgKCJkcm0v
aTkxNToKZW5hYmxlIGlycXMgZWFybGllciB3aGVuIHJlc3VtaW5nIikgb24gYWNjb3VudCBvZiBt
b3ZpbmcgdGhlIGlycSBlbmFibGUKZWFybGllci4gVGhpcyB0aGVuIGdvdCByZW1vdmVkIGluIGNv
bW1pdCA1MGMzZGM5NzBhMDkgKCJkcm0vZmItaGVscGVyOgpGaXggaHBkIHZzLiBpbml0aWFsIGNv
bmZpZyByYWNlcyIpIGJlY2F1c2UgdGhlIGZkZXYgaW5pdGlhbCBjb25maWcKZ290IHB1c2hlZCB0
byBhIGxhdGVyIHBvaW50LiBUaGUgc2Vjb25kIGFkLWhvYyBocGRfaXJxX3NldHVwKCkgZm9yCnJl
c3VtZSB3YXMgYWRkZWQgaW4gY29tbWl0IDBlMzJiMzljZWVkNiAoImRybS9pOTE1OiBhZGQgRFAg
MS4yIE1TVApzdXBwb3J0ICh2MC43KSIpIHRvIGJlIGFibGUgdG8gZG8gTVNUIHNpZGViYW5kIGR1
cmluZyB0aGUgcmVzdW1lLgpBbmQgZmluYWxseSB3ZSBnb3QgYSBwYXJ0aWFsIHJlc3VycmVjdGlv
biBvZiB0aGUgaHBkIGJsb2NraW5nCm1lY2hhbmlzbSBpbiBjb21taXQgZThhOGZlZGQ1N2ZkICgi
ZHJtL2k5MTU6IEJsb2NrIGZiZGV2IEhQRApwcm9jZXNzaW5nIGR1cmluZyBzdXNwZW5kIiksIGJ1
dCB0aGlzIHRpbWUgaXQgb25seSBwcmV2ZW50IGZiZGV2CmZyb20gaGFuZGxpbmcgaHBkIHdoaWxl
IHJlc3VtaW5nLgoKdjI6IExlYXZlIHRoZSBwb2xsX2luaXRfd29yayBiZWhpbmQKdjM6IFJlbW92
ZSB0aGUgZXh0cmEgaW50ZWxfaHBkX3BvbGxfZGlzYWJsZSgpIGZyb20gZGlzcGxheSByZXNldCAo
THl1ZGUpCiAgICBBZGQgdGhlIG1pc3NpbmcgaW50ZWxfaHBkX3BvbGxfZGlzYWJsZSgpIHRvIGRp
c3BsYXkgaW5pdCAoSW1yZSkKCkNjOiBMeXVkZSBQYXVsIDxseXVkZUByZWRoYXQuY29tPgpDYzog
SW1yZSBEZWFrIDxpbXJlLmRlYWtAaW50ZWwuY29tPgpTaWduZWQtb2ZmLWJ5OiBWaWxsZSBTeXJq
w6Rsw6QgPHZpbGxlLnN5cmphbGFAbGludXguaW50ZWwuY29tPgotLS0KIGRyaXZlcnMvZ3B1L2Ry
bS9pOTE1L2Rpc3BsYXkvaW50ZWxfZGlzcGxheS5jICB8ICA5ICsrLS0KIC4uLi9kcm0vaTkxNS9k
aXNwbGF5L2ludGVsX2Rpc3BsYXlfcG93ZXIuYyAgICB8ICAzICstCiBkcml2ZXJzL2dwdS9kcm0v
aTkxNS9kaXNwbGF5L2ludGVsX2hvdHBsdWcuYyAgfCA0MiArKysrKysrKysrKysrKy0tLS0tCiBk
cml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5L2ludGVsX2hvdHBsdWcuaCAgfCAgMyArLQogZHJp
dmVycy9ncHUvZHJtL2k5MTUvaTkxNV9kcnYuYyAgICAgICAgICAgICAgIHwgMjMgKysrKy0tLS0t
LQogNSBmaWxlcyBjaGFuZ2VkLCA0NiBpbnNlcnRpb25zKCspLCAzNCBkZWxldGlvbnMoLSkKCmRp
ZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5L2ludGVsX2Rpc3BsYXkuYyBi
L2RyaXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkvaW50ZWxfZGlzcGxheS5jCmluZGV4IDkwN2Ux
ZDE1NTQ0My4uM2JlMGQ1MzFmOTZjIDEwMDY0NAotLS0gYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9k
aXNwbGF5L2ludGVsX2Rpc3BsYXkuYworKysgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5
L2ludGVsX2Rpc3BsYXkuYwpAQCAtNTAzNiwxOCArNTAzNiwxNCBAQCB2b2lkIGludGVsX2Zpbmlz
aF9yZXNldChzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0ZSAqZGV2X3ByaXYpCiAJCWludGVsX3Bwc191
bmxvY2tfcmVnc193YShkZXZfcHJpdik7CiAJCWludGVsX21vZGVzZXRfaW5pdF9odyhkZXZfcHJp
dik7CiAJCWludGVsX2luaXRfY2xvY2tfZ2F0aW5nKGRldl9wcml2KTsKLQotCQlzcGluX2xvY2tf
aXJxKCZkZXZfcHJpdi0+aXJxX2xvY2spOwotCQlpZiAoZGV2X3ByaXYtPmRpc3BsYXkuaHBkX2ly
cV9zZXR1cCkKLQkJCWRldl9wcml2LT5kaXNwbGF5LmhwZF9pcnFfc2V0dXAoZGV2X3ByaXYpOwot
CQlzcGluX3VubG9ja19pcnEoJmRldl9wcml2LT5pcnFfbG9jayk7CisJCWludGVsX2hwZF9pbml0
KGRldl9wcml2KTsKIAogCQlyZXQgPSBfX2ludGVsX2Rpc3BsYXlfcmVzdW1lKGRldiwgc3RhdGUs
IGN0eCk7CiAJCWlmIChyZXQpCiAJCQlkcm1fZXJyKCZkZXZfcHJpdi0+ZHJtLAogCQkJCSJSZXN0
b3Jpbmcgb2xkIHN0YXRlIGZhaWxlZCB3aXRoICVpXG4iLCByZXQpOwogCi0JCWludGVsX2hwZF9p
bml0KGRldl9wcml2KTsKKwkJaW50ZWxfaHBkX3BvbGxfZGlzYWJsZShkZXZfcHJpdik7CiAJfQog
CiAJZHJtX2F0b21pY19zdGF0ZV9wdXQoc3RhdGUpOwpAQCAtMTgyNTcsNiArMTgyNTMsNyBAQCBp
bnQgaW50ZWxfbW9kZXNldF9pbml0KHN0cnVjdCBkcm1faTkxNV9wcml2YXRlICppOTE1KQogCiAJ
LyogT25seSBlbmFibGUgaG90cGx1ZyBoYW5kbGluZyBvbmNlIHRoZSBmYmRldiBpcyBmdWxseSBz
ZXQgdXAuICovCiAJaW50ZWxfaHBkX2luaXQoaTkxNSk7CisJaW50ZWxfaHBkX3BvbGxfZGlzYWJs
ZShpOTE1KTsKIAogCWludGVsX2luaXRfaXBjKGk5MTUpOwogCmRpZmYgLS1naXQgYS9kcml2ZXJz
L2dwdS9kcm0vaTkxNS9kaXNwbGF5L2ludGVsX2Rpc3BsYXlfcG93ZXIuYyBiL2RyaXZlcnMvZ3B1
L2RybS9pOTE1L2Rpc3BsYXkvaW50ZWxfZGlzcGxheV9wb3dlci5jCmluZGV4IDcyNzdlNThiMDFm
MS4uMjBkZGM1NDI5OGNiIDEwMDY0NAotLS0gYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5
L2ludGVsX2Rpc3BsYXlfcG93ZXIuYworKysgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5
L2ludGVsX2Rpc3BsYXlfcG93ZXIuYwpAQCAtMTQyNCw2ICsxNDI0LDcgQEAgc3RhdGljIHZvaWQg
dmx2X2Rpc3BsYXlfcG93ZXJfd2VsbF9pbml0KHN0cnVjdCBkcm1faTkxNV9wcml2YXRlICpkZXZf
cHJpdikKIAkJcmV0dXJuOwogCiAJaW50ZWxfaHBkX2luaXQoZGV2X3ByaXYpOworCWludGVsX2hw
ZF9wb2xsX2Rpc2FibGUoZGV2X3ByaXYpOwogCiAJLyogUmUtZW5hYmxlIHRoZSBBRFBBLCBpZiB3
ZSBoYXZlIG9uZSAqLwogCWZvcl9lYWNoX2ludGVsX2VuY29kZXIoJmRldl9wcml2LT5kcm0sIGVu
Y29kZXIpIHsKQEAgLTE0NDksNyArMTQ1MCw3IEBAIHN0YXRpYyB2b2lkIHZsdl9kaXNwbGF5X3Bv
d2VyX3dlbGxfZGVpbml0KHN0cnVjdCBkcm1faTkxNV9wcml2YXRlICpkZXZfcHJpdikKIAogCS8q
IFByZXZlbnQgdXMgZnJvbSByZS1lbmFibGluZyBwb2xsaW5nIG9uIGFjY2lkZW50IGluIGxhdGUg
c3VzcGVuZCAqLwogCWlmICghZGV2X3ByaXYtPmRybS5kZXYtPnBvd2VyLmlzX3N1c3BlbmRlZCkK
LQkJaW50ZWxfaHBkX3BvbGxfaW5pdChkZXZfcHJpdik7CisJCWludGVsX2hwZF9wb2xsX2VuYWJs
ZShkZXZfcHJpdik7CiB9CiAKIHN0YXRpYyB2b2lkIHZsdl9kaXNwbGF5X3Bvd2VyX3dlbGxfZW5h
YmxlKHN0cnVjdCBkcm1faTkxNV9wcml2YXRlICpkZXZfcHJpdiwKZGlmZiAtLWdpdCBhL2RyaXZl
cnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkvaW50ZWxfaG90cGx1Zy5jIGIvZHJpdmVycy9ncHUvZHJt
L2k5MTUvZGlzcGxheS9pbnRlbF9ob3RwbHVnLmMKaW5kZXggNWM1OGMxZWQ2NDkzLi4zMGJkNGM4
NmQxNDYgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkvaW50ZWxfaG90
cGx1Zy5jCisrKyBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkvaW50ZWxfaG90cGx1Zy5j
CkBAIC01ODQsNyArNTg0LDcgQEAgdm9pZCBpbnRlbF9ocGRfaXJxX2hhbmRsZXIoc3RydWN0IGRy
bV9pOTE1X3ByaXZhdGUgKmRldl9wcml2LAogICogVGhpcyBpcyBhIHNlcGFyYXRlIHN0ZXAgZnJv
bSBpbnRlcnJ1cHQgZW5hYmxpbmcgdG8gc2ltcGxpZnkgdGhlIGxvY2tpbmcgcnVsZXMKICAqIGlu
IHRoZSBkcml2ZXIgbG9hZCBhbmQgcmVzdW1lIGNvZGUuCiAgKgotICogQWxzbyBzZWU6IGludGVs
X2hwZF9wb2xsX2luaXQoKSwgd2hpY2ggZW5hYmxlcyBjb25uZWN0b3IgcG9sbGluZworICogQWxz
byBzZWU6IGludGVsX2hwZF9wb2xsX2VuYWJsZSgpIGFuZCBpbnRlbF9ocGRfcG9sbF9kaXNhYmxl
KCkuCiAgKi8KIHZvaWQgaW50ZWxfaHBkX2luaXQoc3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmRl
dl9wcml2KQogewpAQCAtNTk1LDkgKzU5NSw2IEBAIHZvaWQgaW50ZWxfaHBkX2luaXQoc3RydWN0
IGRybV9pOTE1X3ByaXZhdGUgKmRldl9wcml2KQogCQlkZXZfcHJpdi0+aG90cGx1Zy5zdGF0c1tp
XS5zdGF0ZSA9IEhQRF9FTkFCTEVEOwogCX0KIAotCVdSSVRFX09OQ0UoZGV2X3ByaXYtPmhvdHBs
dWcucG9sbF9lbmFibGVkLCBmYWxzZSk7Ci0Jc2NoZWR1bGVfd29yaygmZGV2X3ByaXYtPmhvdHBs
dWcucG9sbF9pbml0X3dvcmspOwotCiAJLyoKIAkgKiBJbnRlcnJ1cHQgc2V0dXAgaXMgYWxyZWFk
eSBndWFyYW50ZWVkIHRvIGJlIHNpbmdsZS10aHJlYWRlZCwgdGhpcyBpcwogCSAqIGp1c3QgdG8g
bWFrZSB0aGUgYXNzZXJ0X3NwaW5fbG9ja2VkIGNoZWNrcyBoYXBweS4KQEAgLTY1NCwxMiArNjUx
LDEyIEBAIHN0YXRpYyB2b2lkIGk5MTVfaHBkX3BvbGxfaW5pdF93b3JrKHN0cnVjdCB3b3JrX3N0
cnVjdCAqd29yaykKIH0KIAogLyoqCi0gKiBpbnRlbF9ocGRfcG9sbF9pbml0IC0gZW5hYmxlcy9k
aXNhYmxlcyBwb2xsaW5nIGZvciBjb25uZWN0b3JzIHdpdGggaHBkCisgKiBpbnRlbF9ocGRfcG9s
bF9lbmFibGUgLSBlbmFibGUgcG9sbGluZyBmb3IgY29ubmVjdG9ycyB3aXRoIGhwZAogICogQGRl
dl9wcml2OiBpOTE1IGRldmljZSBpbnN0YW5jZQogICoKLSAqIFRoaXMgZnVuY3Rpb24gZW5hYmxl
cyBwb2xsaW5nIGZvciBhbGwgY29ubmVjdG9ycywgcmVnYXJkbGVzcyBvZiB3aGV0aGVyIG9yCi0g
KiBub3QgdGhleSBzdXBwb3J0IGhvdHBsdWcgZGV0ZWN0aW9uLiBVbmRlciBjZXJ0YWluIGNvbmRp
dGlvbnMgSFBEIG1heSBub3QgYmUKLSAqIGZ1bmN0aW9uYWwuIE9uIG1vc3QgSW50ZWwgR1BVcywg
dGhpcyBoYXBwZW5zIHdoZW4gd2UgZW50ZXIgcnVudGltZSBzdXNwZW5kLgorICogVGhpcyBmdW5j
dGlvbiBlbmFibGVzIHBvbGxpbmcgZm9yIGFsbCBjb25uZWN0b3JzIHdoaWNoIHN1cHBvcnQgSFBE
LgorICogVW5kZXIgY2VydGFpbiBjb25kaXRpb25zIEhQRCBtYXkgbm90IGJlIGZ1bmN0aW9uYWwu
IE9uIG1vc3QgSW50ZWwgR1BVcywKKyAqIHRoaXMgaGFwcGVucyB3aGVuIHdlIGVudGVyIHJ1bnRp
bWUgc3VzcGVuZC4KICAqIE9uIFZhbGxleXZpZXcgYW5kIENoZXJyeXZpZXcgc3lzdGVtcywgdGhp
cyBhbHNvIGhhcHBlbnMgd2hlbiB3ZSBzaHV0IG9mZiBhbGwKICAqIG9mIHRoZSBwb3dlcndlbGxz
LgogICoKQEAgLTY2Nyw5ICs2NjQsOSBAQCBzdGF0aWMgdm9pZCBpOTE1X2hwZF9wb2xsX2luaXRf
d29yayhzdHJ1Y3Qgd29ya19zdHJ1Y3QgKndvcmspCiAgKiBkZXYtPm1vZGVfY29uZmlnLm11dGV4
LCB3ZSBkbyB0aGUgYWN0dWFsIGhvdHBsdWcgZW5hYmxpbmcgaW4gYSBzZXBlcmF0ZQogICogd29y
a2VyLgogICoKLSAqIEFsc28gc2VlOiBpbnRlbF9ocGRfaW5pdCgpLCB3aGljaCByZXN0b3JlcyBo
cGQgaGFuZGxpbmcuCisgKiBBbHNvIHNlZTogaW50ZWxfaHBkX2luaXQoKSBhbmQgaW50ZWxfaHBk
X3BvbGxfZGlzYWJsZSgpLgogICovCi12b2lkIGludGVsX2hwZF9wb2xsX2luaXQoc3RydWN0IGRy
bV9pOTE1X3ByaXZhdGUgKmRldl9wcml2KQordm9pZCBpbnRlbF9ocGRfcG9sbF9lbmFibGUoc3Ry
dWN0IGRybV9pOTE1X3ByaXZhdGUgKmRldl9wcml2KQogewogCVdSSVRFX09OQ0UoZGV2X3ByaXYt
PmhvdHBsdWcucG9sbF9lbmFibGVkLCB0cnVlKTsKIApAQCAtNjgyLDYgKzY3OSwzMSBAQCB2b2lk
IGludGVsX2hwZF9wb2xsX2luaXQoc3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmRldl9wcml2KQog
CXNjaGVkdWxlX3dvcmsoJmRldl9wcml2LT5ob3RwbHVnLnBvbGxfaW5pdF93b3JrKTsKIH0KIAor
LyoqCisgKiBpbnRlbF9ocGRfcG9sbF9kaXNhYmxlIC0gZGlzYWJsZSBwb2xsaW5nIGZvciBjb25u
ZWN0b3JzIHdpdGggaHBkCisgKiBAZGV2X3ByaXY6IGk5MTUgZGV2aWNlIGluc3RhbmNlCisgKgor
ICogVGhpcyBmdW5jdGlvbiBkaXNhYmxlcyBwb2xsaW5nIGZvciBhbGwgY29ubmVjdG9ycyB3aGlj
aCBzdXBwb3J0IEhQRC4KKyAqIFVuZGVyIGNlcnRhaW4gY29uZGl0aW9ucyBIUEQgbWF5IG5vdCBi
ZSBmdW5jdGlvbmFsLiBPbiBtb3N0IEludGVsIEdQVXMsCisgKiB0aGlzIGhhcHBlbnMgd2hlbiB3
ZSBlbnRlciBydW50aW1lIHN1c3BlbmQuCisgKiBPbiBWYWxsZXl2aWV3IGFuZCBDaGVycnl2aWV3
IHN5c3RlbXMsIHRoaXMgYWxzbyBoYXBwZW5zIHdoZW4gd2Ugc2h1dCBvZmYgYWxsCisgKiBvZiB0
aGUgcG93ZXJ3ZWxscy4KKyAqCisgKiBTaW5jZSB0aGlzIGZ1bmN0aW9uIGNhbiBnZXQgY2FsbGVk
IGluIGNvbnRleHRzIHdoZXJlIHdlJ3JlIGFscmVhZHkgaG9sZGluZworICogZGV2LT5tb2RlX2Nv
bmZpZy5tdXRleCwgd2UgZG8gdGhlIGFjdHVhbCBob3RwbHVnIGVuYWJsaW5nIGluIGEgc2VwZXJh
dGUKKyAqIHdvcmtlci4KKyAqCisgKiBBbHNvIHVzZWQgZHVyaW5nIGRyaXZlciBpbml0IHRvIGlu
aXRpYWxpemUgY29ubmVjdG9yLT5wb2xsZWQKKyAqIGFwcHJvcHJpYXRlbHkgZm9yIGFsbCBjb25u
ZWN0b3JzLgorICoKKyAqIEFsc28gc2VlOiBpbnRlbF9ocGRfaW5pdCgpIGFuZCBpbnRlbF9ocGRf
cG9sbF9lbmFibGUoKS4KKyAqLwordm9pZCBpbnRlbF9ocGRfcG9sbF9kaXNhYmxlKHN0cnVjdCBk
cm1faTkxNV9wcml2YXRlICpkZXZfcHJpdikKK3sKKwlXUklURV9PTkNFKGRldl9wcml2LT5ob3Rw
bHVnLnBvbGxfZW5hYmxlZCwgZmFsc2UpOworCXNjaGVkdWxlX3dvcmsoJmRldl9wcml2LT5ob3Rw
bHVnLnBvbGxfaW5pdF93b3JrKTsKK30KKwogdm9pZCBpbnRlbF9ocGRfaW5pdF93b3JrKHN0cnVj
dCBkcm1faTkxNV9wcml2YXRlICpkZXZfcHJpdikKIHsKIAlJTklUX0RFTEFZRURfV09SSygmZGV2
X3ByaXYtPmhvdHBsdWcuaG90cGx1Z193b3JrLApkaWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJt
L2k5MTUvZGlzcGxheS9pbnRlbF9ob3RwbHVnLmggYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNw
bGF5L2ludGVsX2hvdHBsdWcuaAppbmRleCBhNzA0ZDdjOTRkMTYuLmI4N2U5NWQ2MDZlNiAxMDA2
NDQKLS0tIGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvZGlzcGxheS9pbnRlbF9ob3RwbHVnLmgKKysr
IGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvZGlzcGxheS9pbnRlbF9ob3RwbHVnLmgKQEAgLTE0LDcg
KzE0LDggQEAgc3RydWN0IGludGVsX2RpZ2l0YWxfcG9ydDsKIHN0cnVjdCBpbnRlbF9lbmNvZGVy
OwogZW51bSBwb3J0OwogCi12b2lkIGludGVsX2hwZF9wb2xsX2luaXQoc3RydWN0IGRybV9pOTE1
X3ByaXZhdGUgKmRldl9wcml2KTsKK3ZvaWQgaW50ZWxfaHBkX3BvbGxfZW5hYmxlKHN0cnVjdCBk
cm1faTkxNV9wcml2YXRlICpkZXZfcHJpdik7Cit2b2lkIGludGVsX2hwZF9wb2xsX2Rpc2FibGUo
c3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmRldl9wcml2KTsKIGVudW0gaW50ZWxfaG90cGx1Z19z
dGF0ZSBpbnRlbF9lbmNvZGVyX2hvdHBsdWcoc3RydWN0IGludGVsX2VuY29kZXIgKmVuY29kZXIs
CiAJCQkJCSAgICAgICBzdHJ1Y3QgaW50ZWxfY29ubmVjdG9yICpjb25uZWN0b3IpOwogdm9pZCBp
bnRlbF9ocGRfaXJxX2hhbmRsZXIoc3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmRldl9wcml2LApk
aWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvaTkxNV9kcnYuYyBiL2RyaXZlcnMvZ3B1
L2RybS9pOTE1L2k5MTVfZHJ2LmMKaW5kZXggZWJjMTUwNjZkMTA4Li4zZmM3Yjk5NmZjNDggMTAw
NjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2k5MTVfZHJ2LmMKKysrIGIvZHJpdmVycy9n
cHUvZHJtL2k5MTUvaTkxNV9kcnYuYwpAQCAtMTIyNiwyNiArMTIyNiwxNSBAQCBzdGF0aWMgaW50
IGk5MTVfZHJtX3Jlc3VtZShzdHJ1Y3QgZHJtX2RldmljZSAqZGV2KQogCiAJaW50ZWxfbW9kZXNl
dF9pbml0X2h3KGRldl9wcml2KTsKIAlpbnRlbF9pbml0X2Nsb2NrX2dhdGluZyhkZXZfcHJpdik7
CisJaW50ZWxfaHBkX2luaXQoZGV2X3ByaXYpOwogCi0Jc3Bpbl9sb2NrX2lycSgmZGV2X3ByaXYt
PmlycV9sb2NrKTsKLQlpZiAoZGV2X3ByaXYtPmRpc3BsYXkuaHBkX2lycV9zZXR1cCkKLQkJZGV2
X3ByaXYtPmRpc3BsYXkuaHBkX2lycV9zZXR1cChkZXZfcHJpdik7Ci0Jc3Bpbl91bmxvY2tfaXJx
KCZkZXZfcHJpdi0+aXJxX2xvY2spOwotCisJLyogTVNUIHNpZGViYW5kIHJlcXVpcmVzIEhQRCBp
bnRlcnJ1cHRzIGVuYWJsZWQgKi8KIAlpbnRlbF9kcF9tc3RfcmVzdW1lKGRldl9wcml2KTsKLQog
CWludGVsX2Rpc3BsYXlfcmVzdW1lKGRldik7CiAKKwlpbnRlbF9ocGRfcG9sbF9kaXNhYmxlKGRl
dl9wcml2KTsKIAlkcm1fa21zX2hlbHBlcl9wb2xsX2VuYWJsZShkZXYpOwogCi0JLyoKLQkgKiAu
Li4gYnV0IGFsc28gbmVlZCB0byBtYWtlIHN1cmUgdGhhdCBob3RwbHVnIHByb2Nlc3NpbmcKLQkg
KiBkb2Vzbid0IGNhdXNlIGhhdm9jLiBMaWtlIGluIHRoZSBkcml2ZXIgbG9hZCBjb2RlIHdlIGRv
bid0Ci0JICogYm90aGVyIHdpdGggdGhlIHRpbnkgcmFjZSBoZXJlIHdoZXJlIHdlIG1pZ2h0IGxv
c2UgaG90cGx1ZwotCSAqIG5vdGlmaWNhdGlvbnMuCi0JICogKi8KLQlpbnRlbF9ocGRfaW5pdChk
ZXZfcHJpdik7Ci0KIAlpbnRlbF9vcHJlZ2lvbl9yZXN1bWUoZGV2X3ByaXYpOwogCiAJaW50ZWxf
ZmJkZXZfc2V0X3N1c3BlbmQoZGV2LCBGQklORk9fU1RBVEVfUlVOTklORywgZmFsc2UpOwpAQCAt
MTU1Nyw3ICsxNTQ2LDcgQEAgc3RhdGljIGludCBpbnRlbF9ydW50aW1lX3N1c3BlbmQoc3RydWN0
IGRldmljZSAqa2RldikKIAlhc3NlcnRfZm9yY2V3YWtlc19pbmFjdGl2ZSgmZGV2X3ByaXYtPnVu
Y29yZSk7CiAKIAlpZiAoIUlTX1ZBTExFWVZJRVcoZGV2X3ByaXYpICYmICFJU19DSEVSUllWSUVX
KGRldl9wcml2KSkKLQkJaW50ZWxfaHBkX3BvbGxfaW5pdChkZXZfcHJpdik7CisJCWludGVsX2hw
ZF9wb2xsX2VuYWJsZShkZXZfcHJpdik7CiAKIAlkcm1fZGJnX2ttcygmZGV2X3ByaXYtPmRybSwg
IkRldmljZSBzdXNwZW5kZWRcbiIpOwogCXJldHVybiAwOwpAQCAtMTYwMiw4ICsxNTkxLDEwIEBA
IHN0YXRpYyBpbnQgaW50ZWxfcnVudGltZV9yZXN1bWUoc3RydWN0IGRldmljZSAqa2RldikKIAkg
KiBwb3dlciB3ZWxsLCBzbyBocGQgaXMgcmVpbml0aWFsaXplZCBmcm9tIHRoZXJlLiBGb3IKIAkg
KiBldmVyeW9uZSBlbHNlIGRvIGl0IGhlcmUuCiAJICovCi0JaWYgKCFJU19WQUxMRVlWSUVXKGRl
dl9wcml2KSAmJiAhSVNfQ0hFUlJZVklFVyhkZXZfcHJpdikpCisJaWYgKCFJU19WQUxMRVlWSUVX
KGRldl9wcml2KSAmJiAhSVNfQ0hFUlJZVklFVyhkZXZfcHJpdikpIHsKIAkJaW50ZWxfaHBkX2lu
aXQoZGV2X3ByaXYpOworCQlpbnRlbF9ocGRfcG9sbF9kaXNhYmxlKGRldl9wcml2KTsKKwl9CiAK
IAlpbnRlbF9lbmFibGVfaXBjKGRldl9wcml2KTsKIAotLSAKMi4yNi4yCgpfX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpJbnRlbC1nZnggbWFpbGluZyBsaXN0
CkludGVsLWdmeEBsaXN0cy5mcmVlZGVza3RvcC5vcmcKaHR0cHM6Ly9saXN0cy5mcmVlZGVza3Rv
cC5vcmcvbWFpbG1hbi9saXN0aW5mby9pbnRlbC1nZngK

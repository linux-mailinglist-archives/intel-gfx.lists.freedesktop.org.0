Return-Path: <intel-gfx-bounces@lists.freedesktop.org>
X-Original-To: lists+intel-gfx@lfdr.de
Delivered-To: lists+intel-gfx@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [131.252.210.177])
	by mail.lfdr.de (Postfix) with ESMTPS id AD2A3310CAD
	for <lists+intel-gfx@lfdr.de>; Fri,  5 Feb 2021 15:49:07 +0100 (CET)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 196476F456;
	Fri,  5 Feb 2021 14:49:06 +0000 (UTC)
X-Original-To: intel-gfx@lists.freedesktop.org
Delivered-To: intel-gfx@lists.freedesktop.org
Received: from mga17.intel.com (mga17.intel.com [192.55.52.151])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 0BD296F456
 for <intel-gfx@lists.freedesktop.org>; Fri,  5 Feb 2021 14:49:05 +0000 (UTC)
IronPort-SDR: vYdFSgiEBsX37+oBlbxG22ZhEAb4aByzJwm6FZF8Z2tbSCYkUc2ldvfVYQ9g8nzhWKa50oSEVa
 pppnNCz1Icow==
X-IronPort-AV: E=McAfee;i="6000,8403,9885"; a="161194566"
X-IronPort-AV: E=Sophos;i="5.81,155,1610438400"; d="scan'208";a="161194566"
Received: from fmsmga008.fm.intel.com ([10.253.24.58])
 by fmsmga107.fm.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384;
 05 Feb 2021 06:49:04 -0800
IronPort-SDR: xAf6hb6uEUVVSHrAqGqTatPRKd0RtIl/wXqEkTAeUc/etWeQG5ZUvWbOl7p1Pm9q8tM2Wz6cIi
 OSZy+MUTpHEg==
X-IronPort-AV: E=Sophos;i="5.81,155,1610438400"; d="scan'208";a="373421903"
Received: from fuhrberg-mobl1.ger.corp.intel.com (HELO localhost)
 ([10.252.33.102])
 by fmsmga008-auth.fm.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384;
 05 Feb 2021 06:49:02 -0800
From: Jani Nikula <jani.nikula@intel.com>
To: intel-gfx@lists.freedesktop.org
Date: Fri,  5 Feb 2021 16:48:37 +0200
Message-Id: <738c7aaeb63c7d2357ddd932f18787ec8a3cefeb.1612536383.git.jani.nikula@intel.com>
X-Mailer: git-send-email 2.20.1
In-Reply-To: <cover.1612536383.git.jani.nikula@intel.com>
References: <cover.1612536383.git.jani.nikula@intel.com>
MIME-Version: 1.0
Subject: [Intel-gfx] [PATCH v12 2/8] drm/i915: move pipe update code into
 crtc. (v2)
X-BeenThere: intel-gfx@lists.freedesktop.org
X-Mailman-Version: 2.1.29
Precedence: list
List-Id: Intel graphics driver community testing & development
 <intel-gfx.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/intel-gfx>
List-Post: <mailto:intel-gfx@lists.freedesktop.org>
List-Help: <mailto:intel-gfx-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=subscribe>
Cc: jani.nikula@intel.com, Dave Airlie <airlied@redhat.com>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: intel-gfx-bounces@lists.freedesktop.org
Sender: "Intel-gfx" <intel-gfx-bounces@lists.freedesktop.org>

RnJvbTogRGF2ZSBBaXJsaWUgPGFpcmxpZWRAcmVkaGF0LmNvbT4KCkRhbmllbCBzdWdnZXN0ZWQg
dGhpcyBzaG91bGQgbW92ZSBoZXJlLgoKdjI6IG1vdmUgdnJyIGNvZGUuCgpTaWduZWQtb2ZmLWJ5
OiBEYXZlIEFpcmxpZSA8YWlybGllZEByZWRoYXQuY29tPgpTaWduZWQtb2ZmLWJ5OiBKYW5pIE5p
a3VsYSA8amFuaS5uaWt1bGFAaW50ZWwuY29tPgpSZXZpZXdlZC1ieTogVmlsbGUgU3lyasOkbMOk
IDx2aWxsZS5zeXJqYWxhQGxpbnV4LmludGVsLmNvbT4KLS0tCiBkcml2ZXJzL2dwdS9kcm0vaTkx
NS9kaXNwbGF5L2ludGVsX2NydGMuYyAgIHwgMjQxICsrKysrKysrKysrKysrKysrKysrCiBkcml2
ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5L2ludGVsX3Nwcml0ZS5jIHwgMjM4IC0tLS0tLS0tLS0t
LS0tLS0tLS0KIDIgZmlsZXMgY2hhbmdlZCwgMjQxIGluc2VydGlvbnMoKyksIDIzOCBkZWxldGlv
bnMoLSkKCmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5L2ludGVsX2Ny
dGMuYyBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkvaW50ZWxfY3J0Yy5jCmluZGV4IGVi
NDc4NzEyYzM4MS4uOGJmYThmYzJlZmRiIDEwMDY0NAotLS0gYS9kcml2ZXJzL2dwdS9kcm0vaTkx
NS9kaXNwbGF5L2ludGVsX2NydGMuYworKysgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5
L2ludGVsX2NydGMuYwpAQCAtMTAsNiArMTAsOSBAQAogI2luY2x1ZGUgPGRybS9kcm1fcGxhbmUu
aD4KICNpbmNsdWRlIDxkcm0vZHJtX3BsYW5lX2hlbHBlci5oPgogCisjaW5jbHVkZSAiaTkxNV90
cmFjZS5oIgorI2luY2x1ZGUgImk5MTVfdmdwdS5oIgorCiAjaW5jbHVkZSAiaW50ZWxfYXRvbWlj
LmgiCiAjaW5jbHVkZSAiaW50ZWxfYXRvbWljX3BsYW5lLmgiCiAjaW5jbHVkZSAiaW50ZWxfY29s
b3IuaCIKQEAgLTE3LDggKzIwLDExIEBACiAjaW5jbHVkZSAiaW50ZWxfY3Vyc29yLmgiCiAjaW5j
bHVkZSAiaW50ZWxfZGlzcGxheV9kZWJ1Z2ZzLmgiCiAjaW5jbHVkZSAiaW50ZWxfZGlzcGxheV90
eXBlcy5oIgorI2luY2x1ZGUgImludGVsX2RzaS5oIgogI2luY2x1ZGUgImludGVsX3BpcGVfY3Jj
LmgiCisjaW5jbHVkZSAiaW50ZWxfcHNyLmgiCiAjaW5jbHVkZSAiaW50ZWxfc3ByaXRlLmgiCisj
aW5jbHVkZSAiaW50ZWxfdnJyLmgiCiAjaW5jbHVkZSAiaTl4eF9wbGFuZS5oIgogI2luY2x1ZGUg
InNrbF91bml2ZXJzYWxfcGxhbmUuaCIKIApAQCAtMzMyLDMgKzMzOCwyMzggQEAgaW50IGludGVs
X2NydGNfaW5pdChzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0ZSAqZGV2X3ByaXYsIGVudW0gcGlwZSBw
aXBlKQogCiAJcmV0dXJuIHJldDsKIH0KKworaW50IGludGVsX3VzZWNzX3RvX3NjYW5saW5lcyhj
b25zdCBzdHJ1Y3QgZHJtX2Rpc3BsYXlfbW9kZSAqYWRqdXN0ZWRfbW9kZSwKKwkJCSAgICAgaW50
IHVzZWNzKQoreworCS8qIHBhcmFub2lhICovCisJaWYgKCFhZGp1c3RlZF9tb2RlLT5jcnRjX2h0
b3RhbCkKKwkJcmV0dXJuIDE7CisKKwlyZXR1cm4gRElWX1JPVU5EX1VQKHVzZWNzICogYWRqdXN0
ZWRfbW9kZS0+Y3J0Y19jbG9jaywKKwkJCSAgICAxMDAwICogYWRqdXN0ZWRfbW9kZS0+Y3J0Y19o
dG90YWwpOworfQorCitzdGF0aWMgaW50IGludGVsX21vZGVfdmJsYW5rX3N0YXJ0KGNvbnN0IHN0
cnVjdCBkcm1fZGlzcGxheV9tb2RlICptb2RlKQoreworCWludCB2Ymxhbmtfc3RhcnQgPSBtb2Rl
LT5jcnRjX3ZibGFua19zdGFydDsKKworCWlmIChtb2RlLT5mbGFncyAmIERSTV9NT0RFX0ZMQUdf
SU5URVJMQUNFKQorCQl2Ymxhbmtfc3RhcnQgPSBESVZfUk9VTkRfVVAodmJsYW5rX3N0YXJ0LCAy
KTsKKworCXJldHVybiB2Ymxhbmtfc3RhcnQ7Cit9CisKKy8qKgorICogaW50ZWxfcGlwZV91cGRh
dGVfc3RhcnQoKSAtIHN0YXJ0IHVwZGF0ZSBvZiBhIHNldCBvZiBkaXNwbGF5IHJlZ2lzdGVycwor
ICogQG5ld19jcnRjX3N0YXRlOiB0aGUgbmV3IGNydGMgc3RhdGUKKyAqCisgKiBNYXJrIHRoZSBz
dGFydCBvZiBhbiB1cGRhdGUgdG8gcGlwZSByZWdpc3RlcnMgdGhhdCBzaG91bGQgYmUgdXBkYXRl
ZAorICogYXRvbWljYWxseSByZWdhcmRpbmcgdmJsYW5rLiBJZiB0aGUgbmV4dCB2Ymxhbmsgd2ls
bCBoYXBwZW5zIHdpdGhpbgorICogdGhlIG5leHQgMTAwIHVzLCB0aGlzIGZ1bmN0aW9uIHdhaXRz
IHVudGlsIHRoZSB2YmxhbmsgcGFzc2VzLgorICoKKyAqIEFmdGVyIGEgc3VjY2Vzc2Z1bCBjYWxs
IHRvIHRoaXMgZnVuY3Rpb24sIGludGVycnVwdHMgd2lsbCBiZSBkaXNhYmxlZAorICogdW50aWwg
YSBzdWJzZXF1ZW50IGNhbGwgdG8gaW50ZWxfcGlwZV91cGRhdGVfZW5kKCkuIFRoYXQgaXMgZG9u
ZSB0bworICogYXZvaWQgcmFuZG9tIGRlbGF5cy4KKyAqLwordm9pZCBpbnRlbF9waXBlX3VwZGF0
ZV9zdGFydChjb25zdCBzdHJ1Y3QgaW50ZWxfY3J0Y19zdGF0ZSAqbmV3X2NydGNfc3RhdGUpCit7
CisJc3RydWN0IGludGVsX2NydGMgKmNydGMgPSB0b19pbnRlbF9jcnRjKG5ld19jcnRjX3N0YXRl
LT51YXBpLmNydGMpOworCXN0cnVjdCBkcm1faTkxNV9wcml2YXRlICpkZXZfcHJpdiA9IHRvX2k5
MTUoY3J0Yy0+YmFzZS5kZXYpOworCWNvbnN0IHN0cnVjdCBkcm1fZGlzcGxheV9tb2RlICphZGp1
c3RlZF9tb2RlID0gJm5ld19jcnRjX3N0YXRlLT5ody5hZGp1c3RlZF9tb2RlOworCWxvbmcgdGlt
ZW91dCA9IG1zZWNzX3RvX2ppZmZpZXNfdGltZW91dCgxKTsKKwlpbnQgc2NhbmxpbmUsIG1pbiwg
bWF4LCB2Ymxhbmtfc3RhcnQ7CisJd2FpdF9xdWV1ZV9oZWFkX3QgKndxID0gZHJtX2NydGNfdmJs
YW5rX3dhaXRxdWV1ZSgmY3J0Yy0+YmFzZSk7CisJYm9vbCBuZWVkX3Zsdl9kc2lfd2EgPSAoSVNf
VkFMTEVZVklFVyhkZXZfcHJpdikgfHwgSVNfQ0hFUlJZVklFVyhkZXZfcHJpdikpICYmCisJCWlu
dGVsX2NydGNfaGFzX3R5cGUobmV3X2NydGNfc3RhdGUsIElOVEVMX09VVFBVVF9EU0kpOworCURF
RklORV9XQUlUKHdhaXQpOworCisJaWYgKG5ld19jcnRjX3N0YXRlLT51YXBpLmFzeW5jX2ZsaXAp
CisJCXJldHVybjsKKworCWlmIChuZXdfY3J0Y19zdGF0ZS0+dnJyLmVuYWJsZSkKKwkJdmJsYW5r
X3N0YXJ0ID0gaW50ZWxfdnJyX3ZtYXhfdmJsYW5rX3N0YXJ0KG5ld19jcnRjX3N0YXRlKTsKKwll
bHNlCisJCXZibGFua19zdGFydCA9IGludGVsX21vZGVfdmJsYW5rX3N0YXJ0KGFkanVzdGVkX21v
ZGUpOworCisJLyogRklYTUUgbmVlZHMgdG8gYmUgY2FsaWJyYXRlZCBzZW5zaWJseSAqLworCW1p
biA9IHZibGFua19zdGFydCAtIGludGVsX3VzZWNzX3RvX3NjYW5saW5lcyhhZGp1c3RlZF9tb2Rl
LAorCQkJCQkJICAgICAgVkJMQU5LX0VWQVNJT05fVElNRV9VUyk7CisJbWF4ID0gdmJsYW5rX3N0
YXJ0IC0gMTsKKworCWlmIChtaW4gPD0gMCB8fCBtYXggPD0gMCkKKwkJZ290byBpcnFfZGlzYWJs
ZTsKKworCWlmIChkcm1fV0FSTl9PTigmZGV2X3ByaXYtPmRybSwgZHJtX2NydGNfdmJsYW5rX2dl
dCgmY3J0Yy0+YmFzZSkpKQorCQlnb3RvIGlycV9kaXNhYmxlOworCisJLyoKKwkgKiBXYWl0IGZv
ciBwc3IgdG8gaWRsZSBvdXQgYWZ0ZXIgZW5hYmxpbmcgdGhlIFZCTCBpbnRlcnJ1cHRzCisJICog
VkJMIGludGVycnVwdHMgd2lsbCBzdGFydCB0aGUgUFNSIGV4aXQgYW5kIHByZXZlbnQgYSBQU1IK
KwkgKiByZS1lbnRyeSBhcyB3ZWxsLgorCSAqLworCWludGVsX3Bzcl93YWl0X2Zvcl9pZGxlKG5l
d19jcnRjX3N0YXRlKTsKKworCWxvY2FsX2lycV9kaXNhYmxlKCk7CisKKwljcnRjLT5kZWJ1Zy5t
aW5fdmJsID0gbWluOworCWNydGMtPmRlYnVnLm1heF92YmwgPSBtYXg7CisJdHJhY2VfaW50ZWxf
cGlwZV91cGRhdGVfc3RhcnQoY3J0Yyk7CisKKwlmb3IgKDs7KSB7CisJCS8qCisJCSAqIHByZXBh
cmVfdG9fd2FpdCgpIGhhcyBhIG1lbW9yeSBiYXJyaWVyLCB3aGljaCBndWFyYW50ZWVzCisJCSAq
IG90aGVyIENQVXMgY2FuIHNlZSB0aGUgdGFzayBzdGF0ZSB1cGRhdGUgYnkgdGhlIHRpbWUgd2UK
KwkJICogcmVhZCB0aGUgc2NhbmxpbmUuCisJCSAqLworCQlwcmVwYXJlX3RvX3dhaXQod3EsICZ3
YWl0LCBUQVNLX1VOSU5URVJSVVBUSUJMRSk7CisKKwkJc2NhbmxpbmUgPSBpbnRlbF9nZXRfY3J0
Y19zY2FubGluZShjcnRjKTsKKwkJaWYgKHNjYW5saW5lIDwgbWluIHx8IHNjYW5saW5lID4gbWF4
KQorCQkJYnJlYWs7CisKKwkJaWYgKCF0aW1lb3V0KSB7CisJCQlkcm1fZXJyKCZkZXZfcHJpdi0+
ZHJtLAorCQkJCSJQb3RlbnRpYWwgYXRvbWljIHVwZGF0ZSBmYWlsdXJlIG9uIHBpcGUgJWNcbiIs
CisJCQkJcGlwZV9uYW1lKGNydGMtPnBpcGUpKTsKKwkJCWJyZWFrOworCQl9CisKKwkJbG9jYWxf
aXJxX2VuYWJsZSgpOworCisJCXRpbWVvdXQgPSBzY2hlZHVsZV90aW1lb3V0KHRpbWVvdXQpOwor
CisJCWxvY2FsX2lycV9kaXNhYmxlKCk7CisJfQorCisJZmluaXNoX3dhaXQod3EsICZ3YWl0KTsK
KworCWRybV9jcnRjX3ZibGFua19wdXQoJmNydGMtPmJhc2UpOworCisJLyoKKwkgKiBPbiBWTFYv
Q0hWIERTSSB0aGUgc2NhbmxpbmUgY291bnRlciB3b3VsZCBhcHBlYXIgdG8KKwkgKiBpbmNyZW1l
bnQgYXBwcm94LiAxLzMgb2YgYSBzY2FubGluZSBiZWZvcmUgc3RhcnQgb2YgdmJsYW5rLgorCSAq
IFRoZSByZWdpc3RlcnMgc3RpbGwgZ2V0IGxhdGNoZWQgYXQgc3RhcnQgb2YgdmJsYW5rIGhvd2V2
ZXIuCisJICogVGhpcyBtZWFucyB3ZSBtdXN0IG5vdCB3cml0ZSBhbnkgcmVnaXN0ZXJzIG9uIHRo
ZSBmaXJzdAorCSAqIGxpbmUgb2YgdmJsYW5rIChzaW5jZSBub3QgdGhlIHdob2xlIGxpbmUgaXMg
YWN0dWFsbHkgaW4KKwkgKiB2YmxhbmspLiBBbmQgdW5mb3J0dW5hdGVseSB3ZSBjYW4ndCB1c2Ug
dGhlIGludGVycnVwdCB0bworCSAqIHdhaXQgaGVyZSBzaW5jZSBpdCB3aWxsIGZpcmUgdG9vIHNv
b24uIFdlIGNvdWxkIHVzZSB0aGUKKwkgKiBmcmFtZSBzdGFydCBpbnRlcnJ1cHQgaW5zdGVhZCBz
aW5jZSBpdCB3aWxsIGZpcmUgYWZ0ZXIgdGhlCisJICogY3JpdGljYWwgc2NhbmxpbmUsIGJ1dCB0
aGF0IHdvdWxkIHJlcXVpcmUgbW9yZSBjaGFuZ2VzCisJICogaW4gdGhlIGludGVycnVwdCBjb2Rl
LiBTbyBmb3Igbm93IHdlJ2xsIGp1c3QgZG8gdGhlIG5hc3R5CisJICogdGhpbmcgYW5kIHBvbGwg
Zm9yIHRoZSBiYWQgc2NhbmxpbmUgdG8gcGFzcyB1cyBieS4KKwkgKgorCSAqIEZJWE1FIGZpZ3Vy
ZSBvdXQgaWYgQlhUKyBEU0kgc3VmZmVycyBmcm9tIHRoaXMgYXMgd2VsbAorCSAqLworCXdoaWxl
IChuZWVkX3Zsdl9kc2lfd2EgJiYgc2NhbmxpbmUgPT0gdmJsYW5rX3N0YXJ0KQorCQlzY2FubGlu
ZSA9IGludGVsX2dldF9jcnRjX3NjYW5saW5lKGNydGMpOworCisJY3J0Yy0+ZGVidWcuc2Nhbmxp
bmVfc3RhcnQgPSBzY2FubGluZTsKKwljcnRjLT5kZWJ1Zy5zdGFydF92YmxfdGltZSA9IGt0aW1l
X2dldCgpOworCWNydGMtPmRlYnVnLnN0YXJ0X3ZibF9jb3VudCA9IGludGVsX2NydGNfZ2V0X3Zi
bGFua19jb3VudGVyKGNydGMpOworCisJdHJhY2VfaW50ZWxfcGlwZV91cGRhdGVfdmJsYW5rX2V2
YWRlZChjcnRjKTsKKwlyZXR1cm47CisKK2lycV9kaXNhYmxlOgorCWxvY2FsX2lycV9kaXNhYmxl
KCk7Cit9CisKKyNpZiBJU19FTkFCTEVEKENPTkZJR19EUk1fSTkxNV9ERUJVR19WQkxBTktfRVZB
REUpCitzdGF0aWMgdm9pZCBkYmdfdmJsYW5rX2V2YWRlKHN0cnVjdCBpbnRlbF9jcnRjICpjcnRj
LCBrdGltZV90IGVuZCkKK3sKKwl1NjQgZGVsdGEgPSBrdGltZV90b19ucyhrdGltZV9zdWIoZW5k
LCBjcnRjLT5kZWJ1Zy5zdGFydF92YmxfdGltZSkpOworCXVuc2lnbmVkIGludCBoOworCisJaCA9
IGlsb2cyKGRlbHRhID4+IDkpOworCWlmIChoID49IEFSUkFZX1NJWkUoY3J0Yy0+ZGVidWcudmJs
LnRpbWVzKSkKKwkJaCA9IEFSUkFZX1NJWkUoY3J0Yy0+ZGVidWcudmJsLnRpbWVzKSAtIDE7CisJ
Y3J0Yy0+ZGVidWcudmJsLnRpbWVzW2hdKys7CisKKwljcnRjLT5kZWJ1Zy52Ymwuc3VtICs9IGRl
bHRhOworCWlmICghY3J0Yy0+ZGVidWcudmJsLm1pbiB8fCBkZWx0YSA8IGNydGMtPmRlYnVnLnZi
bC5taW4pCisJCWNydGMtPmRlYnVnLnZibC5taW4gPSBkZWx0YTsKKwlpZiAoZGVsdGEgPiBjcnRj
LT5kZWJ1Zy52YmwubWF4KQorCQljcnRjLT5kZWJ1Zy52YmwubWF4ID0gZGVsdGE7CisKKwlpZiAo
ZGVsdGEgPiAxMDAwICogVkJMQU5LX0VWQVNJT05fVElNRV9VUykgeworCQlkcm1fZGJnX2ttcyhj
cnRjLT5iYXNlLmRldiwKKwkJCSAgICAiQXRvbWljIHVwZGF0ZSBvbiBwaXBlICglYykgdG9vayAl
bGxkIHVzLCBtYXggdGltZSB1bmRlciBldmFzaW9uIGlzICV1IHVzXG4iLAorCQkJICAgIHBpcGVf
bmFtZShjcnRjLT5waXBlKSwKKwkJCSAgICBkaXZfdTY0KGRlbHRhLCAxMDAwKSwKKwkJCSAgICBW
QkxBTktfRVZBU0lPTl9USU1FX1VTKTsKKwkJY3J0Yy0+ZGVidWcudmJsLm92ZXIrKzsKKwl9Cit9
CisjZWxzZQorc3RhdGljIHZvaWQgZGJnX3ZibGFua19ldmFkZShzdHJ1Y3QgaW50ZWxfY3J0YyAq
Y3J0Yywga3RpbWVfdCBlbmQpIHt9CisjZW5kaWYKKworLyoqCisgKiBpbnRlbF9waXBlX3VwZGF0
ZV9lbmQoKSAtIGVuZCB1cGRhdGUgb2YgYSBzZXQgb2YgZGlzcGxheSByZWdpc3RlcnMKKyAqIEBu
ZXdfY3J0Y19zdGF0ZTogdGhlIG5ldyBjcnRjIHN0YXRlCisgKgorICogTWFyayB0aGUgZW5kIG9m
IGFuIHVwZGF0ZSBzdGFydGVkIHdpdGggaW50ZWxfcGlwZV91cGRhdGVfc3RhcnQoKS4gVGhpcwor
ICogcmUtZW5hYmxlcyBpbnRlcnJ1cHRzIGFuZCB2ZXJpZmllcyB0aGUgdXBkYXRlIHdhcyBhY3R1
YWxseSBjb21wbGV0ZWQKKyAqIGJlZm9yZSBhIHZibGFuay4KKyAqLwordm9pZCBpbnRlbF9waXBl
X3VwZGF0ZV9lbmQoc3RydWN0IGludGVsX2NydGNfc3RhdGUgKm5ld19jcnRjX3N0YXRlKQorewor
CXN0cnVjdCBpbnRlbF9jcnRjICpjcnRjID0gdG9faW50ZWxfY3J0YyhuZXdfY3J0Y19zdGF0ZS0+
dWFwaS5jcnRjKTsKKwllbnVtIHBpcGUgcGlwZSA9IGNydGMtPnBpcGU7CisJaW50IHNjYW5saW5l
X2VuZCA9IGludGVsX2dldF9jcnRjX3NjYW5saW5lKGNydGMpOworCXUzMiBlbmRfdmJsX2NvdW50
ID0gaW50ZWxfY3J0Y19nZXRfdmJsYW5rX2NvdW50ZXIoY3J0Yyk7CisJa3RpbWVfdCBlbmRfdmJs
X3RpbWUgPSBrdGltZV9nZXQoKTsKKwlzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0ZSAqZGV2X3ByaXYg
PSB0b19pOTE1KGNydGMtPmJhc2UuZGV2KTsKKworCWlmIChuZXdfY3J0Y19zdGF0ZS0+dWFwaS5h
c3luY19mbGlwKQorCQlyZXR1cm47CisKKwl0cmFjZV9pbnRlbF9waXBlX3VwZGF0ZV9lbmQoY3J0
YywgZW5kX3ZibF9jb3VudCwgc2NhbmxpbmVfZW5kKTsKKworCS8qCisJICogSW5jYXNlIG9mIG1p
cGkgZHNpIGNvbW1hbmQgbW9kZSwgd2UgbmVlZCB0byBzZXQgZnJhbWUgdXBkYXRlCisJICogcmVx
dWVzdCBmb3IgZXZlcnkgY29tbWl0LgorCSAqLworCWlmIChJTlRFTF9HRU4oZGV2X3ByaXYpID49
IDExICYmCisJICAgIGludGVsX2NydGNfaGFzX3R5cGUobmV3X2NydGNfc3RhdGUsIElOVEVMX09V
VFBVVF9EU0kpKQorCQlpY2xfZHNpX2ZyYW1lX3VwZGF0ZShuZXdfY3J0Y19zdGF0ZSk7CisKKwkv
KiBXZSdyZSBzdGlsbCBpbiB0aGUgdmJsYW5rLWV2YWRlIGNyaXRpY2FsIHNlY3Rpb24sIHRoaXMg
Y2FuJ3QgcmFjZS4KKwkgKiBXb3VsZCBiZSBzbGlnaHRseSBuaWNlIHRvIGp1c3QgZ3JhYiB0aGUg
dmJsYW5rIGNvdW50IGFuZCBhcm0gdGhlCisJICogZXZlbnQgb3V0c2lkZSBvZiB0aGUgY3JpdGlj
YWwgc2VjdGlvbiAtIHRoZSBzcGlubG9jayBtaWdodCBzcGluIGZvciBhCisJICogd2hpbGUgLi4u
ICovCisJaWYgKG5ld19jcnRjX3N0YXRlLT51YXBpLmV2ZW50KSB7CisJCWRybV9XQVJOX09OKCZk
ZXZfcHJpdi0+ZHJtLAorCQkJICAgIGRybV9jcnRjX3ZibGFua19nZXQoJmNydGMtPmJhc2UpICE9
IDApOworCisJCXNwaW5fbG9jaygmY3J0Yy0+YmFzZS5kZXYtPmV2ZW50X2xvY2spOworCQlkcm1f
Y3J0Y19hcm1fdmJsYW5rX2V2ZW50KCZjcnRjLT5iYXNlLAorCQkJCQkgIG5ld19jcnRjX3N0YXRl
LT51YXBpLmV2ZW50KTsKKwkJc3Bpbl91bmxvY2soJmNydGMtPmJhc2UuZGV2LT5ldmVudF9sb2Nr
KTsKKworCQluZXdfY3J0Y19zdGF0ZS0+dWFwaS5ldmVudCA9IE5VTEw7CisJfQorCisJbG9jYWxf
aXJxX2VuYWJsZSgpOworCisJLyogU2VuZCBWUlIgUHVzaCB0byB0ZXJtaW5hdGUgVmJsYW5rICov
CisJaW50ZWxfdnJyX3NlbmRfcHVzaChuZXdfY3J0Y19zdGF0ZSk7CisKKwlpZiAoaW50ZWxfdmdw
dV9hY3RpdmUoZGV2X3ByaXYpKQorCQlyZXR1cm47CisKKwlpZiAoY3J0Yy0+ZGVidWcuc3RhcnRf
dmJsX2NvdW50ICYmCisJICAgIGNydGMtPmRlYnVnLnN0YXJ0X3ZibF9jb3VudCAhPSBlbmRfdmJs
X2NvdW50KSB7CisJCWRybV9lcnIoJmRldl9wcml2LT5kcm0sCisJCQkiQXRvbWljIHVwZGF0ZSBm
YWlsdXJlIG9uIHBpcGUgJWMgKHN0YXJ0PSV1IGVuZD0ldSkgdGltZSAlbGxkIHVzLCBtaW4gJWQs
IG1heCAlZCwgc2NhbmxpbmUgc3RhcnQgJWQsIGVuZCAlZFxuIiwKKwkJCXBpcGVfbmFtZShwaXBl
KSwgY3J0Yy0+ZGVidWcuc3RhcnRfdmJsX2NvdW50LAorCQkJZW5kX3ZibF9jb3VudCwKKwkJCWt0
aW1lX3VzX2RlbHRhKGVuZF92YmxfdGltZSwKKwkJCQkgICAgICAgY3J0Yy0+ZGVidWcuc3RhcnRf
dmJsX3RpbWUpLAorCQkJY3J0Yy0+ZGVidWcubWluX3ZibCwgY3J0Yy0+ZGVidWcubWF4X3ZibCwK
KwkJCWNydGMtPmRlYnVnLnNjYW5saW5lX3N0YXJ0LCBzY2FubGluZV9lbmQpOworCX0KKworCWRi
Z192YmxhbmtfZXZhZGUoY3J0YywgZW5kX3ZibF90aW1lKTsKK30KZGlmZiAtLWdpdCBhL2RyaXZl
cnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkvaW50ZWxfc3ByaXRlLmMgYi9kcml2ZXJzL2dwdS9kcm0v
aTkxNS9kaXNwbGF5L2ludGVsX3Nwcml0ZS5jCmluZGV4IDkzZjNhZmMyNDViOS4uYjgyODgzMzBk
YmM5IDEwMDY0NAotLS0gYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5L2ludGVsX3Nwcml0
ZS5jCisrKyBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkvaW50ZWxfc3ByaXRlLmMKQEAg
LTQ1LDI0OCArNDUsMTAgQEAKICNpbmNsdWRlICJpbnRlbF9hdG9taWNfcGxhbmUuaCIKICNpbmNs
dWRlICJpbnRlbF9kaXNwbGF5X3R5cGVzLmgiCiAjaW5jbHVkZSAiaW50ZWxfZnJvbnRidWZmZXIu
aCIKLSNpbmNsdWRlICJpbnRlbF9wbS5oIgotI2luY2x1ZGUgImludGVsX3Bzci5oIgotI2luY2x1
ZGUgImludGVsX2RzaS5oIgogI2luY2x1ZGUgImludGVsX3Nwcml0ZS5oIgogI2luY2x1ZGUgImk5
eHhfcGxhbmUuaCIKICNpbmNsdWRlICJpbnRlbF92cnIuaCIKIAotaW50IGludGVsX3VzZWNzX3Rv
X3NjYW5saW5lcyhjb25zdCBzdHJ1Y3QgZHJtX2Rpc3BsYXlfbW9kZSAqYWRqdXN0ZWRfbW9kZSwK
LQkJCSAgICAgaW50IHVzZWNzKQotewotCS8qIHBhcmFub2lhICovCi0JaWYgKCFhZGp1c3RlZF9t
b2RlLT5jcnRjX2h0b3RhbCkKLQkJcmV0dXJuIDE7Ci0KLQlyZXR1cm4gRElWX1JPVU5EX1VQKHVz
ZWNzICogYWRqdXN0ZWRfbW9kZS0+Y3J0Y19jbG9jaywKLQkJCSAgICAxMDAwICogYWRqdXN0ZWRf
bW9kZS0+Y3J0Y19odG90YWwpOwotfQotCi1zdGF0aWMgaW50IGludGVsX21vZGVfdmJsYW5rX3N0
YXJ0KGNvbnN0IHN0cnVjdCBkcm1fZGlzcGxheV9tb2RlICptb2RlKQotewotCWludCB2Ymxhbmtf
c3RhcnQgPSBtb2RlLT5jcnRjX3ZibGFua19zdGFydDsKLQotCWlmIChtb2RlLT5mbGFncyAmIERS
TV9NT0RFX0ZMQUdfSU5URVJMQUNFKQotCQl2Ymxhbmtfc3RhcnQgPSBESVZfUk9VTkRfVVAodmJs
YW5rX3N0YXJ0LCAyKTsKLQotCXJldHVybiB2Ymxhbmtfc3RhcnQ7Ci19Ci0KLS8qKgotICogaW50
ZWxfcGlwZV91cGRhdGVfc3RhcnQoKSAtIHN0YXJ0IHVwZGF0ZSBvZiBhIHNldCBvZiBkaXNwbGF5
IHJlZ2lzdGVycwotICogQG5ld19jcnRjX3N0YXRlOiB0aGUgbmV3IGNydGMgc3RhdGUKLSAqCi0g
KiBNYXJrIHRoZSBzdGFydCBvZiBhbiB1cGRhdGUgdG8gcGlwZSByZWdpc3RlcnMgdGhhdCBzaG91
bGQgYmUgdXBkYXRlZAotICogYXRvbWljYWxseSByZWdhcmRpbmcgdmJsYW5rLiBJZiB0aGUgbmV4
dCB2Ymxhbmsgd2lsbCBoYXBwZW5zIHdpdGhpbgotICogdGhlIG5leHQgMTAwIHVzLCB0aGlzIGZ1
bmN0aW9uIHdhaXRzIHVudGlsIHRoZSB2YmxhbmsgcGFzc2VzLgotICoKLSAqIEFmdGVyIGEgc3Vj
Y2Vzc2Z1bCBjYWxsIHRvIHRoaXMgZnVuY3Rpb24sIGludGVycnVwdHMgd2lsbCBiZSBkaXNhYmxl
ZAotICogdW50aWwgYSBzdWJzZXF1ZW50IGNhbGwgdG8gaW50ZWxfcGlwZV91cGRhdGVfZW5kKCku
IFRoYXQgaXMgZG9uZSB0bwotICogYXZvaWQgcmFuZG9tIGRlbGF5cy4KLSAqLwotdm9pZCBpbnRl
bF9waXBlX3VwZGF0ZV9zdGFydChjb25zdCBzdHJ1Y3QgaW50ZWxfY3J0Y19zdGF0ZSAqbmV3X2Ny
dGNfc3RhdGUpCi17Ci0Jc3RydWN0IGludGVsX2NydGMgKmNydGMgPSB0b19pbnRlbF9jcnRjKG5l
d19jcnRjX3N0YXRlLT51YXBpLmNydGMpOwotCXN0cnVjdCBkcm1faTkxNV9wcml2YXRlICpkZXZf
cHJpdiA9IHRvX2k5MTUoY3J0Yy0+YmFzZS5kZXYpOwotCWNvbnN0IHN0cnVjdCBkcm1fZGlzcGxh
eV9tb2RlICphZGp1c3RlZF9tb2RlID0gJm5ld19jcnRjX3N0YXRlLT5ody5hZGp1c3RlZF9tb2Rl
OwotCWxvbmcgdGltZW91dCA9IG1zZWNzX3RvX2ppZmZpZXNfdGltZW91dCgxKTsKLQlpbnQgc2Nh
bmxpbmUsIG1pbiwgbWF4LCB2Ymxhbmtfc3RhcnQ7Ci0Jd2FpdF9xdWV1ZV9oZWFkX3QgKndxID0g
ZHJtX2NydGNfdmJsYW5rX3dhaXRxdWV1ZSgmY3J0Yy0+YmFzZSk7Ci0JYm9vbCBuZWVkX3Zsdl9k
c2lfd2EgPSAoSVNfVkFMTEVZVklFVyhkZXZfcHJpdikgfHwgSVNfQ0hFUlJZVklFVyhkZXZfcHJp
dikpICYmCi0JCWludGVsX2NydGNfaGFzX3R5cGUobmV3X2NydGNfc3RhdGUsIElOVEVMX09VVFBV
VF9EU0kpOwotCURFRklORV9XQUlUKHdhaXQpOwotCi0JaWYgKG5ld19jcnRjX3N0YXRlLT51YXBp
LmFzeW5jX2ZsaXApCi0JCXJldHVybjsKLQotCWlmIChuZXdfY3J0Y19zdGF0ZS0+dnJyLmVuYWJs
ZSkKLQkJdmJsYW5rX3N0YXJ0ID0gaW50ZWxfdnJyX3ZtYXhfdmJsYW5rX3N0YXJ0KG5ld19jcnRj
X3N0YXRlKTsKLQllbHNlCi0JCXZibGFua19zdGFydCA9IGludGVsX21vZGVfdmJsYW5rX3N0YXJ0
KGFkanVzdGVkX21vZGUpOwotCi0JLyogRklYTUUgbmVlZHMgdG8gYmUgY2FsaWJyYXRlZCBzZW5z
aWJseSAqLwotCW1pbiA9IHZibGFua19zdGFydCAtIGludGVsX3VzZWNzX3RvX3NjYW5saW5lcyhh
ZGp1c3RlZF9tb2RlLAotCQkJCQkJICAgICAgVkJMQU5LX0VWQVNJT05fVElNRV9VUyk7Ci0JbWF4
ID0gdmJsYW5rX3N0YXJ0IC0gMTsKLQotCWlmIChtaW4gPD0gMCB8fCBtYXggPD0gMCkKLQkJZ290
byBpcnFfZGlzYWJsZTsKLQotCWlmIChkcm1fV0FSTl9PTigmZGV2X3ByaXYtPmRybSwgZHJtX2Ny
dGNfdmJsYW5rX2dldCgmY3J0Yy0+YmFzZSkpKQotCQlnb3RvIGlycV9kaXNhYmxlOwotCi0JLyoK
LQkgKiBXYWl0IGZvciBwc3IgdG8gaWRsZSBvdXQgYWZ0ZXIgZW5hYmxpbmcgdGhlIFZCTCBpbnRl
cnJ1cHRzCi0JICogVkJMIGludGVycnVwdHMgd2lsbCBzdGFydCB0aGUgUFNSIGV4aXQgYW5kIHBy
ZXZlbnQgYSBQU1IKLQkgKiByZS1lbnRyeSBhcyB3ZWxsLgotCSAqLwotCWludGVsX3Bzcl93YWl0
X2Zvcl9pZGxlKG5ld19jcnRjX3N0YXRlKTsKLQotCWxvY2FsX2lycV9kaXNhYmxlKCk7Ci0KLQlj
cnRjLT5kZWJ1Zy5taW5fdmJsID0gbWluOwotCWNydGMtPmRlYnVnLm1heF92YmwgPSBtYXg7Ci0J
dHJhY2VfaW50ZWxfcGlwZV91cGRhdGVfc3RhcnQoY3J0Yyk7Ci0KLQlmb3IgKDs7KSB7Ci0JCS8q
Ci0JCSAqIHByZXBhcmVfdG9fd2FpdCgpIGhhcyBhIG1lbW9yeSBiYXJyaWVyLCB3aGljaCBndWFy
YW50ZWVzCi0JCSAqIG90aGVyIENQVXMgY2FuIHNlZSB0aGUgdGFzayBzdGF0ZSB1cGRhdGUgYnkg
dGhlIHRpbWUgd2UKLQkJICogcmVhZCB0aGUgc2NhbmxpbmUuCi0JCSAqLwotCQlwcmVwYXJlX3Rv
X3dhaXQod3EsICZ3YWl0LCBUQVNLX1VOSU5URVJSVVBUSUJMRSk7Ci0KLQkJc2NhbmxpbmUgPSBp
bnRlbF9nZXRfY3J0Y19zY2FubGluZShjcnRjKTsKLQkJaWYgKHNjYW5saW5lIDwgbWluIHx8IHNj
YW5saW5lID4gbWF4KQotCQkJYnJlYWs7Ci0KLQkJaWYgKCF0aW1lb3V0KSB7Ci0JCQlkcm1fZXJy
KCZkZXZfcHJpdi0+ZHJtLAotCQkJCSJQb3RlbnRpYWwgYXRvbWljIHVwZGF0ZSBmYWlsdXJlIG9u
IHBpcGUgJWNcbiIsCi0JCQkJcGlwZV9uYW1lKGNydGMtPnBpcGUpKTsKLQkJCWJyZWFrOwotCQl9
Ci0KLQkJbG9jYWxfaXJxX2VuYWJsZSgpOwotCi0JCXRpbWVvdXQgPSBzY2hlZHVsZV90aW1lb3V0
KHRpbWVvdXQpOwotCi0JCWxvY2FsX2lycV9kaXNhYmxlKCk7Ci0JfQotCi0JZmluaXNoX3dhaXQo
d3EsICZ3YWl0KTsKLQotCWRybV9jcnRjX3ZibGFua19wdXQoJmNydGMtPmJhc2UpOwotCi0JLyoK
LQkgKiBPbiBWTFYvQ0hWIERTSSB0aGUgc2NhbmxpbmUgY291bnRlciB3b3VsZCBhcHBlYXIgdG8K
LQkgKiBpbmNyZW1lbnQgYXBwcm94LiAxLzMgb2YgYSBzY2FubGluZSBiZWZvcmUgc3RhcnQgb2Yg
dmJsYW5rLgotCSAqIFRoZSByZWdpc3RlcnMgc3RpbGwgZ2V0IGxhdGNoZWQgYXQgc3RhcnQgb2Yg
dmJsYW5rIGhvd2V2ZXIuCi0JICogVGhpcyBtZWFucyB3ZSBtdXN0IG5vdCB3cml0ZSBhbnkgcmVn
aXN0ZXJzIG9uIHRoZSBmaXJzdAotCSAqIGxpbmUgb2YgdmJsYW5rIChzaW5jZSBub3QgdGhlIHdo
b2xlIGxpbmUgaXMgYWN0dWFsbHkgaW4KLQkgKiB2YmxhbmspLiBBbmQgdW5mb3J0dW5hdGVseSB3
ZSBjYW4ndCB1c2UgdGhlIGludGVycnVwdCB0bwotCSAqIHdhaXQgaGVyZSBzaW5jZSBpdCB3aWxs
IGZpcmUgdG9vIHNvb24uIFdlIGNvdWxkIHVzZSB0aGUKLQkgKiBmcmFtZSBzdGFydCBpbnRlcnJ1
cHQgaW5zdGVhZCBzaW5jZSBpdCB3aWxsIGZpcmUgYWZ0ZXIgdGhlCi0JICogY3JpdGljYWwgc2Nh
bmxpbmUsIGJ1dCB0aGF0IHdvdWxkIHJlcXVpcmUgbW9yZSBjaGFuZ2VzCi0JICogaW4gdGhlIGlu
dGVycnVwdCBjb2RlLiBTbyBmb3Igbm93IHdlJ2xsIGp1c3QgZG8gdGhlIG5hc3R5Ci0JICogdGhp
bmcgYW5kIHBvbGwgZm9yIHRoZSBiYWQgc2NhbmxpbmUgdG8gcGFzcyB1cyBieS4KLQkgKgotCSAq
IEZJWE1FIGZpZ3VyZSBvdXQgaWYgQlhUKyBEU0kgc3VmZmVycyBmcm9tIHRoaXMgYXMgd2VsbAot
CSAqLwotCXdoaWxlIChuZWVkX3Zsdl9kc2lfd2EgJiYgc2NhbmxpbmUgPT0gdmJsYW5rX3N0YXJ0
KQotCQlzY2FubGluZSA9IGludGVsX2dldF9jcnRjX3NjYW5saW5lKGNydGMpOwotCi0JY3J0Yy0+
ZGVidWcuc2NhbmxpbmVfc3RhcnQgPSBzY2FubGluZTsKLQljcnRjLT5kZWJ1Zy5zdGFydF92Ymxf
dGltZSA9IGt0aW1lX2dldCgpOwotCWNydGMtPmRlYnVnLnN0YXJ0X3ZibF9jb3VudCA9IGludGVs
X2NydGNfZ2V0X3ZibGFua19jb3VudGVyKGNydGMpOwotCi0JdHJhY2VfaW50ZWxfcGlwZV91cGRh
dGVfdmJsYW5rX2V2YWRlZChjcnRjKTsKLQlyZXR1cm47Ci0KLWlycV9kaXNhYmxlOgotCWxvY2Fs
X2lycV9kaXNhYmxlKCk7Ci19Ci0KLSNpZiBJU19FTkFCTEVEKENPTkZJR19EUk1fSTkxNV9ERUJV
R19WQkxBTktfRVZBREUpCi1zdGF0aWMgdm9pZCBkYmdfdmJsYW5rX2V2YWRlKHN0cnVjdCBpbnRl
bF9jcnRjICpjcnRjLCBrdGltZV90IGVuZCkKLXsKLQl1NjQgZGVsdGEgPSBrdGltZV90b19ucyhr
dGltZV9zdWIoZW5kLCBjcnRjLT5kZWJ1Zy5zdGFydF92YmxfdGltZSkpOwotCXVuc2lnbmVkIGlu
dCBoOwotCi0JaCA9IGlsb2cyKGRlbHRhID4+IDkpOwotCWlmIChoID49IEFSUkFZX1NJWkUoY3J0
Yy0+ZGVidWcudmJsLnRpbWVzKSkKLQkJaCA9IEFSUkFZX1NJWkUoY3J0Yy0+ZGVidWcudmJsLnRp
bWVzKSAtIDE7Ci0JY3J0Yy0+ZGVidWcudmJsLnRpbWVzW2hdKys7Ci0KLQljcnRjLT5kZWJ1Zy52
Ymwuc3VtICs9IGRlbHRhOwotCWlmICghY3J0Yy0+ZGVidWcudmJsLm1pbiB8fCBkZWx0YSA8IGNy
dGMtPmRlYnVnLnZibC5taW4pCi0JCWNydGMtPmRlYnVnLnZibC5taW4gPSBkZWx0YTsKLQlpZiAo
ZGVsdGEgPiBjcnRjLT5kZWJ1Zy52YmwubWF4KQotCQljcnRjLT5kZWJ1Zy52YmwubWF4ID0gZGVs
dGE7Ci0KLQlpZiAoZGVsdGEgPiAxMDAwICogVkJMQU5LX0VWQVNJT05fVElNRV9VUykgewotCQlk
cm1fZGJnX2ttcyhjcnRjLT5iYXNlLmRldiwKLQkJCSAgICAiQXRvbWljIHVwZGF0ZSBvbiBwaXBl
ICglYykgdG9vayAlbGxkIHVzLCBtYXggdGltZSB1bmRlciBldmFzaW9uIGlzICV1IHVzXG4iLAot
CQkJICAgIHBpcGVfbmFtZShjcnRjLT5waXBlKSwKLQkJCSAgICBkaXZfdTY0KGRlbHRhLCAxMDAw
KSwKLQkJCSAgICBWQkxBTktfRVZBU0lPTl9USU1FX1VTKTsKLQkJY3J0Yy0+ZGVidWcudmJsLm92
ZXIrKzsKLQl9Ci19Ci0jZWxzZQotc3RhdGljIHZvaWQgZGJnX3ZibGFua19ldmFkZShzdHJ1Y3Qg
aW50ZWxfY3J0YyAqY3J0Yywga3RpbWVfdCBlbmQpIHt9Ci0jZW5kaWYKLQotLyoqCi0gKiBpbnRl
bF9waXBlX3VwZGF0ZV9lbmQoKSAtIGVuZCB1cGRhdGUgb2YgYSBzZXQgb2YgZGlzcGxheSByZWdp
c3RlcnMKLSAqIEBuZXdfY3J0Y19zdGF0ZTogdGhlIG5ldyBjcnRjIHN0YXRlCi0gKgotICogTWFy
ayB0aGUgZW5kIG9mIGFuIHVwZGF0ZSBzdGFydGVkIHdpdGggaW50ZWxfcGlwZV91cGRhdGVfc3Rh
cnQoKS4gVGhpcwotICogcmUtZW5hYmxlcyBpbnRlcnJ1cHRzIGFuZCB2ZXJpZmllcyB0aGUgdXBk
YXRlIHdhcyBhY3R1YWxseSBjb21wbGV0ZWQKLSAqIGJlZm9yZSBhIHZibGFuay4KLSAqLwotdm9p
ZCBpbnRlbF9waXBlX3VwZGF0ZV9lbmQoc3RydWN0IGludGVsX2NydGNfc3RhdGUgKm5ld19jcnRj
X3N0YXRlKQotewotCXN0cnVjdCBpbnRlbF9jcnRjICpjcnRjID0gdG9faW50ZWxfY3J0YyhuZXdf
Y3J0Y19zdGF0ZS0+dWFwaS5jcnRjKTsKLQllbnVtIHBpcGUgcGlwZSA9IGNydGMtPnBpcGU7Ci0J
aW50IHNjYW5saW5lX2VuZCA9IGludGVsX2dldF9jcnRjX3NjYW5saW5lKGNydGMpOwotCXUzMiBl
bmRfdmJsX2NvdW50ID0gaW50ZWxfY3J0Y19nZXRfdmJsYW5rX2NvdW50ZXIoY3J0Yyk7Ci0Ja3Rp
bWVfdCBlbmRfdmJsX3RpbWUgPSBrdGltZV9nZXQoKTsKLQlzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0
ZSAqZGV2X3ByaXYgPSB0b19pOTE1KGNydGMtPmJhc2UuZGV2KTsKLQotCWlmIChuZXdfY3J0Y19z
dGF0ZS0+dWFwaS5hc3luY19mbGlwKQotCQlyZXR1cm47Ci0KLQl0cmFjZV9pbnRlbF9waXBlX3Vw
ZGF0ZV9lbmQoY3J0YywgZW5kX3ZibF9jb3VudCwgc2NhbmxpbmVfZW5kKTsKLQotCS8qCi0JICog
SW5jYXNlIG9mIG1pcGkgZHNpIGNvbW1hbmQgbW9kZSwgd2UgbmVlZCB0byBzZXQgZnJhbWUgdXBk
YXRlCi0JICogcmVxdWVzdCBmb3IgZXZlcnkgY29tbWl0LgotCSAqLwotCWlmIChJTlRFTF9HRU4o
ZGV2X3ByaXYpID49IDExICYmCi0JICAgIGludGVsX2NydGNfaGFzX3R5cGUobmV3X2NydGNfc3Rh
dGUsIElOVEVMX09VVFBVVF9EU0kpKQotCQlpY2xfZHNpX2ZyYW1lX3VwZGF0ZShuZXdfY3J0Y19z
dGF0ZSk7Ci0KLQkvKiBXZSdyZSBzdGlsbCBpbiB0aGUgdmJsYW5rLWV2YWRlIGNyaXRpY2FsIHNl
Y3Rpb24sIHRoaXMgY2FuJ3QgcmFjZS4KLQkgKiBXb3VsZCBiZSBzbGlnaHRseSBuaWNlIHRvIGp1
c3QgZ3JhYiB0aGUgdmJsYW5rIGNvdW50IGFuZCBhcm0gdGhlCi0JICogZXZlbnQgb3V0c2lkZSBv
ZiB0aGUgY3JpdGljYWwgc2VjdGlvbiAtIHRoZSBzcGlubG9jayBtaWdodCBzcGluIGZvciBhCi0J
ICogd2hpbGUgLi4uICovCi0JaWYgKG5ld19jcnRjX3N0YXRlLT51YXBpLmV2ZW50KSB7Ci0JCWRy
bV9XQVJOX09OKCZkZXZfcHJpdi0+ZHJtLAotCQkJICAgIGRybV9jcnRjX3ZibGFua19nZXQoJmNy
dGMtPmJhc2UpICE9IDApOwotCi0JCXNwaW5fbG9jaygmY3J0Yy0+YmFzZS5kZXYtPmV2ZW50X2xv
Y2spOwotCQlkcm1fY3J0Y19hcm1fdmJsYW5rX2V2ZW50KCZjcnRjLT5iYXNlLAotCQkJCSAgICAg
ICAgICBuZXdfY3J0Y19zdGF0ZS0+dWFwaS5ldmVudCk7Ci0JCXNwaW5fdW5sb2NrKCZjcnRjLT5i
YXNlLmRldi0+ZXZlbnRfbG9jayk7Ci0KLQkJbmV3X2NydGNfc3RhdGUtPnVhcGkuZXZlbnQgPSBO
VUxMOwotCX0KLQotCWxvY2FsX2lycV9lbmFibGUoKTsKLQotCS8qIFNlbmQgVlJSIFB1c2ggdG8g
dGVybWluYXRlIFZibGFuayAqLwotCWludGVsX3Zycl9zZW5kX3B1c2gobmV3X2NydGNfc3RhdGUp
OwotCi0JaWYgKGludGVsX3ZncHVfYWN0aXZlKGRldl9wcml2KSkKLQkJcmV0dXJuOwotCi0JaWYg
KGNydGMtPmRlYnVnLnN0YXJ0X3ZibF9jb3VudCAmJgotCSAgICBjcnRjLT5kZWJ1Zy5zdGFydF92
YmxfY291bnQgIT0gZW5kX3ZibF9jb3VudCkgewotCQlkcm1fZXJyKCZkZXZfcHJpdi0+ZHJtLAot
CQkJIkF0b21pYyB1cGRhdGUgZmFpbHVyZSBvbiBwaXBlICVjIChzdGFydD0ldSBlbmQ9JXUpIHRp
bWUgJWxsZCB1cywgbWluICVkLCBtYXggJWQsIHNjYW5saW5lIHN0YXJ0ICVkLCBlbmQgJWRcbiIs
Ci0JCQlwaXBlX25hbWUocGlwZSksIGNydGMtPmRlYnVnLnN0YXJ0X3ZibF9jb3VudCwKLQkJCWVu
ZF92YmxfY291bnQsCi0JCQlrdGltZV91c19kZWx0YShlbmRfdmJsX3RpbWUsCi0JCQkJICAgICAg
IGNydGMtPmRlYnVnLnN0YXJ0X3ZibF90aW1lKSwKLQkJCWNydGMtPmRlYnVnLm1pbl92YmwsIGNy
dGMtPmRlYnVnLm1heF92YmwsCi0JCQljcnRjLT5kZWJ1Zy5zY2FubGluZV9zdGFydCwgc2Nhbmxp
bmVfZW5kKTsKLQl9Ci0KLQlkYmdfdmJsYW5rX2V2YWRlKGNydGMsIGVuZF92YmxfdGltZSk7Ci19
Ci0KIGludCBpbnRlbF9wbGFuZV9jaGVja19zdHJpZGUoY29uc3Qgc3RydWN0IGludGVsX3BsYW5l
X3N0YXRlICpwbGFuZV9zdGF0ZSkKIHsKIAlzdHJ1Y3QgaW50ZWxfcGxhbmUgKnBsYW5lID0gdG9f
aW50ZWxfcGxhbmUocGxhbmVfc3RhdGUtPnVhcGkucGxhbmUpOwotLSAKMi4yMC4xCgpfX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpJbnRlbC1nZnggbWFpbGlu
ZyBsaXN0CkludGVsLWdmeEBsaXN0cy5mcmVlZGVza3RvcC5vcmcKaHR0cHM6Ly9saXN0cy5mcmVl
ZGVza3RvcC5vcmcvbWFpbG1hbi9saXN0aW5mby9pbnRlbC1nZngK

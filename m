Return-Path: <intel-gfx-bounces@lists.freedesktop.org>
X-Original-To: lists+intel-gfx@lfdr.de
Delivered-To: lists+intel-gfx@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [131.252.210.177])
	by mail.lfdr.de (Postfix) with ESMTPS id E287B114901
	for <lists+intel-gfx@lfdr.de>; Thu,  5 Dec 2019 23:02:54 +0100 (CET)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id DD8FC6F90C;
	Thu,  5 Dec 2019 22:02:52 +0000 (UTC)
X-Original-To: intel-gfx@lists.freedesktop.org
Delivered-To: intel-gfx@lists.freedesktop.org
Received: from mga11.intel.com (mga11.intel.com [192.55.52.93])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 9EE366F90C
 for <intel-gfx@lists.freedesktop.org>; Thu,  5 Dec 2019 22:02:51 +0000 (UTC)
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from fmsmga002.fm.intel.com ([10.253.24.26])
 by fmsmga102.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384;
 05 Dec 2019 14:02:51 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.69,282,1571727600"; d="scan'208";a="243411369"
Received: from dceraolo-linux.fm.intel.com ([10.1.27.145])
 by fmsmga002.fm.intel.com with ESMTP; 05 Dec 2019 14:02:51 -0800
From: Daniele Ceraolo Spurio <daniele.ceraolospurio@intel.com>
To: intel-gfx@lists.freedesktop.org
Date: Thu,  5 Dec 2019 14:02:42 -0800
Message-Id: <20191205220243.27403-4-daniele.ceraolospurio@intel.com>
X-Mailer: git-send-email 2.23.0
In-Reply-To: <20191205220243.27403-1-daniele.ceraolospurio@intel.com>
References: <20191205220243.27403-1-daniele.ceraolospurio@intel.com>
MIME-Version: 1.0
Subject: [Intel-gfx] [PATCH v3 4/5] drm/i915/guc: kill the GuC client
X-BeenThere: intel-gfx@lists.freedesktop.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: Intel graphics driver community testing & development
 <intel-gfx.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/intel-gfx>
List-Post: <mailto:intel-gfx@lists.freedesktop.org>
List-Help: <mailto:intel-gfx-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: intel-gfx-bounces@lists.freedesktop.org
Sender: "Intel-gfx" <intel-gfx-bounces@lists.freedesktop.org>

V2Ugbm93IG9ubHkgdXNlIDEgY2xpZW50IHdpdGhvdXQgYW55IHBsYW4gdG8gYWRkIG1vcmUuIFRo
ZSBjbGllbnQgaXMKYWxzbyBvbmx5IGhvbGRpbmcgaW5mb3JtYXRpb24gYWJvdXQgdGhlIFdRIGFu
ZCB0aGUgcHJvY2VzcyBkZXNjLCBzbyB3ZQpjYW4ganVzdCBtb3ZlIHRob3NlIGluIHRoZSBpbnRl
bF9ndWMgc3RydWN0dXJlIGFuZCBhbHdheXMgdXNlIHN0YWdlX2lkCjAuCgp2MjogZml4IGNvbW1l
bnQgKEpvaG4pCnYzOiBmaXggdGhlIGNvbW1lbnQgZm9yIHJlYWwsIGZpeCBrZXJuZWxkb2MKClNp
Z25lZC1vZmYtYnk6IERhbmllbGUgQ2VyYW9sbyBTcHVyaW8gPGRhbmllbGUuY2VyYW9sb3NwdXJp
b0BpbnRlbC5jb20+CkNjOiBNaWNoYWwgV2FqZGVjemtvIDxtaWNoYWwud2FqZGVjemtvQGludGVs
LmNvbT4KQ2M6IEpvaG4gSGFycmlzb24gPEpvaG4uQy5IYXJyaXNvbkBJbnRlbC5jb20+CkNjOiBN
YXR0aGV3IEJyb3N0IDxtYXR0aGV3LmJyb3N0QGludGVsLmNvbT4KLS0tCiBEb2N1bWVudGF0aW9u
L2dwdS9pOTE1LnJzdCAgICAgICAgICAgICAgICAgICAgfCAgIDMgLQogZHJpdmVycy9ncHUvZHJt
L2k5MTUvZ3QvaW50ZWxfcmVzZXQuYyAgICAgICAgIHwgICA2ICstCiBkcml2ZXJzL2dwdS9kcm0v
aTkxNS9ndC91Yy9pbnRlbF9ndWMuaCAgICAgICAgfCAgIDggKy0KIGRyaXZlcnMvZ3B1L2RybS9p
OTE1L2d0L3VjL2ludGVsX2d1Y19md2lmLmggICB8ICAgMSAtCiAuLi4vZ3B1L2RybS9pOTE1L2d0
L3VjL2ludGVsX2d1Y19zdWJtaXNzaW9uLmMgfCAyNzYgKysrKystLS0tLS0tLS0tLS0tCiAuLi4v
Z3B1L2RybS9pOTE1L2d0L3VjL2ludGVsX2d1Y19zdWJtaXNzaW9uLmggfCAgNDUgKy0tCiBkcml2
ZXJzL2dwdS9kcm0vaTkxNS9pOTE1X2RlYnVnZnMuYyAgICAgICAgICAgfCAgMTEgLQogNyBmaWxl
cyBjaGFuZ2VkLCA4OSBpbnNlcnRpb25zKCspLCAyNjEgZGVsZXRpb25zKC0pCgpkaWZmIC0tZ2l0
IGEvRG9jdW1lbnRhdGlvbi9ncHUvaTkxNS5yc3QgYi9Eb2N1bWVudGF0aW9uL2dwdS9pOTE1LnJz
dAppbmRleCBkMDk0N2M1YzRhYjguLmU1MzljNDJhM2U3OCAxMDA2NDQKLS0tIGEvRG9jdW1lbnRh
dGlvbi9ncHUvaTkxNS5yc3QKKysrIGIvRG9jdW1lbnRhdGlvbi9ncHUvaTkxNS5yc3QKQEAgLTQ2
Niw5ICs0NjYsNiBAQCBHdUMtYmFzZWQgY29tbWFuZCBzdWJtaXNzaW9uCiAuLiBrZXJuZWwtZG9j
OjogZHJpdmVycy9ncHUvZHJtL2k5MTUvZ3QvdWMvaW50ZWxfZ3VjX3N1Ym1pc3Npb24uYwogICAg
OmRvYzogR3VDLWJhc2VkIGNvbW1hbmQgc3VibWlzc2lvbgogCi0uLiBrZXJuZWwtZG9jOjogZHJp
dmVycy9ncHUvZHJtL2k5MTUvZ3QvdWMvaW50ZWxfZ3VjX3N1Ym1pc3Npb24uYwotICAgOmludGVy
bmFsOgotCiBIdUMKIC0tLQogLi4ga2VybmVsLWRvYzo6IGRyaXZlcnMvZ3B1L2RybS9pOTE1L2d0
L3VjL2ludGVsX2h1Yy5jCmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9ndC9pbnRl
bF9yZXNldC5jIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvZ3QvaW50ZWxfcmVzZXQuYwppbmRleCAw
ZTk0YjcyMGM5OTMuLjg0MDhjYjg0ZTUyYyAxMDA2NDQKLS0tIGEvZHJpdmVycy9ncHUvZHJtL2k5
MTUvZ3QvaW50ZWxfcmVzZXQuYworKysgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9ndC9pbnRlbF9y
ZXNldC5jCkBAIC0yMSw2ICsyMSw3IEBACiAjaW5jbHVkZSAiaW50ZWxfcmVzZXQuaCIKIAogI2lu
Y2x1ZGUgInVjL2ludGVsX2d1Yy5oIgorI2luY2x1ZGUgInVjL2ludGVsX2d1Y19zdWJtaXNzaW9u
LmgiCiAKICNkZWZpbmUgUkVTRVRfTUFYX1JFVFJJRVMgMwogCkBAIC0xMDg1LDYgKzEwODYsNyBA
QCBzdGF0aWMgaW5saW5lIGludCBpbnRlbF9ndF9yZXNldF9lbmdpbmUoc3RydWN0IGludGVsX2Vu
Z2luZV9jcyAqZW5naW5lKQogaW50IGludGVsX2VuZ2luZV9yZXNldChzdHJ1Y3QgaW50ZWxfZW5n
aW5lX2NzICplbmdpbmUsIGNvbnN0IGNoYXIgKm1zZykKIHsKIAlzdHJ1Y3QgaW50ZWxfZ3QgKmd0
ID0gZW5naW5lLT5ndDsKKwlib29sIHVzZXNfZ3VjID0gaW50ZWxfZW5naW5lX2luX2d1Y19zdWJt
aXNzaW9uX21vZGUoZW5naW5lKTsKIAlpbnQgcmV0OwogCiAJR0VNX1RSQUNFKCIlcyBmbGFncz0l
bHhcbiIsIGVuZ2luZS0+bmFtZSwgZ3QtPnJlc2V0LmZsYWdzKTsKQEAgLTExMDAsMTQgKzExMDIs
MTQgQEAgaW50IGludGVsX2VuZ2luZV9yZXNldChzdHJ1Y3QgaW50ZWxfZW5naW5lX2NzICplbmdp
bmUsIGNvbnN0IGNoYXIgKm1zZykKIAkJCSAgICJSZXNldHRpbmcgJXMgZm9yICVzXG4iLCBlbmdp
bmUtPm5hbWUsIG1zZyk7CiAJYXRvbWljX2luYygmZW5naW5lLT5pOTE1LT5ncHVfZXJyb3IucmVz
ZXRfZW5naW5lX2NvdW50W2VuZ2luZS0+dWFiaV9jbGFzc10pOwogCi0JaWYgKCFlbmdpbmUtPmd0
LT51Yy5ndWMuZXhlY2J1Zl9jbGllbnQpCisJaWYgKCF1c2VzX2d1YykKIAkJcmV0ID0gaW50ZWxf
Z3RfcmVzZXRfZW5naW5lKGVuZ2luZSk7CiAJZWxzZQogCQlyZXQgPSBpbnRlbF9ndWNfcmVzZXRf
ZW5naW5lKCZlbmdpbmUtPmd0LT51Yy5ndWMsIGVuZ2luZSk7CiAJaWYgKHJldCkgewogCQkvKiBJ
ZiB3ZSBmYWlsIGhlcmUsIHdlIGV4cGVjdCB0byBmYWxsYmFjayB0byBhIGdsb2JhbCByZXNldCAq
LwogCQlEUk1fREVCVUdfRFJJVkVSKCIlc0ZhaWxlZCB0byByZXNldCAlcywgcmV0PSVkXG4iLAot
CQkJCSBlbmdpbmUtPmd0LT51Yy5ndWMuZXhlY2J1Zl9jbGllbnQgPyAiR3VDICIgOiAiIiwKKwkJ
CQkgdXNlc19ndWMgPyAiR3VDICIgOiAiIiwKIAkJCQkgZW5naW5lLT5uYW1lLCByZXQpOwogCQln
b3RvIG91dDsKIAl9CmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9ndC91Yy9pbnRl
bF9ndWMuaCBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2d0L3VjL2ludGVsX2d1Yy5oCmluZGV4IGIy
ZDE3NjZlNjg5YS4uY2QwOWM5MTJlMzYxIDEwMDY0NAotLS0gYS9kcml2ZXJzL2dwdS9kcm0vaTkx
NS9ndC91Yy9pbnRlbF9ndWMuaAorKysgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9ndC91Yy9pbnRl
bF9ndWMuaApAQCAtNDYsOSArNDYsMTMgQEAgc3RydWN0IGludGVsX2d1YyB7CiAKIAlzdHJ1Y3Qg
aTkxNV92bWEgKnN0YWdlX2Rlc2NfcG9vbDsKIAl2b2lkICpzdGFnZV9kZXNjX3Bvb2xfdmFkZHI7
Ci0Jc3RydWN0IGlkYSBzdGFnZV9pZHM7CiAKLQlzdHJ1Y3QgaW50ZWxfZ3VjX2NsaWVudCAqZXhl
Y2J1Zl9jbGllbnQ7CisJc3RydWN0IGk5MTVfdm1hICp3b3JrcXVldWU7CisJdm9pZCAqd29ya3F1
ZXVlX3ZhZGRyOworCXNwaW5sb2NrX3Qgd3FfbG9jazsKKworCXN0cnVjdCBpOTE1X3ZtYSAqcHJv
Y19kZXNjOworCXZvaWQgKnByb2NfZGVzY192YWRkcjsKIAogCS8qIENvbnRyb2wgcGFyYW1zIGZv
ciBmdyBpbml0aWFsaXphdGlvbiAqLwogCXUzMiBwYXJhbXNbR1VDX0NUTF9NQVhfRFdPUkRTXTsK
ZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2d0L3VjL2ludGVsX2d1Y19md2lmLmgg
Yi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9ndC91Yy9pbnRlbF9ndWNfZndpZi5oCmluZGV4IDFlOGU0
YWY3ZDljYS4uYTZiNzMzYzE0NmM5IDEwMDY0NAotLS0gYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9n
dC91Yy9pbnRlbF9ndWNfZndpZi5oCisrKyBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2d0L3VjL2lu
dGVsX2d1Y19md2lmLmgKQEAgLTMxLDcgKzMxLDYgQEAKIAogI2RlZmluZSBHVUNfRE9PUkJFTExf
SU5WQUxJRAkJMjU2CiAKLSNkZWZpbmUgR1VDX1BEX1NJWkUJCQkoUEFHRV9TSVpFKQogI2RlZmlu
ZSBHVUNfV1FfU0laRQkJCShQQUdFX1NJWkUgKiAyKQogCiAvKiBXb3JrIHF1ZXVlIGl0ZW0gaGVh
ZGVyIGRlZmluaXRpb25zICovCmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9ndC91
Yy9pbnRlbF9ndWNfc3VibWlzc2lvbi5jIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvZ3QvdWMvaW50
ZWxfZ3VjX3N1Ym1pc3Npb24uYwppbmRleCA4NWRhNWZlODc2M2UuLmU2NWNhY2RiYWEyYSAxMDA2
NDQKLS0tIGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvZ3QvdWMvaW50ZWxfZ3VjX3N1Ym1pc3Npb24u
YworKysgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9ndC91Yy9pbnRlbF9ndWNfc3VibWlzc2lvbi5j
CkBAIC0yNywyNCArMjcsMTMgQEAKICAqIGNvZGUpIG1hdGNoZXMgdGhlIG9sZCBzdWJtaXNzaW9u
IG1vZGVsIGFuZCB3aWxsIGJlIHVwZGF0ZWQgYXMgcGFydCBvZiB0aGUKICAqIHVwZ3JhZGUgdG8g
dGhlIG5ldyBmbG93LgogICoKLSAqIEd1QyBjbGllbnQ6Ci0gKiBBIGludGVsX2d1Y19jbGllbnQg
cmVmZXJzIHRvIGEgc3VibWlzc2lvbiBwYXRoIHRocm91Z2ggR3VDLiBDdXJyZW50bHksIHRoZXJl
Ci0gKiBpcyBvbmx5IG9uZSBjbGllbnQsIHdoaWNoIGlzIGNoYXJnZWQgd2l0aCBhbGwgc3VibWlz
c2lvbnMgdG8gdGhlIEd1Qy4gVGhpcwotICogc3RydWN0IGlzIHRoZSBvd25lciBvZiBhIHByb2Nl
c3MgZGVzY3JpcHRvciBhbmQgYSB3b3JrcXVldWUgKGJvdGggb2YgdGhlbQotICogaW5zaWRlIGEg
c2luZ2xlIGdlbSBvYmplY3QgdGhhdCBjb250YWlucyBhbGwgcmVxdWlyZWQgcGFnZXMgZm9yIHRo
ZXNlCi0gKiBlbGVtZW50cykuCi0gKgogICogR3VDIHN0YWdlIGRlc2NyaXB0b3I6CiAgKiBEdXJp
bmcgaW5pdGlhbGl6YXRpb24sIHRoZSBkcml2ZXIgYWxsb2NhdGVzIGEgc3RhdGljIHBvb2wgb2Yg
MTAyNCBzdWNoCi0gKiBkZXNjcmlwdG9ycywgYW5kIHNoYXJlcyB0aGVtIHdpdGggdGhlIEd1Qy4K
LSAqIEN1cnJlbnRseSwgdGhlcmUgZXhpc3RzIGEgMToxIG1hcHBpbmcgYmV0d2VlbiBhIGludGVs
X2d1Y19jbGllbnQgYW5kIGEKLSAqIGd1Y19zdGFnZV9kZXNjICh2aWEgdGhlIGNsaWVudCdzIHN0
YWdlX2lkKSwgc28gZWZmZWN0aXZlbHkgb25seSBvbmUKLSAqIGdldHMgdXNlZC4gVGhpcyBzdGFn
ZSBkZXNjcmlwdG9yIGxldHMgdGhlIEd1QyBrbm93IGFib3V0IHRoZSB3b3JrcXVldWUgYW5kCisg
KiBkZXNjcmlwdG9ycywgYW5kIHNoYXJlcyB0aGVtIHdpdGggdGhlIEd1Qy4gQ3VycmVudGx5LCB3
ZSBvbmx5IHVzZSBvbmUKKyAqIGRlc2NyaXB0b3IuIFRoaXMgc3RhZ2UgZGVzY3JpcHRvciBsZXRz
IHRoZSBHdUMga25vdyBhYm91dCB0aGUgd29ya3F1ZXVlIGFuZAogICogcHJvY2VzcyBkZXNjcmlw
dG9yLiBUaGVvcmV0aWNhbGx5LCBpdCBhbHNvIGxldHMgdGhlIEd1QyBrbm93IGFib3V0IG91ciBI
VwogICogY29udGV4dHMgKGNvbnRleHQgSUQsIGV0Yy4uLiksIGJ1dCB3ZSBhY3R1YWxseSBlbXBs
b3kgYSBraW5kIG9mIHN1Ym1pc3Npb24KLSAqIHdoZXJlIHRoZSBHdUMgdXNlcyB0aGUgTFJDQSBz
ZW50IHZpYSB0aGUgd29yayBpdGVtIGluc3RlYWQgKHRoZSBzaW5nbGUKLSAqIGd1Y19zdGFnZV9k
ZXNjIGFzc29jaWF0ZWQgdG8gZXhlY2J1ZiBjbGllbnQgY29udGFpbnMgaW5mb3JtYXRpb24gYWJv
dXQgdGhlCi0gKiBkZWZhdWx0IGtlcm5lbCBjb250ZXh0IG9ubHksIGJ1dCB0aGlzIGlzIGVzc2Vu
dGlhbGx5IHVudXNlZCkuIFRoaXMgaXMgY2FsbGVkCisgKiB3aGVyZSB0aGUgR3VDIHVzZXMgdGhl
IExSQ0Egc2VudCB2aWEgdGhlIHdvcmsgaXRlbSBpbnN0ZWFkLiBUaGlzIGlzIGNhbGxlZAogICog
YSAicHJveHkiIHN1Ym1pc3Npb24uCiAgKgogICogVGhlIFNjcmF0Y2ggcmVnaXN0ZXJzOgpAQCAt
NzEsMzMgKzYwLDQ1IEBAIHN0YXRpYyBpbmxpbmUgc3RydWN0IGk5MTVfcHJpb2xpc3QgKnRvX3By
aW9saXN0KHN0cnVjdCByYl9ub2RlICpyYikKIAlyZXR1cm4gcmJfZW50cnkocmIsIHN0cnVjdCBp
OTE1X3ByaW9saXN0LCBub2RlKTsKIH0KIAotc3RhdGljIGlubGluZSBib29sIGlzX2hpZ2hfcHJp
b3JpdHkoc3RydWN0IGludGVsX2d1Y19jbGllbnQgKmNsaWVudCkKK3N0YXRpYyBzdHJ1Y3QgZ3Vj
X3N0YWdlX2Rlc2MgKl9fZ2V0X3N0YWdlX2Rlc2Moc3RydWN0IGludGVsX2d1YyAqZ3VjLCB1MzIg
aWQpCiB7Ci0JcmV0dXJuIChjbGllbnQtPnByaW9yaXR5ID09IEdVQ19DTElFTlRfUFJJT1JJVFlf
S01EX0hJR0ggfHwKLQkJY2xpZW50LT5wcmlvcml0eSA9PSBHVUNfQ0xJRU5UX1BSSU9SSVRZX0hJ
R0gpOworCXN0cnVjdCBndWNfc3RhZ2VfZGVzYyAqYmFzZSA9IGd1Yy0+c3RhZ2VfZGVzY19wb29s
X3ZhZGRyOworCisJcmV0dXJuICZiYXNlW2lkXTsKIH0KIAotc3RhdGljIHN0cnVjdCBndWNfc3Rh
Z2VfZGVzYyAqX19nZXRfc3RhZ2VfZGVzYyhzdHJ1Y3QgaW50ZWxfZ3VjX2NsaWVudCAqY2xpZW50
KQorc3RhdGljIGludCBndWNfd29ya3F1ZXVlX2NyZWF0ZShzdHJ1Y3QgaW50ZWxfZ3VjICpndWMp
CiB7Ci0Jc3RydWN0IGd1Y19zdGFnZV9kZXNjICpiYXNlID0gY2xpZW50LT5ndWMtPnN0YWdlX2Rl
c2NfcG9vbF92YWRkcjsKLQotCXJldHVybiAmYmFzZVtjbGllbnQtPnN0YWdlX2lkXTsKKwlyZXR1
cm4gaW50ZWxfZ3VjX2FsbG9jYXRlX2FuZF9tYXBfdm1hKGd1YywgR1VDX1dRX1NJWkUsICZndWMt
PndvcmtxdWV1ZSwKKwkJCQkJICAgICAgJmd1Yy0+d29ya3F1ZXVlX3ZhZGRyKTsKIH0KIAotc3Rh
dGljIGlubGluZSBzdHJ1Y3QgZ3VjX3Byb2Nlc3NfZGVzYyAqCi1fX2dldF9wcm9jZXNzX2Rlc2Mo
c3RydWN0IGludGVsX2d1Y19jbGllbnQgKmNsaWVudCkKK3N0YXRpYyB2b2lkIGd1Y193b3JrcXVl
dWVfZGVzdHJveShzdHJ1Y3QgaW50ZWxfZ3VjICpndWMpCiB7Ci0JcmV0dXJuIGNsaWVudC0+dmFk
ZHI7CisJaTkxNV92bWFfdW5waW5fYW5kX3JlbGVhc2UoJmd1Yy0+d29ya3F1ZXVlLCBJOTE1X1ZN
QV9SRUxFQVNFX01BUCk7CiB9CiAKIC8qCiAgKiBJbml0aWFsaXNlIHRoZSBwcm9jZXNzIGRlc2Ny
aXB0b3Igc2hhcmVkIHdpdGggdGhlIEd1QyBmaXJtd2FyZS4KICAqLwotc3RhdGljIHZvaWQgZ3Vj
X3Byb2NfZGVzY19pbml0KHN0cnVjdCBpbnRlbF9ndWNfY2xpZW50ICpjbGllbnQpCitzdGF0aWMg
aW50IGd1Y19wcm9jX2Rlc2NfY3JlYXRlKHN0cnVjdCBpbnRlbF9ndWMgKmd1YykKK3sKKwljb25z
dCB1MzIgc2l6ZSA9IFBBR0VfQUxJR04oc2l6ZW9mKHN0cnVjdCBndWNfcHJvY2Vzc19kZXNjKSk7
CisKKwlyZXR1cm4gaW50ZWxfZ3VjX2FsbG9jYXRlX2FuZF9tYXBfdm1hKGd1Yywgc2l6ZSwgJmd1
Yy0+cHJvY19kZXNjLAorCQkJCQkgICAgICAmZ3VjLT5wcm9jX2Rlc2NfdmFkZHIpOworfQorCitz
dGF0aWMgdm9pZCBndWNfcHJvY19kZXNjX2Rlc3Ryb3koc3RydWN0IGludGVsX2d1YyAqZ3VjKQor
eworCWk5MTVfdm1hX3VucGluX2FuZF9yZWxlYXNlKCZndWMtPnByb2NfZGVzYywgSTkxNV9WTUFf
UkVMRUFTRV9NQVApOworfQorCitzdGF0aWMgdm9pZCBndWNfcHJvY19kZXNjX2luaXQoc3RydWN0
IGludGVsX2d1YyAqZ3VjKQogewogCXN0cnVjdCBndWNfcHJvY2Vzc19kZXNjICpkZXNjOwogCi0J
ZGVzYyA9IG1lbXNldChfX2dldF9wcm9jZXNzX2Rlc2MoY2xpZW50KSwgMCwgc2l6ZW9mKCpkZXNj
KSk7CisJZGVzYyA9IG1lbXNldChndWMtPnByb2NfZGVzY192YWRkciwgMCwgc2l6ZW9mKCpkZXNj
KSk7CiAKIAkvKgogCSAqIFhYWDogcERvb3JiZWxsIGFuZCBXUVZCYXNlQWRkcmVzcyBhcmUgcG9p
bnRlcnMgaW4gcHJvY2VzcyBhZGRyZXNzCkBAIC0xMDgsMzkgKzEwOSwyNyBAQCBzdGF0aWMgdm9p
ZCBndWNfcHJvY19kZXNjX2luaXQoc3RydWN0IGludGVsX2d1Y19jbGllbnQgKmNsaWVudCkKIAlk
ZXNjLT53cV9iYXNlX2FkZHIgPSAwOwogCWRlc2MtPmRiX2Jhc2VfYWRkciA9IDA7CiAKLQlkZXNj
LT5zdGFnZV9pZCA9IGNsaWVudC0+c3RhZ2VfaWQ7CiAJZGVzYy0+d3Ffc2l6ZV9ieXRlcyA9IEdV
Q19XUV9TSVpFOwogCWRlc2MtPndxX3N0YXR1cyA9IFdRX1NUQVRVU19BQ1RJVkU7Ci0JZGVzYy0+
cHJpb3JpdHkgPSBjbGllbnQtPnByaW9yaXR5OworCWRlc2MtPnByaW9yaXR5ID0gR1VDX0NMSUVO
VF9QUklPUklUWV9LTURfTk9STUFMOwogfQogCi1zdGF0aWMgdm9pZCBndWNfcHJvY19kZXNjX2Zp
bmkoc3RydWN0IGludGVsX2d1Y19jbGllbnQgKmNsaWVudCkKK3N0YXRpYyB2b2lkIGd1Y19wcm9j
X2Rlc2NfZmluaShzdHJ1Y3QgaW50ZWxfZ3VjICpndWMpCiB7Ci0Jc3RydWN0IGd1Y19wcm9jZXNz
X2Rlc2MgKmRlc2M7Ci0KLQlkZXNjID0gX19nZXRfcHJvY2Vzc19kZXNjKGNsaWVudCk7Ci0JbWVt
c2V0KGRlc2MsIDAsIHNpemVvZigqZGVzYykpOworCW1lbXNldChndWMtPnByb2NfZGVzY192YWRk
ciwgMCwgc2l6ZW9mKHN0cnVjdCBndWNfcHJvY2Vzc19kZXNjKSk7CiB9CiAKIHN0YXRpYyBpbnQg
Z3VjX3N0YWdlX2Rlc2NfcG9vbF9jcmVhdGUoc3RydWN0IGludGVsX2d1YyAqZ3VjKQogewogCXUz
MiBzaXplID0gUEFHRV9BTElHTihzaXplb2Yoc3RydWN0IGd1Y19zdGFnZV9kZXNjKSAqCiAJCQkg
ICAgICBHVUNfTUFYX1NUQUdFX0RFU0NSSVBUT1JTKTsKLQlpbnQgcmV0OwotCi0JcmV0ID0gaW50
ZWxfZ3VjX2FsbG9jYXRlX2FuZF9tYXBfdm1hKGd1Yywgc2l6ZSwgJmd1Yy0+c3RhZ2VfZGVzY19w
b29sLAotCQkJCQkgICAgICZndWMtPnN0YWdlX2Rlc2NfcG9vbF92YWRkcik7Ci0JaWYgKHJldCkK
LQkJcmV0dXJuIHJldDsKLQotCWlkYV9pbml0KCZndWMtPnN0YWdlX2lkcyk7CiAKLQlyZXR1cm4g
MDsKKwlyZXR1cm4gaW50ZWxfZ3VjX2FsbG9jYXRlX2FuZF9tYXBfdm1hKGd1Yywgc2l6ZSwgJmd1
Yy0+c3RhZ2VfZGVzY19wb29sLAorCQkJCQkgICAgICAmZ3VjLT5zdGFnZV9kZXNjX3Bvb2xfdmFk
ZHIpOwogfQogCiBzdGF0aWMgdm9pZCBndWNfc3RhZ2VfZGVzY19wb29sX2Rlc3Ryb3koc3RydWN0
IGludGVsX2d1YyAqZ3VjKQogewotCWlkYV9kZXN0cm95KCZndWMtPnN0YWdlX2lkcyk7CiAJaTkx
NV92bWFfdW5waW5fYW5kX3JlbGVhc2UoJmd1Yy0+c3RhZ2VfZGVzY19wb29sLCBJOTE1X1ZNQV9S
RUxFQVNFX01BUCk7CiB9CiAKQEAgLTE0OCw1OCArMTM3LDQ5IEBAIHN0YXRpYyB2b2lkIGd1Y19z
dGFnZV9kZXNjX3Bvb2xfZGVzdHJveShzdHJ1Y3QgaW50ZWxfZ3VjICpndWMpCiAgKiBJbml0aWFs
aXNlL2NsZWFyIHRoZSBzdGFnZSBkZXNjcmlwdG9yIHNoYXJlZCB3aXRoIHRoZSBHdUMgZmlybXdh
cmUuCiAgKgogICogVGhpcyBkZXNjcmlwdG9yIHRlbGxzIHRoZSBHdUMgd2hlcmUgKGluIEdHVFQg
c3BhY2UpIHRvIGZpbmQgdGhlIGltcG9ydGFudAotICogZGF0YSBzdHJ1Y3R1cmVzIHJlbGF0aW5n
IHRvIHRoaXMgY2xpZW50IChwcm9jZXNzIGRlc2NyaXB0b3IsIHdyaXRlIHF1ZXVlLAorICogZGF0
YSBzdHJ1Y3R1cmVzIHJlbGF0ZWQgdG8gd29yayBzdWJtaXNzaW9uIChwcm9jZXNzIGRlc2NyaXB0
b3IsIHdyaXRlIHF1ZXVlLAogICogZXRjKS4KICAqLwotc3RhdGljIHZvaWQgZ3VjX3N0YWdlX2Rl
c2NfaW5pdChzdHJ1Y3QgaW50ZWxfZ3VjX2NsaWVudCAqY2xpZW50KQorc3RhdGljIHZvaWQgZ3Vj
X3N0YWdlX2Rlc2NfaW5pdChzdHJ1Y3QgaW50ZWxfZ3VjICpndWMpCiB7Ci0Jc3RydWN0IGludGVs
X2d1YyAqZ3VjID0gY2xpZW50LT5ndWM7CiAJc3RydWN0IGd1Y19zdGFnZV9kZXNjICpkZXNjOwot
CXUzMiBnZnhfYWRkcjsKIAotCWRlc2MgPSBfX2dldF9zdGFnZV9kZXNjKGNsaWVudCk7CisJLyog
d2Ugb25seSB1c2UgMSBzdGFnZSBkZXNjLCBzbyBoYXJkY29kZSBpdCB0byAwICovCisJZGVzYyA9
IF9fZ2V0X3N0YWdlX2Rlc2MoZ3VjLCAwKTsKIAltZW1zZXQoZGVzYywgMCwgc2l6ZW9mKCpkZXNj
KSk7CiAKIAlkZXNjLT5hdHRyaWJ1dGUgPSBHVUNfU1RBR0VfREVTQ19BVFRSX0FDVElWRSB8CiAJ
CQkgIEdVQ19TVEFHRV9ERVNDX0FUVFJfS0VSTkVMOwotCWlmIChpc19oaWdoX3ByaW9yaXR5KGNs
aWVudCkpCi0JCWRlc2MtPmF0dHJpYnV0ZSB8PSBHVUNfU1RBR0VfREVTQ19BVFRSX1BSRUVNUFQ7
Ci0JZGVzYy0+c3RhZ2VfaWQgPSBjbGllbnQtPnN0YWdlX2lkOwotCWRlc2MtPnByaW9yaXR5ID0g
Y2xpZW50LT5wcmlvcml0eTsKIAotCS8qCi0JICogVGhlIHByb2Nlc3MgZGVzY3JpcHRvciBhbmQg
d29ya3F1ZXVlIGFyZSBhbGwgcGFydHMgb2YgdGhlIGNsaWVudAotCSAqIG9iamVjdCwgd2hpY2gg
dGhlIEd1QyB3aWxsIHJlZmVyZW5jZSB2aWEgdGhlIEdHVFQKLQkgKi8KLQlnZnhfYWRkciA9IGlu
dGVsX2d1Y19nZ3R0X29mZnNldChndWMsIGNsaWVudC0+dm1hKTsKLQlkZXNjLT5wcm9jZXNzX2Rl
c2MgPSBnZnhfYWRkcjsKLQlkZXNjLT53cV9hZGRyID0gZ2Z4X2FkZHIgKyBHVUNfUERfU0laRTsK
LQlkZXNjLT53cV9zaXplID0gR1VDX1dRX1NJWkU7CisJZGVzYy0+c3RhZ2VfaWQgPSAwOworCWRl
c2MtPnByaW9yaXR5ID0gR1VDX0NMSUVOVF9QUklPUklUWV9LTURfTk9STUFMOwogCi0JZGVzYy0+
ZGVzY19wcml2YXRlID0gcHRyX3RvX3U2NChjbGllbnQpOworCWRlc2MtPnByb2Nlc3NfZGVzYyA9
IGludGVsX2d1Y19nZ3R0X29mZnNldChndWMsIGd1Yy0+cHJvY19kZXNjKTsKKwlkZXNjLT53cV9h
ZGRyID0gaW50ZWxfZ3VjX2dndHRfb2Zmc2V0KGd1YywgZ3VjLT53b3JrcXVldWUpOworCWRlc2Mt
PndxX3NpemUgPSBHVUNfV1FfU0laRTsKIH0KIAotc3RhdGljIHZvaWQgZ3VjX3N0YWdlX2Rlc2Nf
ZmluaShzdHJ1Y3QgaW50ZWxfZ3VjX2NsaWVudCAqY2xpZW50KQorc3RhdGljIHZvaWQgZ3VjX3N0
YWdlX2Rlc2NfZmluaShzdHJ1Y3QgaW50ZWxfZ3VjICpndWMpCiB7CiAJc3RydWN0IGd1Y19zdGFn
ZV9kZXNjICpkZXNjOwogCi0JZGVzYyA9IF9fZ2V0X3N0YWdlX2Rlc2MoY2xpZW50KTsKKwlkZXNj
ID0gX19nZXRfc3RhZ2VfZGVzYyhndWMsIDApOwogCW1lbXNldChkZXNjLCAwLCBzaXplb2YoKmRl
c2MpKTsKIH0KIAogLyogQ29uc3RydWN0IGEgV29yayBJdGVtIGFuZCBhcHBlbmQgaXQgdG8gdGhl
IEd1QydzIFdvcmsgUXVldWUgKi8KLXN0YXRpYyB2b2lkIGd1Y193cV9pdGVtX2FwcGVuZChzdHJ1
Y3QgaW50ZWxfZ3VjX2NsaWVudCAqY2xpZW50LAorc3RhdGljIHZvaWQgZ3VjX3dxX2l0ZW1fYXBw
ZW5kKHN0cnVjdCBpbnRlbF9ndWMgKmd1YywKIAkJCSAgICAgICB1MzIgdGFyZ2V0X2VuZ2luZSwg
dTMyIGNvbnRleHRfZGVzYywKIAkJCSAgICAgICB1MzIgcmluZ190YWlsLCB1MzIgZmVuY2VfaWQp
CiB7CiAJLyogd3FpX2xlbiBpcyBpbiBEV29yZHMsIGFuZCBkb2VzIG5vdCBpbmNsdWRlIHRoZSBv
bmUtd29yZCBoZWFkZXIgKi8KIAljb25zdCBzaXplX3Qgd3FpX3NpemUgPSBzaXplb2Yoc3RydWN0
IGd1Y193cV9pdGVtKTsKIAljb25zdCB1MzIgd3FpX2xlbiA9IHdxaV9zaXplIC8gc2l6ZW9mKHUz
MikgLSAxOwotCXN0cnVjdCBndWNfcHJvY2Vzc19kZXNjICpkZXNjID0gX19nZXRfcHJvY2Vzc19k
ZXNjKGNsaWVudCk7CisJc3RydWN0IGd1Y19wcm9jZXNzX2Rlc2MgKmRlc2MgPSBndWMtPnByb2Nf
ZGVzY192YWRkcjsKIAlzdHJ1Y3QgZ3VjX3dxX2l0ZW0gKndxaTsKIAl1MzIgd3Ffb2ZmOwogCi0J
bG9ja2RlcF9hc3NlcnRfaGVsZCgmY2xpZW50LT53cV9sb2NrKTsKKwlsb2NrZGVwX2Fzc2VydF9o
ZWxkKCZndWMtPndxX2xvY2spOwogCiAJLyogRm9yIG5vdyB3b3JrcXVldWUgaXRlbSBpcyA0IERX
czsgd29ya3F1ZXVlIGJ1ZmZlciBpcyAyIHBhZ2VzLiBTbyB3ZQogCSAqIHNob3VsZCBub3QgaGF2
ZSB0aGUgY2FzZSB3aGVyZSBzdHJ1Y3R1cmUgd3FpIGlzIGFjcm9zcyBwYWdlLCBuZWl0aGVyCkBA
IC0yMTksOCArMTk5LDcgQEAgc3RhdGljIHZvaWQgZ3VjX3dxX2l0ZW1fYXBwZW5kKHN0cnVjdCBp
bnRlbF9ndWNfY2xpZW50ICpjbGllbnQsCiAJCQkgICAgICBHVUNfV1FfU0laRSkgPCB3cWlfc2l6
ZSk7CiAJR0VNX0JVR19PTih3cV9vZmYgJiAod3FpX3NpemUgLSAxKSk7CiAKLQkvKiBXUSBzdGFy
dHMgZnJvbSB0aGUgcGFnZSBhZnRlciBwcm9jZXNzX2Rlc2MgKi8KLQl3cWkgPSBjbGllbnQtPnZh
ZGRyICsgd3Ffb2ZmICsgR1VDX1BEX1NJWkU7CisJd3FpID0gZ3VjLT53b3JrcXVldWVfdmFkZHIg
KyB3cV9vZmY7CiAKIAkvKiBOb3cgZmlsbCBpbiB0aGUgNC13b3JkIHdvcmsgcXVldWUgaXRlbSAq
LwogCXdxaS0+aGVhZGVyID0gV1FfVFlQRV9JTk9SREVSIHwKQEAgLTIzOCwxMiArMjE3LDExIEBA
IHN0YXRpYyB2b2lkIGd1Y193cV9pdGVtX2FwcGVuZChzdHJ1Y3QgaW50ZWxfZ3VjX2NsaWVudCAq
Y2xpZW50LAogCiBzdGF0aWMgdm9pZCBndWNfYWRkX3JlcXVlc3Qoc3RydWN0IGludGVsX2d1YyAq
Z3VjLCBzdHJ1Y3QgaTkxNV9yZXF1ZXN0ICpycSkKIHsKLQlzdHJ1Y3QgaW50ZWxfZ3VjX2NsaWVu
dCAqY2xpZW50ID0gZ3VjLT5leGVjYnVmX2NsaWVudDsKIAlzdHJ1Y3QgaW50ZWxfZW5naW5lX2Nz
ICplbmdpbmUgPSBycS0+ZW5naW5lOwogCXUzMiBjdHhfZGVzYyA9IGxvd2VyXzMyX2JpdHMocnEt
Pmh3X2NvbnRleHQtPmxyY19kZXNjKTsKIAl1MzIgcmluZ190YWlsID0gaW50ZWxfcmluZ19zZXRf
dGFpbChycS0+cmluZywgcnEtPnRhaWwpIC8gc2l6ZW9mKHU2NCk7CiAKLQlndWNfd3FfaXRlbV9h
cHBlbmQoY2xpZW50LCBlbmdpbmUtPmd1Y19pZCwgY3R4X2Rlc2MsCisJZ3VjX3dxX2l0ZW1fYXBw
ZW5kKGd1YywgZW5naW5lLT5ndWNfaWQsIGN0eF9kZXNjLAogCQkJICAgcmluZ190YWlsLCBycS0+
ZmVuY2Uuc2Vxbm8pOwogfQogCkBAIC0yNjcsOSArMjQ1LDggQEAgc3RhdGljIHZvaWQgZ3VjX3N1
Ym1pdChzdHJ1Y3QgaW50ZWxfZW5naW5lX2NzICplbmdpbmUsCiAJCSAgICAgICBzdHJ1Y3QgaTkx
NV9yZXF1ZXN0ICoqZW5kKQogewogCXN0cnVjdCBpbnRlbF9ndWMgKmd1YyA9ICZlbmdpbmUtPmd0
LT51Yy5ndWM7Ci0Jc3RydWN0IGludGVsX2d1Y19jbGllbnQgKmNsaWVudCA9IGd1Yy0+ZXhlY2J1
Zl9jbGllbnQ7CiAKLQlzcGluX2xvY2soJmNsaWVudC0+d3FfbG9jayk7CisJc3Bpbl9sb2NrKCZn
dWMtPndxX2xvY2spOwogCiAJZG8gewogCQlzdHJ1Y3QgaTkxNV9yZXF1ZXN0ICpycSA9ICpvdXQr
KzsKQEAgLTI3OCw3ICsyNTUsNyBAQCBzdGF0aWMgdm9pZCBndWNfc3VibWl0KHN0cnVjdCBpbnRl
bF9lbmdpbmVfY3MgKmVuZ2luZSwKIAkJZ3VjX2FkZF9yZXF1ZXN0KGd1YywgcnEpOwogCX0gd2hp
bGUgKG91dCAhPSBlbmQpOwogCi0Jc3Bpbl91bmxvY2soJmNsaWVudC0+d3FfbG9jayk7CisJc3Bp
bl91bmxvY2soJmd1Yy0+d3FfbG9jayk7CiB9CiAKIHN0YXRpYyBpbmxpbmUgaW50IHJxX3ByaW8o
Y29uc3Qgc3RydWN0IGk5MTVfcmVxdWVzdCAqcnEpCkBAIC01MjksMTI2ICs1MDYsNiBAQCBzdGF0
aWMgdm9pZCBndWNfcmVzZXRfZmluaXNoKHN0cnVjdCBpbnRlbF9lbmdpbmVfY3MgKmVuZ2luZSkK
ICAqIHBhdGggb2YgZ3VjX3N1Ym1pdCgpIGFib3ZlLgogICovCiAKLS8qKgotICogZ3VjX2NsaWVu
dF9hbGxvYygpIC0gQWxsb2NhdGUgYW4gaW50ZWxfZ3VjX2NsaWVudAotICogQGd1YzoJdGhlIGlu
dGVsX2d1YyBzdHJ1Y3R1cmUKLSAqIEBwcmlvcml0eToJZm91ciBsZXZlbHMgcHJpb3JpdHkgX0NS
SVRJQ0FMLCBfSElHSCwgX05PUk1BTCBhbmQgX0xPVwotICoJCVRoZSBrZXJuZWwgY2xpZW50IHRv
IHJlcGxhY2UgRXhlY0xpc3Qgc3VibWlzc2lvbiBpcyBjcmVhdGVkIHdpdGgKLSAqCQlOT1JNQUwg
cHJpb3JpdHkuIFByaW9yaXR5IG9mIGEgY2xpZW50IGZvciBzY2hlZHVsZXIgY2FuIGJlIEhJR0gs
Ci0gKgkJd2hpbGUgYSBwcmVlbXB0aW9uIGNvbnRleHQgY2FuIHVzZSBDUklUSUNBTC4KLSAqCi0g
KiBSZXR1cm46CUFuIGludGVsX2d1Y19jbGllbnQgb2JqZWN0IGlmIHN1Y2Nlc3MsIGVsc2UgTlVM
TC4KLSAqLwotc3RhdGljIHN0cnVjdCBpbnRlbF9ndWNfY2xpZW50ICoKLWd1Y19jbGllbnRfYWxs
b2Moc3RydWN0IGludGVsX2d1YyAqZ3VjLCB1MzIgcHJpb3JpdHkpCi17Ci0Jc3RydWN0IGludGVs
X2d1Y19jbGllbnQgKmNsaWVudDsKLQlzdHJ1Y3QgaTkxNV92bWEgKnZtYTsKLQl2b2lkICp2YWRk
cjsKLQlpbnQgcmV0OwotCi0JY2xpZW50ID0ga3phbGxvYyhzaXplb2YoKmNsaWVudCksIEdGUF9L
RVJORUwpOwotCWlmICghY2xpZW50KQotCQlyZXR1cm4gRVJSX1BUUigtRU5PTUVNKTsKLQotCWNs
aWVudC0+Z3VjID0gZ3VjOwotCWNsaWVudC0+cHJpb3JpdHkgPSBwcmlvcml0eTsKLQlzcGluX2xv
Y2tfaW5pdCgmY2xpZW50LT53cV9sb2NrKTsKLQotCXJldCA9IGlkYV9zaW1wbGVfZ2V0KCZndWMt
PnN0YWdlX2lkcywgMCwgR1VDX01BWF9TVEFHRV9ERVNDUklQVE9SUywKLQkJCSAgICAgR0ZQX0tF
Uk5FTCk7Ci0JaWYgKHJldCA8IDApCi0JCWdvdG8gZXJyX2NsaWVudDsKLQotCWNsaWVudC0+c3Rh
Z2VfaWQgPSByZXQ7Ci0KLQkvKiBUaGUgZmlyc3QgcGFnZSBpcyBwcm9jX2Rlc2MuIFR3byBmb2xs
b3dpbmcgcGFnZXMgYXJlIHdxLiAqLwotCXZtYSA9IGludGVsX2d1Y19hbGxvY2F0ZV92bWEoZ3Vj
LCBHVUNfUERfU0laRSArIEdVQ19XUV9TSVpFKTsKLQlpZiAoSVNfRVJSKHZtYSkpIHsKLQkJcmV0
ID0gUFRSX0VSUih2bWEpOwotCQlnb3RvIGVycl9pZDsKLQl9Ci0KLQkvKiBXZSdsbCBrZWVwIGp1
c3QgdGhlIGZpcnN0IChkb29yYmVsbC9wcm9jKSBwYWdlIHBlcm1hbmVudGx5IGttYXAnZC4gKi8K
LQljbGllbnQtPnZtYSA9IHZtYTsKLQotCXZhZGRyID0gaTkxNV9nZW1fb2JqZWN0X3Bpbl9tYXAo
dm1hLT5vYmosIEk5MTVfTUFQX1dCKTsKLQlpZiAoSVNfRVJSKHZhZGRyKSkgewotCQlyZXQgPSBQ
VFJfRVJSKHZhZGRyKTsKLQkJZ290byBlcnJfdm1hOwotCX0KLQljbGllbnQtPnZhZGRyID0gdmFk
ZHI7Ci0KLQlEUk1fREVCVUdfRFJJVkVSKCJuZXcgcHJpb3JpdHkgJXUgY2xpZW50ICVwOiBzdGFn
ZV9pZCAldVxuIiwKLQkJCSBwcmlvcml0eSwgY2xpZW50LCBjbGllbnQtPnN0YWdlX2lkKTsKLQot
CXJldHVybiBjbGllbnQ7Ci0KLWVycl92bWE6Ci0JaTkxNV92bWFfdW5waW5fYW5kX3JlbGVhc2Uo
JmNsaWVudC0+dm1hLCAwKTsKLWVycl9pZDoKLQlpZGFfc2ltcGxlX3JlbW92ZSgmZ3VjLT5zdGFn
ZV9pZHMsIGNsaWVudC0+c3RhZ2VfaWQpOwotZXJyX2NsaWVudDoKLQlrZnJlZShjbGllbnQpOwot
CXJldHVybiBFUlJfUFRSKHJldCk7Ci19Ci0KLXN0YXRpYyB2b2lkIGd1Y19jbGllbnRfZnJlZShz
dHJ1Y3QgaW50ZWxfZ3VjX2NsaWVudCAqY2xpZW50KQotewotCWk5MTVfdm1hX3VucGluX2FuZF9y
ZWxlYXNlKCZjbGllbnQtPnZtYSwgSTkxNV9WTUFfUkVMRUFTRV9NQVApOwotCWlkYV9zaW1wbGVf
cmVtb3ZlKCZjbGllbnQtPmd1Yy0+c3RhZ2VfaWRzLCBjbGllbnQtPnN0YWdlX2lkKTsKLQlrZnJl
ZShjbGllbnQpOwotfQotCi1zdGF0aWMgaW50IGd1Y19jbGllbnRzX2NyZWF0ZShzdHJ1Y3QgaW50
ZWxfZ3VjICpndWMpCi17Ci0Jc3RydWN0IGludGVsX2d1Y19jbGllbnQgKmNsaWVudDsKLQotCUdF
TV9CVUdfT04oZ3VjLT5leGVjYnVmX2NsaWVudCk7Ci0KLQljbGllbnQgPSBndWNfY2xpZW50X2Fs
bG9jKGd1YywgR1VDX0NMSUVOVF9QUklPUklUWV9LTURfTk9STUFMKTsKLQlpZiAoSVNfRVJSKGNs
aWVudCkpIHsKLQkJRFJNX0VSUk9SKCJGYWlsZWQgdG8gY3JlYXRlIEd1QyBjbGllbnQgZm9yIHN1
Ym1pc3Npb24hXG4iKTsKLQkJcmV0dXJuIFBUUl9FUlIoY2xpZW50KTsKLQl9Ci0JZ3VjLT5leGVj
YnVmX2NsaWVudCA9IGNsaWVudDsKLQotCXJldHVybiAwOwotfQotCi1zdGF0aWMgdm9pZCBndWNf
Y2xpZW50c19kZXN0cm95KHN0cnVjdCBpbnRlbF9ndWMgKmd1YykKLXsKLQlzdHJ1Y3QgaW50ZWxf
Z3VjX2NsaWVudCAqY2xpZW50OwotCi0JY2xpZW50ID0gZmV0Y2hfYW5kX3plcm8oJmd1Yy0+ZXhl
Y2J1Zl9jbGllbnQpOwotCWlmIChjbGllbnQpCi0JCWd1Y19jbGllbnRfZnJlZShjbGllbnQpOwot
fQotCi1zdGF0aWMgdm9pZCBfX2d1Y19jbGllbnRfZW5hYmxlKHN0cnVjdCBpbnRlbF9ndWNfY2xp
ZW50ICpjbGllbnQpCi17Ci0JZ3VjX3Byb2NfZGVzY19pbml0KGNsaWVudCk7Ci0JZ3VjX3N0YWdl
X2Rlc2NfaW5pdChjbGllbnQpOwotfQotCi1zdGF0aWMgdm9pZCBfX2d1Y19jbGllbnRfZGlzYWJs
ZShzdHJ1Y3QgaW50ZWxfZ3VjX2NsaWVudCAqY2xpZW50KQotewotCS8qIE5vdGU6IEJ5IHRoZSB0
aW1lIHdlJ3JlIGhlcmUsIEd1QyBtYXkgaGF2ZSBhbHJlYWR5IGJlZW4gcmVzZXQgKi8KLQlndWNf
c3RhZ2VfZGVzY19maW5pKGNsaWVudCk7Ci0JZ3VjX3Byb2NfZGVzY19maW5pKGNsaWVudCk7Ci19
Ci0KLXN0YXRpYyB2b2lkIGd1Y19jbGllbnRzX2VuYWJsZShzdHJ1Y3QgaW50ZWxfZ3VjICpndWMp
Ci17Ci0JX19ndWNfY2xpZW50X2VuYWJsZShndWMtPmV4ZWNidWZfY2xpZW50KTsKLX0KLQotc3Rh
dGljIHZvaWQgZ3VjX2NsaWVudHNfZGlzYWJsZShzdHJ1Y3QgaW50ZWxfZ3VjICpndWMpCi17Ci0J
aWYgKGd1Yy0+ZXhlY2J1Zl9jbGllbnQpCi0JCV9fZ3VjX2NsaWVudF9kaXNhYmxlKGd1Yy0+ZXhl
Y2J1Zl9jbGllbnQpOwotfQotCiAvKgogICogU2V0IHVwIHRoZSBtZW1vcnkgcmVzb3VyY2VzIHRv
IGJlIHNoYXJlZCB3aXRoIHRoZSBHdUMgKHZpYSB0aGUgR0dUVCkKICAqIGF0IGZpcm13YXJlIGxv
YWRpbmcgdGltZS4KQEAgLTY2OSwxMiArNTI2LDIwIEBAIGludCBpbnRlbF9ndWNfc3VibWlzc2lv
bl9pbml0KHN0cnVjdCBpbnRlbF9ndWMgKmd1YykKIAkgKi8KIAlHRU1fQlVHX09OKCFndWMtPnN0
YWdlX2Rlc2NfcG9vbCk7CiAKLQlyZXQgPSBndWNfY2xpZW50c19jcmVhdGUoZ3VjKTsKKwlyZXQg
PSBndWNfd29ya3F1ZXVlX2NyZWF0ZShndWMpOwogCWlmIChyZXQpCiAJCWdvdG8gZXJyX3Bvb2w7
CiAKKwlyZXQgPSBndWNfcHJvY19kZXNjX2NyZWF0ZShndWMpOworCWlmIChyZXQpCisJCWdvdG8g
ZXJyX3dvcmtxdWV1ZTsKKworCXNwaW5fbG9ja19pbml0KCZndWMtPndxX2xvY2spOworCiAJcmV0
dXJuIDA7CiAKK2Vycl93b3JrcXVldWU6CisJZ3VjX3dvcmtxdWV1ZV9kZXN0cm95KGd1Yyk7CiBl
cnJfcG9vbDoKIAlndWNfc3RhZ2VfZGVzY19wb29sX2Rlc3Ryb3koZ3VjKTsKIAlyZXR1cm4gcmV0
OwpAQCAtNjgyLDEwICs1NDcsMTEgQEAgaW50IGludGVsX2d1Y19zdWJtaXNzaW9uX2luaXQoc3Ry
dWN0IGludGVsX2d1YyAqZ3VjKQogCiB2b2lkIGludGVsX2d1Y19zdWJtaXNzaW9uX2Zpbmkoc3Ry
dWN0IGludGVsX2d1YyAqZ3VjKQogewotCWd1Y19jbGllbnRzX2Rlc3Ryb3koZ3VjKTsKLQotCWlm
IChndWMtPnN0YWdlX2Rlc2NfcG9vbCkKKwlpZiAoZ3VjLT5zdGFnZV9kZXNjX3Bvb2wpIHsKKwkJ
Z3VjX3Byb2NfZGVzY19kZXN0cm95KGd1Yyk7CisJCWd1Y193b3JrcXVldWVfZGVzdHJveShndWMp
OwogCQlndWNfc3RhZ2VfZGVzY19wb29sX2Rlc3Ryb3koZ3VjKTsKKwl9CiB9CiAKIHN0YXRpYyB2
b2lkIGd1Y19pbnRlcnJ1cHRzX2NhcHR1cmUoc3RydWN0IGludGVsX2d0ICpndCkKQEAgLTc3MSw5
ICs2MzcsOCBAQCB2b2lkIGludGVsX2d1Y19zdWJtaXNzaW9uX2VuYWJsZShzdHJ1Y3QgaW50ZWxf
Z3VjICpndWMpCiAJCSAgICAgc2l6ZW9mKHN0cnVjdCBndWNfd3FfaXRlbSkgKgogCQkgICAgIEk5
MTVfTlVNX0VOR0lORVMgPiBHVUNfV1FfU0laRSk7CiAKLQlHRU1fQlVHX09OKCFndWMtPmV4ZWNi
dWZfY2xpZW50KTsKLQotCWd1Y19jbGllbnRzX2VuYWJsZShndWMpOworCWd1Y19wcm9jX2Rlc2Nf
aW5pdChndWMpOworCWd1Y19zdGFnZV9kZXNjX2luaXQoZ3VjKTsKIAogCS8qIFRha2Ugb3ZlciBm
cm9tIG1hbnVhbCBjb250cm9sIG9mIEVMU1AgKGV4ZWNsaXN0cykgKi8KIAlndWNfaW50ZXJydXB0
c19jYXB0dXJlKGd0KTsKQEAgLTc5MCw4ICs2NTUsMTIgQEAgdm9pZCBpbnRlbF9ndWNfc3VibWlz
c2lvbl9kaXNhYmxlKHN0cnVjdCBpbnRlbF9ndWMgKmd1YykKIAogCUdFTV9CVUdfT04oZ3QtPmF3
YWtlKTsgLyogR1Qgc2hvdWxkIGJlIHBhcmtlZCBmaXJzdCAqLwogCisJLyogTm90ZTogQnkgdGhl
IHRpbWUgd2UncmUgaGVyZSwgR3VDIG1heSBoYXZlIGFscmVhZHkgYmVlbiByZXNldCAqLworCiAJ
Z3VjX2ludGVycnVwdHNfcmVsZWFzZShndCk7Ci0JZ3VjX2NsaWVudHNfZGlzYWJsZShndWMpOwor
CisJZ3VjX3N0YWdlX2Rlc2NfZmluaShndWMpOworCWd1Y19wcm9jX2Rlc2NfZmluaShndWMpOwog
fQogCiBzdGF0aWMgYm9vbCBfX2d1Y19zdWJtaXNzaW9uX3N1cHBvcnQoc3RydWN0IGludGVsX2d1
YyAqZ3VjKQpAQCAtODA5LDMgKzY3OCw4IEBAIHZvaWQgaW50ZWxfZ3VjX3N1Ym1pc3Npb25faW5p
dF9lYXJseShzdHJ1Y3QgaW50ZWxfZ3VjICpndWMpCiB7CiAJZ3VjLT5zdWJtaXNzaW9uX3N1cHBv
cnRlZCA9IF9fZ3VjX3N1Ym1pc3Npb25fc3VwcG9ydChndWMpOwogfQorCitib29sIGludGVsX2Vu
Z2luZV9pbl9ndWNfc3VibWlzc2lvbl9tb2RlKGNvbnN0IHN0cnVjdCBpbnRlbF9lbmdpbmVfY3Mg
KmVuZ2luZSkKK3sKKwlyZXR1cm4gZW5naW5lLT5zZXRfZGVmYXVsdF9zdWJtaXNzaW9uID09IGd1
Y19zZXRfZGVmYXVsdF9zdWJtaXNzaW9uOworfQpkaWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJt
L2k5MTUvZ3QvdWMvaW50ZWxfZ3VjX3N1Ym1pc3Npb24uaCBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1
L2d0L3VjL2ludGVsX2d1Y19zdWJtaXNzaW9uLmgKaW5kZXggZTJkZWI0ZTZmNDJhLi5lNDAyYTI5
MzI1OTIgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2d0L3VjL2ludGVsX2d1Y19z
dWJtaXNzaW9uLmgKKysrIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvZ3QvdWMvaW50ZWxfZ3VjX3N1
Ym1pc3Npb24uaApAQCAtNiw0OCArNiwxMCBAQAogI2lmbmRlZiBfSU5URUxfR1VDX1NVQk1JU1NJ
T05fSF8KICNkZWZpbmUgX0lOVEVMX0dVQ19TVUJNSVNTSU9OX0hfCiAKLSNpbmNsdWRlIDxsaW51
eC9zcGlubG9jay5oPgorI2luY2x1ZGUgPGxpbnV4L3R5cGVzLmg+CiAKLSNpbmNsdWRlICJndC9p
bnRlbF9lbmdpbmVfdHlwZXMuaCIKLQotI2luY2x1ZGUgImk5MTVfZ2VtLmgiCi0jaW5jbHVkZSAi
aTkxNV9zZWxmdGVzdC5oIgotCi1zdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0ZTsKLQotLyoKLSAqIFRo
aXMgc3RydWN0dXJlIHByaW1hcmlseSBkZXNjcmliZXMgdGhlIEdFTSBvYmplY3Qgc2hhcmVkIHdp
dGggdGhlIEd1Qy4KLSAqIFRoZSBzcGVjcyBzb21ldGltZXMgcmVmZXIgdG8gdGhpcyBvYmplY3Qg
YXMgYSAiR3VDIGNvbnRleHQiLCBidXQgd2UgdXNlCi0gKiB0aGUgdGVybSAiY2xpZW50IiB0byBh
dm9pZCBjb25mdXNpb24gd2l0aCBoYXJkd2FyZSBjb250ZXh0cy4gVGhpcwotICogR0VNIG9iamVj
dCBpcyBoZWxkIGZvciB0aGUgZW50aXJlIGxpZmV0aW1lIG9mIG91ciBpbnRlcmFjdGlvbiB3aXRo
Ci0gKiB0aGUgR3VDLCBiZWluZyBhbGxvY2F0ZWQgYmVmb3JlIHRoZSBHdUMgaXMgbG9hZGVkIHdp
dGggaXRzIGZpcm13YXJlLgotICogQmVjYXVzZSB0aGVyZSdzIG5vIHdheSB0byB1cGRhdGUgdGhl
IGFkZHJlc3MgdXNlZCBieSB0aGUgR3VDIGFmdGVyCi0gKiBpbml0aWFsaXNhdGlvbiwgdGhlIHNo
YXJlZCBvYmplY3QgbXVzdCBzdGF5IHBpbm5lZCBpbnRvIHRoZSBHR1RUIGFzCi0gKiBsb25nIGFz
IHRoZSBHdUMgaXMgaW4gdXNlLiBXZSBhbHNvIGtlZXAgdGhlIGZpcnN0IHBhZ2UgKG9ubHkpIG1h
cHBlZAotICogaW50byBrZXJuZWwgYWRkcmVzcyBzcGFjZSwgYXMgaXQgaW5jbHVkZXMgc2hhcmVk
IGRhdGEgdGhhdCBtdXN0IGJlCi0gKiB1cGRhdGVkIG9uIGV2ZXJ5IHJlcXVlc3Qgc3VibWlzc2lv
bi4KLSAqCi0gKiBUaGUgc2luZ2xlIEdFTSBvYmplY3QgZGVzY3JpYmVkIGhlcmUgaXMgYWN0dWFs
bHkgbWFkZSB1cCBvZiBzZXZlcmFsCi0gKiBzZXBhcmF0ZSBhcmVhcywgYXMgZmFyIGFzIHRoZSBH
dUMgaXMgY29uY2VybmVkLiBUaGUgZmlyc3QgcGFnZSAoa2VwdAotICoga21hcCdkKSBpbmNsdWRl
cyB0aGUgInByb2Nlc3MgZGVzY3JpcHRvciIgd2hpY2ggaG9sZHMgc2VxdWVuY2UgZGF0YSBmb3IK
LSAqIHRoZSBkb29yYmVsbCwgYW5kIG9uZSBjYWNoZWxpbmUgd2hpY2ggYWN0dWFsbHkgKmlzKiB0
aGUgZG9vcmJlbGw7IGEKLSAqIHdyaXRlIHRvIHRoaXMgd2lsbCAicmluZyB0aGUgZG9vcmJlbGwi
IChpLmUuIHNlbmQgYW4gaW50ZXJydXB0IHRvIHRoZQotICogR3VDKS4gVGhlIHN1YnNlcXVlbnQg
IHBhZ2VzIG9mIHRoZSBjbGllbnQgb2JqZWN0IGNvbnN0aXR1dGUgdGhlIHdvcmsKLSAqIHF1ZXVl
IChhIGNpcmN1bGFyIGFycmF5IG9mIHdvcmsgaXRlbXMpLCBhZ2FpbiBkZXNjcmliZWQgaW4gdGhl
IHByb2Nlc3MKLSAqIGRlc2NyaXB0b3IuIFdvcmsgcXVldWUgcGFnZXMgYXJlIG1hcHBlZCBtb21l
bnRhcmlseSBhcyByZXF1aXJlZC4KLSAqLwotc3RydWN0IGludGVsX2d1Y19jbGllbnQgewotCXN0
cnVjdCBpOTE1X3ZtYSAqdm1hOwotCXZvaWQgKnZhZGRyOwotCXN0cnVjdCBpbnRlbF9ndWMgKmd1
YzsKLQotCS8qIGJpdG1hcCBvZiAoaG9zdCkgZW5naW5lIGlkcyAqLwotCXUzMiBwcmlvcml0eTsK
LQl1MzIgc3RhZ2VfaWQ7Ci0KLQkvKiBQcm90ZWN0cyBHdUMgY2xpZW50J3MgV1EgYWNjZXNzICov
Ci0Jc3BpbmxvY2tfdCB3cV9sb2NrOwotfTsKK3N0cnVjdCBpbnRlbF9ndWM7CitzdHJ1Y3QgaW50
ZWxfZW5naW5lX2NzOwogCiB2b2lkIGludGVsX2d1Y19zdWJtaXNzaW9uX2luaXRfZWFybHkoc3Ry
dWN0IGludGVsX2d1YyAqZ3VjKTsKIGludCBpbnRlbF9ndWNfc3VibWlzc2lvbl9pbml0KHN0cnVj
dCBpbnRlbF9ndWMgKmd1Yyk7CkBAIC01Niw1ICsxOCw2IEBAIHZvaWQgaW50ZWxfZ3VjX3N1Ym1p
c3Npb25fZGlzYWJsZShzdHJ1Y3QgaW50ZWxfZ3VjICpndWMpOwogdm9pZCBpbnRlbF9ndWNfc3Vi
bWlzc2lvbl9maW5pKHN0cnVjdCBpbnRlbF9ndWMgKmd1Yyk7CiBpbnQgaW50ZWxfZ3VjX3ByZWVt
cHRfd29ya19jcmVhdGUoc3RydWN0IGludGVsX2d1YyAqZ3VjKTsKIHZvaWQgaW50ZWxfZ3VjX3By
ZWVtcHRfd29ya19kZXN0cm95KHN0cnVjdCBpbnRlbF9ndWMgKmd1Yyk7Citib29sIGludGVsX2Vu
Z2luZV9pbl9ndWNfc3VibWlzc2lvbl9tb2RlKGNvbnN0IHN0cnVjdCBpbnRlbF9lbmdpbmVfY3Mg
KmVuZ2luZSk7CiAKICNlbmRpZgpkaWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvaTkx
NV9kZWJ1Z2ZzLmMgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9pOTE1X2RlYnVnZnMuYwppbmRleCA0
NTk2NDdmMWVlMjMuLjY2MmE5OGQ2M2Y1YyAxMDA2NDQKLS0tIGEvZHJpdmVycy9ncHUvZHJtL2k5
MTUvaTkxNV9kZWJ1Z2ZzLmMKKysrIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvaTkxNV9kZWJ1Z2Zz
LmMKQEAgLTE4MDIsMjMgKzE4MDIsMTIgQEAgc3RhdGljIHZvaWQgaTkxNV9ndWNfbG9nX2luZm8o
c3RydWN0IHNlcV9maWxlICptLAogc3RhdGljIGludCBpOTE1X2d1Y19pbmZvKHN0cnVjdCBzZXFf
ZmlsZSAqbSwgdm9pZCAqZGF0YSkKIHsKIAlzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0ZSAqZGV2X3By
aXYgPSBub2RlX3RvX2k5MTUobS0+cHJpdmF0ZSk7Ci0JY29uc3Qgc3RydWN0IGludGVsX2d1YyAq
Z3VjID0gJmRldl9wcml2LT5ndC51Yy5ndWM7Ci0Jc3RydWN0IGludGVsX2d1Y19jbGllbnQgKmNs
aWVudCA9IGd1Yy0+ZXhlY2J1Zl9jbGllbnQ7CiAKIAlpZiAoIVVTRVNfR1VDKGRldl9wcml2KSkK
IAkJcmV0dXJuIC1FTk9ERVY7CiAKIAlpOTE1X2d1Y19sb2dfaW5mbyhtLCBkZXZfcHJpdik7CiAK
LQlpZiAoIVVTRVNfR1VDX1NVQk1JU1NJT04oZGV2X3ByaXYpKQotCQlyZXR1cm4gMDsKLQotCUdF
TV9CVUdfT04oIWd1Yy0+ZXhlY2J1Zl9jbGllbnQpOwotCi0Jc2VxX3ByaW50ZihtLCAiXG5HdUMg
ZXhlY2J1ZiBjbGllbnQgQCAlcDpcbiIsIGNsaWVudCk7Ci0Jc2VxX3ByaW50ZihtLCAiXHRQcmlv
cml0eSAlZCwgR3VDIHN0YWdlIGluZGV4OiAldVxuIiwKLQkJICAgY2xpZW50LT5wcmlvcml0eSwK
LQkJICAgY2xpZW50LT5zdGFnZV9pZCk7CiAJLyogQWRkIG1vcmUgYXMgcmVxdWlyZWQgLi4uICov
CiAKIAlyZXR1cm4gMDsKLS0gCjIuMjMuMAoKX19fX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX18KSW50ZWwtZ2Z4IG1haWxpbmcgbGlzdApJbnRlbC1nZnhAbGlzdHMu
ZnJlZWRlc2t0b3Aub3JnCmh0dHBzOi8vbGlzdHMuZnJlZWRlc2t0b3Aub3JnL21haWxtYW4vbGlz
dGluZm8vaW50ZWwtZ2Z4

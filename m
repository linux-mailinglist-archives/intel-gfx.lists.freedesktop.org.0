Return-Path: <intel-gfx-bounces@lists.freedesktop.org>
X-Original-To: lists+intel-gfx@lfdr.de
Delivered-To: lists+intel-gfx@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [IPv6:2610:10:20:722:a800:ff:fe36:1795])
	by mail.lfdr.de (Postfix) with ESMTPS id 3079563EB7
	for <lists+intel-gfx@lfdr.de>; Wed, 10 Jul 2019 02:55:06 +0200 (CEST)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 6994E89850;
	Wed, 10 Jul 2019 00:55:04 +0000 (UTC)
X-Original-To: intel-gfx@lists.freedesktop.org
Delivered-To: intel-gfx@lists.freedesktop.org
Received: from mga03.intel.com (mga03.intel.com [134.134.136.65])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 42C628991E
 for <intel-gfx@lists.freedesktop.org>; Wed, 10 Jul 2019 00:55:02 +0000 (UTC)
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from orsmga005.jf.intel.com ([10.7.209.41])
 by orsmga103.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384;
 09 Jul 2019 17:55:02 -0700
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.63,472,1557212400"; d="scan'208";a="340915068"
Received: from dceraolo-linux.fm.intel.com ([10.1.27.145])
 by orsmga005.jf.intel.com with ESMTP; 09 Jul 2019 17:55:01 -0700
From: Daniele Ceraolo Spurio <daniele.ceraolospurio@intel.com>
To: intel-gfx@lists.freedesktop.org
Date: Tue,  9 Jul 2019 17:54:28 -0700
Message-Id: <20190710005437.3496-4-daniele.ceraolospurio@intel.com>
X-Mailer: git-send-email 2.20.1
In-Reply-To: <20190710005437.3496-1-daniele.ceraolospurio@intel.com>
References: <20190710005437.3496-1-daniele.ceraolospurio@intel.com>
MIME-Version: 1.0
Subject: [Intel-gfx] [PATCH 03/12] drm/i915/uc: replace uc init/fini misc
X-BeenThere: intel-gfx@lists.freedesktop.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: Intel graphics driver community testing & development
 <intel-gfx.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/intel-gfx>
List-Post: <mailto:intel-gfx@lists.freedesktop.org>
List-Help: <mailto:intel-gfx-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: intel-gfx-bounces@lists.freedesktop.org
Sender: "Intel-gfx" <intel-gfx-bounces@lists.freedesktop.org>

VGhlICJtaXNjIiB0ZXJtaW5vbG9neSBkb2Vzbid0IGNsZWFybHkgZXhwbGFpbiB3aGF0IHdlIGlu
dGVuZCB0byBjb3ZlcgppbiB0aGlzIHBoYXNlLiBUaGUgb25seSB0aGluZyB3ZSBkbyBpbiB0aGVy
ZSBhcGFydCBmcm9tIEZXIGZldGNoIGlzCmluaXRpYWxpemluZyB0aGUgbG9nIHdvcmtxdWV1ZSwg
d2l0aCB0aGUgbGF0dGVyIGJlaW5nIHJlcXVpcmVkIG9ubHkgaW4KdGhlIHZlcnkgcmFyZSBjYXNl
IHdoZXJlIHdlIGVuYWJsZSB0aGUgbG9nIHJlbGF5LiBUbyBjbGVhbiB0aGlzIHVwLCB3ZQpjYW4g
bW92ZSB0aGUgd3EgaW5pdCB0byB3aGVuIHRoZSByZWxheSBpcyBlbmFibGVkIGFuZCByZW5hbWUg
dGhlCmZ1bmN0aW9uIHRvIGNsYXJpZnkgdGhhdCB0aGV5IG9ubHkgZmV0Y2gvcmVsZWFzZSB0aGUg
YmxvYnMuCgp2Mjogb25seSBjcmVhdGUgbG9nIHdxIHdoZW4gbmVlZGVkIChNaWNoYWwpLCByZXdv
cmQgY29tbWl0IG1zZwphY2NvcmRpbmdseQoKU2lnbmVkLW9mZi1ieTogRGFuaWVsZSBDZXJhb2xv
IFNwdXJpbyA8ZGFuaWVsZS5jZXJhb2xvc3B1cmlvQGludGVsLmNvbT4KQ2M6IE1pY2hhbCBXYWpk
ZWN6a28gPG1pY2hhbC53YWpkZWN6a29AaW50ZWwuY29tPgotLS0KIGRyaXZlcnMvZ3B1L2RybS9p
OTE1L2k5MTVfZ2VtLmMgICAgICB8IDEyICsrKy0tLS0KIGRyaXZlcnMvZ3B1L2RybS9pOTE1L2lu
dGVsX2d1Yy5jICAgICB8IDUzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KIGRyaXZlcnMv
Z3B1L2RybS9pOTE1L2ludGVsX2d1Yy5oICAgICB8ICAyIC0tCiBkcml2ZXJzL2dwdS9kcm0vaTkx
NS9pbnRlbF9ndWNfbG9nLmMgfCAzMSArKysrKysrKysrKysrKystCiBkcml2ZXJzL2dwdS9kcm0v
aTkxNS9pbnRlbF9odWMuYyAgICAgfCAgOCAtLS0tLQogZHJpdmVycy9ncHUvZHJtL2k5MTUvaW50
ZWxfaHVjLmggICAgIHwgIDYgLS0tLQogZHJpdmVycy9ncHUvZHJtL2k5MTUvaW50ZWxfdWMuYyAg
ICAgIHwgMzQgKysrKystLS0tLS0tLS0tLS0tCiBkcml2ZXJzL2dwdS9kcm0vaTkxNS9pbnRlbF91
Yy5oICAgICAgfCAgNCArLS0KIDggZmlsZXMgY2hhbmdlZCwgNDUgaW5zZXJ0aW9ucygrKSwgMTA1
IGRlbGV0aW9ucygtKQoKZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2k5MTVfZ2Vt
LmMgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9pOTE1X2dlbS5jCmluZGV4IDdhZGU0MmI4ZWM5OS4u
ZTZlOGU0ZDVlYmIxIDEwMDY0NAotLS0gYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9pOTE1X2dlbS5j
CisrKyBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2k5MTVfZ2VtLmMKQEAgLTE0MzMsMTMgKzE0MzMs
MTEgQEAgaW50IGk5MTVfZ2VtX2luaXQoc3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmRldl9wcml2
KQogCWlmIChyZXQpCiAJCXJldHVybiByZXQ7CiAKLQlyZXQgPSBpbnRlbF91Y19pbml0X21pc2Mo
ZGV2X3ByaXYpOwotCWlmIChyZXQpCi0JCXJldHVybiByZXQ7CisJaW50ZWxfdWNfZmV0Y2hfZmly
bXdhcmVzKGRldl9wcml2KTsKIAogCXJldCA9IGludGVsX3dvcGNtX2luaXQoJmRldl9wcml2LT53
b3BjbSk7CiAJaWYgKHJldCkKLQkJZ290byBlcnJfdWNfbWlzYzsKKwkJZ290byBlcnJfdWNfZnc7
CiAKIAkvKiBUaGlzIGlzIGp1c3QgYSBzZWN1cml0eSBibGFua2V0IHRvIHBsYWNhdGUgZHJhZ29u
cy4KIAkgKiBPbiBzb21lIHN5c3RlbXMsIHdlIHZlcnkgc3BvcmFkaWNhbGx5IG9ic2VydmUgdGhh
dCB0aGUgZmlyc3QgVExCcwpAQCAtMTU2NSw4ICsxNTYzLDggQEAgaW50IGk5MTVfZ2VtX2luaXQo
c3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmRldl9wcml2KQogCWludGVsX3VuY29yZV9mb3JjZXdh
a2VfcHV0KCZkZXZfcHJpdi0+dW5jb3JlLCBGT1JDRVdBS0VfQUxMKTsKIAltdXRleF91bmxvY2so
JmRldl9wcml2LT5kcm0uc3RydWN0X211dGV4KTsKIAotZXJyX3VjX21pc2M6Ci0JaW50ZWxfdWNf
ZmluaV9taXNjKGRldl9wcml2KTsKK2Vycl91Y19mdzoKKwlpbnRlbF91Y19jbGVhbnVwX2Zpcm13
YXJlcyhkZXZfcHJpdik7CiAKIAlpZiAocmV0ICE9IC1FSU8pIHsKIAkJaTkxNV9nZW1fY2xlYW51
cF91c2VycHRyKGRldl9wcml2KTsKQEAgLTE2MzIsNyArMTYzMCw3IEBAIHZvaWQgaTkxNV9nZW1f
ZmluaShzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0ZSAqZGV2X3ByaXYpCiAKIAlpbnRlbF9jbGVhbnVw
X2d0X3Bvd2Vyc2F2ZShkZXZfcHJpdik7CiAKLQlpbnRlbF91Y19maW5pX21pc2MoZGV2X3ByaXYp
OworCWludGVsX3VjX2NsZWFudXBfZmlybXdhcmVzKGRldl9wcml2KTsKIAlpOTE1X2dlbV9jbGVh
bnVwX3VzZXJwdHIoZGV2X3ByaXYpOwogCWludGVsX3RpbWVsaW5lc19maW5pKGRldl9wcml2KTsK
IApkaWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvaW50ZWxfZ3VjLmMgYi9kcml2ZXJz
L2dwdS9kcm0vaTkxNS9pbnRlbF9ndWMuYwppbmRleCA1MDFiNzRmNDQzNzQuLjQxNzNiMzViZjEw
NCAxMDA2NDQKLS0tIGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvaW50ZWxfZ3VjLmMKKysrIGIvZHJp
dmVycy9ncHUvZHJtL2k5MTUvaW50ZWxfZ3VjLmMKQEAgLTk5LDU5ICs5OSw2IEBAIHZvaWQgaW50
ZWxfZ3VjX2luaXRfZWFybHkoc3RydWN0IGludGVsX2d1YyAqZ3VjKQogCX0KIH0KIAotc3RhdGlj
IGludCBndWNfaW5pdF93cShzdHJ1Y3QgaW50ZWxfZ3VjICpndWMpCi17Ci0JLyoKLQkgKiBHdUMg
bG9nIGJ1ZmZlciBmbHVzaCB3b3JrIGl0ZW0gaGFzIHRvIGRvIHJlZ2lzdGVyIGFjY2VzcyB0bwot
CSAqIHNlbmQgdGhlIGFjayB0byBHdUMgYW5kIHRoaXMgd29yayBpdGVtLCBpZiBub3Qgc3luY2Vk
IGJlZm9yZQotCSAqIHN1c3BlbmQsIGNhbiBwb3RlbnRpYWxseSBnZXQgZXhlY3V0ZWQgYWZ0ZXIg
dGhlIEdGWCBkZXZpY2UgaXMKLQkgKiBzdXNwZW5kZWQuCi0JICogQnkgbWFya2luZyB0aGUgV1Eg
YXMgZnJlZXphYmxlLCB3ZSBkb24ndCBoYXZlIHRvIGJvdGhlciBhYm91dAotCSAqIGZsdXNoaW5n
IG9mIHRoaXMgd29yayBpdGVtIGZyb20gdGhlIHN1c3BlbmQgaG9va3MsIHRoZSBwZW5kaW5nCi0J
ICogd29yayBpdGVtIGlmIGFueSB3aWxsIGJlIGVpdGhlciBleGVjdXRlZCBiZWZvcmUgdGhlIHN1
c3BlbmQKLQkgKiBvciBzY2hlZHVsZWQgbGF0ZXIgb24gcmVzdW1lLiBUaGlzIHdheSB0aGUgaGFu
ZGxpbmcgb2Ygd29yawotCSAqIGl0ZW0gY2FuIGJlIGtlcHQgc2FtZSBiZXR3ZWVuIHN5c3RlbSBz
dXNwZW5kICYgcnBtIHN1c3BlbmQuCi0JICovCi0JZ3VjLT5sb2cucmVsYXkuZmx1c2hfd3EgPQot
CQlhbGxvY19vcmRlcmVkX3dvcmtxdWV1ZSgiaTkxNS1ndWNfbG9nIiwKLQkJCQkJV1FfSElHSFBS
SSB8IFdRX0ZSRUVaQUJMRSk7Ci0JaWYgKCFndWMtPmxvZy5yZWxheS5mbHVzaF93cSkgewotCQlE
Uk1fRVJST1IoIkNvdWxkbid0IGFsbG9jYXRlIHdvcmtxdWV1ZSBmb3IgR3VDIGxvZ1xuIik7Ci0J
CXJldHVybiAtRU5PTUVNOwotCX0KLQotCXJldHVybiAwOwotfQotCi1zdGF0aWMgdm9pZCBndWNf
ZmluaV93cShzdHJ1Y3QgaW50ZWxfZ3VjICpndWMpCi17Ci0Jc3RydWN0IHdvcmtxdWV1ZV9zdHJ1
Y3QgKndxOwotCi0Jd3EgPSBmZXRjaF9hbmRfemVybygmZ3VjLT5sb2cucmVsYXkuZmx1c2hfd3Ep
OwotCWlmICh3cSkKLQkJZGVzdHJveV93b3JrcXVldWUod3EpOwotfQotCi1pbnQgaW50ZWxfZ3Vj
X2luaXRfbWlzYyhzdHJ1Y3QgaW50ZWxfZ3VjICpndWMpCi17Ci0Jc3RydWN0IGRybV9pOTE1X3By
aXZhdGUgKmk5MTUgPSBndWNfdG9faTkxNShndWMpOwotCWludCByZXQ7Ci0KLQlyZXQgPSBndWNf
aW5pdF93cShndWMpOwotCWlmIChyZXQpCi0JCXJldHVybiByZXQ7Ci0KLQlpbnRlbF91Y19md19m
ZXRjaChpOTE1LCAmZ3VjLT5mdyk7Ci0KLQlyZXR1cm4gMDsKLX0KLQotdm9pZCBpbnRlbF9ndWNf
ZmluaV9taXNjKHN0cnVjdCBpbnRlbF9ndWMgKmd1YykKLXsKLQlpbnRlbF91Y19md19jbGVhbnVw
X2ZldGNoKCZndWMtPmZ3KTsKLQlndWNfZmluaV93cShndWMpOwotfQotCiBzdGF0aWMgaW50IGd1
Y19zaGFyZWRfZGF0YV9jcmVhdGUoc3RydWN0IGludGVsX2d1YyAqZ3VjKQogewogCXN0cnVjdCBp
OTE1X3ZtYSAqdm1hOwpkaWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvaW50ZWxfZ3Vj
LmggYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9pbnRlbF9ndWMuaAppbmRleCBlYzEwMzhjMWY1MGUu
LjkxZDUzOGZkNWY2NSAxMDA2NDQKLS0tIGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvaW50ZWxfZ3Vj
LmgKKysrIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvaW50ZWxfZ3VjLmgKQEAgLTE1MywxMCArMTUz
LDggQEAgc3RhdGljIGlubGluZSB1MzIgaW50ZWxfZ3VjX2dndHRfb2Zmc2V0KHN0cnVjdCBpbnRl
bF9ndWMgKmd1YywKIHZvaWQgaW50ZWxfZ3VjX2luaXRfZWFybHkoc3RydWN0IGludGVsX2d1YyAq
Z3VjKTsKIHZvaWQgaW50ZWxfZ3VjX2luaXRfc2VuZF9yZWdzKHN0cnVjdCBpbnRlbF9ndWMgKmd1
Yyk7CiB2b2lkIGludGVsX2d1Y19pbml0X3BhcmFtcyhzdHJ1Y3QgaW50ZWxfZ3VjICpndWMpOwot
aW50IGludGVsX2d1Y19pbml0X21pc2Moc3RydWN0IGludGVsX2d1YyAqZ3VjKTsKIGludCBpbnRl
bF9ndWNfaW5pdChzdHJ1Y3QgaW50ZWxfZ3VjICpndWMpOwogdm9pZCBpbnRlbF9ndWNfZmluaShz
dHJ1Y3QgaW50ZWxfZ3VjICpndWMpOwotdm9pZCBpbnRlbF9ndWNfZmluaV9taXNjKHN0cnVjdCBp
bnRlbF9ndWMgKmd1Yyk7CiBpbnQgaW50ZWxfZ3VjX3NlbmRfbm9wKHN0cnVjdCBpbnRlbF9ndWMg
Kmd1YywgY29uc3QgdTMyICphY3Rpb24sIHUzMiBsZW4sCiAJCSAgICAgICB1MzIgKnJlc3BvbnNl
X2J1ZiwgdTMyIHJlc3BvbnNlX2J1Zl9zaXplKTsKIGludCBpbnRlbF9ndWNfc2VuZF9tbWlvKHN0
cnVjdCBpbnRlbF9ndWMgKmd1YywgY29uc3QgdTMyICphY3Rpb24sIHUzMiBsZW4sCmRpZmYgLS1n
aXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9pbnRlbF9ndWNfbG9nLmMgYi9kcml2ZXJzL2dwdS9k
cm0vaTkxNS9pbnRlbF9ndWNfbG9nLmMKaW5kZXggMDZjMDlhYzUyYzc0Li4wMzU1NzI0ZWU5OTcg
MTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2ludGVsX2d1Y19sb2cuYworKysgYi9k
cml2ZXJzL2dwdS9kcm0vaTkxNS9pbnRlbF9ndWNfbG9nLmMKQEAgLTc5LDYgKzc5LDkgQEAgc3Rh
dGljIGlubGluZSBzdHJ1Y3QgaW50ZWxfZ3VjICpsb2dfdG9fZ3VjKHN0cnVjdCBpbnRlbF9ndWNf
bG9nICpsb2cpCiAKIHN0YXRpYyB2b2lkIGd1Y19sb2dfZW5hYmxlX2ZsdXNoX2V2ZW50cyhzdHJ1
Y3QgaW50ZWxfZ3VjX2xvZyAqbG9nKQogeworCS8qIHJlbGF5IHdxIG11c3QgYmUgcmVhZHkgZm9y
IHVzIHRvIHF1ZXVlIGZsdXNoIGV2ZW50cyAqLworCUdFTV9CVUdfT04oIWxvZy0+cmVsYXkuZmx1
c2hfd3EpOworCiAJaW50ZWxfZ3VjX2VuYWJsZV9tc2cobG9nX3RvX2d1Yyhsb2cpLAogCQkJICAg
ICBJTlRFTF9HVUNfUkVDVl9NU0dfRkxVU0hfTE9HX0JVRkZFUiB8CiAJCQkgICAgIElOVEVMX0dV
Q19SRUNWX01TR19DUkFTSF9EVU1QX1BPU1RFRCk7CkBAIC04Niw2ICs4OSw5IEBAIHN0YXRpYyB2
b2lkIGd1Y19sb2dfZW5hYmxlX2ZsdXNoX2V2ZW50cyhzdHJ1Y3QgaW50ZWxfZ3VjX2xvZyAqbG9n
KQogCiBzdGF0aWMgdm9pZCBndWNfbG9nX2Rpc2FibGVfZmx1c2hfZXZlbnRzKHN0cnVjdCBpbnRl
bF9ndWNfbG9nICpsb2cpCiB7CisJLyogcmVsYXkgd3EgbXVzdCBzdGljayBhcm91bmQgdW50aWwg
d2UgZGlzYWJsZSBmbHVzaCBldmVudHMgKi8KKwlHRU1fQlVHX09OKCFsb2ctPnJlbGF5LmZsdXNo
X3dxKTsKKwogCWludGVsX2d1Y19kaXNhYmxlX21zZyhsb2dfdG9fZ3VjKGxvZyksCiAJCQkgICAg
ICBJTlRFTF9HVUNfUkVDVl9NU0dfRkxVU0hfTE9HX0JVRkZFUiB8CiAJCQkgICAgICBJTlRFTF9H
VUNfUkVDVl9NU0dfQ1JBU0hfRFVNUF9QT1NURUQpOwpAQCAtNTYxLDkgKzU2NywyOSBAQCBpbnQg
aW50ZWxfZ3VjX2xvZ19yZWxheV9vcGVuKHN0cnVjdCBpbnRlbF9ndWNfbG9nICpsb2cpCiAJCWdv
dG8gb3V0X3VubG9jazsKIAl9CiAKKwkvKgorCSAqIEd1QyBsb2cgYnVmZmVyIGZsdXNoIHdvcmsg
aXRlbSBoYXMgdG8gZG8gcmVnaXN0ZXIgYWNjZXNzIHRvCisJICogc2VuZCB0aGUgYWNrIHRvIEd1
QyBhbmQgdGhpcyB3b3JrIGl0ZW0sIGlmIG5vdCBzeW5jZWQgYmVmb3JlCisJICogc3VzcGVuZCwg
Y2FuIHBvdGVudGlhbGx5IGdldCBleGVjdXRlZCBhZnRlciB0aGUgR0ZYIGRldmljZSBpcworCSAq
IHN1c3BlbmRlZC4KKwkgKiBCeSBtYXJraW5nIHRoZSBXUSBhcyBmcmVlemFibGUsIHdlIGRvbid0
IGhhdmUgdG8gYm90aGVyIGFib3V0CisJICogZmx1c2hpbmcgb2YgdGhpcyB3b3JrIGl0ZW0gZnJv
bSB0aGUgc3VzcGVuZCBob29rcywgdGhlIHBlbmRpbmcKKwkgKiB3b3JrIGl0ZW0gaWYgYW55IHdp
bGwgYmUgZWl0aGVyIGV4ZWN1dGVkIGJlZm9yZSB0aGUgc3VzcGVuZAorCSAqIG9yIHNjaGVkdWxl
ZCBsYXRlciBvbiByZXN1bWUuIFRoaXMgd2F5IHRoZSBoYW5kbGluZyBvZiB3b3JrCisJICogaXRl
bSBjYW4gYmUga2VwdCBzYW1lIGJldHdlZW4gc3lzdGVtIHN1c3BlbmQgJiBycG0gc3VzcGVuZC4K
KwkgKi8KKwlsb2ctPnJlbGF5LmZsdXNoX3dxID0KKwkJYWxsb2Nfb3JkZXJlZF93b3JrcXVldWUo
Imk5MTUtZ3VjX2xvZyIsCisJCQkJCVdRX0hJR0hQUkkgfCBXUV9GUkVFWkFCTEUpOworCWlmICgh
bG9nLT5yZWxheS5mbHVzaF93cSkgeworCQlEUk1fRVJST1IoIkNvdWxkbid0IGFsbG9jYXRlIHdv
cmtxdWV1ZSBmb3IgR3VDIGxvZ1xuIik7CisJCXJldCA9IC1FTk9NRU07CisJCWdvdG8gb3V0X3Vu
bG9jazsKKwl9CisKIAlyZXQgPSBndWNfbG9nX3JlbGF5X2NyZWF0ZShsb2cpOwogCWlmIChyZXQp
Ci0JCWdvdG8gb3V0X3VubG9jazsKKwkJZ290byBvdXRfd3E7CiAKIAlyZXQgPSBndWNfbG9nX21h
cChsb2cpOwogCWlmIChyZXQpCkBAIC01ODQsNiArNjEwLDggQEAgaW50IGludGVsX2d1Y19sb2df
cmVsYXlfb3BlbihzdHJ1Y3QgaW50ZWxfZ3VjX2xvZyAqbG9nKQogCiBvdXRfcmVsYXk6CiAJZ3Vj
X2xvZ19yZWxheV9kZXN0cm95KGxvZyk7CitvdXRfd3E6CisJZGVzdHJveV93b3JrcXVldWUoZmV0
Y2hfYW5kX3plcm8oJmxvZy0+cmVsYXkuZmx1c2hfd3EpKTsKIG91dF91bmxvY2s6CiAJbXV0ZXhf
dW5sb2NrKCZsb2ctPnJlbGF5LmxvY2spOwogCkBAIC02MjMsNiArNjUxLDcgQEAgdm9pZCBpbnRl
bF9ndWNfbG9nX3JlbGF5X2Nsb3NlKHN0cnVjdCBpbnRlbF9ndWNfbG9nICpsb2cpCiAJR0VNX0JV
R19PTighaW50ZWxfZ3VjX2xvZ19yZWxheV9lbmFibGVkKGxvZykpOwogCWd1Y19sb2dfdW5tYXAo
bG9nKTsKIAlndWNfbG9nX3JlbGF5X2Rlc3Ryb3kobG9nKTsKKwlkZXN0cm95X3dvcmtxdWV1ZShm
ZXRjaF9hbmRfemVybygmbG9nLT5yZWxheS5mbHVzaF93cSkpOwogCW11dGV4X3VubG9jaygmbG9n
LT5yZWxheS5sb2NrKTsKIH0KIApkaWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvaW50
ZWxfaHVjLmMgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9pbnRlbF9odWMuYwppbmRleCBmYjZmNjkz
ZDNjYWMuLjJhNDFlZTg5YTE2ZCAxMDA2NDQKLS0tIGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvaW50
ZWxfaHVjLmMKKysrIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvaW50ZWxfaHVjLmMKQEAgLTQ0LDE0
ICs0NCw2IEBAIHZvaWQgaW50ZWxfaHVjX2luaXRfZWFybHkoc3RydWN0IGludGVsX2h1YyAqaHVj
KQogCX0KIH0KIAotaW50IGludGVsX2h1Y19pbml0X21pc2Moc3RydWN0IGludGVsX2h1YyAqaHVj
KQotewotCXN0cnVjdCBkcm1faTkxNV9wcml2YXRlICppOTE1ID0gaHVjX3RvX2k5MTUoaHVjKTsK
LQotCWludGVsX3VjX2Z3X2ZldGNoKGk5MTUsICZodWMtPmZ3KTsKLQlyZXR1cm4gMDsKLX0KLQog
c3RhdGljIGludCBpbnRlbF9odWNfcnNhX2RhdGFfY3JlYXRlKHN0cnVjdCBpbnRlbF9odWMgKmh1
YykKIHsKIAlzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0ZSAqaTkxNSA9IGh1Y190b19pOTE1KGh1Yyk7
CmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9pbnRlbF9odWMuaCBiL2RyaXZlcnMv
Z3B1L2RybS9pOTE1L2ludGVsX2h1Yy5oCmluZGV4IDJhNmM5NGU3OWYxNy4uOWZhM2Q0NjI5ZjJl
IDEwMDY0NAotLS0gYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9pbnRlbF9odWMuaAorKysgYi9kcml2
ZXJzL2dwdS9kcm0vaTkxNS9pbnRlbF9odWMuaApAQCAtNDUsMTcgKzQ1LDExIEBAIHN0cnVjdCBp
bnRlbF9odWMgewogfTsKIAogdm9pZCBpbnRlbF9odWNfaW5pdF9lYXJseShzdHJ1Y3QgaW50ZWxf
aHVjICpodWMpOwotaW50IGludGVsX2h1Y19pbml0X21pc2Moc3RydWN0IGludGVsX2h1YyAqaHVj
KTsKIGludCBpbnRlbF9odWNfaW5pdChzdHJ1Y3QgaW50ZWxfaHVjICpodWMpOwogdm9pZCBpbnRl
bF9odWNfZmluaShzdHJ1Y3QgaW50ZWxfaHVjICpodWMpOwogaW50IGludGVsX2h1Y19hdXRoKHN0
cnVjdCBpbnRlbF9odWMgKmh1Yyk7CiBpbnQgaW50ZWxfaHVjX2NoZWNrX3N0YXR1cyhzdHJ1Y3Qg
aW50ZWxfaHVjICpodWMpOwogCi1zdGF0aWMgaW5saW5lIHZvaWQgaW50ZWxfaHVjX2ZpbmlfbWlz
YyhzdHJ1Y3QgaW50ZWxfaHVjICpodWMpCi17Ci0JaW50ZWxfdWNfZndfY2xlYW51cF9mZXRjaCgm
aHVjLT5mdyk7Ci19Ci0KIHN0YXRpYyBpbmxpbmUgaW50IGludGVsX2h1Y19zYW5pdGl6ZShzdHJ1
Y3QgaW50ZWxfaHVjICpodWMpCiB7CiAJaW50ZWxfdWNfZndfc2FuaXRpemUoJmh1Yy0+ZncpOwpk
aWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvaW50ZWxfdWMuYyBiL2RyaXZlcnMvZ3B1
L2RybS9pOTE1L2ludGVsX3VjLmMKaW5kZXggZmRmMDBmMWViYjU3Li43ODliMGJjY2ZiNDEgMTAw
NjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2ludGVsX3VjLmMKKysrIGIvZHJpdmVycy9n
cHUvZHJtL2k5MTUvaW50ZWxfdWMuYwpAQCAtMzQ1LDQ0ICszNDUsMjYgQEAgc3RhdGljIHZvaWQg
Z3VjX2Rpc2FibGVfY29tbXVuaWNhdGlvbihzdHJ1Y3QgaW50ZWxfZ3VjICpndWMpCiAJRFJNX0lO
Rk8oIkd1QyBjb21tdW5pY2F0aW9uIGRpc2FibGVkXG4iKTsKIH0KIAotaW50IGludGVsX3VjX2lu
aXRfbWlzYyhzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0ZSAqaTkxNSkKK3ZvaWQgaW50ZWxfdWNfZmV0
Y2hfZmlybXdhcmVzKHN0cnVjdCBkcm1faTkxNV9wcml2YXRlICppOTE1KQogewotCXN0cnVjdCBp
bnRlbF9ndWMgKmd1YyA9ICZpOTE1LT5ndWM7Ci0Jc3RydWN0IGludGVsX2h1YyAqaHVjID0gJmk5
MTUtPmh1YzsKLQlpbnQgcmV0OwotCiAJaWYgKCFVU0VTX0dVQyhpOTE1KSkKLQkJcmV0dXJuIDA7
Ci0KLQlyZXQgPSBpbnRlbF9ndWNfaW5pdF9taXNjKGd1Yyk7Ci0JaWYgKHJldCkKLQkJcmV0dXJu
IHJldDsKLQotCWlmIChVU0VTX0hVQyhpOTE1KSkgewotCQlyZXQgPSBpbnRlbF9odWNfaW5pdF9t
aXNjKGh1Yyk7Ci0JCWlmIChyZXQpCi0JCQlnb3RvIGVycl9ndWM7Ci0JfQorCQlyZXR1cm47CiAK
LQlyZXR1cm4gMDsKKwlpbnRlbF91Y19md19mZXRjaChpOTE1LCAmaTkxNS0+Z3VjLmZ3KTsKIAot
ZXJyX2d1YzoKLQlpbnRlbF9ndWNfZmluaV9taXNjKGd1Yyk7Ci0JcmV0dXJuIHJldDsKKwlpZiAo
VVNFU19IVUMoaTkxNSkpCisJCWludGVsX3VjX2Z3X2ZldGNoKGk5MTUsICZpOTE1LT5odWMuZncp
OwogfQogCi12b2lkIGludGVsX3VjX2ZpbmlfbWlzYyhzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0ZSAq
aTkxNSkKK3ZvaWQgaW50ZWxfdWNfY2xlYW51cF9maXJtd2FyZXMoc3RydWN0IGRybV9pOTE1X3By
aXZhdGUgKmk5MTUpCiB7Ci0Jc3RydWN0IGludGVsX2d1YyAqZ3VjID0gJmk5MTUtPmd1YzsKLQlz
dHJ1Y3QgaW50ZWxfaHVjICpodWMgPSAmaTkxNS0+aHVjOwotCiAJaWYgKCFVU0VTX0dVQyhpOTE1
KSkKIAkJcmV0dXJuOwogCiAJaWYgKFVTRVNfSFVDKGk5MTUpKQotCQlpbnRlbF9odWNfZmluaV9t
aXNjKGh1Yyk7CisJCWludGVsX3VjX2Z3X2NsZWFudXBfZmV0Y2goJmk5MTUtPmh1Yy5mdyk7CiAK
LQlpbnRlbF9ndWNfZmluaV9taXNjKGd1Yyk7CisJaW50ZWxfdWNfZndfY2xlYW51cF9mZXRjaCgm
aTkxNS0+Z3VjLmZ3KTsKIH0KIAogaW50IGludGVsX3VjX2luaXQoc3RydWN0IGRybV9pOTE1X3By
aXZhdGUgKmk5MTUpCmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9pbnRlbF91Yy5o
IGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvaW50ZWxfdWMuaAppbmRleCAzZWEwNmM4N2RmY2QuLjVh
MTM4M2UxOTJkZCAxMDA2NDQKLS0tIGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvaW50ZWxfdWMuaAor
KysgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9pbnRlbF91Yy5oCkBAIC0zMSw4ICszMSw4IEBACiB2
b2lkIGludGVsX3VjX2luaXRfZWFybHkoc3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmRldl9wcml2
KTsKIHZvaWQgaW50ZWxfdWNfY2xlYW51cF9lYXJseShzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0ZSAq
ZGV2X3ByaXYpOwogdm9pZCBpbnRlbF91Y19pbml0X21taW8oc3RydWN0IGRybV9pOTE1X3ByaXZh
dGUgKmRldl9wcml2KTsKLWludCBpbnRlbF91Y19pbml0X21pc2Moc3RydWN0IGRybV9pOTE1X3By
aXZhdGUgKmRldl9wcml2KTsKLXZvaWQgaW50ZWxfdWNfZmluaV9taXNjKHN0cnVjdCBkcm1faTkx
NV9wcml2YXRlICpkZXZfcHJpdik7Cit2b2lkIGludGVsX3VjX2ZldGNoX2Zpcm13YXJlcyhzdHJ1
Y3QgZHJtX2k5MTVfcHJpdmF0ZSAqZGV2X3ByaXYpOwordm9pZCBpbnRlbF91Y19jbGVhbnVwX2Zp
cm13YXJlcyhzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0ZSAqZGV2X3ByaXYpOwogdm9pZCBpbnRlbF91
Y19zYW5pdGl6ZShzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0ZSAqZGV2X3ByaXYpOwogaW50IGludGVs
X3VjX2luaXRfaHcoc3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmRldl9wcml2KTsKIHZvaWQgaW50
ZWxfdWNfZmluaV9odyhzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0ZSAqZGV2X3ByaXYpOwotLSAKMi4y
MC4xCgpfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpJbnRl
bC1nZnggbWFpbGluZyBsaXN0CkludGVsLWdmeEBsaXN0cy5mcmVlZGVza3RvcC5vcmcKaHR0cHM6
Ly9saXN0cy5mcmVlZGVza3RvcC5vcmcvbWFpbG1hbi9saXN0aW5mby9pbnRlbC1nZng=

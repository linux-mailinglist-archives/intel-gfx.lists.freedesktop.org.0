Return-Path: <intel-gfx-bounces@lists.freedesktop.org>
X-Original-To: lists+intel-gfx@lfdr.de
Delivered-To: lists+intel-gfx@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [131.252.210.177])
	by mail.lfdr.de (Postfix) with ESMTPS id 309B81C6F40
	for <lists+intel-gfx@lfdr.de>; Wed,  6 May 2020 13:23:59 +0200 (CEST)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 6DC066E865;
	Wed,  6 May 2020 11:23:57 +0000 (UTC)
X-Original-To: intel-gfx@lists.freedesktop.org
Delivered-To: intel-gfx@lists.freedesktop.org
Received: from mga01.intel.com (mga01.intel.com [192.55.52.88])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 4FD066E85F
 for <intel-gfx@lists.freedesktop.org>; Wed,  6 May 2020 11:23:56 +0000 (UTC)
IronPort-SDR: 7pyBNy97z1cUQ43VPKdpBNlmIyY1qMrRZzmhRO1VNReTZ9OFjG9eWZKpVokJDrCwEXpX1UG8I2
 Eh1Tbd+nZl5g==
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from orsmga001.jf.intel.com ([10.7.209.18])
 by fmsmga101.fm.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384;
 06 May 2020 04:23:55 -0700
IronPort-SDR: I9zzfk7UOztrszJi5cOo49LxyHolHySAWQO/6ihN2IiWg19ZavDYF2+QPMr2XKKTd2DM66x1Pu
 xZnBVEDsMFVA==
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.73,358,1583222400"; d="scan'208";a="338975458"
Received: from stinkbox.fi.intel.com (HELO stinkbox) ([10.237.72.174])
 by orsmga001.jf.intel.com with SMTP; 06 May 2020 04:23:53 -0700
Received: by stinkbox (sSMTP sendmail emulation);
 Wed, 06 May 2020 14:23:53 +0300
From: Ville Syrjala <ville.syrjala@linux.intel.com>
To: intel-gfx@lists.freedesktop.org
Date: Wed,  6 May 2020 14:23:28 +0300
Message-Id: <20200506112328.16562-10-ville.syrjala@linux.intel.com>
X-Mailer: git-send-email 2.24.1
In-Reply-To: <20200506112328.16562-1-ville.syrjala@linux.intel.com>
References: <20200506112328.16562-1-ville.syrjala@linux.intel.com>
MIME-Version: 1.0
Subject: [Intel-gfx] [PATCH 9/9] drm/i915: Eliminate
 intel_dp.regs.dp_tp_{ctl, status}
X-BeenThere: intel-gfx@lists.freedesktop.org
X-Mailman-Version: 2.1.29
Precedence: list
List-Id: Intel graphics driver community testing & development
 <intel-gfx.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/intel-gfx>
List-Post: <mailto:intel-gfx@lists.freedesktop.org>
List-Help: <mailto:intel-gfx-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: intel-gfx-bounces@lists.freedesktop.org
Sender: "Intel-gfx" <intel-gfx-bounces@lists.freedesktop.org>

RnJvbTogVmlsbGUgU3lyasOkbMOkIDx2aWxsZS5zeXJqYWxhQGxpbnV4LmludGVsLmNvbT4KCk5v
dyB0aGF0IHdlJ3ZlIHBsdW1iZWQgdGhlIGNydGMgc3RhdGUgYWxsIHRoZSB3YXkgZG93biB3ZSBj
YW4KZWxpbWluYXRlIHRoZSBEUF9UUF97Q1RMLFNUQVRVU30gcmVnaXN0ZXIgb2Zmc2V0cyBmcm9t
IGludGVsX2RwLAphbmQgaW5zdGVhZCB3ZSBkZXJpdmUgdGhlbSBkaXJlY3RseSBmcm9tIHRoZSBj
cnRjIHN0YXRlLgoKQW5kIHRodXMgd2UgY2FuIGdldCByaWQgb2YgdGhlIG5hc3R5IGhhY2sgaW4g
aW50ZWxfZGRpX2dldF9jb25maWcoKQp3aGljaCBtdXRhdGVzIGludGVsX2RwIGR1cmluZyB0aGUg
cmVhZG91dC4KClNpZ25lZC1vZmYtYnk6IFZpbGxlIFN5cmrDpGzDpCA8dmlsbGUuc3lyamFsYUBs
aW51eC5pbnRlbC5jb20+Ci0tLQogZHJpdmVycy9ncHUvZHJtL2k5MTUvZGlzcGxheS9pbnRlbF9k
ZGkuYyAgICAgIHwgMTAzICsrKysrKysrKystLS0tLS0tLQogZHJpdmVycy9ncHUvZHJtL2k5MTUv
ZGlzcGxheS9pbnRlbF9kZGkuaCAgICAgIHwgICA1ICsKIC4uLi9kcm0vaTkxNS9kaXNwbGF5L2lu
dGVsX2Rpc3BsYXlfdHlwZXMuaCAgICB8ICAgOCAtLQogZHJpdmVycy9ncHUvZHJtL2k5MTUvZGlz
cGxheS9pbnRlbF9kcC5jICAgICAgIHwgICAyIC0KIGRyaXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3Bs
YXkvaW50ZWxfZHBfbXN0LmMgICB8ICAxMCArLQogNSBmaWxlcyBjaGFuZ2VkLCA2OCBpbnNlcnRp
b25zKCspLCA2MCBkZWxldGlvbnMoLSkKCmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkx
NS9kaXNwbGF5L2ludGVsX2RkaS5jIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvZGlzcGxheS9pbnRl
bF9kZGkuYwppbmRleCA3N2QyMDIxZDBiY2QuLjhlN2NhZjc4ZWEwOSAxMDA2NDQKLS0tIGEvZHJp
dmVycy9ncHUvZHJtL2k5MTUvZGlzcGxheS9pbnRlbF9kZGkuYworKysgYi9kcml2ZXJzL2dwdS9k
cm0vaTkxNS9kaXNwbGF5L2ludGVsX2RkaS5jCkBAIC0zMDI5LDYgKzMwMjksMzcgQEAgaWNsX3By
b2dyYW1fbWdfZHBfbW9kZShzdHJ1Y3QgaW50ZWxfZGlnaXRhbF9wb3J0ICppbnRlbF9kaWdfcG9y
dCwKIAl9CiB9CiAKK3N0YXRpYyBlbnVtIHRyYW5zY29kZXIKK3RnbF9kcF90cF90cmFuc2NvZGVy
KGNvbnN0IHN0cnVjdCBpbnRlbF9jcnRjX3N0YXRlICpjcnRjX3N0YXRlKQoreworCWlmIChpbnRl
bF9jcnRjX2hhc190eXBlKGNydGNfc3RhdGUsIElOVEVMX09VVFBVVF9EUF9NU1QpKQorCQlyZXR1
cm4gY3J0Y19zdGF0ZS0+bXN0X21hc3Rlcl90cmFuc2NvZGVyOworCWVsc2UKKwkJcmV0dXJuIGNy
dGNfc3RhdGUtPmNwdV90cmFuc2NvZGVyOworfQorCitpOTE1X3JlZ190IGRwX3RwX2N0bF9yZWco
c3RydWN0IGludGVsX2VuY29kZXIgKmVuY29kZXIsCisJCQkgY29uc3Qgc3RydWN0IGludGVsX2Ny
dGNfc3RhdGUgKmNydGNfc3RhdGUpCit7CisJc3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmRldl9w
cml2ID0gdG9faTkxNShlbmNvZGVyLT5iYXNlLmRldik7CisKKwlpZiAoSU5URUxfR0VOKGRldl9w
cml2KSA+PSAxMikKKwkJcmV0dXJuIFRHTF9EUF9UUF9DVEwodGdsX2RwX3RwX3RyYW5zY29kZXIo
Y3J0Y19zdGF0ZSkpOworCWVsc2UKKwkJcmV0dXJuIERQX1RQX0NUTChlbmNvZGVyLT5wb3J0KTsK
K30KKworaTkxNV9yZWdfdCBkcF90cF9zdGF0dXNfcmVnKHN0cnVjdCBpbnRlbF9lbmNvZGVyICpl
bmNvZGVyLAorCQkJICAgIGNvbnN0IHN0cnVjdCBpbnRlbF9jcnRjX3N0YXRlICpjcnRjX3N0YXRl
KQoreworCXN0cnVjdCBkcm1faTkxNV9wcml2YXRlICpkZXZfcHJpdiA9IHRvX2k5MTUoZW5jb2Rl
ci0+YmFzZS5kZXYpOworCisJaWYgKElOVEVMX0dFTihkZXZfcHJpdikgPj0gMTIpCisJCXJldHVy
biBUR0xfRFBfVFBfU1RBVFVTKHRnbF9kcF90cF90cmFuc2NvZGVyKGNydGNfc3RhdGUpKTsKKwll
bHNlCisJCXJldHVybiBEUF9UUF9TVEFUVVMoZW5jb2Rlci0+cG9ydCk7Cit9CisKIHN0YXRpYyB2
b2lkIGludGVsX2RwX3Npbmtfc2V0X2ZlY19yZWFkeShzdHJ1Y3QgaW50ZWxfZHAgKmludGVsX2Rw
LAogCQkJCQljb25zdCBzdHJ1Y3QgaW50ZWxfY3J0Y19zdGF0ZSAqY3J0Y19zdGF0ZSkKIHsKQEAg
LTMwNTMsMTEgKzMwODQsMTIgQEAgc3RhdGljIHZvaWQgaW50ZWxfZGRpX2VuYWJsZV9mZWMoc3Ry
dWN0IGludGVsX2VuY29kZXIgKmVuY29kZXIsCiAJCXJldHVybjsKIAogCWludGVsX2RwID0gZW5j
X3RvX2ludGVsX2RwKGVuY29kZXIpOwotCXZhbCA9IGludGVsX2RlX3JlYWQoZGV2X3ByaXYsIGlu
dGVsX2RwLT5yZWdzLmRwX3RwX2N0bCk7CisJdmFsID0gaW50ZWxfZGVfcmVhZChkZXZfcHJpdiwg
ZHBfdHBfY3RsX3JlZyhlbmNvZGVyLCBjcnRjX3N0YXRlKSk7CiAJdmFsIHw9IERQX1RQX0NUTF9G
RUNfRU5BQkxFOwotCWludGVsX2RlX3dyaXRlKGRldl9wcml2LCBpbnRlbF9kcC0+cmVncy5kcF90
cF9jdGwsIHZhbCk7CisJaW50ZWxfZGVfd3JpdGUoZGV2X3ByaXYsIGRwX3RwX2N0bF9yZWcoZW5j
b2RlciwgY3J0Y19zdGF0ZSksIHZhbCk7CiAKLQlpZiAoaW50ZWxfZGVfd2FpdF9mb3Jfc2V0KGRl
dl9wcml2LCBpbnRlbF9kcC0+cmVncy5kcF90cF9zdGF0dXMsCisJaWYgKGludGVsX2RlX3dhaXRf
Zm9yX3NldChkZXZfcHJpdiwKKwkJCQkgIGRwX3RwX3N0YXR1c19yZWcoZW5jb2RlciwgY3J0Y19z
dGF0ZSksCiAJCQkJICBEUF9UUF9TVEFUVVNfRkVDX0VOQUJMRV9MSVZFLCAxKSkKIAkJZHJtX2Vy
cigmZGV2X3ByaXYtPmRybSwKIAkJCSJUaW1lZCBvdXQgd2FpdGluZyBmb3IgRkVDIEVuYWJsZSBT
dGF0dXNcbiIpOwpAQCAtMzA3NCwxMCArMzEwNiwxMCBAQCBzdGF0aWMgdm9pZCBpbnRlbF9kZGlf
ZGlzYWJsZV9mZWNfc3RhdGUoc3RydWN0IGludGVsX2VuY29kZXIgKmVuY29kZXIsCiAJCXJldHVy
bjsKIAogCWludGVsX2RwID0gZW5jX3RvX2ludGVsX2RwKGVuY29kZXIpOwotCXZhbCA9IGludGVs
X2RlX3JlYWQoZGV2X3ByaXYsIGludGVsX2RwLT5yZWdzLmRwX3RwX2N0bCk7CisJdmFsID0gaW50
ZWxfZGVfcmVhZChkZXZfcHJpdiwgZHBfdHBfY3RsX3JlZyhlbmNvZGVyLCBjcnRjX3N0YXRlKSk7
CiAJdmFsICY9IH5EUF9UUF9DVExfRkVDX0VOQUJMRTsKLQlpbnRlbF9kZV93cml0ZShkZXZfcHJp
diwgaW50ZWxfZHAtPnJlZ3MuZHBfdHBfY3RsLCB2YWwpOwotCWludGVsX2RlX3Bvc3RpbmdfcmVh
ZChkZXZfcHJpdiwgaW50ZWxfZHAtPnJlZ3MuZHBfdHBfY3RsKTsKKwlpbnRlbF9kZV93cml0ZShk
ZXZfcHJpdiwgZHBfdHBfY3RsX3JlZyhlbmNvZGVyLCBjcnRjX3N0YXRlKSwgdmFsKTsKKwlpbnRl
bF9kZV9wb3N0aW5nX3JlYWQoZGV2X3ByaXYsIGRwX3RwX2N0bF9yZWcoZW5jb2RlciwgY3J0Y19z
dGF0ZSkpOwogfQogCiBzdGF0aWMgdm9pZCB0Z2xfZGRpX3ByZV9lbmFibGVfZHAoc3RydWN0IGlu
dGVsX2F0b21pY19zdGF0ZSAqc3RhdGUsCkBAIC0zMDkxLDE1ICszMTIzLDExIEBAIHN0YXRpYyB2
b2lkIHRnbF9kZGlfcHJlX2VuYWJsZV9kcChzdHJ1Y3QgaW50ZWxfYXRvbWljX3N0YXRlICpzdGF0
ZSwKIAlzdHJ1Y3QgaW50ZWxfZGlnaXRhbF9wb3J0ICpkaWdfcG9ydCA9IGVuY190b19kaWdfcG9y
dChlbmNvZGVyKTsKIAlib29sIGlzX21zdCA9IGludGVsX2NydGNfaGFzX3R5cGUoY3J0Y19zdGF0
ZSwgSU5URUxfT1VUUFVUX0RQX01TVCk7CiAJaW50IGxldmVsID0gaW50ZWxfZGRpX2RwX2xldmVs
KGludGVsX2RwKTsKLQllbnVtIHRyYW5zY29kZXIgdHJhbnNjb2RlciA9IGNydGNfc3RhdGUtPmNw
dV90cmFuc2NvZGVyOwogCiAJaW50ZWxfZHBfc2V0X2xpbmtfcGFyYW1zKGludGVsX2RwLAogCQkJ
CSBjcnRjX3N0YXRlLT5wb3J0X2Nsb2NrLAogCQkJCSBjcnRjX3N0YXRlLT5sYW5lX2NvdW50KTsK
IAotCWludGVsX2RwLT5yZWdzLmRwX3RwX2N0bCA9IFRHTF9EUF9UUF9DVEwodHJhbnNjb2Rlcik7
Ci0JaW50ZWxfZHAtPnJlZ3MuZHBfdHBfc3RhdHVzID0gVEdMX0RQX1RQX1NUQVRVUyh0cmFuc2Nv
ZGVyKTsKLQogCS8qCiAJICogMS4gRW5hYmxlIFBvd2VyIFdlbGxzCiAJICoKQEAgLTM0MTgsMTIg
KzM0NDYsMTAgQEAgc3RhdGljIHZvaWQgaW50ZWxfZGlzYWJsZV9kZGlfYnVmKHN0cnVjdCBpbnRl
bF9lbmNvZGVyICplbmNvZGVyLAogCX0KIAogCWlmIChpbnRlbF9jcnRjX2hhc19kcF9lbmNvZGVy
KGNydGNfc3RhdGUpKSB7Ci0JCXN0cnVjdCBpbnRlbF9kcCAqaW50ZWxfZHAgPSBlbmNfdG9faW50
ZWxfZHAoZW5jb2Rlcik7Ci0KLQkJdmFsID0gaW50ZWxfZGVfcmVhZChkZXZfcHJpdiwgaW50ZWxf
ZHAtPnJlZ3MuZHBfdHBfY3RsKTsKKwkJdmFsID0gaW50ZWxfZGVfcmVhZChkZXZfcHJpdiwgZHBf
dHBfY3RsX3JlZyhlbmNvZGVyLCBjcnRjX3N0YXRlKSk7CiAJCXZhbCAmPSB+KERQX1RQX0NUTF9F
TkFCTEUgfCBEUF9UUF9DVExfTElOS19UUkFJTl9NQVNLKTsKIAkJdmFsIHw9IERQX1RQX0NUTF9M
SU5LX1RSQUlOX1BBVDE7Ci0JCWludGVsX2RlX3dyaXRlKGRldl9wcml2LCBpbnRlbF9kcC0+cmVn
cy5kcF90cF9jdGwsIHZhbCk7CisJCWludGVsX2RlX3dyaXRlKGRldl9wcml2LCBkcF90cF9jdGxf
cmVnKGVuY29kZXIsIGNydGNfc3RhdGUpLCB2YWwpOwogCX0KIAogCS8qIERpc2FibGUgRkVDIGlu
IERQIFNpbmsgKi8KQEAgLTM5MTUsMTQgKzM5NDEsMTMgQEAgaW50ZWxfZGRpX3ByZV9wbGxfZW5h
YmxlKHN0cnVjdCBpbnRlbF9hdG9taWNfc3RhdGUgKnN0YXRlLAogc3RhdGljIHZvaWQgaW50ZWxf
ZGRpX3ByZXBhcmVfbGlua19yZXRyYWluKHN0cnVjdCBpbnRlbF9kcCAqaW50ZWxfZHAsCiAJCQkJ
CSAgIGNvbnN0IHN0cnVjdCBpbnRlbF9jcnRjX3N0YXRlICpjcnRjX3N0YXRlKQogewotCXN0cnVj
dCBpbnRlbF9kaWdpdGFsX3BvcnQgKmludGVsX2RpZ19wb3J0ID0gZHBfdG9fZGlnX3BvcnQoaW50
ZWxfZHApOwotCXN0cnVjdCBkcm1faTkxNV9wcml2YXRlICpkZXZfcHJpdiA9Ci0JCXRvX2k5MTUo
aW50ZWxfZGlnX3BvcnQtPmJhc2UuYmFzZS5kZXYpOwotCWVudW0gcG9ydCBwb3J0ID0gaW50ZWxf
ZGlnX3BvcnQtPmJhc2UucG9ydDsKKwlzdHJ1Y3QgaW50ZWxfZW5jb2RlciAqZW5jb2RlciA9ICZk
cF90b19kaWdfcG9ydChpbnRlbF9kcCktPmJhc2U7CisJc3RydWN0IGRybV9pOTE1X3ByaXZhdGUg
KmRldl9wcml2ID0gdG9faTkxNShlbmNvZGVyLT5iYXNlLmRldik7CisJZW51bSBwb3J0IHBvcnQg
PSBlbmNvZGVyLT5wb3J0OwogCXUzMiBkcF90cF9jdGwsIGRkaV9idWZfY3RsOwogCWJvb2wgd2Fp
dCA9IGZhbHNlOwogCi0JZHBfdHBfY3RsID0gaW50ZWxfZGVfcmVhZChkZXZfcHJpdiwgaW50ZWxf
ZHAtPnJlZ3MuZHBfdHBfY3RsKTsKKwlkcF90cF9jdGwgPSBpbnRlbF9kZV9yZWFkKGRldl9wcml2
LCBkcF90cF9jdGxfcmVnKGVuY29kZXIsIGNydGNfc3RhdGUpKTsKIAogCWlmIChkcF90cF9jdGwg
JiBEUF9UUF9DVExfRU5BQkxFKSB7CiAJCWRkaV9idWZfY3RsID0gaW50ZWxfZGVfcmVhZChkZXZf
cHJpdiwgRERJX0JVRl9DVEwocG9ydCkpOwpAQCAtMzkzNCw4ICszOTU5LDggQEAgc3RhdGljIHZv
aWQgaW50ZWxfZGRpX3ByZXBhcmVfbGlua19yZXRyYWluKHN0cnVjdCBpbnRlbF9kcCAqaW50ZWxf
ZHAsCiAKIAkJZHBfdHBfY3RsICY9IH4oRFBfVFBfQ1RMX0VOQUJMRSB8IERQX1RQX0NUTF9MSU5L
X1RSQUlOX01BU0spOwogCQlkcF90cF9jdGwgfD0gRFBfVFBfQ1RMX0xJTktfVFJBSU5fUEFUMTsK
LQkJaW50ZWxfZGVfd3JpdGUoZGV2X3ByaXYsIGludGVsX2RwLT5yZWdzLmRwX3RwX2N0bCwgZHBf
dHBfY3RsKTsKLQkJaW50ZWxfZGVfcG9zdGluZ19yZWFkKGRldl9wcml2LCBpbnRlbF9kcC0+cmVn
cy5kcF90cF9jdGwpOworCQlpbnRlbF9kZV93cml0ZShkZXZfcHJpdiwgZHBfdHBfY3RsX3JlZyhl
bmNvZGVyLCBjcnRjX3N0YXRlKSwgZHBfdHBfY3RsKTsKKwkJaW50ZWxfZGVfcG9zdGluZ19yZWFk
KGRldl9wcml2LCBkcF90cF9jdGxfcmVnKGVuY29kZXIsIGNydGNfc3RhdGUpKTsKIAogCQlpZiAo
d2FpdCkKIAkJCWludGVsX3dhaXRfZGRpX2J1Zl9pZGxlKGRldl9wcml2LCBwb3J0KTsKQEAgLTM5
NTAsOCArMzk3NSw4IEBAIHN0YXRpYyB2b2lkIGludGVsX2RkaV9wcmVwYXJlX2xpbmtfcmV0cmFp
bihzdHJ1Y3QgaW50ZWxfZHAgKmludGVsX2RwLAogCQlpZiAoZHJtX2RwX2VuaGFuY2VkX2ZyYW1l
X2NhcChpbnRlbF9kcC0+ZHBjZCkpCiAJCQlkcF90cF9jdGwgfD0gRFBfVFBfQ1RMX0VOSEFOQ0VE
X0ZSQU1FX0VOQUJMRTsKIAl9Ci0JaW50ZWxfZGVfd3JpdGUoZGV2X3ByaXYsIGludGVsX2RwLT5y
ZWdzLmRwX3RwX2N0bCwgZHBfdHBfY3RsKTsKLQlpbnRlbF9kZV9wb3N0aW5nX3JlYWQoZGV2X3By
aXYsIGludGVsX2RwLT5yZWdzLmRwX3RwX2N0bCk7CisJaW50ZWxfZGVfd3JpdGUoZGV2X3ByaXYs
IGRwX3RwX2N0bF9yZWcoZW5jb2RlciwgY3J0Y19zdGF0ZSksIGRwX3RwX2N0bCk7CisJaW50ZWxf
ZGVfcG9zdGluZ19yZWFkKGRldl9wcml2LCBkcF90cF9jdGxfcmVnKGVuY29kZXIsIGNydGNfc3Rh
dGUpKTsKIAogCWludGVsX2RwLT5EUCB8PSBERElfQlVGX0NUTF9FTkFCTEU7CiAJaW50ZWxfZGVf
d3JpdGUoZGV2X3ByaXYsIERESV9CVUZfQ1RMKHBvcnQpLCBpbnRlbF9kcC0+RFApOwpAQCAtMzk2
NCwxMiArMzk4OSwxMyBAQCBzdGF0aWMgdm9pZCBpbnRlbF9kZGlfc2V0X2xpbmtfdHJhaW4oc3Ry
dWN0IGludGVsX2RwICppbnRlbF9kcCwKIAkJCQkgICAgIGNvbnN0IHN0cnVjdCBpbnRlbF9jcnRj
X3N0YXRlICpjcnRjX3N0YXRlLAogCQkJCSAgICAgdTggZHBfdHJhaW5fcGF0KQogewotCXN0cnVj
dCBkcm1faTkxNV9wcml2YXRlICpkZXZfcHJpdiA9IGRwX3RvX2k5MTUoaW50ZWxfZHApOworCXN0
cnVjdCBpbnRlbF9lbmNvZGVyICplbmNvZGVyID0gJmRwX3RvX2RpZ19wb3J0KGludGVsX2RwKS0+
YmFzZTsKKwlzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0ZSAqZGV2X3ByaXYgPSB0b19pOTE1KGVuY29k
ZXItPmJhc2UuZGV2KTsKIAl1OCB0cmFpbl9wYXRfbWFzayA9IGRybV9kcF90cmFpbmluZ19wYXR0
ZXJuX21hc2soaW50ZWxfZHAtPmRwY2QpOwogCWVudW0gcG9ydCBwb3J0ID0gZHBfdG9fZGlnX3Bv
cnQoaW50ZWxfZHApLT5iYXNlLnBvcnQ7CiAJdTMyIHRlbXA7CiAKLQl0ZW1wID0gaW50ZWxfZGVf
cmVhZChkZXZfcHJpdiwgaW50ZWxfZHAtPnJlZ3MuZHBfdHBfY3RsKTsKKwl0ZW1wID0gaW50ZWxf
ZGVfcmVhZChkZXZfcHJpdiwgZHBfdHBfY3RsX3JlZyhlbmNvZGVyLCBjcnRjX3N0YXRlKSk7CiAK
IAlpZiAoZHBfdHJhaW5fcGF0ICYgRFBfTElOS19TQ1JBTUJMSU5HX0RJU0FCTEUpCiAJCXRlbXAg
fD0gRFBfVFBfQ1RMX1NDUkFNQkxFX0RJU0FCTEU7CkBAIC0zOTk1LDcgKzQwMjEsNyBAQCBzdGF0
aWMgdm9pZCBpbnRlbF9kZGlfc2V0X2xpbmtfdHJhaW4oc3RydWN0IGludGVsX2RwICppbnRlbF9k
cCwKIAkJYnJlYWs7CiAJfQogCi0JaW50ZWxfZGVfd3JpdGUoZGV2X3ByaXYsIGludGVsX2RwLT5y
ZWdzLmRwX3RwX2N0bCwgdGVtcCk7CisJaW50ZWxfZGVfd3JpdGUoZGV2X3ByaXYsIGRwX3RwX2N0
bF9yZWcoZW5jb2RlciwgY3J0Y19zdGF0ZSksIHRlbXApOwogCiAJaW50ZWxfZGVfd3JpdGUoZGV2
X3ByaXYsIERESV9CVUZfQ1RMKHBvcnQpLCBpbnRlbF9kcC0+RFApOwogCWludGVsX2RlX3Bvc3Rp
bmdfcmVhZChkZXZfcHJpdiwgRERJX0JVRl9DVEwocG9ydCkpOwpAQCAtNDAwOSwxMCArNDAzNSwx
MCBAQCBzdGF0aWMgdm9pZCBpbnRlbF9kZGlfc2V0X2lkbGVfbGlua190cmFpbihzdHJ1Y3QgaW50
ZWxfZHAgKmludGVsX2RwLAogCWVudW0gcG9ydCBwb3J0ID0gZW5jb2Rlci0+cG9ydDsKIAl1MzIg
dmFsOwogCi0JdmFsID0gaW50ZWxfZGVfcmVhZChkZXZfcHJpdiwgaW50ZWxfZHAtPnJlZ3MuZHBf
dHBfY3RsKTsKKwl2YWwgPSBpbnRlbF9kZV9yZWFkKGRldl9wcml2LCBkcF90cF9jdGxfcmVnKGVu
Y29kZXIsIGNydGNfc3RhdGUpKTsKIAl2YWwgJj0gfkRQX1RQX0NUTF9MSU5LX1RSQUlOX01BU0s7
CiAJdmFsIHw9IERQX1RQX0NUTF9MSU5LX1RSQUlOX0lETEU7Ci0JaW50ZWxfZGVfd3JpdGUoZGV2
X3ByaXYsIGludGVsX2RwLT5yZWdzLmRwX3RwX2N0bCwgdmFsKTsKKwlpbnRlbF9kZV93cml0ZShk
ZXZfcHJpdiwgZHBfdHBfY3RsX3JlZyhlbmNvZGVyLCBjcnRjX3N0YXRlKSwgdmFsKTsKIAogCS8q
CiAJICogVW50aWwgVEdMIG9uIFBPUlRfQSB3ZSBjYW4gaGF2ZSBvbmx5IGVEUCBpbiBTU1QgbW9k
ZS4gVGhlcmUgdGhlIG9ubHkKQEAgLTQwMjQsNyArNDA1MCw4IEBAIHN0YXRpYyB2b2lkIGludGVs
X2RkaV9zZXRfaWRsZV9saW5rX3RyYWluKHN0cnVjdCBpbnRlbF9kcCAqaW50ZWxfZHAsCiAJaWYg
KHBvcnQgPT0gUE9SVF9BICYmIElOVEVMX0dFTihkZXZfcHJpdikgPCAxMikKIAkJcmV0dXJuOwog
Ci0JaWYgKGludGVsX2RlX3dhaXRfZm9yX3NldChkZXZfcHJpdiwgaW50ZWxfZHAtPnJlZ3MuZHBf
dHBfc3RhdHVzLAorCWlmIChpbnRlbF9kZV93YWl0X2Zvcl9zZXQoZGV2X3ByaXYsCisJCQkJICBk
cF90cF9zdGF0dXNfcmVnKGVuY29kZXIsIGNydGNfc3RhdGUpLAogCQkJCSAgRFBfVFBfU1RBVFVT
X0lETEVfRE9ORSwgMSkpCiAJCWRybV9lcnIoJmRldl9wcml2LT5kcm0sCiAJCQkiVGltZWQgb3V0
IHdhaXRpbmcgZm9yIERQIGlkbGUgcGF0dGVybnNcbiIpOwpAQCAtNDEyMiwxOCArNDE0OSwxMiBA
QCB2b2lkIGludGVsX2RkaV9nZXRfY29uZmlnKHN0cnVjdCBpbnRlbF9lbmNvZGVyICplbmNvZGVy
LAogCXN0cnVjdCBkcm1faTkxNV9wcml2YXRlICpkZXZfcHJpdiA9IHRvX2k5MTUoZW5jb2Rlci0+
YmFzZS5kZXYpOwogCXN0cnVjdCBpbnRlbF9jcnRjICppbnRlbF9jcnRjID0gdG9faW50ZWxfY3J0
YyhwaXBlX2NvbmZpZy0+dWFwaS5jcnRjKTsKIAllbnVtIHRyYW5zY29kZXIgY3B1X3RyYW5zY29k
ZXIgPSBwaXBlX2NvbmZpZy0+Y3B1X3RyYW5zY29kZXI7Ci0Jc3RydWN0IGludGVsX2RwICppbnRl
bF9kcCA9IGVuY190b19pbnRlbF9kcChlbmNvZGVyKTsKIAl1MzIgdGVtcCwgZmxhZ3MgPSAwOwog
CiAJLyogWFhYOiBEU0kgdHJhbnNjb2RlciBwYXJhbm9pYSAqLwogCWlmIChkcm1fV0FSTl9PTigm
ZGV2X3ByaXYtPmRybSwgdHJhbnNjb2Rlcl9pc19kc2koY3B1X3RyYW5zY29kZXIpKSkKIAkJcmV0
dXJuOwogCi0JaWYgKElOVEVMX0dFTihkZXZfcHJpdikgPj0gMTIpIHsKLQkJaW50ZWxfZHAtPnJl
Z3MuZHBfdHBfY3RsID0gVEdMX0RQX1RQX0NUTChjcHVfdHJhbnNjb2Rlcik7Ci0JCWludGVsX2Rw
LT5yZWdzLmRwX3RwX3N0YXR1cyA9IFRHTF9EUF9UUF9TVEFUVVMoY3B1X3RyYW5zY29kZXIpOwot
CX0KLQogCWludGVsX2RzY19nZXRfY29uZmlnKGVuY29kZXIsIHBpcGVfY29uZmlnKTsKIAogCXRl
bXAgPSBpbnRlbF9kZV9yZWFkKGRldl9wcml2LCBUUkFOU19ERElfRlVOQ19DVEwoY3B1X3RyYW5z
Y29kZXIpKTsKQEAgLTQxOTcsMTIgKzQyMTgsNyBAQCB2b2lkIGludGVsX2RkaV9nZXRfY29uZmln
KHN0cnVjdCBpbnRlbF9lbmNvZGVyICplbmNvZGVyLAogCQlpbnRlbF9kcF9nZXRfbV9uKGludGVs
X2NydGMsIHBpcGVfY29uZmlnKTsKIAogCQlpZiAoSU5URUxfR0VOKGRldl9wcml2KSA+PSAxMSkg
ewotCQkJaTkxNV9yZWdfdCBkcF90cF9jdGw7Ci0KLQkJCWlmIChJU19HRU4oZGV2X3ByaXYsIDEx
KSkKLQkJCQlkcF90cF9jdGwgPSBEUF9UUF9DVEwoZW5jb2Rlci0+cG9ydCk7Ci0JCQllbHNlCi0J
CQkJZHBfdHBfY3RsID0gVEdMX0RQX1RQX0NUTChwaXBlX2NvbmZpZy0+Y3B1X3RyYW5zY29kZXIp
OworCQkJaTkxNV9yZWdfdCBkcF90cF9jdGwgPSBkcF90cF9jdGxfcmVnKGVuY29kZXIsIHBpcGVf
Y29uZmlnKTsKIAogCQkJcGlwZV9jb25maWctPmZlY19lbmFibGUgPQogCQkJCWludGVsX2RlX3Jl
YWQoZGV2X3ByaXYsIGRwX3RwX2N0bCkgJiBEUF9UUF9DVExfRkVDX0VOQUJMRTsKQEAgLTQ0OTEs
MTEgKzQ1MDcsNiBAQCBpbnRlbF9kZGlfaW5pdF9kcF9jb25uZWN0b3Ioc3RydWN0IGludGVsX2Rp
Z2l0YWxfcG9ydCAqaW50ZWxfZGlnX3BvcnQpCiAJaW50ZWxfZGlnX3BvcnQtPmRwLnZvbHRhZ2Vf
bWF4ID0gaW50ZWxfZGRpX2RwX3ZvbHRhZ2VfbWF4OwogCWludGVsX2RpZ19wb3J0LT5kcC5wcmVl
bXBoX21heCA9IGludGVsX2RkaV9kcF9wcmVlbXBoX21heDsKIAotCWlmIChJTlRFTF9HRU4oZGV2
X3ByaXYpIDwgMTIpIHsKLQkJaW50ZWxfZGlnX3BvcnQtPmRwLnJlZ3MuZHBfdHBfY3RsID0gRFBf
VFBfQ1RMKHBvcnQpOwotCQlpbnRlbF9kaWdfcG9ydC0+ZHAucmVncy5kcF90cF9zdGF0dXMgPSBE
UF9UUF9TVEFUVVMocG9ydCk7Ci0JfQotCiAJaWYgKCFpbnRlbF9kcF9pbml0X2Nvbm5lY3Rvcihp
bnRlbF9kaWdfcG9ydCwgY29ubmVjdG9yKSkgewogCQlrZnJlZShjb25uZWN0b3IpOwogCQlyZXR1
cm4gTlVMTDsKZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkvaW50ZWxf
ZGRpLmggYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5L2ludGVsX2RkaS5oCmluZGV4IDdh
MDZiYjk0MmQyMS4uYzRjOTA4MTVjNWY2IDEwMDY0NAotLS0gYS9kcml2ZXJzL2dwdS9kcm0vaTkx
NS9kaXNwbGF5L2ludGVsX2RkaS5oCisrKyBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkv
aW50ZWxfZGRpLmgKQEAgLTcsNiArNyw3IEBACiAjZGVmaW5lIF9fSU5URUxfRERJX0hfXwogCiAj
aW5jbHVkZSAiaW50ZWxfZGlzcGxheS5oIgorI2luY2x1ZGUgImk5MTVfcmVnLmgiCiAKIHN0cnVj
dCBkcm1fY29ubmVjdG9yX3N0YXRlOwogc3RydWN0IGRybV9pOTE1X3ByaXZhdGU7CkBAIC0xNyw2
ICsxOCwxMCBAQCBzdHJ1Y3QgaW50ZWxfZHA7CiBzdHJ1Y3QgaW50ZWxfZHBsbF9od19zdGF0ZTsK
IHN0cnVjdCBpbnRlbF9lbmNvZGVyOwogCitpOTE1X3JlZ190IGRwX3RwX2N0bF9yZWcoc3RydWN0
IGludGVsX2VuY29kZXIgKmVuY29kZXIsCisJCQkgY29uc3Qgc3RydWN0IGludGVsX2NydGNfc3Rh
dGUgKmNydGNfc3RhdGUpOworaTkxNV9yZWdfdCBkcF90cF9zdGF0dXNfcmVnKHN0cnVjdCBpbnRl
bF9lbmNvZGVyICplbmNvZGVyLAorCQkJICAgIGNvbnN0IHN0cnVjdCBpbnRlbF9jcnRjX3N0YXRl
ICpjcnRjX3N0YXRlKTsKIHZvaWQgaW50ZWxfZGRpX2ZkaV9wb3N0X2Rpc2FibGUoc3RydWN0IGlu
dGVsX2F0b21pY19zdGF0ZSAqc3RhdGUsCiAJCQkJc3RydWN0IGludGVsX2VuY29kZXIgKmludGVs
X2VuY29kZXIsCiAJCQkJY29uc3Qgc3RydWN0IGludGVsX2NydGNfc3RhdGUgKm9sZF9jcnRjX3N0
YXRlLApkaWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvZGlzcGxheS9pbnRlbF9kaXNw
bGF5X3R5cGVzLmggYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9kaXNwbGF5L2ludGVsX2Rpc3BsYXlf
dHlwZXMuaAppbmRleCBiNzE3NzEzNGFjYzMuLjk3Y2E3NzlmNzQ3MCAxMDA2NDQKLS0tIGEvZHJp
dmVycy9ncHUvZHJtL2k5MTUvZGlzcGxheS9pbnRlbF9kaXNwbGF5X3R5cGVzLmgKKysrIGIvZHJp
dmVycy9ncHUvZHJtL2k5MTUvZGlzcGxheS9pbnRlbF9kaXNwbGF5X3R5cGVzLmgKQEAgLTEzMzgs
MTQgKzEzMzgsNiBAQCBzdHJ1Y3QgaW50ZWxfZHAgewogCWJvb2wgaXNfbXN0OwogCWludCBhY3Rp
dmVfbXN0X2xpbmtzOwogCi0JLyoKLQkgKiBEUF9UUF8qIHJlZ2lzdGVycyBtYXkgYmUgZWl0aGVy
IG9uIHBvcnQgb3IgdHJhbnNjb2RlciByZWdpc3RlciBzcGFjZS4KLQkgKi8KLQlzdHJ1Y3Qgewot
CQlpOTE1X3JlZ190IGRwX3RwX2N0bDsKLQkJaTkxNV9yZWdfdCBkcF90cF9zdGF0dXM7Ci0JfSBy
ZWdzOwotCiAJLyogY29ubmVjdG9yIGRpcmVjdGx5IGF0dGFjaGVkIC0gd29uJ3QgYmUgdXNlIGZv
ciBtb2Rlc2V0IGluIG1zdCB3b3JsZCAqLwogCXN0cnVjdCBpbnRlbF9jb25uZWN0b3IgKmF0dGFj
aGVkX2Nvbm5lY3RvcjsKIApkaWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvZGlzcGxh
eS9pbnRlbF9kcC5jIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvZGlzcGxheS9pbnRlbF9kcC5jCmlu
ZGV4IDU2MmNiNTYwZDZjMC4uYzYxM2ZjMDg3MjAxIDEwMDY0NAotLS0gYS9kcml2ZXJzL2dwdS9k
cm0vaTkxNS9kaXNwbGF5L2ludGVsX2RwLmMKKysrIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvZGlz
cGxheS9pbnRlbF9kcC5jCkBAIC04NTA0LDggKzg1MDQsNiBAQCBib29sIGludGVsX2RwX2luaXQo
c3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmRldl9wcml2LAogCiAJaW50ZWxfZGlnX3BvcnQtPmRw
Lm91dHB1dF9yZWcgPSBvdXRwdXRfcmVnOwogCWludGVsX2RpZ19wb3J0LT5tYXhfbGFuZXMgPSA0
OwotCWludGVsX2RpZ19wb3J0LT5kcC5yZWdzLmRwX3RwX2N0bCA9IERQX1RQX0NUTChwb3J0KTsK
LQlpbnRlbF9kaWdfcG9ydC0+ZHAucmVncy5kcF90cF9zdGF0dXMgPSBEUF9UUF9TVEFUVVMocG9y
dCk7CiAKIAlpbnRlbF9lbmNvZGVyLT50eXBlID0gSU5URUxfT1VUUFVUX0RQOwogCWludGVsX2Vu
Y29kZXItPnBvd2VyX2RvbWFpbiA9IGludGVsX3BvcnRfdG9fcG93ZXJfZG9tYWluKHBvcnQpOwpk
aWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvZGlzcGxheS9pbnRlbF9kcF9tc3QuYyBi
L2RyaXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkvaW50ZWxfZHBfbXN0LmMKaW5kZXggNGQyMzg0
NjUwMzgzLi45YTA1MjAwYTc0ZjQgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2Rp
c3BsYXkvaW50ZWxfZHBfbXN0LmMKKysrIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvZGlzcGxheS9p
bnRlbF9kcF9tc3QuYwpAQCAtMzc2LDcgKzM3Niw4IEBAIHN0YXRpYyB2b2lkIGludGVsX21zdF9w
b3N0X2Rpc2FibGVfZHAoc3RydWN0IGludGVsX2F0b21pY19zdGF0ZSAqc3RhdGUsCiAJCSAgICAg
ICBUUkFOU19ERElfRlVOQ19DVEwob2xkX2NydGNfc3RhdGUtPmNwdV90cmFuc2NvZGVyKSwKIAkJ
ICAgICAgIHZhbCk7CiAKLQlpZiAoaW50ZWxfZGVfd2FpdF9mb3Jfc2V0KGRldl9wcml2LCBpbnRl
bF9kcC0+cmVncy5kcF90cF9zdGF0dXMsCisJaWYgKGludGVsX2RlX3dhaXRfZm9yX3NldChkZXZf
cHJpdiwKKwkJCQkgIGRwX3RwX2N0bF9yZWcoZW5jb2Rlciwgb2xkX2NydGNfc3RhdGUpLAogCQkJ
CSAgRFBfVFBfU1RBVFVTX0FDVF9TRU5ULCAxKSkKIAkJZHJtX2VycigmZGV2X3ByaXYtPmRybSwK
IAkJCSJUaW1lZCBvdXQgd2FpdGluZyBmb3IgQUNUIHNlbnQgd2hlbiBkaXNhYmxpbmdcbiIpOwpA
QCAtNDc2LDggKzQ3Nyw4IEBAIHN0YXRpYyB2b2lkIGludGVsX21zdF9wcmVfZW5hYmxlX2RwKHN0
cnVjdCBpbnRlbF9hdG9taWNfc3RhdGUgKnN0YXRlLAogCQlkcm1fZXJyKCZkZXZfcHJpdi0+ZHJt
LCAiZmFpbGVkIHRvIGFsbG9jYXRlIHZjcGlcbiIpOwogCiAJaW50ZWxfZHAtPmFjdGl2ZV9tc3Rf
bGlua3MrKzsKLQl0ZW1wID0gaW50ZWxfZGVfcmVhZChkZXZfcHJpdiwgaW50ZWxfZHAtPnJlZ3Mu
ZHBfdHBfc3RhdHVzKTsKLQlpbnRlbF9kZV93cml0ZShkZXZfcHJpdiwgaW50ZWxfZHAtPnJlZ3Mu
ZHBfdHBfc3RhdHVzLCB0ZW1wKTsKKwl0ZW1wID0gaW50ZWxfZGVfcmVhZChkZXZfcHJpdiwgZHBf
dHBfc3RhdHVzX3JlZyhlbmNvZGVyLCBwaXBlX2NvbmZpZykpOworCWludGVsX2RlX3dyaXRlKGRl
dl9wcml2LCBkcF90cF9zdGF0dXNfcmVnKGVuY29kZXIsIHBpcGVfY29uZmlnKSwgdGVtcCk7CiAK
IAlyZXQgPSBkcm1fZHBfdXBkYXRlX3BheWxvYWRfcGFydDEoJmludGVsX2RwLT5tc3RfbWdyKTsK
IApAQCAtNTE3LDcgKzUxOCw4IEBAIHN0YXRpYyB2b2lkIGludGVsX21zdF9lbmFibGVfZHAoc3Ry
dWN0IGludGVsX2F0b21pY19zdGF0ZSAqc3RhdGUsCiAJZHJtX2RiZ19rbXMoJmRldl9wcml2LT5k
cm0sICJhY3RpdmUgbGlua3MgJWRcbiIsCiAJCSAgICBpbnRlbF9kcC0+YWN0aXZlX21zdF9saW5r
cyk7CiAKLQlpZiAoaW50ZWxfZGVfd2FpdF9mb3Jfc2V0KGRldl9wcml2LCBpbnRlbF9kcC0+cmVn
cy5kcF90cF9zdGF0dXMsCisJaWYgKGludGVsX2RlX3dhaXRfZm9yX3NldChkZXZfcHJpdiwKKwkJ
CQkgIGRwX3RwX3N0YXR1c19yZWcoZW5jb2RlciwgcGlwZV9jb25maWcpLAogCQkJCSAgRFBfVFBf
U1RBVFVTX0FDVF9TRU5ULCAxKSkKIAkJZHJtX2VycigmZGV2X3ByaXYtPmRybSwgIlRpbWVkIG91
dCB3YWl0aW5nIGZvciBBQ1Qgc2VudFxuIik7CiAKLS0gCjIuMjQuMQoKX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KSW50ZWwtZ2Z4IG1haWxpbmcgbGlzdApJ
bnRlbC1nZnhAbGlzdHMuZnJlZWRlc2t0b3Aub3JnCmh0dHBzOi8vbGlzdHMuZnJlZWRlc2t0b3Au
b3JnL21haWxtYW4vbGlzdGluZm8vaW50ZWwtZ2Z4Cg==

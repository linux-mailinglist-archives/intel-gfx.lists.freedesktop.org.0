Return-Path: <intel-gfx-bounces@lists.freedesktop.org>
X-Original-To: lists+intel-gfx@lfdr.de
Delivered-To: lists+intel-gfx@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [IPv6:2610:10:20:722:a800:ff:fe36:1795])
	by mail.lfdr.de (Postfix) with ESMTPS id B366A21063
	for <lists+intel-gfx@lfdr.de>; Thu, 16 May 2019 23:57:19 +0200 (CEST)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id C1BCF897E4;
	Thu, 16 May 2019 21:57:17 +0000 (UTC)
X-Original-To: intel-gfx@lists.freedesktop.org
Delivered-To: intel-gfx@lists.freedesktop.org
Received: from mga17.intel.com (mga17.intel.com [192.55.52.151])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 45728897E7
 for <intel-gfx@lists.freedesktop.org>; Thu, 16 May 2019 21:57:16 +0000 (UTC)
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from orsmga001.jf.intel.com ([10.7.209.18])
 by fmsmga107.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384;
 16 May 2019 14:57:16 -0700
X-ExtLoop1: 1
Received: from dceraolo-linux.fm.intel.com ([10.1.27.145])
 by orsmga001.jf.intel.com with ESMTP; 16 May 2019 14:57:15 -0700
From: Daniele Ceraolo Spurio <daniele.ceraolospurio@intel.com>
To: intel-gfx@lists.freedesktop.org
Date: Thu, 16 May 2019 14:56:28 -0700
Message-Id: <20190516215634.16675-2-daniele.ceraolospurio@intel.com>
X-Mailer: git-send-email 2.20.1
In-Reply-To: <20190516215634.16675-1-daniele.ceraolospurio@intel.com>
References: <20190516215634.16675-1-daniele.ceraolospurio@intel.com>
MIME-Version: 1.0
Subject: [Intel-gfx] [RFC 1/7] drm/i915: prefer i915_runtime_pm in
 intel_runtime function
X-BeenThere: intel-gfx@lists.freedesktop.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: Intel graphics driver community testing & development
 <intel-gfx.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/intel-gfx>
List-Post: <mailto:intel-gfx@lists.freedesktop.org>
List-Help: <mailto:intel-gfx-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: intel-gfx-bounces@lists.freedesktop.org
Sender: "Intel-gfx" <intel-gfx-bounces@lists.freedesktop.org>

QXMgYSBmaXJzdCBzdGVwIHRvd2FyZHMgdXBkYXRpbmcgdGhlIGNvZGUgdG8gd29yayBvbiB0aGUg
cnVudGltZV9wbQpzdHJ1Y3R1cmUgaW5zdGVhZCBvZiBpOTE1LCByZXdvcmsgYWxsIHRoZSBpbnRl
cm5hbHMgdG8gdXNlIGFuZCBwYXNzCmFyb3VuZCB0aGF0LgoKU2lnbmVkLW9mZi1ieTogRGFuaWVs
ZSBDZXJhb2xvIFNwdXJpbyA8ZGFuaWVsZS5jZXJhb2xvc3B1cmlvQGludGVsLmNvbT4KLS0tCiBk
cml2ZXJzL2dwdS9kcm0vaTkxNS9pOTE1X2Rydi5oICAgICAgICAgfCAgIDIgKwogZHJpdmVycy9n
cHUvZHJtL2k5MTUvaW50ZWxfZHJ2LmggICAgICAgIHwgIDEwICstCiBkcml2ZXJzL2dwdS9kcm0v
aTkxNS9pbnRlbF9ydW50aW1lX3BtLmMgfCAxNTIgKysrKysrKysrKysrLS0tLS0tLS0tLS0tCiAz
IGZpbGVzIGNoYW5nZWQsIDgyIGluc2VydGlvbnMoKyksIDgyIGRlbGV0aW9ucygtKQoKZGlmZiAt
LWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2k5MTVfZHJ2LmggYi9kcml2ZXJzL2dwdS9kcm0v
aTkxNS9pOTE1X2Rydi5oCmluZGV4IDU4MDFmNTQwNzU4OS4uNDc0MDc0YzdmMzk1IDEwMDY0NAot
LS0gYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9pOTE1X2Rydi5oCisrKyBiL2RyaXZlcnMvZ3B1L2Ry
bS9pOTE1L2k5MTVfZHJ2LmgKQEAgLTExNzcsNiArMTE3Nyw4IEBAIHN0cnVjdCBza2xfd21fcGFy
YW1zIHsKICAqLwogc3RydWN0IGk5MTVfcnVudGltZV9wbSB7CiAJYXRvbWljX3Qgd2FrZXJlZl9j
b3VudDsKKwlzdHJ1Y3QgZGV2aWNlICprZGV2OworCWJvb2wgYXZhaWxhYmxlOwogCWJvb2wgc3Vz
cGVuZGVkOwogCWJvb2wgaXJxc19lbmFibGVkOwogCmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9k
cm0vaTkxNS9pbnRlbF9kcnYuaCBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2ludGVsX2Rydi5oCmlu
ZGV4IDMwYjJkNmVkMmQ1My4uYmQwNGYzOTRmYmQzIDEwMDY0NAotLS0gYS9kcml2ZXJzL2dwdS9k
cm0vaTkxNS9pbnRlbF9kcnYuaAorKysgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9pbnRlbF9kcnYu
aApAQCAtMTY2MiwxMyArMTY2MiwxNyBAQCBfX19fYXNzZXJ0X3JwbV93YWtlbG9ja19oZWxkKHN0
cnVjdCBpOTE1X3J1bnRpbWVfcG0gKnJwbSwgaW50IHdha2VyZWZfY291bnQpCiB9CiAKIHN0YXRp
YyBpbmxpbmUgdm9pZAotYXNzZXJ0X3JwbV9yYXdfd2FrZXJlZl9oZWxkKHN0cnVjdCBkcm1faTkx
NV9wcml2YXRlICppOTE1KQorX19hc3NlcnRfcnBtX3Jhd193YWtlcmVmX2hlbGQoc3RydWN0IGk5
MTVfcnVudGltZV9wbSAqcnBtKQogewotCXN0cnVjdCBpOTE1X3J1bnRpbWVfcG0gKnJwbSA9ICZp
OTE1LT5ydW50aW1lX3BtOwotCiAJX19fX2Fzc2VydF9ycG1fcmF3X3dha2VyZWZfaGVsZChycG0s
IGF0b21pY19yZWFkKCZycG0tPndha2VyZWZfY291bnQpKTsKIH0KIAorc3RhdGljIGlubGluZSB2
b2lkCithc3NlcnRfcnBtX3Jhd193YWtlcmVmX2hlbGQoc3RydWN0IGRybV9pOTE1X3ByaXZhdGUg
Kmk5MTUpCit7CisJX19hc3NlcnRfcnBtX3Jhd193YWtlcmVmX2hlbGQoJmk5MTUtPnJ1bnRpbWVf
cG0pOworfQorCiBzdGF0aWMgaW5saW5lIHZvaWQKIF9fYXNzZXJ0X3JwbV93YWtlbG9ja19oZWxk
KHN0cnVjdCBpOTE1X3J1bnRpbWVfcG0gKnJwbSkKIHsKZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1
L2RybS9pOTE1L2ludGVsX3J1bnRpbWVfcG0uYyBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2ludGVs
X3J1bnRpbWVfcG0uYwppbmRleCBiNGFiYWJhYmRmNmMuLjJlMjFmNTYyZGY0NCAxMDA2NDQKLS0t
IGEvZHJpdmVycy9ncHUvZHJtL2k5MTUvaW50ZWxfcnVudGltZV9wbS5jCisrKyBiL2RyaXZlcnMv
Z3B1L2RybS9pOTE1L2ludGVsX3J1bnRpbWVfcG0uYwpAQCAtNjAsMTkgKzYwLDE5IEBACiAgKiBw
cmVzZW50IGZvciBhIGdpdmVuIHBsYXRmb3JtLgogICovCiAKLXN0YXRpYyBpbnRlbF93YWtlcmVm
X3QgaW50ZWxfcnVudGltZV9wbV9nZXRfcmF3KHN0cnVjdCBkcm1faTkxNV9wcml2YXRlICppOTE1
KTsKK3N0YXRpYyBpbnRlbF93YWtlcmVmX3QgaW50ZWxfcnVudGltZV9wbV9nZXRfcmF3KHN0cnVj
dCBpOTE1X3J1bnRpbWVfcG0gKnJwbSk7CiBzdGF0aWMgdm9pZAotX19pbnRlbF9ydW50aW1lX3Bt
X3B1dChzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0ZSAqaTkxNSwgaW50ZWxfd2FrZXJlZl90IHdyZWYs
CitfX2ludGVsX3J1bnRpbWVfcG1fcHV0KHN0cnVjdCBpOTE1X3J1bnRpbWVfcG0gKnJwbSwgaW50
ZWxfd2FrZXJlZl90IHdyZWYsCiAJCSAgICAgICBib29sIHdha2Vsb2NrKTsKIAogI2lmIElTX0VO
QUJMRUQoQ09ORklHX0RSTV9JOTE1X0RFQlVHX1JVTlRJTUVfUE0pCiBzdGF0aWMgdm9pZAotaW50
ZWxfcnVudGltZV9wbV9wdXRfcmF3KHN0cnVjdCBkcm1faTkxNV9wcml2YXRlICppOTE1LCBpbnRl
bF93YWtlcmVmX3Qgd3JlZik7CitpbnRlbF9ydW50aW1lX3BtX3B1dF9yYXcoc3RydWN0IGk5MTVf
cnVudGltZV9wbSAqcnBtLCBpbnRlbF93YWtlcmVmX3Qgd3JlZik7CiAjZWxzZQotc3RhdGljIGlu
bGluZSB2b2lkIGludGVsX3J1bnRpbWVfcG1fcHV0X3JhdyhzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0
ZSAqaTkxNSwKK3N0YXRpYyBpbmxpbmUgdm9pZCBpbnRlbF9ydW50aW1lX3BtX3B1dF9yYXcoc3Ry
dWN0IGk5MTVfcnVudGltZV9wbSAqcnBtLAogCQkJCQkgICAgaW50ZWxfd2FrZXJlZl90IHdyZWYp
CiB7Ci0JX19pbnRlbF9ydW50aW1lX3BtX3B1dChpOTE1LCAtMSwgZmFsc2UpOworCV9faW50ZWxf
cnVudGltZV9wbV9wdXQocnBtLCAtMSwgZmFsc2UpOwogfQogI2VuZGlmCiAKQEAgLTExMiwyMSAr
MTEyLDE4IEBAIHN0YXRpYyB2b2lkIF9fcHJpbnRfZGVwb3Rfc3RhY2soZGVwb3Rfc3RhY2tfaGFu
ZGxlX3Qgc3RhY2ssCiAJc25wcmludF9zdGFja190cmFjZShidWYsIHN6LCAmdHJhY2UsIGluZGVu
dCk7CiB9CiAKLXN0YXRpYyB2b2lkIGluaXRfaW50ZWxfcnVudGltZV9wbV93YWtlcmVmKHN0cnVj
dCBkcm1faTkxNV9wcml2YXRlICppOTE1KQorc3RhdGljIHZvaWQgaW5pdF9pbnRlbF9ydW50aW1l
X3BtX3dha2VyZWYoc3RydWN0IGk5MTVfcnVudGltZV9wbSAqcnBtKQogewotCXN0cnVjdCBpOTE1
X3J1bnRpbWVfcG0gKnJwbSA9ICZpOTE1LT5ydW50aW1lX3BtOwotCiAJc3Bpbl9sb2NrX2luaXQo
JnJwbS0+ZGVidWcubG9jayk7CiB9CiAKIHN0YXRpYyBub2lubGluZSBkZXBvdF9zdGFja19oYW5k
bGVfdAotdHJhY2tfaW50ZWxfcnVudGltZV9wbV93YWtlcmVmKHN0cnVjdCBkcm1faTkxNV9wcml2
YXRlICppOTE1KQordHJhY2tfaW50ZWxfcnVudGltZV9wbV93YWtlcmVmKHN0cnVjdCBpOTE1X3J1
bnRpbWVfcG0gKnJwbSkKIHsKLQlzdHJ1Y3QgaTkxNV9ydW50aW1lX3BtICpycG0gPSAmaTkxNS0+
cnVudGltZV9wbTsKIAlkZXBvdF9zdGFja19oYW5kbGVfdCBzdGFjaywgKnN0YWNrczsKIAl1bnNp
Z25lZCBsb25nIGZsYWdzOwogCi0JaWYgKCFIQVNfUlVOVElNRV9QTShpOTE1KSkKKwlpZiAoIXJw
bS0+YXZhaWxhYmxlKQogCQlyZXR1cm4gLTE7CiAKIAlzdGFjayA9IF9fc2F2ZV9kZXBvdF9zdGFj
aygpOwpAQCAtMTUzLDEwICsxNTAsOSBAQCB0cmFja19pbnRlbF9ydW50aW1lX3BtX3dha2VyZWYo
c3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmk5MTUpCiAJcmV0dXJuIHN0YWNrOwogfQogCi1zdGF0
aWMgdm9pZCB1bnRyYWNrX2ludGVsX3J1bnRpbWVfcG1fd2FrZXJlZihzdHJ1Y3QgZHJtX2k5MTVf
cHJpdmF0ZSAqaTkxNSwKK3N0YXRpYyB2b2lkIHVudHJhY2tfaW50ZWxfcnVudGltZV9wbV93YWtl
cmVmKHN0cnVjdCBpOTE1X3J1bnRpbWVfcG0gKnJwbSwKIAkJCQkJICAgICBkZXBvdF9zdGFja19o
YW5kbGVfdCBzdGFjaykKIHsKLQlzdHJ1Y3QgaTkxNV9ydW50aW1lX3BtICpycG0gPSAmaTkxNS0+
cnVudGltZV9wbTsKIAl1bnNpZ25lZCBsb25nIGZsYWdzLCBuOwogCWJvb2wgZm91bmQgPSBmYWxz
ZTsKIApAQCAtMjc0LDkgKzI3MCw4IEBAIGR1bXBfYW5kX2ZyZWVfd2FrZXJlZl90cmFja2luZyhz
dHJ1Y3QgaW50ZWxfcnVudGltZV9wbV9kZWJ1ZyAqZGVidWcpCiB9CiAKIHN0YXRpYyBub2lubGlu
ZSB2b2lkCi1fX2ludGVsX3dha2VyZWZfZGVjX2FuZF9jaGVja190cmFja2luZyhzdHJ1Y3QgZHJt
X2k5MTVfcHJpdmF0ZSAqaTkxNSkKK19faW50ZWxfd2FrZXJlZl9kZWNfYW5kX2NoZWNrX3RyYWNr
aW5nKHN0cnVjdCBpOTE1X3J1bnRpbWVfcG0gKnJwbSkKIHsKLQlzdHJ1Y3QgaTkxNV9ydW50aW1l
X3BtICpycG0gPSAmaTkxNS0+cnVudGltZV9wbTsKIAlzdHJ1Y3QgaW50ZWxfcnVudGltZV9wbV9k
ZWJ1ZyBkYmcgPSB7fTsKIAl1bnNpZ25lZCBsb25nIGZsYWdzOwogCkBAIC0yOTIsOSArMjg3LDgg
QEAgX19pbnRlbF93YWtlcmVmX2RlY19hbmRfY2hlY2tfdHJhY2tpbmcoc3RydWN0IGRybV9pOTE1
X3ByaXZhdGUgKmk5MTUpCiB9CiAKIHN0YXRpYyBub2lubGluZSB2b2lkCi11bnRyYWNrX2FsbF9p
bnRlbF9ydW50aW1lX3BtX3dha2VyZWZzKHN0cnVjdCBkcm1faTkxNV9wcml2YXRlICppOTE1KQor
dW50cmFja19hbGxfaW50ZWxfcnVudGltZV9wbV93YWtlcmVmcyhzdHJ1Y3QgaTkxNV9ydW50aW1l
X3BtICpycG0pCiB7Ci0Jc3RydWN0IGk5MTVfcnVudGltZV9wbSAqcnBtID0gJmk5MTUtPnJ1bnRp
bWVfcG07CiAJc3RydWN0IGludGVsX3J1bnRpbWVfcG1fZGVidWcgZGJnID0ge307CiAJdW5zaWdu
ZWQgbG9uZyBmbGFnczsKIApAQCAtMzQ1LDYxICszMzksNTcgQEAgdm9pZCBwcmludF9pbnRlbF9y
dW50aW1lX3BtX3dha2VyZWYoc3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmk5MTUsCiAKICNlbHNl
CiAKLXN0YXRpYyB2b2lkIGluaXRfaW50ZWxfcnVudGltZV9wbV93YWtlcmVmKHN0cnVjdCBkcm1f
aTkxNV9wcml2YXRlICppOTE1KQorc3RhdGljIHZvaWQgaW5pdF9pbnRlbF9ydW50aW1lX3BtX3dh
a2VyZWYoc3RydWN0IGk5MTVfcnVudGltZV9wbSAqcnBtKQogewogfQogCiBzdGF0aWMgZGVwb3Rf
c3RhY2tfaGFuZGxlX3QKLXRyYWNrX2ludGVsX3J1bnRpbWVfcG1fd2FrZXJlZihzdHJ1Y3QgZHJt
X2k5MTVfcHJpdmF0ZSAqaTkxNSkKK3RyYWNrX2ludGVsX3J1bnRpbWVfcG1fd2FrZXJlZihzdHJ1
Y3QgaTkxNV9ydW50aW1lX3BtICpycG0pCiB7CiAJcmV0dXJuIC0xOwogfQogCi1zdGF0aWMgdm9p
ZCB1bnRyYWNrX2ludGVsX3J1bnRpbWVfcG1fd2FrZXJlZihzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0
ZSAqaTkxNSwKK3N0YXRpYyB2b2lkIHVudHJhY2tfaW50ZWxfcnVudGltZV9wbV93YWtlcmVmKHN0
cnVjdCBpOTE1X3J1bnRpbWVfcG0gKnJwbSwKIAkJCQkJICAgICBpbnRlbF93YWtlcmVmX3Qgd3Jl
ZikKIHsKIH0KIAogc3RhdGljIHZvaWQKLV9faW50ZWxfd2FrZXJlZl9kZWNfYW5kX2NoZWNrX3Ry
YWNraW5nKHN0cnVjdCBkcm1faTkxNV9wcml2YXRlICppOTE1KQorX19pbnRlbF93YWtlcmVmX2Rl
Y19hbmRfY2hlY2tfdHJhY2tpbmcoc3RydWN0IGk5MTVfcnVudGltZV9wbSAqcnBtKQogewotCWF0
b21pY19kZWMoJmk5MTUtPnJ1bnRpbWVfcG0ud2FrZXJlZl9jb3VudCk7CisJYXRvbWljX2RlYygm
cnBtLT53YWtlcmVmX2NvdW50KTsKIH0KIAogc3RhdGljIHZvaWQKLXVudHJhY2tfYWxsX2ludGVs
X3J1bnRpbWVfcG1fd2FrZXJlZnMoc3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmk5MTUpCit1bnRy
YWNrX2FsbF9pbnRlbF9ydW50aW1lX3BtX3dha2VyZWZzKHN0cnVjdCBpOTE1X3J1bnRpbWVfcG0g
KnJwbSkKIHsKIH0KIAogI2VuZGlmCiAKIHN0YXRpYyB2b2lkCi1pbnRlbF9ydW50aW1lX3BtX2Fj
cXVpcmUoc3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmk5MTUsIGJvb2wgd2FrZWxvY2spCitpbnRl
bF9ydW50aW1lX3BtX2FjcXVpcmUoc3RydWN0IGk5MTVfcnVudGltZV9wbSAqcnBtLCBib29sIHdh
a2Vsb2NrKQogewotCXN0cnVjdCBpOTE1X3J1bnRpbWVfcG0gKnJwbSA9ICZpOTE1LT5ydW50aW1l
X3BtOwotCiAJaWYgKHdha2Vsb2NrKSB7CiAJCWF0b21pY19hZGQoMSArIElOVEVMX1JQTV9XQUtF
TE9DS19CSUFTLCAmcnBtLT53YWtlcmVmX2NvdW50KTsKLQkJYXNzZXJ0X3JwbV93YWtlbG9ja19o
ZWxkKGk5MTUpOworCQlfX2Fzc2VydF9ycG1fd2FrZWxvY2tfaGVsZChycG0pOwogCX0gZWxzZSB7
CiAJCWF0b21pY19pbmMoJnJwbS0+d2FrZXJlZl9jb3VudCk7Ci0JCWFzc2VydF9ycG1fcmF3X3dh
a2VyZWZfaGVsZChpOTE1KTsKKwkJX19hc3NlcnRfcnBtX3Jhd193YWtlcmVmX2hlbGQocnBtKTsK
IAl9CiB9CiAKIHN0YXRpYyB2b2lkCi1pbnRlbF9ydW50aW1lX3BtX3JlbGVhc2Uoc3RydWN0IGRy
bV9pOTE1X3ByaXZhdGUgKmk5MTUsIGludCB3YWtlbG9jaykKK2ludGVsX3J1bnRpbWVfcG1fcmVs
ZWFzZShzdHJ1Y3QgaTkxNV9ydW50aW1lX3BtICpycG0sIGludCB3YWtlbG9jaykKIHsKLQlzdHJ1
Y3QgaTkxNV9ydW50aW1lX3BtICpycG0gPSAmaTkxNS0+cnVudGltZV9wbTsKLQogCWlmICh3YWtl
bG9jaykgewotCQlhc3NlcnRfcnBtX3dha2Vsb2NrX2hlbGQoaTkxNSk7CisJCV9fYXNzZXJ0X3Jw
bV93YWtlbG9ja19oZWxkKHJwbSk7CiAJCWF0b21pY19zdWIoSU5URUxfUlBNX1dBS0VMT0NLX0JJ
QVMsICZycG0tPndha2VyZWZfY291bnQpOwogCX0gZWxzZSB7Ci0JCWFzc2VydF9ycG1fcmF3X3dh
a2VyZWZfaGVsZChpOTE1KTsKKwkJX19hc3NlcnRfcnBtX3Jhd193YWtlcmVmX2hlbGQocnBtKTsK
IAl9CiAKLQlfX2ludGVsX3dha2VyZWZfZGVjX2FuZF9jaGVja190cmFja2luZyhpOTE1KTsKKwlf
X2ludGVsX3dha2VyZWZfZGVjX2FuZF9jaGVja190cmFja2luZyhycG0pOwogfQogCiBib29sIGlu
dGVsX2Rpc3BsYXlfcG93ZXJfd2VsbF9pc19lbmFibGVkKHN0cnVjdCBkcm1faTkxNV9wcml2YXRl
ICpkZXZfcHJpdiwKQEAgLTIwMzAsNyArMjAyMCw3IEBAIGludGVsX2Rpc3BsYXlfcG93ZXJfZ3Jh
Yl9hc3luY19wdXRfcmVmKHN0cnVjdCBkcm1faTkxNV9wcml2YXRlICpkZXZfcHJpdiwKIAkJZ290
byBvdXRfdmVyaWZ5OwogCiAJY2FuY2VsX2RlbGF5ZWRfd29yaygmcG93ZXJfZG9tYWlucy0+YXN5
bmNfcHV0X3dvcmspOwotCWludGVsX3J1bnRpbWVfcG1fcHV0X3JhdyhkZXZfcHJpdiwKKwlpbnRl
bF9ydW50aW1lX3BtX3B1dF9yYXcoJmRldl9wcml2LT5ydW50aW1lX3BtLAogCQkJCSBmZXRjaF9h
bmRfemVybygmcG93ZXJfZG9tYWlucy0+YXN5bmNfcHV0X3dha2VyZWYpKTsKIG91dF92ZXJpZnk6
CiAJdmVyaWZ5X2FzeW5jX3B1dF9kb21haW5zX3N0YXRlKHBvd2VyX2RvbWFpbnMpOwpAQCAtMjIx
OSw3ICsyMjA5LDggQEAgaW50ZWxfZGlzcGxheV9wb3dlcl9wdXRfYXN5bmNfd29yayhzdHJ1Y3Qg
d29ya19zdHJ1Y3QgKndvcmspCiAJCWNvbnRhaW5lcl9vZih3b3JrLCBzdHJ1Y3QgZHJtX2k5MTVf
cHJpdmF0ZSwKIAkJCSAgICAgcG93ZXJfZG9tYWlucy5hc3luY19wdXRfd29yay53b3JrKTsKIAlz
dHJ1Y3QgaTkxNV9wb3dlcl9kb21haW5zICpwb3dlcl9kb21haW5zID0gJmRldl9wcml2LT5wb3dl
cl9kb21haW5zOwotCWludGVsX3dha2VyZWZfdCBuZXdfd29ya193YWtlcmVmID0gaW50ZWxfcnVu
dGltZV9wbV9nZXRfcmF3KGRldl9wcml2KTsKKwlzdHJ1Y3QgaTkxNV9ydW50aW1lX3BtICpycG0g
PSAmZGV2X3ByaXYtPnJ1bnRpbWVfcG07CisJaW50ZWxfd2FrZXJlZl90IG5ld193b3JrX3dha2Vy
ZWYgPSBpbnRlbF9ydW50aW1lX3BtX2dldF9yYXcocnBtKTsKIAlpbnRlbF93YWtlcmVmX3Qgb2xk
X3dvcmtfd2FrZXJlZiA9IDA7CiAKIAltdXRleF9sb2NrKCZwb3dlcl9kb21haW5zLT5sb2NrKTsK
QEAgLTIyNDksOSArMjI0MCw5IEBAIGludGVsX2Rpc3BsYXlfcG93ZXJfcHV0X2FzeW5jX3dvcmso
c3RydWN0IHdvcmtfc3RydWN0ICp3b3JrKQogCW11dGV4X3VubG9jaygmcG93ZXJfZG9tYWlucy0+
bG9jayk7CiAKIAlpZiAob2xkX3dvcmtfd2FrZXJlZikKLQkJaW50ZWxfcnVudGltZV9wbV9wdXRf
cmF3KGRldl9wcml2LCBvbGRfd29ya193YWtlcmVmKTsKKwkJaW50ZWxfcnVudGltZV9wbV9wdXRf
cmF3KHJwbSwgb2xkX3dvcmtfd2FrZXJlZik7CiAJaWYgKG5ld193b3JrX3dha2VyZWYpCi0JCWlu
dGVsX3J1bnRpbWVfcG1fcHV0X3JhdyhkZXZfcHJpdiwgbmV3X3dvcmtfd2FrZXJlZik7CisJCWlu
dGVsX3J1bnRpbWVfcG1fcHV0X3JhdyhycG0sIG5ld193b3JrX3dha2VyZWYpOwogfQogCiAvKioK
QEAgLTIyNjksNyArMjI2MCw4IEBAIHZvaWQgX19pbnRlbF9kaXNwbGF5X3Bvd2VyX3B1dF9hc3lu
YyhzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0ZSAqaTkxNSwKIAkJCQkgICAgIGludGVsX3dha2VyZWZf
dCB3YWtlcmVmKQogewogCXN0cnVjdCBpOTE1X3Bvd2VyX2RvbWFpbnMgKnBvd2VyX2RvbWFpbnMg
PSAmaTkxNS0+cG93ZXJfZG9tYWluczsKLQlpbnRlbF93YWtlcmVmX3Qgd29ya193YWtlcmVmID0g
aW50ZWxfcnVudGltZV9wbV9nZXRfcmF3KGk5MTUpOworCXN0cnVjdCBpOTE1X3J1bnRpbWVfcG0g
KnJwbSA9ICZpOTE1LT5ydW50aW1lX3BtOworCWludGVsX3dha2VyZWZfdCB3b3JrX3dha2VyZWYg
PSBpbnRlbF9ydW50aW1lX3BtX2dldF9yYXcocnBtKTsKIAogCW11dGV4X2xvY2soJnBvd2VyX2Rv
bWFpbnMtPmxvY2spOwogCkBAIC0yMjk2LDcgKzIyODgsNyBAQCB2b2lkIF9faW50ZWxfZGlzcGxh
eV9wb3dlcl9wdXRfYXN5bmMoc3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmk5MTUsCiAJbXV0ZXhf
dW5sb2NrKCZwb3dlcl9kb21haW5zLT5sb2NrKTsKIAogCWlmICh3b3JrX3dha2VyZWYpCi0JCWlu
dGVsX3J1bnRpbWVfcG1fcHV0X3JhdyhpOTE1LCB3b3JrX3dha2VyZWYpOworCQlpbnRlbF9ydW50
aW1lX3BtX3B1dF9yYXcocnBtLCB3b3JrX3dha2VyZWYpOwogCiAJaW50ZWxfcnVudGltZV9wbV9w
dXQoaTkxNSwgd2FrZXJlZik7CiB9CkBAIC0yMzM0LDcgKzIzMjYsNyBAQCB2b2lkIGludGVsX2Rp
c3BsYXlfcG93ZXJfZmx1c2hfd29yayhzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0ZSAqaTkxNSkKIAlt
dXRleF91bmxvY2soJnBvd2VyX2RvbWFpbnMtPmxvY2spOwogCiAJaWYgKHdvcmtfd2FrZXJlZikK
LQkJaW50ZWxfcnVudGltZV9wbV9wdXRfcmF3KGk5MTUsIHdvcmtfd2FrZXJlZik7CisJCWludGVs
X3J1bnRpbWVfcG1fcHV0X3JhdygmaTkxNS0+cnVudGltZV9wbSwgd29ya193YWtlcmVmKTsKIH0K
IAogLyoqCkBAIC00OTk2LDI0ICs0OTg4LDIyIEBAIHN0YXRpYyB2b2lkIGludGVsX3Bvd2VyX2Rv
bWFpbnNfdmVyaWZ5X3N0YXRlKHN0cnVjdCBkcm1faTkxNV9wcml2YXRlICppOTE1KQogCiAjZW5k
aWYKIAotc3RhdGljIGludGVsX3dha2VyZWZfdCBfX2ludGVsX3J1bnRpbWVfcG1fZ2V0KHN0cnVj
dCBkcm1faTkxNV9wcml2YXRlICppOTE1LAorc3RhdGljIGludGVsX3dha2VyZWZfdCBfX2ludGVs
X3J1bnRpbWVfcG1fZ2V0KHN0cnVjdCBpOTE1X3J1bnRpbWVfcG0gKnJwbSwKIAkJCQkJICAgICAg
Ym9vbCB3YWtlbG9jaykKIHsKLQlzdHJ1Y3QgcGNpX2RldiAqcGRldiA9IGk5MTUtPmRybS5wZGV2
OwotCXN0cnVjdCBkZXZpY2UgKmtkZXYgPSAmcGRldi0+ZGV2OwogCWludCByZXQ7CiAKLQlyZXQg
PSBwbV9ydW50aW1lX2dldF9zeW5jKGtkZXYpOworCXJldCA9IHBtX3J1bnRpbWVfZ2V0X3N5bmMo
cnBtLT5rZGV2KTsKIAlXQVJOX09OQ0UocmV0IDwgMCwgInBtX3J1bnRpbWVfZ2V0X3N5bmMoKSBm
YWlsZWQ6ICVkXG4iLCByZXQpOwogCi0JaW50ZWxfcnVudGltZV9wbV9hY3F1aXJlKGk5MTUsIHdh
a2Vsb2NrKTsKKwlpbnRlbF9ydW50aW1lX3BtX2FjcXVpcmUocnBtLCB3YWtlbG9jayk7CiAKLQly
ZXR1cm4gdHJhY2tfaW50ZWxfcnVudGltZV9wbV93YWtlcmVmKGk5MTUpOworCXJldHVybiB0cmFj
a19pbnRlbF9ydW50aW1lX3BtX3dha2VyZWYocnBtKTsKIH0KIAotc3RhdGljIGludGVsX3dha2Vy
ZWZfdCBpbnRlbF9ydW50aW1lX3BtX2dldF9yYXcoc3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmk5
MTUpCitzdGF0aWMgaW50ZWxfd2FrZXJlZl90IGludGVsX3J1bnRpbWVfcG1fZ2V0X3JhdyhzdHJ1
Y3QgaTkxNV9ydW50aW1lX3BtICpycG0pCiB7Ci0JcmV0dXJuIF9faW50ZWxfcnVudGltZV9wbV9n
ZXQoaTkxNSwgZmFsc2UpOworCXJldHVybiBfX2ludGVsX3J1bnRpbWVfcG1fZ2V0KHJwbSwgZmFs
c2UpOwogfQogCiAvKioKQEAgLTUwMzAsNyArNTAyMCw3IEBAIHN0YXRpYyBpbnRlbF93YWtlcmVm
X3QgaW50ZWxfcnVudGltZV9wbV9nZXRfcmF3KHN0cnVjdCBkcm1faTkxNV9wcml2YXRlICppOTE1
KQogICovCiBpbnRlbF93YWtlcmVmX3QgaW50ZWxfcnVudGltZV9wbV9nZXQoc3RydWN0IGRybV9p
OTE1X3ByaXZhdGUgKmk5MTUpCiB7Ci0JcmV0dXJuIF9faW50ZWxfcnVudGltZV9wbV9nZXQoaTkx
NSwgdHJ1ZSk7CisJcmV0dXJuIF9faW50ZWxfcnVudGltZV9wbV9nZXQoJmk5MTUtPnJ1bnRpbWVf
cG0sIHRydWUpOwogfQogCiAvKioKQEAgLTUwNDksMjMgKzUwMzksMjIgQEAgaW50ZWxfd2FrZXJl
Zl90IGludGVsX3J1bnRpbWVfcG1fZ2V0KHN0cnVjdCBkcm1faTkxNV9wcml2YXRlICppOTE1KQog
ICovCiBpbnRlbF93YWtlcmVmX3QgaW50ZWxfcnVudGltZV9wbV9nZXRfaWZfaW5fdXNlKHN0cnVj
dCBkcm1faTkxNV9wcml2YXRlICppOTE1KQogewotCWlmIChJU19FTkFCTEVEKENPTkZJR19QTSkp
IHsKLQkJc3RydWN0IHBjaV9kZXYgKnBkZXYgPSBpOTE1LT5kcm0ucGRldjsKLQkJc3RydWN0IGRl
dmljZSAqa2RldiA9ICZwZGV2LT5kZXY7CisJc3RydWN0IGk5MTVfcnVudGltZV9wbSAqcnBtID0g
Jmk5MTUtPnJ1bnRpbWVfcG07CiAKKwlpZiAoSVNfRU5BQkxFRChDT05GSUdfUE0pKSB7CiAJCS8q
CiAJCSAqIEluIGNhc2VzIHJ1bnRpbWUgUE0gaXMgZGlzYWJsZWQgYnkgdGhlIFJQTSBjb3JlIGFu
ZCB3ZSBnZXQKIAkJICogYW4gLUVJTlZBTCByZXR1cm4gdmFsdWUgd2UgYXJlIG5vdCBzdXBwb3Nl
ZCB0byBjYWxsIHRoaXMKIAkJICogZnVuY3Rpb24sIHNpbmNlIHRoZSBwb3dlciBzdGF0ZSBpcyB1
bmRlZmluZWQuIFRoaXMgYXBwbGllcwogCQkgKiBhdG0gdG8gdGhlIGxhdGUvZWFybHkgc3lzdGVt
IHN1c3BlbmQvcmVzdW1lIGhhbmRsZXJzLgogCQkgKi8KLQkJaWYgKHBtX3J1bnRpbWVfZ2V0X2lm
X2luX3VzZShrZGV2KSA8PSAwKQorCQlpZiAocG1fcnVudGltZV9nZXRfaWZfaW5fdXNlKHJwbS0+
a2RldikgPD0gMCkKIAkJCXJldHVybiAwOwogCX0KIAotCWludGVsX3J1bnRpbWVfcG1fYWNxdWly
ZShpOTE1LCB0cnVlKTsKKwlpbnRlbF9ydW50aW1lX3BtX2FjcXVpcmUocnBtLCB0cnVlKTsKIAot
CXJldHVybiB0cmFja19pbnRlbF9ydW50aW1lX3BtX3dha2VyZWYoaTkxNSk7CisJcmV0dXJuIHRy
YWNrX2ludGVsX3J1bnRpbWVfcG1fd2FrZXJlZihycG0pOwogfQogCiAvKioKQEAgLTUwODksMjcg
KzUwNzgsMjUgQEAgaW50ZWxfd2FrZXJlZl90IGludGVsX3J1bnRpbWVfcG1fZ2V0X2lmX2luX3Vz
ZShzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0ZSAqaTkxNSkKICAqLwogaW50ZWxfd2FrZXJlZl90IGlu
dGVsX3J1bnRpbWVfcG1fZ2V0X25vcmVzdW1lKHN0cnVjdCBkcm1faTkxNV9wcml2YXRlICppOTE1
KQogewotCXN0cnVjdCBwY2lfZGV2ICpwZGV2ID0gaTkxNS0+ZHJtLnBkZXY7Ci0Jc3RydWN0IGRl
dmljZSAqa2RldiA9ICZwZGV2LT5kZXY7CisJc3RydWN0IGk5MTVfcnVudGltZV9wbSAqcnBtID0g
Jmk5MTUtPnJ1bnRpbWVfcG07CiAKLQlhc3NlcnRfcnBtX3dha2Vsb2NrX2hlbGQoaTkxNSk7Ci0J
cG1fcnVudGltZV9nZXRfbm9yZXN1bWUoa2Rldik7CisJX19hc3NlcnRfcnBtX3dha2Vsb2NrX2hl
bGQocnBtKTsKKwlwbV9ydW50aW1lX2dldF9ub3Jlc3VtZShycG0tPmtkZXYpOwogCi0JaW50ZWxf
cnVudGltZV9wbV9hY3F1aXJlKGk5MTUsIHRydWUpOworCWludGVsX3J1bnRpbWVfcG1fYWNxdWly
ZShycG0sIHRydWUpOwogCi0JcmV0dXJuIHRyYWNrX2ludGVsX3J1bnRpbWVfcG1fd2FrZXJlZihp
OTE1KTsKKwlyZXR1cm4gdHJhY2tfaW50ZWxfcnVudGltZV9wbV93YWtlcmVmKHJwbSk7CiB9CiAK
LXN0YXRpYyB2b2lkIF9faW50ZWxfcnVudGltZV9wbV9wdXQoc3RydWN0IGRybV9pOTE1X3ByaXZh
dGUgKmk5MTUsCitzdGF0aWMgdm9pZCBfX2ludGVsX3J1bnRpbWVfcG1fcHV0KHN0cnVjdCBpOTE1
X3J1bnRpbWVfcG0gKnJwbSwKIAkJCQkgICBpbnRlbF93YWtlcmVmX3Qgd3JlZiwKIAkJCQkgICBi
b29sIHdha2Vsb2NrKQogewotCXN0cnVjdCBwY2lfZGV2ICpwZGV2ID0gaTkxNS0+ZHJtLnBkZXY7
Ci0Jc3RydWN0IGRldmljZSAqa2RldiA9ICZwZGV2LT5kZXY7CisJc3RydWN0IGRldmljZSAqa2Rl
diA9IHJwbS0+a2RldjsKIAotCXVudHJhY2tfaW50ZWxfcnVudGltZV9wbV93YWtlcmVmKGk5MTUs
IHdyZWYpOworCXVudHJhY2tfaW50ZWxfcnVudGltZV9wbV93YWtlcmVmKHJwbSwgd3JlZik7CiAK
LQlpbnRlbF9ydW50aW1lX3BtX3JlbGVhc2UoaTkxNSwgd2FrZWxvY2spOworCWludGVsX3J1bnRp
bWVfcG1fcmVsZWFzZShycG0sIHdha2Vsb2NrKTsKIAogCXBtX3J1bnRpbWVfbWFya19sYXN0X2J1
c3koa2Rldik7CiAJcG1fcnVudGltZV9wdXRfYXV0b3N1c3BlbmQoa2Rldik7CkBAIC01MTE3LDkg
KzUxMDQsOSBAQCBzdGF0aWMgdm9pZCBfX2ludGVsX3J1bnRpbWVfcG1fcHV0KHN0cnVjdCBkcm1f
aTkxNV9wcml2YXRlICppOTE1LAogCiAjaWYgSVNfRU5BQkxFRChDT05GSUdfRFJNX0k5MTVfREVC
VUdfUlVOVElNRV9QTSkKIHN0YXRpYyB2b2lkCi1pbnRlbF9ydW50aW1lX3BtX3B1dF9yYXcoc3Ry
dWN0IGRybV9pOTE1X3ByaXZhdGUgKmk5MTUsIGludGVsX3dha2VyZWZfdCB3cmVmKQoraW50ZWxf
cnVudGltZV9wbV9wdXRfcmF3KHN0cnVjdCBpOTE1X3J1bnRpbWVfcG0gKnJwbSwgaW50ZWxfd2Fr
ZXJlZl90IHdyZWYpCiB7Ci0JX19pbnRlbF9ydW50aW1lX3BtX3B1dChpOTE1LCB3cmVmLCBmYWxz
ZSk7CisJX19pbnRlbF9ydW50aW1lX3BtX3B1dChycG0sIHdyZWYsIGZhbHNlKTsKIH0KICNlbmRp
ZgogCkBAIC01MTM3LDcgKzUxMjQsNyBAQCBpbnRlbF9ydW50aW1lX3BtX3B1dF9yYXcoc3RydWN0
IGRybV9pOTE1X3ByaXZhdGUgKmk5MTUsIGludGVsX3dha2VyZWZfdCB3cmVmKQogICovCiB2b2lk
IGludGVsX3J1bnRpbWVfcG1fcHV0X3VuY2hlY2tlZChzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0ZSAq
aTkxNSkKIHsKLQlfX2ludGVsX3J1bnRpbWVfcG1fcHV0KGk5MTUsIC0xLCB0cnVlKTsKKwlfX2lu
dGVsX3J1bnRpbWVfcG1fcHV0KCZpOTE1LT5ydW50aW1lX3BtLCAtMSwgdHJ1ZSk7CiB9CiAKICNp
ZiBJU19FTkFCTEVEKENPTkZJR19EUk1fSTkxNV9ERUJVR19SVU5USU1FX1BNKQpAQCAtNTE1Miw3
ICs1MTM5LDcgQEAgdm9pZCBpbnRlbF9ydW50aW1lX3BtX3B1dF91bmNoZWNrZWQoc3RydWN0IGRy
bV9pOTE1X3ByaXZhdGUgKmk5MTUpCiAgKi8KIHZvaWQgaW50ZWxfcnVudGltZV9wbV9wdXQoc3Ry
dWN0IGRybV9pOTE1X3ByaXZhdGUgKmk5MTUsIGludGVsX3dha2VyZWZfdCB3cmVmKQogewotCV9f
aW50ZWxfcnVudGltZV9wbV9wdXQoaTkxNSwgd3JlZiwgdHJ1ZSk7CisJX19pbnRlbF9ydW50aW1l
X3BtX3B1dCgmaTkxNS0+cnVudGltZV9wbSwgd3JlZiwgdHJ1ZSk7CiB9CiAjZW5kaWYKIApAQCAt
NTE2OCw4ICs1MTU1LDggQEAgdm9pZCBpbnRlbF9ydW50aW1lX3BtX3B1dChzdHJ1Y3QgZHJtX2k5
MTVfcHJpdmF0ZSAqaTkxNSwgaW50ZWxfd2FrZXJlZl90IHdyZWYpCiAgKi8KIHZvaWQgaW50ZWxf
cnVudGltZV9wbV9lbmFibGUoc3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmk5MTUpCiB7Ci0Jc3Ry
dWN0IHBjaV9kZXYgKnBkZXYgPSBpOTE1LT5kcm0ucGRldjsKLQlzdHJ1Y3QgZGV2aWNlICprZGV2
ID0gJnBkZXYtPmRldjsKKwlzdHJ1Y3QgaTkxNV9ydW50aW1lX3BtICpycG0gPSAmaTkxNS0+cnVu
dGltZV9wbTsKKwlzdHJ1Y3QgZGV2aWNlICprZGV2ID0gcnBtLT5rZGV2OwogCiAJLyoKIAkgKiBE
aXNhYmxlIHRoZSBzeXN0ZW0gc3VzcGVuZCBkaXJlY3QgY29tcGxldGUgb3B0aW1pemF0aW9uLCB3
aGljaCBjYW4KQEAgLTUxOTAsNyArNTE3Nyw3IEBAIHZvaWQgaW50ZWxfcnVudGltZV9wbV9lbmFi
bGUoc3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmk5MTUpCiAJICogc28gdGhlIGRyaXZlcidzIG93
biBSUE0gcmVmZXJlbmNlIHRyYWNraW5nIGFzc2VydHMgYWxzbyB3b3JrIG9uCiAJICogcGxhdGZv
cm1zIHdpdGhvdXQgUlBNIHN1cHBvcnQuCiAJICovCi0JaWYgKCFIQVNfUlVOVElNRV9QTShpOTE1
KSkgeworCWlmICghcnBtLT5hdmFpbGFibGUpIHsKIAkJaW50IHJldDsKIAogCQlwbV9ydW50aW1l
X2RvbnRfdXNlX2F1dG9zdXNwZW5kKGtkZXYpOwpAQCAtNTIxMCw4ICs1MTk3LDggQEAgdm9pZCBp
bnRlbF9ydW50aW1lX3BtX2VuYWJsZShzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0ZSAqaTkxNSkKIAog
dm9pZCBpbnRlbF9ydW50aW1lX3BtX2Rpc2FibGUoc3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmk5
MTUpCiB7Ci0Jc3RydWN0IHBjaV9kZXYgKnBkZXYgPSBpOTE1LT5kcm0ucGRldjsKLQlzdHJ1Y3Qg
ZGV2aWNlICprZGV2ID0gJnBkZXYtPmRldjsKKwlzdHJ1Y3QgaTkxNV9ydW50aW1lX3BtICpycG0g
PSAmaTkxNS0+cnVudGltZV9wbTsKKwlzdHJ1Y3QgZGV2aWNlICprZGV2ID0gcnBtLT5rZGV2Owog
CiAJLyogVHJhbnNmZXIgcnBtIG93bmVyc2hpcCBiYWNrIHRvIGNvcmUgKi8KIAlXQVJOKHBtX3J1
bnRpbWVfZ2V0X3N5bmMoa2RldikgPCAwLApAQCAtNTIxOSw3ICs1MjA2LDcgQEAgdm9pZCBpbnRl
bF9ydW50aW1lX3BtX2Rpc2FibGUoc3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmk5MTUpCiAKIAlw
bV9ydW50aW1lX2RvbnRfdXNlX2F1dG9zdXNwZW5kKGtkZXYpOwogCi0JaWYgKCFIQVNfUlVOVElN
RV9QTShpOTE1KSkKKwlpZiAoIXJwbS0+YXZhaWxhYmxlKQogCQlwbV9ydW50aW1lX3B1dChrZGV2
KTsKIH0KIApAQCAtNTIzMywxMCArNTIyMCwxNyBAQCB2b2lkIGludGVsX3J1bnRpbWVfcG1fY2xl
YW51cChzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0ZSAqaTkxNSkKIAkgICAgIGludGVsX3JwbV9yYXdf
d2FrZXJlZl9jb3VudChjb3VudCksCiAJICAgICBpbnRlbF9ycG1fd2FrZWxvY2tfY291bnQoY291
bnQpKTsKIAotCXVudHJhY2tfYWxsX2ludGVsX3J1bnRpbWVfcG1fd2FrZXJlZnMoaTkxNSk7CisJ
dW50cmFja19hbGxfaW50ZWxfcnVudGltZV9wbV93YWtlcmVmcyhycG0pOwogfQogCiB2b2lkIGlu
dGVsX3J1bnRpbWVfcG1faW5pdF9lYXJseShzdHJ1Y3QgZHJtX2k5MTVfcHJpdmF0ZSAqaTkxNSkK
IHsKLQlpbml0X2ludGVsX3J1bnRpbWVfcG1fd2FrZXJlZihpOTE1KTsKKwlzdHJ1Y3QgaTkxNV9y
dW50aW1lX3BtICpycG0gPSAmaTkxNS0+cnVudGltZV9wbTsKKwlzdHJ1Y3QgcGNpX2RldiAqcGRl
diA9IGk5MTUtPmRybS5wZGV2OworCXN0cnVjdCBkZXZpY2UgKmtkZXYgPSAmcGRldi0+ZGV2Owor
CisJcnBtLT5rZGV2ID0ga2RldjsKKwlycG0tPmF2YWlsYWJsZSA9IEhBU19SVU5USU1FX1BNKGk5
MTUpOworCisJaW5pdF9pbnRlbF9ydW50aW1lX3BtX3dha2VyZWYocnBtKTsKIH0KLS0gCjIuMjAu
MQoKX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KSW50ZWwt
Z2Z4IG1haWxpbmcgbGlzdApJbnRlbC1nZnhAbGlzdHMuZnJlZWRlc2t0b3Aub3JnCmh0dHBzOi8v
bGlzdHMuZnJlZWRlc2t0b3Aub3JnL21haWxtYW4vbGlzdGluZm8vaW50ZWwtZ2Z4

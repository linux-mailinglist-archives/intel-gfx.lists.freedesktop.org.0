Return-Path: <intel-gfx-bounces@lists.freedesktop.org>
X-Original-To: lists+intel-gfx@lfdr.de
Delivered-To: lists+intel-gfx@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [131.252.210.177])
	by mail.lfdr.de (Postfix) with ESMTPS id 7AA7F250542
	for <lists+intel-gfx@lfdr.de>; Mon, 24 Aug 2020 19:13:38 +0200 (CEST)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 632176E3EF;
	Mon, 24 Aug 2020 17:13:35 +0000 (UTC)
X-Original-To: intel-gfx@lists.freedesktop.org
Delivered-To: intel-gfx@lists.freedesktop.org
Received: from mga05.intel.com (mga05.intel.com [192.55.52.43])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 7F3276E3EF
 for <intel-gfx@lists.freedesktop.org>; Mon, 24 Aug 2020 17:13:33 +0000 (UTC)
IronPort-SDR: QRv7FmQks1siI1WUCU4QTuviuuNjTPNJMP5GrtWtRjRC1jseLBCCNLPvxnorkMqgc0r3+q+Rqg
 BtPicG71yp8w==
X-IronPort-AV: E=McAfee;i="6000,8403,9723"; a="240769847"
X-IronPort-AV: E=Sophos;i="5.76,349,1592895600"; d="scan'208";a="240769847"
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from fmsmga006.fm.intel.com ([10.253.24.20])
 by fmsmga105.fm.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384;
 24 Aug 2020 10:13:32 -0700
IronPort-SDR: SX6vYxWyqkIAq//psEbonk4FB0vUZp3Nhra2sYGinFKca5N7II4SHWyMalJCVv7h+PgcrhoQw3
 /yksuKrJvAYw==
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.76,349,1592895600"; d="scan'208";a="498995419"
Received: from fmsmsx603-2.cps.intel.com (HELO fmsmsx603.amr.corp.intel.com)
 ([10.18.84.213])
 by fmsmga006.fm.intel.com with ESMTP; 24 Aug 2020 10:13:32 -0700
Received: from fmsmsx603.amr.corp.intel.com (10.18.126.83) by
 fmsmsx603.amr.corp.intel.com (10.18.126.83) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.1.1713.5; Mon, 24 Aug 2020 10:13:32 -0700
Received: from fmsmsx122.amr.corp.intel.com (10.18.125.37) by
 fmsmsx603.amr.corp.intel.com (10.18.126.83) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256) id 15.1.1713.5
 via Frontend Transport; Mon, 24 Aug 2020 10:13:32 -0700
Received: from fmsmsx107.amr.corp.intel.com ([169.254.6.136]) by
 fmsmsx122.amr.corp.intel.com ([169.254.5.98]) with mapi id 14.03.0439.000;
 Mon, 24 Aug 2020 10:13:32 -0700
From: "Souza, Jose" <jose.souza@intel.com>
To: "Gupta, Anshuman" <anshuman.gupta@intel.com>
Thread-Topic: [Intel-gfx] [PATCH 1/2] drm/i915: Compute has_drrs after
 compute has_psr
Thread-Index: AQHWdxZX6LOoF+7LPEK2lRg1ZSxVpqlHkQAAgABqsIA=
Date: Mon, 24 Aug 2020 17:13:32 +0000
Message-ID: <3c09de5e6b3b834c1d03776a845877a06c4104b0.camel@intel.com>
References: <20200820172353.15773-1-jose.souza@intel.com>
 <20200824105418.GF25390@intel.com>
In-Reply-To: <20200824105418.GF25390@intel.com>
Accept-Language: en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-originating-ip: [10.22.240.12]
Content-ID: <088B0191C72169429D73C331183AFEF5@intel.com>
MIME-Version: 1.0
Subject: Re: [Intel-gfx] [PATCH 1/2] drm/i915: Compute has_drrs after
 compute has_psr
X-BeenThere: intel-gfx@lists.freedesktop.org
X-Mailman-Version: 2.1.29
Precedence: list
List-Id: Intel graphics driver community testing & development
 <intel-gfx.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/intel-gfx>
List-Post: <mailto:intel-gfx@lists.freedesktop.org>
List-Help: <mailto:intel-gfx-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=subscribe>
Cc: "intel-gfx@lists.freedesktop.org" <intel-gfx@lists.freedesktop.org>,
 "Pandey, Hariom" <hariom.pandey@intel.com>, "K,
 SrinivasX" <srinivasx.k@intel.com>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: intel-gfx-bounces@lists.freedesktop.org
Sender: "Intel-gfx" <intel-gfx-bounces@lists.freedesktop.org>

T24gTW9uLCAyMDIwLTA4LTI0IGF0IDE2OjI0ICswNTMwLCBBbnNodW1hbiBHdXB0YSB3cm90ZToN
Cj4gT24gMjAyMC0wOC0yMCBhdCAxMDoyMzo1MiAtMDcwMCwgSm9zw6kgUm9iZXJ0byBkZSBTb3V6
YSB3cm90ZToNCj4gPiBEUlJTIGFuZCBQU1IgY2FuJ3QgYmUgZW5hYmxlIHRvZ2V0aGVyLCBzbyBn
aXZpbmcgcHJlZmVyZW5jZSB0byBQU1INCj4gPiBhcyBpdCBhbGxvd3MgbW9yZSBwb3dlci1zYXZp
bmdzIGJ5IGNvbXBsZXRlIHNodXR0aW5nIGRvd24gZGlzcGxheSwNCj4gPiBzbyB0byBndWFyYW50
ZWUgdGhpcywgaXQgc2hvdWxkIGNvbXB1dGUgRFJSUyBzdGF0ZSBhZnRlciBjb21wdXRlIFBTUi4N
Cj4gPiANCj4gPiBDYzogU3Jpbml2YXMgSyA8DQo+ID4gc3Jpbml2YXN4LmtAaW50ZWwuY29tDQo+
ID4gPg0KPiA+IENjOiBIYXJpb20gUGFuZGV5IDwNCj4gPiBoYXJpb20ucGFuZGV5QGludGVsLmNv
bQ0KPiA+ID4NCj4gPiBTaWduZWQtb2ZmLWJ5OiBKb3PDqSBSb2JlcnRvIGRlIFNvdXphIDwNCj4g
PiBqb3NlLnNvdXphQGludGVsLmNvbQ0KPiA+ID4NCj4gPiAtLS0NCj4gPiAgZHJpdmVycy9ncHUv
ZHJtL2k5MTUvZGlzcGxheS9pbnRlbF9kcC5jIHwgNTIgKysrKysrKysrKysrKysrLS0tLS0tLS0t
LQ0KPiA+ICAxIGZpbGUgY2hhbmdlZCwgMzEgaW5zZXJ0aW9ucygrKSwgMjEgZGVsZXRpb25zKC0p
DQo+ID4gDQo+ID4gZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkvaW50
ZWxfZHAuYyBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkvaW50ZWxfZHAuYw0KPiA+IGlu
ZGV4IDc5YzI3ZjkxZjQyYy4uM2JmNTBiMWFlOTgzIDEwMDY0NA0KPiA+IC0tLSBhL2RyaXZlcnMv
Z3B1L2RybS9pOTE1L2Rpc3BsYXkvaW50ZWxfZHAuYw0KPiA+ICsrKyBiL2RyaXZlcnMvZ3B1L2Ry
bS9pOTE1L2Rpc3BsYXkvaW50ZWxfZHAuYw0KPiA+IEBAIC0yNTc1LDYgKzI1NzUsMzQgQEAgaW50
ZWxfZHBfY29tcHV0ZV9oZHJfbWV0YWRhdGFfaW5mb2ZyYW1lX3NkcChzdHJ1Y3QgaW50ZWxfZHAg
KmludGVsX2RwLA0KPiA+ICAJCWludGVsX2hkbWlfaW5mb2ZyYW1lX2VuYWJsZShIRE1JX1BBQ0tF
VF9UWVBFX0dBTVVUX01FVEFEQVRBKTsNCj4gPiAgfQ0KPiA+ICANCj4gPiArc3RhdGljIHZvaWQN
Cj4gPiAraW50ZWxfZHBfZHJyc19jb21wdXRlX2NvbmZpZyhzdHJ1Y3QgaW50ZWxfZHAgKmludGVs
X2RwLA0KPiA+ICsJCQkgICAgIHN0cnVjdCBpbnRlbF9jcnRjX3N0YXRlICpwaXBlX2NvbmZpZywN
Cj4gPiArCQkJICAgICBpbnQgb3V0cHV0X2JwcCwgYm9vbCBjb25zdGFudF9uKQ0KPiA+ICt7DQo+
ID4gKwlzdHJ1Y3QgaW50ZWxfY29ubmVjdG9yICppbnRlbF9jb25uZWN0b3IgPSBpbnRlbF9kcC0+
YXR0YWNoZWRfY29ubmVjdG9yOw0KPiA+ICsJc3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmRldl9w
cml2ID0gZHBfdG9faTkxNShpbnRlbF9kcCk7DQo+ID4gKw0KPiA+ICsJLyoNCj4gPiArCSAqIERS
UlMgYW5kIFBTUiBjYW4ndCBiZSBlbmFibGUgdG9nZXRoZXIsIHNvIGdpdmluZyBwcmVmZXJlbmNl
IHRvIFBTUg0KPiA+ICsJICogYXMgaXQgYWxsb3dzIG1vcmUgcG93ZXItc2F2aW5ncyBieSBjb21w
bGV0ZSBzaHV0dGluZyBkb3duIGRpc3BsYXksDQo+ID4gKwkgKiBzbyB0byBndWFyYW50ZWUgdGhp
cywgaW50ZWxfZHBfZHJyc19jb21wdXRlX2NvbmZpZygpIG11c3QgYmUgY2FsbGVkDQo+ID4gKwkg
KiBhZnRlciBpbnRlbF9wc3JfY29tcHV0ZV9jb25maWcoKS4NCj4gPiArCSAqLw0KPiA+ICsJaWYg
KHBpcGVfY29uZmlnLT5oYXNfcHNyKQ0KPiA+ICsJCXJldHVybjsNCj4gDQo+IEluIGNhc2VzIHdo
ZW4gcHNyIGlzIHN1cHBvcnRlZCBidXQgaXMgbm90IGVuYWJsZWQgZHVlIHRvIGFueSBwc3IgZXJy
b3IsIGRycnMgY2FuIGJlIHVzZWZ1bC4NCj4gQUZBSVUgaGFzX3BzciBpcyBmYWxzZSBpbiBjYXNl
cyBwc3IgaXMgZGlzYWJsZWQgZHVlIGFueSBQU1IgZXJyb3IsIHRoaXMgc2hvdWxkIGJlIGZpbmUg
Zm9yIHN1Y2ggY2FzZQ0KDQpzaW5rX25vdF9yZWxpYWJsZSBpcyBjaGVja2VkIGluIGludGVsX3Bz
cl9jb21wdXRlX2NvbmZpZygpIHNvIGFmdGVyIGEgUFNSIGVycm9yIGluIHRoZSBuZXh0IHRpbWUg
ZmFzdHNldChpbiB0aGUgbmV4dCBwYXRjaCkgRFJSUyB3aWxsIGJlIGVuYWJsZWQuDQoNCj4gPiAr
DQo+ID4gKwlpZiAoIWludGVsX2Nvbm5lY3Rvci0+cGFuZWwuZG93bmNsb2NrX21vZGUgfHwNCj4g
PiArCSAgICBkZXZfcHJpdi0+ZHJycy50eXBlICE9IFNFQU1MRVNTX0RSUlNfU1VQUE9SVCkNCj4g
PiArCQlyZXR1cm47DQo+ID4gKw0KPiA+ICsJcGlwZV9jb25maWctPmhhc19kcnJzID0gdHJ1ZTsN
Cj4gPiArCWludGVsX2xpbmtfY29tcHV0ZV9tX24ob3V0cHV0X2JwcCwgcGlwZV9jb25maWctPmxh
bmVfY291bnQsDQo+ID4gKwkJCSAgICAgICBpbnRlbF9jb25uZWN0b3ItPnBhbmVsLmRvd25jbG9j
a19tb2RlLT5jbG9jaywNCj4gPiArCQkJICAgICAgIHBpcGVfY29uZmlnLT5wb3J0X2Nsb2NrLCAm
cGlwZV9jb25maWctPmRwX20yX24yLA0KPiA+ICsJCQkgICAgICAgY29uc3RhbnRfbiwgcGlwZV9j
b25maWctPmZlY19lbmFibGUpOw0KPiA+ICt9DQo+ID4gKw0KPiA+ICBpbnQNCj4gPiAgaW50ZWxf
ZHBfY29tcHV0ZV9jb25maWcoc3RydWN0IGludGVsX2VuY29kZXIgKmVuY29kZXIsDQo+ID4gIAkJ
CXN0cnVjdCBpbnRlbF9jcnRjX3N0YXRlICpwaXBlX2NvbmZpZywNCj4gPiBAQCAtMjYwNSw3ICsy
NjMzLDYgQEAgaW50ZWxfZHBfY29tcHV0ZV9jb25maWcoc3RydWN0IGludGVsX2VuY29kZXIgKmVu
Y29kZXIsDQo+ID4gIAlpZiAocmV0KQ0KPiA+ICAJCXJldHVybiByZXQ7DQo+ID4gIA0KPiA+IC0J
cGlwZV9jb25maWctPmhhc19kcnJzID0gZmFsc2U7DQo+IA0KPiBNYXkgYmUgdSBjYW4gcmV0YWlu
IGl0IGZvciBiZXR0ZXIgcmVhZGFiaWxpdHkuDQoNClRoZSB3aG9sZSBzdHJ1Y3QgaXMgemVyb2Vk
LCBvdGhlciBmZWF0dXJlcyBhcmUgbm90IHNldCBmYWxzZSBpZiBub3Qgc3VwcG9ydGVkLg0KDQo+
ID4gIAlpZiAoIWludGVsX2RwX3BvcnRfaGFzX2F1ZGlvKGRldl9wcml2LCBwb3J0KSkNCj4gPiAg
CQlwaXBlX2NvbmZpZy0+aGFzX2F1ZGlvID0gZmFsc2U7DQo+ID4gIAllbHNlIGlmIChpbnRlbF9j
b25uX3N0YXRlLT5mb3JjZV9hdWRpbyA9PSBIRE1JX0FVRElPX0FVVE8pDQo+ID4gQEAgLTI2NTcs
MjEgKzI2ODQsMTIgQEAgaW50ZWxfZHBfY29tcHV0ZV9jb25maWcoc3RydWN0IGludGVsX2VuY29k
ZXIgKmVuY29kZXIsDQo+ID4gIAkJCSAgICAgICAmcGlwZV9jb25maWctPmRwX21fbiwNCj4gPiAg
CQkJICAgICAgIGNvbnN0YW50X24sIHBpcGVfY29uZmlnLT5mZWNfZW5hYmxlKTsNCj4gPiAgDQo+
ID4gLQlpZiAoaW50ZWxfY29ubmVjdG9yLT5wYW5lbC5kb3duY2xvY2tfbW9kZSAhPSBOVUxMICYm
DQo+ID4gLQkJZGV2X3ByaXYtPmRycnMudHlwZSA9PSBTRUFNTEVTU19EUlJTX1NVUFBPUlQpIHsN
Cj4gPiAtCQkJcGlwZV9jb25maWctPmhhc19kcnJzID0gdHJ1ZTsNCj4gPiAtCQkJaW50ZWxfbGlu
a19jb21wdXRlX21fbihvdXRwdXRfYnBwLA0KPiA+IC0JCQkJCSAgICAgICBwaXBlX2NvbmZpZy0+
bGFuZV9jb3VudCwNCj4gPiAtCQkJCQkgICAgICAgaW50ZWxfY29ubmVjdG9yLT5wYW5lbC5kb3du
Y2xvY2tfbW9kZS0+Y2xvY2ssDQo+ID4gLQkJCQkJICAgICAgIHBpcGVfY29uZmlnLT5wb3J0X2Ns
b2NrLA0KPiA+IC0JCQkJCSAgICAgICAmcGlwZV9jb25maWctPmRwX20yX24yLA0KPiA+IC0JCQkJ
CSAgICAgICBjb25zdGFudF9uLCBwaXBlX2NvbmZpZy0+ZmVjX2VuYWJsZSk7DQo+ID4gLQl9DQo+
ID4gLQ0KPiA+ICAJaWYgKCFIQVNfRERJKGRldl9wcml2KSkNCj4gPiAgCQlpbnRlbF9kcF9zZXRf
Y2xvY2soZW5jb2RlciwgcGlwZV9jb25maWcpOw0KPiA+ICANCj4gPiAgCWludGVsX3Bzcl9jb21w
dXRlX2NvbmZpZyhpbnRlbF9kcCwgcGlwZV9jb25maWcpOw0KPiA+ICsJaW50ZWxfZHBfZHJyc19j
b21wdXRlX2NvbmZpZyhpbnRlbF9kcCwgcGlwZV9jb25maWcsIG91dHB1dF9icHAsDQo+ID4gKwkJ
CQkgICAgIGNvbnN0YW50X24pOw0KPiA+ICAJaW50ZWxfZHBfY29tcHV0ZV92c2Nfc2RwKGludGVs
X2RwLCBwaXBlX2NvbmZpZywgY29ubl9zdGF0ZSk7DQo+ID4gIAlpbnRlbF9kcF9jb21wdXRlX2hk
cl9tZXRhZGF0YV9pbmZvZnJhbWVfc2RwKGludGVsX2RwLCBwaXBlX2NvbmZpZywgY29ubl9zdGF0
ZSk7DQo+ID4gIA0KPiA+IEBAIC03NzMwLDE2ICs3NzQ4LDggQEAgdm9pZCBpbnRlbF9lZHBfZHJy
c19lbmFibGUoc3RydWN0IGludGVsX2RwICppbnRlbF9kcCwNCj4gPiAgew0KPiA+ICAJc3RydWN0
IGRybV9pOTE1X3ByaXZhdGUgKmRldl9wcml2ID0gZHBfdG9faTkxNShpbnRlbF9kcCk7DQo+ID4g
IA0KPiA+IC0JaWYgKCFjcnRjX3N0YXRlLT5oYXNfZHJycykgew0KPiA+IC0JCWRybV9kYmdfa21z
KCZkZXZfcHJpdi0+ZHJtLCAiUGFuZWwgZG9lc24ndCBzdXBwb3J0IERSUlNcbiIpOw0KPiANCj4g
SU1ITyB0aGlzIHByaW50IGlzIHVzZWZ1bC4NCg0KT2theSBidXQgd2lsbCBjaGFuZ2UgdGhlIG1l
c3NhZ2UgdG8gRFJSUyBlbmFibGVkLCB3ZSBhbHJlYWR5IGtub3cgdGhhdCB0aGUgcGFuZWwgc3Vw
cG9ydCBEUlJTIGluIGludGVsX2RwX2RycnNfaW5pdCgpLg0KDQo+IHdpdGggYWxsIG9mIGFib3Zl
LA0KPiBSZXZpZXdlZC1ieTogQW5zaHVtYW4gR3VwdGEgPA0KPiBhbnNodW1hbi5ndXB0YUBpbnRl
bC5jb20NCj4gPiANCj4gPiArCWlmICghY3J0Y19zdGF0ZS0+aGFzX2RycnMpDQo+ID4gIAkJcmV0
dXJuOw0KPiA+IC0JfQ0KPiA+IC0NCj4gPiAtCWlmIChkZXZfcHJpdi0+cHNyLmVuYWJsZWQpIHsN
Cj4gPiAtCQlkcm1fZGJnX2ttcygmZGV2X3ByaXYtPmRybSwNCj4gPiAtCQkJICAgICJQU1IgZW5h
YmxlZC4gTm90IGVuYWJsaW5nIERSUlMuXG4iKTsNCj4gPiAtCQlyZXR1cm47DQo+ID4gLQl9DQo+
ID4gIA0KPiA+ICAJbXV0ZXhfbG9jaygmZGV2X3ByaXYtPmRycnMubXV0ZXgpOw0KPiA+ICAJaWYg
KGRldl9wcml2LT5kcnJzLmRwKSB7DQo+ID4gLS0gDQo+ID4gMi4yOC4wDQo+ID4gDQo+ID4gX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18NCj4gPiBJbnRlbC1n
ZnggbWFpbGluZyBsaXN0DQo+ID4gSW50ZWwtZ2Z4QGxpc3RzLmZyZWVkZXNrdG9wLm9yZw0KPiA+
IA0KPiA+IGh0dHBzOi8vbGlzdHMuZnJlZWRlc2t0b3Aub3JnL21haWxtYW4vbGlzdGluZm8vaW50
ZWwtZ2Z4DQo+ID4gDQpfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fXwpJbnRlbC1nZnggbWFpbGluZyBsaXN0CkludGVsLWdmeEBsaXN0cy5mcmVlZGVza3RvcC5v
cmcKaHR0cHM6Ly9saXN0cy5mcmVlZGVza3RvcC5vcmcvbWFpbG1hbi9saXN0aW5mby9pbnRlbC1n
ZngK

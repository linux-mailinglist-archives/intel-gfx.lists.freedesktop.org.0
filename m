Return-Path: <intel-gfx-bounces@lists.freedesktop.org>
X-Original-To: lists+intel-gfx@lfdr.de
Delivered-To: lists+intel-gfx@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [131.252.210.177])
	by mail.lfdr.de (Postfix) with ESMTPS id B33961375ED
	for <lists+intel-gfx@lfdr.de>; Fri, 10 Jan 2020 19:16:16 +0100 (CET)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 140B56EA80;
	Fri, 10 Jan 2020 18:16:15 +0000 (UTC)
X-Original-To: intel-gfx@lists.freedesktop.org
Delivered-To: intel-gfx@lists.freedesktop.org
Received: from mga07.intel.com (mga07.intel.com [134.134.136.100])
 by gabe.freedesktop.org (Postfix) with ESMTPS id B34B26EA80
 for <intel-gfx@lists.freedesktop.org>; Fri, 10 Jan 2020 18:16:13 +0000 (UTC)
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from orsmga006.jf.intel.com ([10.7.209.51])
 by orsmga105.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384;
 10 Jan 2020 10:16:12 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.69,417,1571727600"; d="scan'208";a="223860008"
Received: from orsmsx110.amr.corp.intel.com ([10.22.240.8])
 by orsmga006.jf.intel.com with ESMTP; 10 Jan 2020 10:16:12 -0800
Received: from orsmsx157.amr.corp.intel.com (10.22.240.23) by
 ORSMSX110.amr.corp.intel.com (10.22.240.8) with Microsoft SMTP Server (TLS)
 id 14.3.439.0; Fri, 10 Jan 2020 10:16:12 -0800
Received: from vkasired-desk2.fm.intel.com (10.22.254.140) by
 ORSMSX157.amr.corp.intel.com (10.22.240.23) with Microsoft SMTP Server (TLS)
 id 14.3.439.0; Fri, 10 Jan 2020 10:16:12 -0800
From: Vivek Kasireddy <vivek.kasireddy@intel.com>
To: <intel-gfx@lists.freedesktop.org>
Date: Fri, 10 Jan 2020 10:11:23 -0800
Message-ID: <20200110181123.14536-1-vivek.kasireddy@intel.com>
X-Mailer: git-send-email 2.21.1
In-Reply-To: <3c13b232-e477-c4c6-c937-74323d53b607@redhat.com>
References: <3c13b232-e477-c4c6-c937-74323d53b607@redhat.com>
MIME-Version: 1.0
X-Originating-IP: [10.22.254.140]
Subject: [Intel-gfx] [PATCH] drm/i915/dsi: Parse the I2C element from the
 VBT MIPI sequence block (v3)
X-BeenThere: intel-gfx@lists.freedesktop.org
X-Mailman-Version: 2.1.29
Precedence: list
List-Id: Intel graphics driver community testing & development
 <intel-gfx.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/intel-gfx>
List-Post: <mailto:intel-gfx@lists.freedesktop.org>
List-Help: <mailto:intel-gfx-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: intel-gfx-bounces@lists.freedesktop.org
Sender: "Intel-gfx" <intel-gfx-bounces@lists.freedesktop.org>

UGFyc2luZyB0aGUgaTJjIGVsZW1lbnQgaXMgbWFpbmx5IGRvbmUgdG8gdHJhbnNmZXIgdGhlIHBh
eWxvYWQgZnJvbSB0aGUKTUlQSSBzZXF1ZW5jZSBibG9jayB0byB0aGUgcmVsZXZhbnQgc2xhdmUg
ZGV2aWNlLiBJbiBzb21lIGNhc2VzLCB0aGUKY29tbWFuZHMgdGhhdCBhcmUgcGFydCBvZiB0aGUg
cGF5bG9hZCBjYW4gYmUgdXNlZCB0byB0dXJuIG9uIHRoZSBiYWNrbGlnaHQuCgpUaGlzIHBhdGNo
IGlzIGFjdHVhbGx5IGEgcmVmYWN0b3JlZCB2ZXJzaW9uIG9mIHRoaXMgb2xkIHBhdGNoOgpodHRw
czovL2xpc3RzLmZyZWVkZXNrdG9wLm9yZy9hcmNoaXZlcy9pbnRlbC1nZngvMjAxNC1EZWNlbWJl
ci8wNTY4OTcuaHRtbAoKSW4gYWRkaXRpb24gdG8gdGhlIHJlZmFjdG9yaW5nLCB0aGUgb3JpZ2lu
YWwgcGF0Y2ggaXMgYXVnbWVudGVkIGJ5IGxvb2tpbmcgdXAKdGhlIGkyYyBidXMgZnJvbSBBQ1BJ
IE5TIGluc3RlYWQgb2YgcmVseWluZyBvbiB0aGUgYnVzIG51bWJlciBwcm92aWRlZAppbiB0aGUg
VkJULgoKVGhpcyBwYXRjaCB3YXMgdGVzdGVkIG9uIEFhdmEgTW9iaWxlJ3MgSW5hcmkgMTAgdGFi
bGV0LiBJdCBlbmFibGVkCnR1cm5pbmcgb24gdGhlIGJhY2tsaWdodCBieSB0cmFuc2ZlcmluZyB0
aGUgcGF5bG9hZCB0byB0aGUgZGV2aWNlLgoKdjI6Ci0gQWRkIERSTV9ERVZfRVJST1IgZm9yIGlu
dmFsaWQgYWRhcHRlciBhbmQgZmFpbGVkIHRyYW5zZmVyIGFuZCBhbHNvCiAgZHJvcCB0aGUgRFJN
X0RFQlVHIHRoYXQgZXhpc3RlZCBvcmlnaW5hbGx5LiAoSGFucykKLSBBZGQgdHdvIGdvdG9zIGlu
c3RlYWQgb2Ygb25lIHRvIGNsZWFuIHRoaW5ncyB1cCBwcm9wZXJseS4KCnYzOgotIElkZW50aWZ5
IHRoZSBkZXZpY2Ugb24gd2hpY2ggdGhpcyBwYXRjaCB3YXMgdGVzdGVkIGluIHRoZSBjb21taXQK
ICBtZXNzYWdlIChWaWxsZSkKCkNjOiBIYW5zIGRlIEdvZWRlIDxoZGVnb2VkZUByZWRoYXQuY29t
PgpDYzogTmFiZW5kdSBNYWl0aSA8bmFiZW5kdS5iaWthc2gubWFpdGlAaW50ZWwuY29tPgpDYzog
TWF0dCBSb3BlciA8bWF0dGhldy5kLnJvcGVyQGludGVsLmNvbT4KQ2M6IEJvYiBQYWF1d2UgPGJv
Yi5qLnBhYXV3ZUBpbnRlbC5jb20+CkNjOiBWaWxsZSBTeXJqw6Rsw6QgPHZpbGxlLnN5cmphbGFA
bGludXguaW50ZWwuY29tPgpSZXZpZXdlZC1ieTogSGFucyBkZSBHb2VkZSA8aGRlZ29lZGVAcmVk
aGF0LmNvbT4KU2lnbmVkLW9mZi1ieTogVml2ZWsgS2FzaXJlZGR5IDx2aXZlay5rYXNpcmVkZHlA
aW50ZWwuY29tPgotLS0KIGRyaXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkvaW50ZWxfZHNpLmgg
ICAgIHwgIDMgKwogZHJpdmVycy9ncHUvZHJtL2k5MTUvZGlzcGxheS9pbnRlbF9kc2lfdmJ0LmMg
fCA5OSArKysrKysrKysrKysrKysrKysrLQogMiBmaWxlcyBjaGFuZ2VkLCAxMDAgaW5zZXJ0aW9u
cygrKSwgMiBkZWxldGlvbnMoLSkKCmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vaTkxNS9k
aXNwbGF5L2ludGVsX2RzaS5oIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvZGlzcGxheS9pbnRlbF9k
c2kuaAppbmRleCA3NDgxYTVhYTMwODQuLjZjZWYxMzU2YjRlNiAxMDA2NDQKLS0tIGEvZHJpdmVy
cy9ncHUvZHJtL2k5MTUvZGlzcGxheS9pbnRlbF9kc2kuaAorKysgYi9kcml2ZXJzL2dwdS9kcm0v
aTkxNS9kaXNwbGF5L2ludGVsX2RzaS5oCkBAIC02OSw2ICs2OSw5IEBAIHN0cnVjdCBpbnRlbF9k
c2kgewogCS8qIG51bWJlciBvZiBEU0kgbGFuZXMgKi8KIAl1bnNpZ25lZCBpbnQgbGFuZV9jb3Vu
dDsKIAorCS8qIGkyYyBidXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBzbGF2ZSBkZXZpY2UgKi8KKwlp
bnQgaTJjX2J1c19udW07CisKIAkvKgogCSAqIHZpZGVvIG1vZGUgcGl4ZWwgZm9ybWF0CiAJICoK
ZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3BsYXkvaW50ZWxfZHNpX3ZidC5j
IGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvZGlzcGxheS9pbnRlbF9kc2lfdmJ0LmMKaW5kZXggMDAz
MjE2MWUwZjc2Li44OWZiMGQ5MGI2OTQgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1
L2Rpc3BsYXkvaW50ZWxfZHNpX3ZidC5jCisrKyBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2Rpc3Bs
YXkvaW50ZWxfZHNpX3ZidC5jCkBAIC04Niw2ICs4NiwxMiBAQCBzdGF0aWMgc3RydWN0IGdwaW9f
bWFwIHZsdl9ncGlvX3RhYmxlW10gPSB7CiAJeyBWTFZfR1BJT19OQ18xMV9QQU5FTDFfQktMVENU
TCB9LAogfTsKIAorc3RydWN0IGkyY19hZGFwdGVyX2xvb2t1cCB7CisJdTE2IHNsYXZlX2FkZHI7
CisJc3RydWN0IGludGVsX2RzaSAqaW50ZWxfZHNpOworCWFjcGlfaGFuZGxlIGRldl9oYW5kbGU7
Cit9OworCiAjZGVmaW5lIENIVl9HUElPX0lEWF9TVEFSVF9OCQkwCiAjZGVmaW5lIENIVl9HUElP
X0lEWF9TVEFSVF9FCQk3MwogI2RlZmluZSBDSFZfR1BJT19JRFhfU1RBUlRfU1cJCTEwMApAQCAt
Mzc4LDExICszODQsOTggQEAgc3RhdGljIGNvbnN0IHU4ICptaXBpX2V4ZWNfZ3BpbyhzdHJ1Y3Qg
aW50ZWxfZHNpICppbnRlbF9kc2ksIGNvbnN0IHU4ICpkYXRhKQogCXJldHVybiBkYXRhOwogfQog
CitzdGF0aWMgaW50IGkyY19hZGFwdGVyX2xvb2t1cChzdHJ1Y3QgYWNwaV9yZXNvdXJjZSAqYXJl
cywgdm9pZCAqZGF0YSkKK3sKKwlzdHJ1Y3QgaTJjX2FkYXB0ZXJfbG9va3VwICpsb29rdXAgPSBk
YXRhOworCXN0cnVjdCBpbnRlbF9kc2kgKmludGVsX2RzaSA9IGxvb2t1cC0+aW50ZWxfZHNpOwor
CXN0cnVjdCBhY3BpX3Jlc291cmNlX2kyY19zZXJpYWxidXMgKnNiOworCXN0cnVjdCBpMmNfYWRh
cHRlciAqYWRhcHRlcjsKKwlhY3BpX2hhbmRsZSBhZGFwdGVyX2hhbmRsZTsKKwlhY3BpX3N0YXR1
cyBzdGF0dXM7CisKKwlpZiAoaW50ZWxfZHNpLT5pMmNfYnVzX251bSA+PSAwIHx8CisJICAgICFp
MmNfYWNwaV9nZXRfaTJjX3Jlc291cmNlKGFyZXMsICZzYikpCisJCXJldHVybiAxOworCisJaWYg
KGxvb2t1cC0+c2xhdmVfYWRkciAhPSBzYi0+c2xhdmVfYWRkcmVzcykKKwkJcmV0dXJuIDE7CisK
KwlzdGF0dXMgPSBhY3BpX2dldF9oYW5kbGUobG9va3VwLT5kZXZfaGFuZGxlLAorCQkJCSBzYi0+
cmVzb3VyY2Vfc291cmNlLnN0cmluZ19wdHIsCisJCQkJICZhZGFwdGVyX2hhbmRsZSk7CisJaWYg
KEFDUElfRkFJTFVSRShzdGF0dXMpKQorCQlyZXR1cm4gMTsKKworCWFkYXB0ZXIgPSBpMmNfYWNw
aV9maW5kX2FkYXB0ZXJfYnlfaGFuZGxlKGFkYXB0ZXJfaGFuZGxlKTsKKwlpZiAoYWRhcHRlcikK
KwkJaW50ZWxfZHNpLT5pMmNfYnVzX251bSA9IGFkYXB0ZXItPm5yOworCisJcmV0dXJuIDE7Cit9
CisKIHN0YXRpYyBjb25zdCB1OCAqbWlwaV9leGVjX2kyYyhzdHJ1Y3QgaW50ZWxfZHNpICppbnRl
bF9kc2ksIGNvbnN0IHU4ICpkYXRhKQogewotCURSTV9ERUJVR19LTVMoIlNraXBwaW5nIEkyQyBl
bGVtZW50IGV4ZWN1dGlvblxuIik7CisJc3RydWN0IGRybV9kZXZpY2UgKmRybV9kZXYgPSBpbnRl
bF9kc2ktPmJhc2UuYmFzZS5kZXY7CisJc3RydWN0IGRldmljZSAqZGV2ID0gJmRybV9kZXYtPnBk
ZXYtPmRldjsKKwlzdHJ1Y3QgaTJjX2FkYXB0ZXIgKmFkYXB0ZXI7CisJc3RydWN0IGFjcGlfZGV2
aWNlICphY3BpX2RldjsKKwlzdHJ1Y3QgbGlzdF9oZWFkIHJlc291cmNlX2xpc3Q7CisJc3RydWN0
IGkyY19hZGFwdGVyX2xvb2t1cCBsb29rdXA7CisJc3RydWN0IGkyY19tc2cgbXNnOworCWludCBy
ZXQ7CisJdTggdmJ0X2kyY19idXNfbnVtID0gKihkYXRhICsgMik7CisJdTE2IHNsYXZlX2FkZHIg
PSAqKHUxNiAqKShkYXRhICsgMyk7CisJdTggcmVnX29mZnNldCA9ICooZGF0YSArIDUpOworCXU4
IHBheWxvYWRfc2l6ZSA9ICooZGF0YSArIDYpOworCXU4ICpwYXlsb2FkX2RhdGE7CisKKwlpZiAo
aW50ZWxfZHNpLT5pMmNfYnVzX251bSA8IDApIHsKKwkJaW50ZWxfZHNpLT5pMmNfYnVzX251bSA9
IHZidF9pMmNfYnVzX251bTsKKworCQlhY3BpX2RldiA9IEFDUElfQ09NUEFOSU9OKGRldik7CisJ
CWlmIChhY3BpX2RldikgeworCQkJbWVtc2V0KCZsb29rdXAsIDAsIHNpemVvZihsb29rdXApKTsK
KwkJCWxvb2t1cC5zbGF2ZV9hZGRyID0gc2xhdmVfYWRkcjsKKwkJCWxvb2t1cC5pbnRlbF9kc2kg
PSBpbnRlbF9kc2k7CisJCQlsb29rdXAuZGV2X2hhbmRsZSA9IGFjcGlfZGV2aWNlX2hhbmRsZShh
Y3BpX2Rldik7CisKKwkJCUlOSVRfTElTVF9IRUFEKCZyZXNvdXJjZV9saXN0KTsKKwkJCWFjcGlf
ZGV2X2dldF9yZXNvdXJjZXMoYWNwaV9kZXYsICZyZXNvdXJjZV9saXN0LAorCQkJCQkgICAgICAg
aTJjX2FkYXB0ZXJfbG9va3VwLAorCQkJCQkgICAgICAgJmxvb2t1cCk7CisJCQlhY3BpX2Rldl9m
cmVlX3Jlc291cmNlX2xpc3QoJnJlc291cmNlX2xpc3QpOworCQl9CisJfQogCi0JcmV0dXJuIGRh
dGEgKyAqKGRhdGEgKyA2KSArIDc7CisJYWRhcHRlciA9IGkyY19nZXRfYWRhcHRlcihpbnRlbF9k
c2ktPmkyY19idXNfbnVtKTsKKwlpZiAoIWFkYXB0ZXIpIHsKKwkJRFJNX0RFVl9FUlJPUihkZXYs
ICJDYW5ub3QgZmluZCBhIHZhbGlkIGkyYyBidXMgZm9yIHhmZXJcbiIpOworCQlnb3RvIGVycl9i
dXM7CisJfQorCisJcGF5bG9hZF9kYXRhID0ga3phbGxvYyhwYXlsb2FkX3NpemUgKyAxLCBHRlBf
S0VSTkVMKTsKKwlpZiAoIXBheWxvYWRfZGF0YSkKKwkJZ290byBlcnJfYWxsb2M7CisKKwlwYXls
b2FkX2RhdGFbMF0gPSByZWdfb2Zmc2V0OworCW1lbWNweSgmcGF5bG9hZF9kYXRhWzFdLCAoZGF0
YSArIDcpLCBwYXlsb2FkX3NpemUpOworCisJbXNnLmFkZHIgPSBzbGF2ZV9hZGRyOworCW1zZy5m
bGFncyA9IDA7CisJbXNnLmxlbiA9IHBheWxvYWRfc2l6ZSArIDE7CisJbXNnLmJ1ZiA9IHBheWxv
YWRfZGF0YTsKKworCXJldCA9IGkyY190cmFuc2ZlcihhZGFwdGVyLCAmbXNnLCAxKTsKKwlpZiAo
cmV0IDwgMCkKKwkJRFJNX0RFVl9FUlJPUihkZXYsCisJCQkgICAgICAiRmFpbGVkIHRvIHhmZXIg
cGF5bG9hZCBvZiBzaXplICgldSkgdG8gcmVnICgldSlcbiIsCisJCQkgICAgICBwYXlsb2FkX3Np
emUsIHJlZ19vZmZzZXQpOworCisJa2ZyZWUocGF5bG9hZF9kYXRhKTsKK2Vycl9hbGxvYzoKKwlp
MmNfcHV0X2FkYXB0ZXIoYWRhcHRlcik7CitlcnJfYnVzOgorCXJldHVybiBkYXRhICsgcGF5bG9h
ZF9zaXplICsgNzsKIH0KIAogc3RhdGljIGNvbnN0IHU4ICptaXBpX2V4ZWNfc3BpKHN0cnVjdCBp
bnRlbF9kc2kgKmludGVsX2RzaSwgY29uc3QgdTggKmRhdGEpCkBAIC02ODMsNiArNzc2LDggQEAg
Ym9vbCBpbnRlbF9kc2lfdmJ0X2luaXQoc3RydWN0IGludGVsX2RzaSAqaW50ZWxfZHNpLCB1MTYg
cGFuZWxfaWQpCiAJaW50ZWxfZHNpLT5wYW5lbF9vZmZfZGVsYXkgPSBwcHMtPnBhbmVsX29mZl9k
ZWxheSAvIDEwOwogCWludGVsX2RzaS0+cGFuZWxfcHdyX2N5Y2xlX2RlbGF5ID0gcHBzLT5wYW5l
bF9wb3dlcl9jeWNsZV9kZWxheSAvIDEwOwogCisJaW50ZWxfZHNpLT5pMmNfYnVzX251bSA9IC0x
OworCiAJLyogYSByZWd1bGFyIGRyaXZlciB3b3VsZCBnZXQgdGhlIGRldmljZSBpbiBwcm9iZSAq
LwogCWZvcl9lYWNoX2RzaV9wb3J0KHBvcnQsIGludGVsX2RzaS0+cG9ydHMpIHsKIAkJbWlwaV9k
c2lfYXR0YWNoKGludGVsX2RzaS0+ZHNpX2hvc3RzW3BvcnRdLT5kZXZpY2UpOwotLSAKMi4yMS4x
CgpfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpJbnRlbC1n
ZnggbWFpbGluZyBsaXN0CkludGVsLWdmeEBsaXN0cy5mcmVlZGVza3RvcC5vcmcKaHR0cHM6Ly9s
aXN0cy5mcmVlZGVza3RvcC5vcmcvbWFpbG1hbi9saXN0aW5mby9pbnRlbC1nZngK

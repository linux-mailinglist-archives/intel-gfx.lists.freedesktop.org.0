Return-Path: <intel-gfx-bounces@lists.freedesktop.org>
X-Original-To: lists+intel-gfx@lfdr.de
Delivered-To: lists+intel-gfx@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [131.252.210.177])
	by mail.lfdr.de (Postfix) with ESMTPS id 016236424F7
	for <lists+intel-gfx@lfdr.de>; Mon,  5 Dec 2022 09:46:22 +0100 (CET)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id C208310E127;
	Mon,  5 Dec 2022 08:46:17 +0000 (UTC)
X-Original-To: intel-gfx@lists.freedesktop.org
Delivered-To: intel-gfx@lists.freedesktop.org
Received: from mga09.intel.com (mga09.intel.com [134.134.136.24])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 4F96D10E127
 for <intel-gfx@lists.freedesktop.org>; Mon,  5 Dec 2022 08:46:15 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple;
 d=intel.com; i=@intel.com; q=dns/txt; s=Intel;
 t=1670229975; x=1701765975;
 h=date:message-id:from:to:cc:subject:in-reply-to:
 references:mime-version;
 bh=0SSxQM6z0wCllNZRgd6Usfyu+TTr5KghKv1gr01PnkQ=;
 b=cGMmnUD3LU7YNzgROV3hT5BfPjkFznoB5Tjf/tIF0+ty0OpUtmppdm/9
 jeep96DymDSjdGfqiyDVwklI0JYfbPiC7huBeAujHSzvpdRAjm+2dJZOH
 RNCluM92hbenQiWxXuJicMYw3O/5sZ5rMuAbcbPbN40fR/HA081Oc/l/E
 T3d7buYnetpAPMdcJXt1IwuEwRmNGtkk98BIrNAIIkVfqhfKQsWGgUQ5U
 SGr9iT6ccKRslNFNPefrKSYBf3l/sg1N8dcyY948EIisW4jK6IgeB03QO
 a2HCsMe4Hbe4UD/RWhsMn51wpMOIqX0LUISbDEbe5Ak3vabQno0MTz3nM w==;
X-IronPort-AV: E=McAfee;i="6500,9779,10551"; a="317440980"
X-IronPort-AV: E=Sophos;i="5.96,218,1665471600"; d="scan'208";a="317440980"
Received: from fmsmga003.fm.intel.com ([10.253.24.29])
 by orsmga102.jf.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384;
 05 Dec 2022 00:46:14 -0800
X-IronPort-AV: E=McAfee;i="6500,9779,10551"; a="734515444"
X-IronPort-AV: E=Sophos;i="5.96,218,1665471600"; d="scan'208";a="734515444"
Received: from adixit-mobl.amr.corp.intel.com (HELO adixit-arch.intel.com)
 ([10.252.132.42])
 by fmsmga003-auth.fm.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384;
 05 Dec 2022 00:46:13 -0800
Date: Mon, 05 Dec 2022 00:46:13 -0800
Message-ID: <871qpe5jca.wl-ashutosh.dixit@intel.com>
From: "Dixit, Ashutosh" <ashutosh.dixit@intel.com>
To: "Tauro, Riana" <riana.tauro@intel.com>
In-Reply-To: <cfb549e3-cb5f-e66a-3196-b940f344fb71@intel.com>
References: <20221130053427.2207600-1-riana.tauro@intel.com>
 <20221130053427.2207600-3-riana.tauro@intel.com>
 <87a6455uan.wl-ashutosh.dixit@intel.com>
 <cfb549e3-cb5f-e66a-3196-b940f344fb71@intel.com>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI-EPG/1.14.7 (Harue)
 FLIM-LB/1.14.9 (=?ISO-8859-4?Q?Goj=F2?=) APEL-LB/10.8 EasyPG/1.0.0
 Emacs/28.2 (x86_64-pc-linux-gnu) MULE/6.0 (HANACHIRUSATO)
MIME-Version: 1.0 (generated by SEMI-EPG 1.14.7 - "Harue")
Content-Type: text/plain; charset=US-ASCII
Subject: Re: [Intel-gfx] [PATCH v5 2/3] drm/i915/hwmon: Add helper function
 to obtain energy values
X-BeenThere: intel-gfx@lists.freedesktop.org
X-Mailman-Version: 2.1.29
Precedence: list
List-Id: Intel graphics driver community testing & development
 <intel-gfx.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/intel-gfx>
List-Post: <mailto:intel-gfx@lists.freedesktop.org>
List-Help: <mailto:intel-gfx-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=subscribe>
Cc: intel-gfx@lists.freedesktop.org
Errors-To: intel-gfx-bounces@lists.freedesktop.org
Sender: "Intel-gfx" <intel-gfx-bounces@lists.freedesktop.org>

On Sun, 04 Dec 2022 23:44:57 -0800, Tauro, Riana wrote:
>
> On 12/3/2022 3:42 AM, Dixit, Ashutosh wrote:
> > On Tue, 29 Nov 2022 21:34:26 -0800, Riana Tauro wrote:
> >>
> >
> > Hi Riana,
> >
> > Mostly looks good but I have a little nit below.
> >
> >> diff --git a/drivers/gpu/drm/i915/i915_hwmon.c b/drivers/gpu/drm/i915/i915_hwmon.c
> >> index c588a17f97e9..57d4e96d5c72 100644
> >> --- a/drivers/gpu/drm/i915/i915_hwmon.c
> >> +++ b/drivers/gpu/drm/i915/i915_hwmon.c
> >> @@ -442,6 +442,34 @@ hwm_energy_read(struct hwm_drvdata *ddat, u32 attr, long *val)
> >>	}
> >>   }
> >>
> >> +/**
> >> + * i915_hwmon_get_energy - obtains energy value
> >> + * @gt: intel_gt structure
> >> + * @energy: pointer to store energy in uJ
> >> + *
> >> + * This function checks for the validity of the underlying energy
> >> + * hardware register and obtains the per-gt/package level energy
> >
> > Do we every use this function to find real package level energy? I don't
> > see it. I think what we mean here is that package level energy if there's
> > only one gt and gt level energy is not available, correct?
> Yes. When gt level energy is not available function should return the
> package energy.
> >
> > So I think we should make this explicit in the code below. Also change the
> > comment above to say only per-gt level energy.
> >
> Will change this.
>
> >> + * values.
> >> + *
> >> + * Return: 0 on success, -EOPNOTSUPP if register is invalid
> >> + */
> >> +int
> >> +i915_hwmon_get_energy(struct intel_gt *gt, long *energy)
> >> +{
> >> +	struct i915_hwmon *hwmon = gt->i915->hwmon;
> >> +	struct hwm_drvdata *ddat = &hwmon->ddat;
> >> +	struct hwm_drvdata *ddat_gt = hwmon->ddat_gt + gt->info.id;
> >> +
> >> +	if (hwm_energy_is_visible(ddat_gt, hwmon_energy_input))
> >> +		hwm_energy(ddat_gt, energy);
> >> +	else if (hwm_energy_is_visible(ddat, hwmon_energy_input))
> >
> > So if we get here and we are finding gt level energy there must be only one
> > gt, correct?
> >
> > So probably we need to do something like (maybe in intel_gt.h?):
> >
> > static inline int intel_num_gt(struct drm_i915_private *i915)
> > {
> >	struct intel_gt *gt;
> >	int num_gt = 0, i;
> >
> >	for_each_gt(gt, i915, i)
> >		num_gt++;
> >
> >	return num_gt;
> > }
> >
> > And then the above check becomes:
> >
> >	else if (intel_num_gt() == 1 &&
> >		 hwm_energy_is_visible(ddat, hwmon_energy_input))
> >
> > So this way we are basically always returning gt level energy from
> > i915_hwmon_get_energy.
>
> Is it okay to use this macro instead of adding a new function?
>
> if (!HAS_EXTRA_GT_LIST(gt->i915) && hwm_energy_is_visible(ddat,
> hwmon_energy_input))

Yes, good find, looks like that's what this is. Thanks.

>
> Thanks
> Riana
> >
> > If ever we need package level energy in the future we can add a new
> > function which takes a 'struct drm_i915_private *i915' arg (and uses
> > i915->hwmon->ddat).
> >
> > Thanks.
> > --
> > Ashutosh
> >
> >
> >> +		hwm_energy(ddat, energy);
> >> +	else
> >> +		return -EOPNOTSUPP;
> >> +
> >> +	return 0;
> >> +}
> >> +
> >>   static umode_t
> >>   hwm_curr_is_visible(const struct hwm_drvdata *ddat, u32 attr)
> >>   {
> >> diff --git a/drivers/gpu/drm/i915/i915_hwmon.h b/drivers/gpu/drm/i915/i915_hwmon.h
> >> index 7ca9cf2c34c9..1c38cfdbb7e9 100644
> >> --- a/drivers/gpu/drm/i915/i915_hwmon.h
> >> +++ b/drivers/gpu/drm/i915/i915_hwmon.h
> >> @@ -8,13 +8,16 @@
> >>   #define __I915_HWMON_H__
> >>
> >>   struct drm_i915_private;
> >> +struct intel_gt;
> >>
> >>   #if IS_REACHABLE(CONFIG_HWMON)
> >>   void i915_hwmon_register(struct drm_i915_private *i915);
> >>   void i915_hwmon_unregister(struct drm_i915_private *i915);
> >> +int i915_hwmon_get_energy(struct intel_gt *gt, long *energy);
> >>   #else
> >>   static inline void i915_hwmon_register(struct drm_i915_private *i915) { };
> >>   static inline void i915_hwmon_unregister(struct drm_i915_private *i915) { };
> >> +static inline int i915_hwmon_get_energy(struct intel_gt *gt, long *energy) { return -EOPNOTSUPP; }
> >>   #endif
> >>
> >>   #endif /* __I915_HWMON_H__ */
> >> --
> >> 2.25.1
> >>

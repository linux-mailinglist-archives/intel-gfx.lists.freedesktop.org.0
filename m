Return-Path: <intel-gfx-bounces@lists.freedesktop.org>
X-Original-To: lists+intel-gfx@lfdr.de
Delivered-To: lists+intel-gfx@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [IPv6:2610:10:20:722:a800:ff:fe36:1795])
	by mail.lfdr.de (Postfix) with ESMTPS id 5B2CE183D03
	for <lists+intel-gfx@lfdr.de>; Fri, 13 Mar 2020 00:05:14 +0100 (CET)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id E00AD6EB52;
	Thu, 12 Mar 2020 23:05:05 +0000 (UTC)
X-Original-To: intel-gfx@lists.freedesktop.org
Delivered-To: intel-gfx@lists.freedesktop.org
Received: from mga03.intel.com (mga03.intel.com [134.134.136.65])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 57BF86E12C
 for <intel-gfx@lists.freedesktop.org>; Thu, 12 Mar 2020 23:05:04 +0000 (UTC)
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from orsmga003.jf.intel.com ([10.7.209.27])
 by orsmga103.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384;
 12 Mar 2020 16:05:02 -0700
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.70,546,1574150400"; d="scan'208";a="243193467"
Received: from orsosgc001.ra.intel.com ([10.23.184.150])
 by orsmga003.jf.intel.com with ESMTP; 12 Mar 2020 16:05:02 -0700
From: Umesh Nerlige Ramappa <umesh.nerlige.ramappa@intel.com>
To: Lionel G Landwerlin <lionel.g.landwerlin@intel.com>,
 Ashutosh Dixit <ashutosh.dixit@intel.com>, intel-gfx@lists.freedesktop.org
Date: Thu, 12 Mar 2020 16:04:59 -0700
Message-Id: <20200312230502.36898-2-umesh.nerlige.ramappa@intel.com>
X-Mailer: git-send-email 2.20.1
In-Reply-To: <20200312230502.36898-1-umesh.nerlige.ramappa@intel.com>
References: <20200312230502.36898-1-umesh.nerlige.ramappa@intel.com>
MIME-Version: 1.0
Subject: [Intel-gfx] [PATCH 1/4] drm/i915/perf: rework aging tail workaround
X-BeenThere: intel-gfx@lists.freedesktop.org
X-Mailman-Version: 2.1.29
Precedence: list
List-Id: Intel graphics driver community testing & development
 <intel-gfx.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/intel-gfx>
List-Post: <mailto:intel-gfx@lists.freedesktop.org>
List-Help: <mailto:intel-gfx-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/intel-gfx>,
 <mailto:intel-gfx-request@lists.freedesktop.org?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: intel-gfx-bounces@lists.freedesktop.org
Sender: "Intel-gfx" <intel-gfx-bounces@lists.freedesktop.org>

RnJvbTogTGlvbmVsIExhbmR3ZXJsaW4gPGxpb25lbC5nLmxhbmR3ZXJsaW5AaW50ZWwuY29tPgoK
V2UncmUgYWJvdXQgdG8gaW50cm9kdWNlIGFuIG9wdGlvbnMgdG8gb3BlbiB0aGUgcGVyZiBzdHJl
YW0sIGdpdmluZwp0aGUgdXNlciBhYmlsaXR5IHRvIGNvbmZpZ3VyZSBob3cgb2Z0ZW4gaXQgd2Fu
dHMgdGhlIGtlcm5lbCB0byBwb2xsCnRoZSBPQSByZWdpc3RlcnMgZm9yIGF2YWlsYWJsZSBkYXRh
LgoKUmlnaHQgbm93IHRoZSB3b3JrYXJvdW5kIGFnYWluc3QgdGhlIE9BIHRhaWwgcG9pbnRlciBy
YWNlIGNvbmRpdGlvbgpyZXF1aXJlcyBhdCBsZWFzdCB0d2ljZSB0aGUgaW50ZXJuYWwga2VybmVs
IHBvbGxpbmcgdGltZXIgdG8gbWFrZSBhbnkKZGF0YSBhdmFpbGFibGUuCgpUaGlzIGNoYW5nZXMg
aW50cm9kdWNlIGNoZWNrcyBvbiB0aGUgT0EgZGF0YSB3cml0dGVuIGludG8gdGhlIGNpcmN1bGFy
CmJ1ZmZlciB0byBtYWtlIGFzIG11Y2ggZGF0YSBhcyBwb3NzaWJsZSBhdmFpbGFibGUgb24gdGhl
IGZpcnN0Cml0ZXJhdGlvbiBvZiB0aGUgcG9sbGluZyB0aW1lci4KCnYyOiBVc2UgT0FfVEFLRU4g
bWFjcm8gd2l0aG91dCB0aGUgZ3R0X29mZnNldCAoTGlvbmVsKQp2MzogKFVtZXNoKQotIFJlYmFz
ZQotIENoYW5nZSByZXBvcnQgdG8gcmVwb3J0MzIgZnJvbSBiZWxvdyByZXZpZXcKICBodHRwczov
L3BhdGNod29yay5mcmVlZGVza3RvcC5vcmcvcGF0Y2gvMzMwNzA0Lz9zZXJpZXM9NjY2OTcmcmV2
PTEKClNpZ25lZC1vZmYtYnk6IExpb25lbCBMYW5kd2VybGluIDxsaW9uZWwuZy5sYW5kd2VybGlu
QGludGVsLmNvbT4KU2lnbmVkLW9mZi1ieTogVW1lc2ggTmVybGlnZSBSYW1hcHBhIDx1bWVzaC5u
ZXJsaWdlLnJhbWFwcGFAaW50ZWwuY29tPgotLS0KIGRyaXZlcnMvZ3B1L2RybS9pOTE1L2k5MTVf
cGVyZi5jICAgICAgIHwgMjA3ICsrKysrKysrKysrLS0tLS0tLS0tLS0tLS0KIGRyaXZlcnMvZ3B1
L2RybS9pOTE1L2k5MTVfcGVyZl90eXBlcy5oIHwgIDI5ICsrLS0KIDIgZmlsZXMgY2hhbmdlZCwg
MTA2IGluc2VydGlvbnMoKyksIDEzMCBkZWxldGlvbnMoLSkKCmRpZmYgLS1naXQgYS9kcml2ZXJz
L2dwdS9kcm0vaTkxNS9pOTE1X3BlcmYuYyBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2k5MTVfcGVy
Zi5jCmluZGV4IDFiMDc0YmI0YTdmZS4uOTJjNWM3NWUyYTJiIDEwMDY0NAotLS0gYS9kcml2ZXJz
L2dwdS9kcm0vaTkxNS9pOTE1X3BlcmYuYworKysgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9pOTE1
X3BlcmYuYwpAQCAtMjQxLDIzICsyNDEsMTQgQEAKICAqIGZvciB0aGlzIGVhcmxpZXIsIGFzIHBh
cnQgb2YgdGhlIG9hX2J1ZmZlcl9jaGVjayB0byBhdm9pZCBsb3RzIG9mIHJlZHVuZGFudAogICog
cmVhZCgpIGF0dGVtcHRzLgogICoKLSAqIEluIGVmZmVjdCB3ZSBkZWZpbmUgYSB0YWlsIHBvaW50
ZXIgZm9yIHJlYWRpbmcgdGhhdCBsYWdzIHRoZSByZWFsIHRhaWwKLSAqIHBvaW50ZXIgYnkgYXQg
bGVhc3QgJU9BX1RBSUxfTUFSR0lOX05TRUMgbmFub3NlY29uZHMsIHdoaWNoIGdpdmVzIGVub3Vn
aAotICogdGltZSBmb3IgdGhlIGNvcnJlc3BvbmRpbmcgcmVwb3J0cyB0byBiZWNvbWUgdmlzaWJs
ZSB0byB0aGUgQ1BVLgotICoKLSAqIFRvIG1hbmFnZSB0aGlzIHdlIGFjdHVhbGx5IHRyYWNrIHR3
byB0YWlsIHBvaW50ZXJzOgotICogIDEpIEFuICdhZ2luZycgdGFpbCB3aXRoIGFuIGFzc29jaWF0
ZWQgdGltZXN0YW1wIHRoYXQgaXMgdHJhY2tlZCB1bnRpbCB3ZQotICogICAgIGNhbiB0cnVzdCB0
aGUgY29ycmVzcG9uZGluZyBkYXRhIGlzIHZpc2libGUgdG8gdGhlIENQVTsgYXQgd2hpY2ggcG9p
bnQKLSAqICAgICBpdCBpcyBjb25zaWRlcmVkICdhZ2VkJy4KLSAqICAyKSBBbiAnYWdlZCcgdGFp
bCB0aGF0IGNhbiBiZSB1c2VkIGZvciByZWFkKClpbmcuCi0gKgotICogVGhlIHR3byBzZXBhcmF0
ZSBwb2ludGVycyBsZXQgdXMgZGVjb3VwbGUgcmVhZCgpcyBmcm9tIHRhaWwgcG9pbnRlciBhZ2lu
Zy4KLSAqCi0gKiBUaGUgdGFpbCBwb2ludGVycyBhcmUgY2hlY2tlZCBhbmQgdXBkYXRlZCBhdCBh
IGxpbWl0ZWQgcmF0ZSB3aXRoaW4gYSBocnRpbWVyCi0gKiBjYWxsYmFjayAodGhlIHNhbWUgY2Fs
bGJhY2sgdGhhdCBpcyB1c2VkIGZvciBkZWxpdmVyaW5nIEVQT0xMSU4gZXZlbnRzKQotICoKLSAq
IEluaXRpYWxseSB0aGUgdGFpbHMgYXJlIG1hcmtlZCBpbnZhbGlkIHdpdGggJUlOVkFMSURfVEFJ
TF9QVFIgd2hpY2gKLSAqIGluZGljYXRlcyB0aGF0IGFuIHVwZGF0ZWQgdGFpbCBwb2ludGVyIGlz
IG5lZWRlZC4KKyAqIFdlIHdvcmthcm91bmQgdGhpcyBpc3N1ZSBpbiBvYV9idWZmZXJfY2hlY2so
KSBieSByZWFkaW5nIHRoZSByZXBvcnRzIGluIHRoZQorICogT0EgYnVmZmVyLCBzdGFydGluZyBm
cm9tIHRoZSB0YWlsIHJlcG9ydGVkIGJ5IHRoZSBIVyB1bnRpbCB3ZSBmaW5kIDIKKyAqIGNvbnNl
Y3V0aXZlIHJlcG9ydHMgd2l0aCB0aGVpciBmaXJzdCAyIGR3b3JkcyBvZiBub3QgYXQgMC4gVGhv
c2UgZHdvcmRzIGFyZQorICogYWxzbyBzZXQgdG8gMCBvbmNlIHJlYWQgYW5kIHRoZSB3aG9sZSBi
dWZmZXIgaXMgY2xlYXJlZCB1cG9uIE9BIGJ1ZmZlcgorICogaW5pdGlhbGl6YXRpb24uIFRoZSBm
aXJzdCBkd29yZCBpcyB0aGUgcmVhc29uIGZvciB0aGlzIHJlcG9ydCB3aGlsZSB0aGUKKyAqIHNl
Y29uZCBpcyB0aGUgdGltZXN0YW1wLCBtYWtpbmcgdGhlIGNoYW5jZXMgb2YgaGF2aW5nIHRob3Nl
IDIgZmllbGRzIGF0IDAKKyAqIGZhaXJseSB1bmxpa2VseS4gQSBtb3JlIGRldGFpbGVkIGV4cGxh
bmF0aW9uIGlzIGF2YWlsYWJsZSBpbgorICogb2FfYnVmZmVyX2NoZWNrKCkuCiAgKgogICogTW9z
dCBvZiB0aGUgaW1wbGVtZW50YXRpb24gZGV0YWlscyBmb3IgdGhpcyB3b3JrYXJvdW5kIGFyZSBp
bgogICogb2FfYnVmZmVyX2NoZWNrX3VubG9ja2VkKCkgYW5kIF9hcHBlbmRfb2FfcmVwb3J0cygp
CkBAIC0yNzAsNyArMjYxLDYgQEAKICAqIGVuYWJsZWQgd2l0aG91dCBhbnkgcGVyaW9kaWMgc2Ft
cGxpbmcuCiAgKi8KICNkZWZpbmUgT0FfVEFJTF9NQVJHSU5fTlNFQwkxMDAwMDBVTEwKLSNkZWZp
bmUgSU5WQUxJRF9UQUlMX1BUUgkweGZmZmZmZmZmCiAKIC8qIGZyZXF1ZW5jeSBmb3IgY2hlY2tp
bmcgd2hldGhlciB0aGUgT0EgdW5pdCBoYXMgd3JpdHRlbiBuZXcgcmVwb3J0cyB0byB0aGUKICAq
IGNpcmN1bGFyIE9BIGJ1ZmZlci4uLgpAQCAtNDc2LDEwICs0NjYsMTAgQEAgc3RhdGljIHUzMiBn
ZW43X29hX2h3X3RhaWxfcmVhZChzdHJ1Y3QgaTkxNV9wZXJmX3N0cmVhbSAqc3RyZWFtKQogICov
CiBzdGF0aWMgYm9vbCBvYV9idWZmZXJfY2hlY2tfdW5sb2NrZWQoc3RydWN0IGk5MTVfcGVyZl9z
dHJlYW0gKnN0cmVhbSkKIHsKKwl1MzIgZ3R0X29mZnNldCA9IGk5MTVfZ2d0dF9vZmZzZXQoc3Ry
ZWFtLT5vYV9idWZmZXIudm1hKTsKIAlpbnQgcmVwb3J0X3NpemUgPSBzdHJlYW0tPm9hX2J1ZmZl
ci5mb3JtYXRfc2l6ZTsKIAl1bnNpZ25lZCBsb25nIGZsYWdzOwotCXVuc2lnbmVkIGludCBhZ2Vk
X2lkeDsKLQl1MzIgaGVhZCwgaHdfdGFpbCwgYWdlZF90YWlsLCBhZ2luZ190YWlsOworCXUzMiBo
d190YWlsOwogCXU2NCBub3c7CiAKIAkvKiBXZSBoYXZlIHRvIGNvbnNpZGVyIHRoZSAodW5saWtl
bHkpIHBvc3NpYmlsaXR5IHRoYXQgcmVhZCgpIGVycm9ycwpAQCAtNDg4LDE2ICs0NzgsNiBAQCBz
dGF0aWMgYm9vbCBvYV9idWZmZXJfY2hlY2tfdW5sb2NrZWQoc3RydWN0IGk5MTVfcGVyZl9zdHJl
YW0gKnN0cmVhbSkKIAkgKi8KIAlzcGluX2xvY2tfaXJxc2F2ZSgmc3RyZWFtLT5vYV9idWZmZXIu
cHRyX2xvY2ssIGZsYWdzKTsKIAotCS8qIE5COiBUaGUgaGVhZCB3ZSBvYnNlcnZlIGhlcmUgbWln
aHQgZWZmZWN0aXZlbHkgYmUgYSBsaXR0bGUgb3V0IG9mCi0JICogZGF0ZSAoYmV0d2VlbiBoZWFk
IGFuZCB0YWlsc1thZ2VkX2lkeF0ub2Zmc2V0IGlmIHRoZXJlIGlzIGN1cnJlbnRseQotCSAqIGEg
cmVhZCgpIGluIHByb2dyZXNzLgotCSAqLwotCWhlYWQgPSBzdHJlYW0tPm9hX2J1ZmZlci5oZWFk
OwotCi0JYWdlZF9pZHggPSBzdHJlYW0tPm9hX2J1ZmZlci5hZ2VkX3RhaWxfaWR4OwotCWFnZWRf
dGFpbCA9IHN0cmVhbS0+b2FfYnVmZmVyLnRhaWxzW2FnZWRfaWR4XS5vZmZzZXQ7Ci0JYWdpbmdf
dGFpbCA9IHN0cmVhbS0+b2FfYnVmZmVyLnRhaWxzWyFhZ2VkX2lkeF0ub2Zmc2V0OwotCiAJaHdf
dGFpbCA9IHN0cmVhbS0+cGVyZi0+b3BzLm9hX2h3X3RhaWxfcmVhZChzdHJlYW0pOwogCiAJLyog
VGhlIHRhaWwgcG9pbnRlciBpbmNyZWFzZXMgaW4gNjQgYnl0ZSBpbmNyZW1lbnRzLApAQCAtNTA3
LDY0ICs0ODcsNzYgQEAgc3RhdGljIGJvb2wgb2FfYnVmZmVyX2NoZWNrX3VubG9ja2VkKHN0cnVj
dCBpOTE1X3BlcmZfc3RyZWFtICpzdHJlYW0pCiAKIAlub3cgPSBrdGltZV9nZXRfbW9ub19mYXN0
X25zKCk7CiAKLQkvKiBVcGRhdGUgdGhlIGFnZWQgdGFpbAotCSAqCi0JICogRmxpcCB0aGUgdGFp
bCBwb2ludGVyIGF2YWlsYWJsZSBmb3IgcmVhZCgpcyBvbmNlIHRoZSBhZ2luZyB0YWlsIGlzCi0J
ICogb2xkIGVub3VnaCB0byB0cnVzdCB0aGF0IHRoZSBjb3JyZXNwb25kaW5nIGRhdGEgd2lsbCBi
ZSB2aXNpYmxlIHRvCi0JICogdGhlIENQVS4uLgotCSAqCi0JICogRG8gdGhpcyBiZWZvcmUgdXBk
YXRpbmcgdGhlIGFnaW5nIHBvaW50ZXIgaW4gY2FzZSB3ZSBtYXkgYmUgYWJsZSB0bwotCSAqIGlt
bWVkaWF0ZWx5IHN0YXJ0IGFnaW5nIGEgbmV3IHBvaW50ZXIgdG9vIChpZiBuZXcgZGF0YSBoYXMg
YmVjb21lCi0JICogYXZhaWxhYmxlKSB3aXRob3V0IG5lZWRpbmcgdG8gd2FpdCBmb3IgYSBsYXRl
ciBocnRpbWVyIGNhbGxiYWNrLgotCSAqLwotCWlmIChhZ2luZ190YWlsICE9IElOVkFMSURfVEFJ
TF9QVFIgJiYKLQkgICAgKChub3cgLSBzdHJlYW0tPm9hX2J1ZmZlci5hZ2luZ190aW1lc3RhbXAp
ID4KLQkgICAgIE9BX1RBSUxfTUFSR0lOX05TRUMpKSB7Ci0KLQkJYWdlZF9pZHggXj0gMTsKLQkJ
c3RyZWFtLT5vYV9idWZmZXIuYWdlZF90YWlsX2lkeCA9IGFnZWRfaWR4OworCWlmIChod190YWls
ID09IHN0cmVhbS0+b2FfYnVmZmVyLmFnaW5nX3RhaWwpIHsKKwkJLyogSWYgdGhlIEhXIHRhaWwg
aGFzbid0IG1vdmUgc2luY2UgdGhlIGxhc3QgY2hlY2sgYW5kIHRoZSBIVworCQkgKiB0YWlsIGhh
cyBiZWVuIGFnaW5nIGZvciBsb25nIGVub3VnaCwgZGVjbGFyZSBpdCB0aGUgbmV3CisJCSAqIHRh
aWwuCisJCSAqLworCQlpZiAoKG5vdyAtIHN0cmVhbS0+b2FfYnVmZmVyLmFnaW5nX3RpbWVzdGFt
cCkgPgorCQkgICAgT0FfVEFJTF9NQVJHSU5fTlNFQykgeworCQkJc3RyZWFtLT5vYV9idWZmZXIu
dGFpbCA9CisJCQkJc3RyZWFtLT5vYV9idWZmZXIuYWdpbmdfdGFpbDsKKwkJfQorCX0gZWxzZSB7
CisJCXUzMiBoZWFkLCB0YWlsLCBsYW5kZWRfcmVwb3J0X2hlYWRzOwogCi0JCWFnZWRfdGFpbCA9
IGFnaW5nX3RhaWw7CisJCS8qIE5COiBUaGUgaGVhZCB3ZSBvYnNlcnZlIGhlcmUgbWlnaHQgZWZm
ZWN0aXZlbHkgYmUgYSBsaXR0bGUgb3V0IG9mCisJCSAqIGRhdGUgKGJldHdlZW4gaGVhZCBhbmQg
dGFpbHNbYWdlZF9pZHhdLm9mZnNldCBpZiB0aGVyZSBpcyBjdXJyZW50bHkKKwkJICogYSByZWFk
KCkgaW4gcHJvZ3Jlc3MuCisJCSAqLworCQloZWFkID0gc3RyZWFtLT5vYV9idWZmZXIuaGVhZCAt
IGd0dF9vZmZzZXQ7CiAKLQkJLyogTWFyayB0aGF0IHdlIG5lZWQgYSBuZXcgcG9pbnRlciB0byBz
dGFydCBhZ2luZy4uLiAqLwotCQlzdHJlYW0tPm9hX2J1ZmZlci50YWlsc1shYWdlZF9pZHhdLm9m
ZnNldCA9IElOVkFMSURfVEFJTF9QVFI7Ci0JCWFnaW5nX3RhaWwgPSBJTlZBTElEX1RBSUxfUFRS
OwotCX0KKwkJaHdfdGFpbCAtPSBndHRfb2Zmc2V0OworCQl0YWlsID0gaHdfdGFpbDsKIAotCS8q
IFVwZGF0ZSB0aGUgYWdpbmcgdGFpbAotCSAqCi0JICogV2UgdGhyb3R0bGUgYWdpbmcgdGFpbCB1
cGRhdGVzIHVudGlsIHdlIGhhdmUgYSBuZXcgdGFpbCB0aGF0Ci0JICogcmVwcmVzZW50cyA+PSBv
bmUgcmVwb3J0IG1vcmUgZGF0YSB0aGFuIGlzIGFscmVhZHkgYXZhaWxhYmxlIGZvcgotCSAqIHJl
YWRpbmcuIFRoaXMgZW5zdXJlcyB0aGVyZSB3aWxsIGJlIGVub3VnaCBkYXRhIGZvciBhIHN1Y2Nl
c3NmdWwKLQkgKiByZWFkIG9uY2UgdGhpcyBuZXcgcG9pbnRlciBoYXMgYWdlZCBhbmQgZW5zdXJl
cyB3ZSB3aWxsIGdpdmUgdGhlIG5ldwotCSAqIHBvaW50ZXIgdGltZSB0byBhZ2UuCi0JICovCi0J
aWYgKGFnaW5nX3RhaWwgPT0gSU5WQUxJRF9UQUlMX1BUUiAmJgotCSAgICAoYWdlZF90YWlsID09
IElOVkFMSURfVEFJTF9QVFIgfHwKLQkgICAgIE9BX1RBS0VOKGh3X3RhaWwsIGFnZWRfdGFpbCkg
Pj0gcmVwb3J0X3NpemUpKSB7Ci0JCXN0cnVjdCBpOTE1X3ZtYSAqdm1hID0gc3RyZWFtLT5vYV9i
dWZmZXIudm1hOwotCQl1MzIgZ3R0X29mZnNldCA9IGk5MTVfZ2d0dF9vZmZzZXQodm1hKTsKLQot
CQkvKiBCZSBwYXJhbm9pZCBhbmQgZG8gYSBib3VuZHMgY2hlY2sgb24gdGhlIHBvaW50ZXIgcmVh
ZCBiYWNrCi0JCSAqIGZyb20gaGFyZHdhcmUsIGp1c3QgaW4gY2FzZSBzb21lIHNwdXJpb3VzIGhh
cmR3YXJlIGNvbmRpdGlvbgotCQkgKiBjb3VsZCBwdXQgdGhlIHRhaWwgb3V0IG9mIGJvdW5kcy4u
LgorCQkvKiBXYWxrIHRoZSBzdHJlYW0gYmFja3dhcmQgdW50aWwgd2UgZmluZCBhdCBsZWFzdCAy
IHJlcG9ydHMKKwkJICogd2l0aCBkd29yZCAwICYgMSBub3QgYXQgMC4gU2luY2UgdGhlIGNpcmN1
bGFyIGJ1ZmZlcgorCQkgKiBwb2ludGVycyBwcm9ncmVzcyBieSBpbmNyZW1lbnRzIG9mIDY0IGJ5
dGVzIGFuZCB0aGF0CisJCSAqIHJlcG9ydHMgY2FuIGJlIHVwIHRvIDI1NiBieXRlcyBsb25nLCB3
ZSBjYW4ndCB0ZWxsIHdoZXRoZXIKKwkJICogYSByZXBvcnQgaGFzIGZ1bGx5IGxhbmRlZCBpbiBt
ZW1vcnkgYmVmb3JlIHRoZSBmaXJzdCAyCisJCSAqIGR3b3JkcyBvZiB0aGUgZm9sbG93aW5nIHJl
cG9ydCBoYXZlIGVmZmVjdGl2ZWx5IGxhbmRlZC4KKwkJICoKKwkJICogVGhpcyBpcyBhc3N1bWlu
ZyB0aGF0IHRoZSB3cml0ZXMgb2YgdGhlIE9BIHVuaXQgbGFuZCBpbgorCQkgKiBtZW1vcnkgaW4g
dGhlIG9yZGVyIHRoZXkgd2VyZSB3cml0dGVuIHRvLgorCQkgKiBJZiBub3QgOiAo4pWvwrDilqHC
sO+8ieKVr++4tSDilLvilIHilLsKIAkJICovCi0JCWlmIChod190YWlsID49IGd0dF9vZmZzZXQg
JiYKLQkJICAgIGh3X3RhaWwgPCAoZ3R0X29mZnNldCArIE9BX0JVRkZFUl9TSVpFKSkgewotCQkJ
c3RyZWFtLT5vYV9idWZmZXIudGFpbHNbIWFnZWRfaWR4XS5vZmZzZXQgPQotCQkJCWFnaW5nX3Rh
aWwgPSBod190YWlsOwotCQkJc3RyZWFtLT5vYV9idWZmZXIuYWdpbmdfdGltZXN0YW1wID0gbm93
OwotCQl9IGVsc2UgewotCQkJZHJtX2Vycigmc3RyZWFtLT5wZXJmLT5pOTE1LT5kcm0sCi0JCQkJ
Iklnbm9yaW5nIHNwdXJpb3VzIG91dCBvZiByYW5nZSBPQSBidWZmZXIgdGFpbCBwb2ludGVyID0g
JXhcbiIsCi0JCQkJaHdfdGFpbCk7CisJCWxhbmRlZF9yZXBvcnRfaGVhZHMgPSAwOworCQl3aGls
ZSAoT0FfVEFLRU4odGFpbCwgaGVhZCkgPj0gcmVwb3J0X3NpemUpIHsKKwkJCXUzMiBwcmV2aW91
c190YWlsID0gKHRhaWwgLSByZXBvcnRfc2l6ZSkgJiAoT0FfQlVGRkVSX1NJWkUgLSAxKTsKKwkJ
CXU4ICpyZXBvcnQgPSBzdHJlYW0tPm9hX2J1ZmZlci52YWRkciArIHByZXZpb3VzX3RhaWw7CisJ
CQl1MzIgKnJlcG9ydDMyID0gKHZvaWQgKikgcmVwb3J0OworCisJCQkvKiBIZWFkIG9mIHRoZSBy
ZXBvcnQgaW5kaWNhdGVkIGJ5IHRoZSBIVyB0YWlsIHJlZ2lzdGVyIGhhcworCQkJICogaW5kZWVk
IGxhbmRlZCBpbnRvIG1lbW9yeS4KKwkJCSAqLworCQkJaWYgKHJlcG9ydDMyWzBdICE9IDAgfHwg
cmVwb3J0MzJbMV0gIT0gMCkgeworCQkJCWxhbmRlZF9yZXBvcnRfaGVhZHMrKzsKKworCQkJCWlm
IChsYW5kZWRfcmVwb3J0X2hlYWRzID49IDIpCisJCQkJCWJyZWFrOworCQkJfQorCisJCQl0YWls
ID0gcHJldmlvdXNfdGFpbDsKIAkJfQorCisJCWlmIChhYnModGFpbCAtIGh3X3RhaWwpID49ICgy
ICogcmVwb3J0X3NpemUpKSB7CisJCQlpZiAoX19yYXRlbGltaXQoJnN0cmVhbS0+cGVyZi0+dGFp
bF9wb2ludGVyX3JhY2UpKSB7CisJCQkJRFJNX05PVEUoInVubGFuZGVkIHJlcG9ydChzKSBoZWFk
PTB4JXggIgorCQkJCQkgInRhaWw9MHgleCBod190YWlsPTB4JXhcbiIsCisJCQkJCSBoZWFkLCB0
YWlsLCBod190YWlsKTsKKwkJCX0KKwkJfQorCisJCXN0cmVhbS0+b2FfYnVmZmVyLnRhaWwgPSBn
dHRfb2Zmc2V0ICsgdGFpbDsKKwkJc3RyZWFtLT5vYV9idWZmZXIuYWdpbmdfdGFpbCA9IGd0dF9v
ZmZzZXQgKyBod190YWlsOworCQlzdHJlYW0tPm9hX2J1ZmZlci5hZ2luZ190aW1lc3RhbXAgPSBu
b3c7CiAJfQogCiAJc3Bpbl91bmxvY2tfaXJxcmVzdG9yZSgmc3RyZWFtLT5vYV9idWZmZXIucHRy
X2xvY2ssIGZsYWdzKTsKIAotCXJldHVybiBhZ2VkX3RhaWwgPT0gSU5WQUxJRF9UQUlMX1BUUiA/
Ci0JCWZhbHNlIDogT0FfVEFLRU4oYWdlZF90YWlsLCBoZWFkKSA+PSByZXBvcnRfc2l6ZTsKKwly
ZXR1cm4gT0FfVEFLRU4oc3RyZWFtLT5vYV9idWZmZXIudGFpbCAtIGd0dF9vZmZzZXQsCisJCQlz
dHJlYW0tPm9hX2J1ZmZlci5oZWFkIC0gZ3R0X29mZnNldCkgPj0gcmVwb3J0X3NpemU7CisKIH0K
IAogLyoqCkBAIC02ODIsNyArNjc0LDYgQEAgc3RhdGljIGludCBnZW44X2FwcGVuZF9vYV9yZXBv
cnRzKHN0cnVjdCBpOTE1X3BlcmZfc3RyZWFtICpzdHJlYW0sCiAJdTMyIG1hc2sgPSAoT0FfQlVG
RkVSX1NJWkUgLSAxKTsKIAlzaXplX3Qgc3RhcnRfb2Zmc2V0ID0gKm9mZnNldDsKIAl1bnNpZ25l
ZCBsb25nIGZsYWdzOwotCXVuc2lnbmVkIGludCBhZ2VkX3RhaWxfaWR4OwogCXUzMiBoZWFkLCB0
YWlsOwogCXUzMiB0YWtlbjsKIAlpbnQgcmV0ID0gMDsKQEAgLTY5MywxOCArNjg0LDEwIEBAIHN0
YXRpYyBpbnQgZ2VuOF9hcHBlbmRfb2FfcmVwb3J0cyhzdHJ1Y3QgaTkxNV9wZXJmX3N0cmVhbSAq
c3RyZWFtLAogCXNwaW5fbG9ja19pcnFzYXZlKCZzdHJlYW0tPm9hX2J1ZmZlci5wdHJfbG9jaywg
ZmxhZ3MpOwogCiAJaGVhZCA9IHN0cmVhbS0+b2FfYnVmZmVyLmhlYWQ7Ci0JYWdlZF90YWlsX2lk
eCA9IHN0cmVhbS0+b2FfYnVmZmVyLmFnZWRfdGFpbF9pZHg7Ci0JdGFpbCA9IHN0cmVhbS0+b2Ff
YnVmZmVyLnRhaWxzW2FnZWRfdGFpbF9pZHhdLm9mZnNldDsKKwl0YWlsID0gc3RyZWFtLT5vYV9i
dWZmZXIudGFpbDsKIAogCXNwaW5fdW5sb2NrX2lycXJlc3RvcmUoJnN0cmVhbS0+b2FfYnVmZmVy
LnB0cl9sb2NrLCBmbGFncyk7CiAKLQkvKgotCSAqIEFuIGludmFsaWQgdGFpbCBwb2ludGVyIGhl
cmUgbWVhbnMgd2UncmUgc3RpbGwgd2FpdGluZyBmb3IgdGhlIHBvbGwKLQkgKiBocnRpbWVyIGNh
bGxiYWNrIHRvIGdpdmUgdXMgYSBwb2ludGVyCi0JICovCi0JaWYgKHRhaWwgPT0gSU5WQUxJRF9U
QUlMX1BUUikKLQkJcmV0dXJuIC1FQUdBSU47Ci0KIAkvKgogCSAqIE5COiBvYV9idWZmZXIuaGVh
ZC90YWlsIGluY2x1ZGUgdGhlIGd0dF9vZmZzZXQgd2hpY2ggd2UgZG9uJ3Qgd2FudAogCSAqIHdo
aWxlIGluZGV4aW5nIHJlbGF0aXZlIHRvIG9hX2J1Zl9iYXNlLgpAQCAtODM4LDEzICs4MjEsMTAg
QEAgc3RhdGljIGludCBnZW44X2FwcGVuZF9vYV9yZXBvcnRzKHN0cnVjdCBpOTE1X3BlcmZfc3Ry
ZWFtICpzdHJlYW0sCiAJCX0KIAogCQkvKgotCQkgKiBUaGUgYWJvdmUgcmVhc29uIGZpZWxkIHNh
bml0eSBjaGVjayBpcyBiYXNlZCBvbgotCQkgKiB0aGUgYXNzdW1wdGlvbiB0aGF0IHRoZSBPQSBi
dWZmZXIgaXMgaW5pdGlhbGx5Ci0JCSAqIHplcm9lZCBhbmQgd2UgcmVzZXQgdGhlIGZpZWxkIGFm
dGVyIGNvcHlpbmcgc28gdGhlCi0JCSAqIGNoZWNrIGlzIHN0aWxsIG1lYW5pbmdmdWwgb25jZSBv
bGQgcmVwb3J0cyBzdGFydAotCQkgKiBiZWluZyBvdmVyd3JpdHRlbi4KKwkJICogQ2xlYXIgb3V0
IHRoZSBmaXJzdCAyIGR3b3JkIGFzIGEgbWVhbiB0byBkZXRlY3QgdW5sYW5kZWQKKwkJICogcmVw
b3J0cy4KIAkJICovCi0JCXJlcG9ydDMyWzBdID0gMDsKKwkJcmVwb3J0MzJbMF0gPSByZXBvcnQz
MlsxXSA9IDA7CiAJfQogCiAJaWYgKHN0YXJ0X29mZnNldCAhPSAqb2Zmc2V0KSB7CkBAIC05ODUs
NyArOTY1LDYgQEAgc3RhdGljIGludCBnZW43X2FwcGVuZF9vYV9yZXBvcnRzKHN0cnVjdCBpOTE1
X3BlcmZfc3RyZWFtICpzdHJlYW0sCiAJdTMyIG1hc2sgPSAoT0FfQlVGRkVSX1NJWkUgLSAxKTsK
IAlzaXplX3Qgc3RhcnRfb2Zmc2V0ID0gKm9mZnNldDsKIAl1bnNpZ25lZCBsb25nIGZsYWdzOwot
CXVuc2lnbmVkIGludCBhZ2VkX3RhaWxfaWR4OwogCXUzMiBoZWFkLCB0YWlsOwogCXUzMiB0YWtl
bjsKIAlpbnQgcmV0ID0gMDsKQEAgLTk5NiwxNyArOTc1LDEwIEBAIHN0YXRpYyBpbnQgZ2VuN19h
cHBlbmRfb2FfcmVwb3J0cyhzdHJ1Y3QgaTkxNV9wZXJmX3N0cmVhbSAqc3RyZWFtLAogCXNwaW5f
bG9ja19pcnFzYXZlKCZzdHJlYW0tPm9hX2J1ZmZlci5wdHJfbG9jaywgZmxhZ3MpOwogCiAJaGVh
ZCA9IHN0cmVhbS0+b2FfYnVmZmVyLmhlYWQ7Ci0JYWdlZF90YWlsX2lkeCA9IHN0cmVhbS0+b2Ff
YnVmZmVyLmFnZWRfdGFpbF9pZHg7Ci0JdGFpbCA9IHN0cmVhbS0+b2FfYnVmZmVyLnRhaWxzW2Fn
ZWRfdGFpbF9pZHhdLm9mZnNldDsKKwl0YWlsID0gc3RyZWFtLT5vYV9idWZmZXIudGFpbDsKIAog
CXNwaW5fdW5sb2NrX2lycXJlc3RvcmUoJnN0cmVhbS0+b2FfYnVmZmVyLnB0cl9sb2NrLCBmbGFn
cyk7CiAKLQkvKiBBbiBpbnZhbGlkIHRhaWwgcG9pbnRlciBoZXJlIG1lYW5zIHdlJ3JlIHN0aWxs
IHdhaXRpbmcgZm9yIHRoZSBwb2xsCi0JICogaHJ0aW1lciBjYWxsYmFjayB0byBnaXZlIHVzIGEg
cG9pbnRlcgotCSAqLwotCWlmICh0YWlsID09IElOVkFMSURfVEFJTF9QVFIpCi0JCXJldHVybiAt
RUFHQUlOOwotCiAJLyogTkI6IG9hX2J1ZmZlci5oZWFkL3RhaWwgaW5jbHVkZSB0aGUgZ3R0X29m
ZnNldCB3aGljaCB3ZSBkb24ndCB3YW50CiAJICogd2hpbGUgaW5kZXhpbmcgcmVsYXRpdmUgdG8g
b2FfYnVmX2Jhc2UuCiAJICovCkBAIC0xMDY0LDEzICsxMDM2LDEwIEBAIHN0YXRpYyBpbnQgZ2Vu
N19hcHBlbmRfb2FfcmVwb3J0cyhzdHJ1Y3QgaTkxNV9wZXJmX3N0cmVhbSAqc3RyZWFtLAogCQlp
ZiAocmV0KQogCQkJYnJlYWs7CiAKLQkJLyogVGhlIGFib3ZlIHJlcG9ydC1pZCBmaWVsZCBzYW5p
dHkgY2hlY2sgaXMgYmFzZWQgb24KLQkJICogdGhlIGFzc3VtcHRpb24gdGhhdCB0aGUgT0EgYnVm
ZmVyIGlzIGluaXRpYWxseQotCQkgKiB6ZXJvZWQgYW5kIHdlIHJlc2V0IHRoZSBmaWVsZCBhZnRl
ciBjb3B5aW5nIHNvIHRoZQotCQkgKiBjaGVjayBpcyBzdGlsbCBtZWFuaW5nZnVsIG9uY2Ugb2xk
IHJlcG9ydHMgc3RhcnQKLQkJICogYmVpbmcgb3ZlcndyaXR0ZW4uCisJCS8qIENsZWFyIG91dCB0
aGUgZmlyc3QgMiBkd29yZHMgYXMgYSBtZWFuIHRvIGRldGVjdCB1bmxhbmRlZAorCQkgKiByZXBv
cnRzLgogCQkgKi8KLQkJcmVwb3J0MzJbMF0gPSAwOworCQlyZXBvcnQzMlswXSA9IHJlcG9ydDMy
WzFdID0gMDsKIAl9CiAKIAlpZiAoc3RhcnRfb2Zmc2V0ICE9ICpvZmZzZXQpIHsKQEAgLTE0NDks
OCArMTQxOCw4IEBAIHN0YXRpYyB2b2lkIGdlbjdfaW5pdF9vYV9idWZmZXIoc3RydWN0IGk5MTVf
cGVyZl9zdHJlYW0gKnN0cmVhbSkKIAkJCSAgIGd0dF9vZmZzZXQgfCBPQUJVRkZFUl9TSVpFXzE2
TSk7CiAKIAkvKiBNYXJrIHRoYXQgd2UgbmVlZCB1cGRhdGVkIHRhaWwgcG9pbnRlcnMgdG8gcmVh
ZCBmcm9tLi4uICovCi0Jc3RyZWFtLT5vYV9idWZmZXIudGFpbHNbMF0ub2Zmc2V0ID0gSU5WQUxJ
RF9UQUlMX1BUUjsKLQlzdHJlYW0tPm9hX2J1ZmZlci50YWlsc1sxXS5vZmZzZXQgPSBJTlZBTElE
X1RBSUxfUFRSOworCXN0cmVhbS0+b2FfYnVmZmVyLmFnaW5nX3RhaWwgPQorCQlzdHJlYW0tPm9h
X2J1ZmZlci50YWlsID0gZ3R0X29mZnNldDsKIAogCXNwaW5fdW5sb2NrX2lycXJlc3RvcmUoJnN0
cmVhbS0+b2FfYnVmZmVyLnB0cl9sb2NrLCBmbGFncyk7CiAKQEAgLTE1MDMsOCArMTQ3Miw4IEBA
IHN0YXRpYyB2b2lkIGdlbjhfaW5pdF9vYV9idWZmZXIoc3RydWN0IGk5MTVfcGVyZl9zdHJlYW0g
KnN0cmVhbSkKIAlpbnRlbF91bmNvcmVfd3JpdGUodW5jb3JlLCBHRU44X09BVEFJTFBUUiwgZ3R0
X29mZnNldCAmIEdFTjhfT0FUQUlMUFRSX01BU0spOwogCiAJLyogTWFyayB0aGF0IHdlIG5lZWQg
dXBkYXRlZCB0YWlsIHBvaW50ZXJzIHRvIHJlYWQgZnJvbS4uLiAqLwotCXN0cmVhbS0+b2FfYnVm
ZmVyLnRhaWxzWzBdLm9mZnNldCA9IElOVkFMSURfVEFJTF9QVFI7Ci0Jc3RyZWFtLT5vYV9idWZm
ZXIudGFpbHNbMV0ub2Zmc2V0ID0gSU5WQUxJRF9UQUlMX1BUUjsKKwlzdHJlYW0tPm9hX2J1ZmZl
ci5hZ2luZ190YWlsID0KKwkJc3RyZWFtLT5vYV9idWZmZXIudGFpbCA9IGd0dF9vZmZzZXQ7CiAK
IAkvKgogCSAqIFJlc2V0IHN0YXRlIHVzZWQgdG8gcmVjb2duaXNlIGNvbnRleHQgc3dpdGNoZXMs
IGFmZmVjdGluZyB3aGljaApAQCAtMTU1OSw4ICsxNTI4LDggQEAgc3RhdGljIHZvaWQgZ2VuMTJf
aW5pdF9vYV9idWZmZXIoc3RydWN0IGk5MTVfcGVyZl9zdHJlYW0gKnN0cmVhbSkKIAkJCSAgIGd0
dF9vZmZzZXQgJiBHRU4xMl9PQUdfT0FUQUlMUFRSX01BU0spOwogCiAJLyogTWFyayB0aGF0IHdl
IG5lZWQgdXBkYXRlZCB0YWlsIHBvaW50ZXJzIHRvIHJlYWQgZnJvbS4uLiAqLwotCXN0cmVhbS0+
b2FfYnVmZmVyLnRhaWxzWzBdLm9mZnNldCA9IElOVkFMSURfVEFJTF9QVFI7Ci0Jc3RyZWFtLT5v
YV9idWZmZXIudGFpbHNbMV0ub2Zmc2V0ID0gSU5WQUxJRF9UQUlMX1BUUjsKKwlzdHJlYW0tPm9h
X2J1ZmZlci5hZ2luZ190YWlsID0KKwkJc3RyZWFtLT5vYV9idWZmZXIudGFpbCA9IGd0dF9vZmZz
ZXQ7CiAKIAkvKgogCSAqIFJlc2V0IHN0YXRlIHVzZWQgdG8gcmVjb2duaXNlIGNvbnRleHQgc3dp
dGNoZXMsIGFmZmVjdGluZyB3aGljaApAQCAtNDQwOCw2ICs0Mzc3LDEyIEBAIHZvaWQgaTkxNV9w
ZXJmX2luaXQoc3RydWN0IGRybV9pOTE1X3ByaXZhdGUgKmk5MTUpCiAJCXJhdGVsaW1pdF9zZXRf
ZmxhZ3MoJnBlcmYtPnNwdXJpb3VzX3JlcG9ydF9ycywKIAkJCQkgICAgUkFURUxJTUlUX01TR19P
Tl9SRUxFQVNFKTsKIAorCQlyYXRlbGltaXRfc3RhdGVfaW5pdCgmcGVyZi0+dGFpbF9wb2ludGVy
X3JhY2UsCisJCQkJICAgICA1ICogSFosIDEwKTsKKwkJcmF0ZWxpbWl0X3NldF9mbGFncygmcGVy
Zi0+dGFpbF9wb2ludGVyX3JhY2UsCisJCQkJICAgIFJBVEVMSU1JVF9NU0dfT05fUkVMRUFTRSk7
CisKKwogCQlhdG9taWM2NF9zZXQoJnBlcmYtPm5vYV9wcm9ncmFtbWluZ19kZWxheSwKIAkJCSAg
ICAgNTAwICogMTAwMCAvKiA1MDB1cyAqLyk7CiAKZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2Ry
bS9pOTE1L2k5MTVfcGVyZl90eXBlcy5oIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvaTkxNV9wZXJm
X3R5cGVzLmgKaW5kZXggYTBlMjJmMDBmNmNmLi45ZWU3YzU4ZTcwZDUgMTAwNjQ0Ci0tLSBhL2Ry
aXZlcnMvZ3B1L2RybS9pOTE1L2k5MTVfcGVyZl90eXBlcy5oCisrKyBiL2RyaXZlcnMvZ3B1L2Ry
bS9pOTE1L2k5MTVfcGVyZl90eXBlcy5oCkBAIC0yNzIsMjEgKzI3MiwxMCBAQCBzdHJ1Y3QgaTkx
NV9wZXJmX3N0cmVhbSB7CiAJCXNwaW5sb2NrX3QgcHRyX2xvY2s7CiAKIAkJLyoqCi0JCSAqIEB0
YWlsczogT25lICdhZ2luZycgdGFpbCBwb2ludGVyIGFuZCBvbmUgJ2FnZWQnIHRhaWwgcG9pbnRl
ciByZWFkeSB0bwotCQkgKiB1c2VkIGZvciByZWFkaW5nLgotCQkgKgotCQkgKiBJbml0aWFsIHZh
bHVlcyBvZiAweGZmZmZmZmZmIGFyZSBpbnZhbGlkIGFuZCBpbXBseSB0aGF0IGFuCi0JCSAqIHVw
ZGF0ZSBpcyByZXF1aXJlZCAoYW5kIHNob3VsZCBiZSBpZ25vcmVkIGJ5IGFuIGF0dGVtcHRlZAot
CQkgKiByZWFkKQorCQkgKiBAYWdpbmdfdGFpbDogVGhlIGxhc3QgSFcgdGFpbCByZXBvcnRlZCBi
eSBIVy4gVGhlIGRhdGEKKwkJICogbWlnaHQgbm90IGhhdmUgbWFkZSBpdCB0byBtZW1vcnkgeWV0
IHRob3VnaC4KIAkJICovCi0JCXN0cnVjdCB7Ci0JCQl1MzIgb2Zmc2V0OwotCQl9IHRhaWxzWzJd
OwotCi0JCS8qKgotCQkgKiBAYWdlZF90YWlsX2lkeDogSW5kZXggZm9yIHRoZSBhZ2VkIHRhaWwg
cmVhZHkgdG8gcmVhZCgpIGRhdGEgdXAgdG8uCi0JCSAqLwotCQl1bnNpZ25lZCBpbnQgYWdlZF90
YWlsX2lkeDsKKwkJdTMyIGFnaW5nX3RhaWw7CiAKIAkJLyoqCiAJCSAqIEBhZ2luZ190aW1lc3Rh
bXA6IEEgbW9ub3RvbmljIHRpbWVzdGFtcCBmb3Igd2hlbiB0aGUgY3VycmVudCBhZ2luZyB0YWls
IHBvaW50ZXIKQEAgLTMwMiw2ICsyOTEsMTIgQEAgc3RydWN0IGk5MTVfcGVyZl9zdHJlYW0gewog
CQkgKiBPQSBidWZmZXIgZGF0YSB0byB1c2Vyc3BhY2UuCiAJCSAqLwogCQl1MzIgaGVhZDsKKwor
CQkvKioKKwkJICogQHRhaWw6IFRoZSBsYXN0IHRhaWwgdmVyaWZpZWQgdGFpbCB0aGF0IGNhbiBi
ZSByZWFkIGJ5CisJCSAqIHVzZXJzcGFjZS4KKwkJICovCisJCXUzMiB0YWlsOwogCX0gb2FfYnVm
ZmVyOwogCiAJLyoqCkBAIC00MTMsNiArNDA4LDEyIEBAIHN0cnVjdCBpOTE1X3BlcmYgewogCSAq
LwogCXN0cnVjdCByYXRlbGltaXRfc3RhdGUgc3B1cmlvdXNfcmVwb3J0X3JzOwogCisJLyoqCisJ
ICogRm9yIHJhdGUgbGltaXRpbmcgYW55IG5vdGlmaWNhdGlvbnMgb2YgdGFpbCBwb2ludGVyCisJ
ICogcmFjZS4KKwkgKi8KKwlzdHJ1Y3QgcmF0ZWxpbWl0X3N0YXRlIHRhaWxfcG9pbnRlcl9yYWNl
OworCiAJc3RydWN0IGk5MTVfb2FfY29uZmlnIHRlc3RfY29uZmlnOwogCiAJdTMyIGdlbjdfbGF0
Y2hlZF9vYXN0YXR1czE7Ci0tIAoyLjIwLjEKCl9fX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fCkludGVsLWdmeCBtYWlsaW5nIGxpc3QKSW50ZWwtZ2Z4QGxpc3Rz
LmZyZWVkZXNrdG9wLm9yZwpodHRwczovL2xpc3RzLmZyZWVkZXNrdG9wLm9yZy9tYWlsbWFuL2xp
c3RpbmZvL2ludGVsLWdmeAo=
